{"config":{"lang":["en","tr"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Blank","text":""},{"location":"license/","title":"License","text":""},{"location":"license/#license","title":"License","text":""},{"location":"license/#code-license","title":"Code License","text":"<p>MIT License</p> <p>Copyright \u00a9 2019-2024 U\u011fur CORUH</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"license/#content-licence","title":"Content Licence","text":"<p>Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License (CC BY-NC-ND 4.0)</p> <p></p> <p>You are free to:</p> <ul> <li>Share: Copy and redistribute the material in any medium or format.</li> </ul> <p>Under the following terms:</p> <ul> <li>Attribution: You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li> <li>NonCommercial: You may not use the material for commercial purposes.</li> <li>NoDerivatives: If you remix, transform, or build upon the material, you may not distribute the modified material.</li> </ul> <p>No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</p> <p>For more details, visit: Creative Commons CC BY-NC-ND 4.0</p>"},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#tags","title":"Tags","text":"<p>This file contains a global index of all tags used on the pages.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#material-for-algorithm-lovers","title":"Material for Algorithm Lovers","text":""},{"location":"changelog/#1.0.0","title":"1.0.0 _ October 20, 2020","text":"<ul> <li>Initial release</li> </ul>"},{"location":"project-guide/","title":"Project Guide","text":""},{"location":"project-guide/#homework-project-guideline","title":"Homework &amp; Project Guideline","text":"<p>Objective: Your primary goal is to collaboratively design and develop an application in Java with Eclipse JDK 11 or 17 preferred. This project will be implemented in two phases: a console-based application (midterm) and a desktop GUI application (final). This project will test your skills in software engineering, object-oriented programming, understanding and application of UML diagrams, and effective team collaboration. You'll start by using a provided Java Maven template for your project setup, adhering to a comprehensive list of development, documentation, and testing standards to ensure a robust application.</p> <p>Project Phases:</p> <ol> <li>Midterm Phase (Console Application): Develop a fully functional console-based application implementing all core business logic and features.</li> <li>Final Phase (GUI Application): Extend your console application by adding a graphical user interface while maintaining your original business logic architecture.</li> </ol> <p>Structured Task Breakdown</p> <p>1. Team Formation and Project Selection</p> <ul> <li>Form Teams: Collaboratively form your teams based on the course guidelines. Diversity in team composition is encouraged.</li> <li>Select a Project: Choose a unique application from the course's appendix list. Ensure your selection differs from your peers to avoid overlaps and potential plagiarism. Also, you shouldn't select same topics from previous terms and lectures.</li> <li>Justification: Document why you chose your specific project, focusing on what software engineering and OOP concepts you anticipate learning or applying.</li> </ul> <p>2. Project Setup and Repository Management</p> <ul> <li>Fork and Rename Repository: Fork the Java Maven template provided at GitHub - ucoruh/eclipse-java-maven-template: Maven (Build,Test,Coverage,Publish) + Doxygen (HTML, Latex, RTF) + ReportGenerator + QA (Test Coverage) + Astyle Template. Rename your repository following the pattern ce204-hw-name-surname-java to maintain consistency and organization.</li> <li>Privacy Setting: Your repository should be set to private, ensuring only team members and your instructor have access.</li> </ul> <p>3. Application Development (Midterm: Console Application)</p> <ul> <li>Console Application Design: Develop a console application, ensuring the core functionality is modularized in a separate library. Depending on project requirements, incorporate binary file storage or mock-ups for simulating network communications.</li> <li>Interface Design: Craft a user-friendly console interface that supports navigation through keyboard inputs (e.g., arrows, tabs).</li> <li>Object-Oriented Architecture: Design your application following solid object-oriented principles. Your code should demonstrate a clear understanding of classes, objects, inheritance, and polymorphism.</li> <li>Architecture Planning: Design your application with future GUI extension in mind. Use appropriate architectural patterns (like MVC, MVVM) that will facilitate the addition of a GUI layer in the final phase.</li> </ul> <p>4. Extended Application Development (Final: GUI Application)</p> <ul> <li>GUI Implementation: Extend your console application with a graphical user interface using JavaFX or Swing.</li> <li>Architectural Integrity: Maintain the core business logic from your console application, demonstrating proper separation of concerns between UI and business logic.</li> <li>User Experience: Create an intuitive, responsive, and visually appealing user interface with proper event handling.</li> <li>Cross-Platform Testing: Ensure your GUI application works correctly on different platforms (Windows, Linux, macOS if possible).</li> </ul> <p>5. OOP Requirements and Principles</p> <ul> <li>Class Hierarchy: Implement a meaningful class hierarchy that demonstrates proper inheritance relationships. Your classes should have clearly defined parent-child relationships where appropriate.</li> <li>Encapsulation: Apply proper encapsulation techniques by using access modifiers (private, protected, public) appropriately. Data should be hidden within classes and accessed through getter and setter methods.</li> <li>Polymorphism: Demonstrate polymorphic behavior through method overriding and/or method overloading. Include examples of runtime polymorphism where appropriate.</li> <li>Abstraction: Use abstract classes and/or interfaces to define common behaviors and enforce contracts between classes.</li> <li>Design Patterns: Implement at least two design patterns (e.g., Singleton, Factory, Observer, Strategy) that are appropriate for your application's requirements.</li> <li>SOLID Principles: Apply SOLID principles (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion) in your code design.</li> </ul> <p>6. UML Design and Documentation</p> <ul> <li>UML Diagrams: Utilize PlantUML to create detailed UML diagrams (class, sequence, and use cases) that illustrate your application's design and workflow.</li> <li>Class Diagrams: Create comprehensive class diagrams showing all classes, their attributes, methods, and relationships (inheritance, association, aggregation, composition).</li> <li>Sequence Diagrams: Develop sequence diagrams to illustrate the interactions between objects in your application for key use cases.</li> <li>Design Justification: Explain your design choices, focusing on how they embody OOP principles like encapsulation, inheritance, polymorphism, and abstraction.</li> <li>GUI Design Documentation (Final phase): Include GUI wireframes or mockups, and document how your UI components interact with the underlying business logic.</li> </ul> <p>7. Collaboration, Documentation, and Testing</p> <ul> <li>Team Collaboration: Use GitHub for all aspects of team collaboration. This includes branching, committing, merging, and resolving conflicts. Ensure to commit regularly to accurately reflect each team member's contributions.</li> <li>Documentation: Use Doxygen for documenting both the application and the library. Aim for 100% documentation coverage. Documentation should include:</li> <li>Class descriptions (purpose and functionality)</li> <li>Method descriptions (parameters, return values, exceptions)</li> <li>Relationship explanations (why certain inheritance or composition relationships exist)</li> <li>Design pattern implementations</li> <li>GUI component descriptions (for final phase)</li> <li>Testing: Develop comprehensive unit tests for all functionalities, striving for 100% test coverage. Tests should verify that:</li> <li>Classes function correctly individually</li> <li>Inheritance relationships work as expected</li> <li>Polymorphic behavior produces correct results</li> <li>Design patterns are implemented correctly</li> <li>GUI components interact properly with business logic (for final phase)</li> </ul> <p>8. Finalization and Submission</p> <ul> <li>Midterm Submission: Submit your console application with comprehensive documentation and testing by the midterm deadline.</li> <li>Final Submission: Submit your complete GUI application with additional documentation and testing by the final deadline.</li> <li>Presentation: Prepare a concise presentation deck (up to 10 slides) and a video presentation (up to 4 minutes) that summarizes the project's architecture, functionality, and key learning points.</li> <li>Code and Documentation Submission: Ensure your code is well-commented, adheres to the coding standards, and is thoroughly tested on both WSL/Linux and Windows OS. Submit a detailed project report and the source code named ce204-hw-name-surname.rar, containing the GitHub cloned templates.</li> </ul> <p>9. Additional Requirements and Integrity</p> <ul> <li>Originality: Maintain originality in your work. Use of plagiarism detection software is encouraged to ensure the uniqueness of your code.</li> <li>External Tools: The use of tools like ChatGPT for project development or documentation should be carefully considered to maintain the authenticity of your work.</li> </ul> <p>10. OOP-Specific Evaluation Criteria</p> <p>Your project will be evaluated based on the following OOP-specific criteria:</p> <ul> <li>Class Design: How well your classes are designed (cohesion, coupling, granularity)</li> <li>Inheritance Implementation: Appropriate use of inheritance, avoiding unnecessary inheritance relationships</li> <li>Polymorphism Usage: Effective use of polymorphism to simplify code and improve extensibility</li> <li>Abstraction Quality: Appropriate use of abstract classes and interfaces</li> <li>Encapsulation Practice: Proper hiding of implementation details and data protection</li> <li>Design Pattern Implementation: Correct implementation of design patterns and explanation of why they were chosen</li> <li>Code Reusability: How reusable and modular your code components are</li> <li>Exception Handling: Proper implementation of exception handling for robust code</li> <li>GUI Implementation (Final): Quality of GUI implementation and integration with business logic</li> <li>Architecture Evolution: How effectively your design evolved from console to GUI application</li> </ul> <p>11. Best Practices and Standards</p> <ul> <li>Adhere strictly to coding standards, file management, code aesthetics, and ensure the application's cross-platform compatibility.</li> <li>Engage in DevOps practices as applicable to Java projects, including creating releases according to the project's needs.</li> <li>Follow Java naming conventions for classes, methods, variables, and packages.</li> <li>Properly organize your code into packages that reflect the application's domain and architecture.</li> </ul> <p>Conclusion and Encouragement</p> <p>This two-phase project is an opportunity to apply theoretical knowledge in a practical setting, enhancing your software engineering and OOP skills. It's also a chance to experience real-world development processes, from initial console-based design to a full GUI application. Remember, the grading rubric and further details are available on Microsoft Teams. Best of luck, and we look forward to seeing your innovative applications!</p> <p>Wishing you the best of luck! The grading rubric can be found on Microsoft Teams.</p> <p>Homework Check Thresholds (If Below are Not Provided Homework won't be Accepted)</p> <ul> <li> <p>If No Submission or Missing Submission, No Github Repository or No Collaborative Work.</p> </li> <li> <p>No Releases for Csharp and Java Templates</p> </li> <li> <p>If Documentation Coverage %100 and Unit Test Coverage is Below %100</p> </li> <li> <p>If Release Folders with All Files Are Not Generated Correctly, if you cannot use CMake and Maven Templates correctly.</p> </li> <li> <p>If Unit Tests are Not Exist</p> </li> <li> <p>If Plagiarism Detected</p> </li> </ul> <p>Github and Git Usage</p> <ul> <li>Did you used following templates</li> </ul> <p>o Java Maven</p> <p>\u00a7 GitHub - ucoruh/eclipse-java-maven-template: Maven (Build,Test,Coverage,Publish) + Doxygen (HTML, Latex, RTF) + ReportGenerator + QA (Test Coverage) + Astyle Template</p> <p>\u00a7 Name this repository ce204-hw-name-surname-java</p> <ul> <li> <p>Did you open Private Github Repository with Correct naming ce204-hw-name-surname prefix, there should be three repositories for each team.</p> </li> <li> <p>Did you work with your friend is there any collaboration commits?</p> </li> <li> <p>Did you commit frequently?</p> </li> <li> <p>What are merger and conflict operations?</p> </li> <li> <p>Did you work on separate branches?</p> </li> <li> <p>Did you configure your e-mail with the correct name surname to profile and make your profile public?</p> </li> <li> <p>Did you upload your picture to Github repository?</p> </li> <li> <p>Did you configure pre-commit scripts with 1-configure-pre-commit.bat to avoid errors.</p> </li> <li> <p>Did you configure your gitignore file if there is a file that should be in projects?</p> </li> <li> <p>Did you generated releases on Github for maven templates.</p> </li> </ul> <p>Homework Submission</p> <ul> <li>Did you generate release files and submit your homework to Microsoft Teams?</li> </ul> <p>o Project repository without files that configured in gitignore.</p> <p>o Windows and Linux also MacOS Release Files (example outputs)</p> <p>o Did you submit Video 4 minute for each team member that you explained project?</p> <p>o Did you submit Presentation 10 Pages that you prepared as startup concept to explain your project.</p> <p>Development Environment Setup</p> <ul> <li> <p>Did you install WSL for Linux Development</p> </li> <li> <p>Did you install choco and scoop on Both Windows and WSL</p> </li> </ul> <p>o Test with choco \u2013version and scoop \u2013version</p> <p>o Installed with 3-install-package-manager.bat.</p> <ul> <li>Did you install Windows and Linux Environment with Batch Scripts</li> </ul> <p>o Windows Environment Installed with 4-install-windows-enviroment.bat.</p> <p>o Linux Environment Installed with 4-install-wsl-environment.sh.</p> <ul> <li> <p>Did you configure the project with 9-clean-configure-app-windows.bat to generate a Visual Studio Community Edition Solution for Programming.</p> </li> <li> <p>Did you try Open Project Folder with Visual Studio Community Edition to Develop Directly from Cmakelist.txt Scripts.</p> </li> </ul> <p>Project Folder Structure and CMake Configuration</p> <ul> <li> <p>Did you organize the project as an app, lib, and test like calculator examples?</p> </li> <li> <p>Did you locate your project's common functions in lib?</p> </li> <li> <p>Did you develop unit tests for library function these are located on test project?</p> </li> <li> <p>Did you integrate unit tests?</p> </li> <li> <p>Did you reference lib from both app and test projects?</p> </li> </ul> <p>Project Feature Checklist</p> <ul> <li> <p>Does your application work on both Windows and WSL, Open Windows Command line and WSL and Show Running Applications. Run Application from Directly Executables.</p> </li> <li> <p>Did you complete your application requirement features, open console application and show usage?</p> </li> </ul> <p>o Show file operations adding, editing, deleting, and listing records etc.</p> <p>o Show menu operations, are they managed with keyboards.</p> <p>o In file operations did you use structures.</p> <p>o Did you use binary files to store your records?</p> <ul> <li> <p>Show your unit tests and unit test coverages.</p> </li> <li> <p>Show your documentation and documentation coverage.</p> </li> </ul> <p>o Open Doxygen outputs, did you configure Doxygen files.</p> <ul> <li>Did you test inputs with unit tests?</li> </ul> <p>Programming Skills Checklist C/C++, Java and Csharp .Net Core, Maven and CMake</p> <ul> <li>Ask Questions about C/C++ Flow Controls</li> </ul> <p>o If/Else, While, For etc.</p> <ul> <li> <p>Ask Questions about Pointers and Arrays</p> </li> <li> <p>Ask Questions about Structures</p> </li> <li> <p>Ask Questions about Dynamic Memory Allocations Malloc/Free New/Delete</p> </li> <li> <p>Ask Questions about File Read/Write Operations</p> </li> <li> <p>Ask Questions about Preprocessors</p> </li> <li> <p>Ask Questions about Functions and Types, Function Parameter Usage, Passing Parameters as a Reference etc.</p> </li> <li> <p>Ask Questions about Cross-Compile Operations.</p> </li> <li> <p>Ask Questions about to show how Call stack checked on Visual Studio</p> </li> <li> <p>Ask Questions about how to debug applications and see variables.</p> </li> <li> <p>Ask Questions about how to see memory during debug.</p> </li> <li> <p>Ask Questions about configuration types x86/Wind32 and x64 Differences.</p> </li> <li> <p>Etc.</p> </li> </ul> <p>Modern Development Practices and Bonus Points</p> <p>To encourage adoption of industry-standard tools and practices, bonus points will be awarded for implementing the following advanced features:</p> <p>1. Database Integration with Docker (Bonus)</p> <ul> <li>Database Implementation: Use a containerized database (MySQL or PostgreSQL) with Docker for data storage instead of binary files.</li> <li>Set up proper database schema with tables, relationships, and constraints</li> <li>Implement data access layer with JDBC or JPA/Hibernate</li> <li> <p>Use connection pooling for efficient database connections</p> </li> <li> <p>Docker Configuration: </p> </li> <li>Create Dockerfile for your Java application</li> <li>Set up docker-compose.yml to orchestrate your application and database services</li> <li>Ensure proper volume configuration for database persistence</li> <li>Implement environment variables for configuration management</li> </ul> <p>2. Authentication and Authorization (Bonus)</p> <ul> <li>Keycloak Integration: Implement user authentication and authorization using Keycloak</li> <li>Set up Keycloak in your Docker Compose environment</li> <li>Configure realms, clients, and roles</li> <li>Implement login/register functionality in your application</li> <li>Manage user sessions and tokens</li> <li>Implement role-based access control</li> </ul> <p>3. System Monitoring and Logging (Bonus)</p> <ul> <li>Monitoring Stack:</li> <li>Implement Prometheus for metrics collection</li> <li>Set up Grafana for metrics visualization and dashboards</li> <li>Configure Loki for centralized log management</li> <li> <p>Create custom dashboards to monitor application performance and health</p> </li> <li> <p>Logging Implementation:</p> </li> <li>Use modern logging framework (e.g., SLF4J with Logback or Log4j2)</li> <li>Implement structured logging with appropriate log levels</li> <li>Configure log rotation and retention policies</li> <li>Ensure logs are accessible through the monitoring system</li> </ul> <p>4. Microservices Architecture with Spring Boot (Bonus)</p> <ul> <li>Spring Boot REST API:</li> <li>Develop a RESTful API using Spring Boot</li> <li>Implement proper API versioning and documentation (Swagger/OpenAPI)</li> <li>Use Spring Data for database operations</li> <li> <p>Implement appropriate exception handling and response formats</p> </li> <li> <p>Service Communication:</p> </li> <li>Create a client (console or GUI) that communicates with the REST API</li> <li>Implement service discovery or direct communication</li> <li>Handle API responses and errors gracefully</li> <li> <p>Ensure proper separation between frontend and backend</p> </li> <li> <p>Dockerization of Microservices:</p> </li> <li>Create separate Dockerfiles for each service</li> <li>Configure Docker Compose to manage all services</li> <li>Implement proper networking between containers</li> <li>Ensure proper startup sequence with health checks</li> </ul> <p>5. Additional Evaluation Criteria for Advanced Implementation</p> <p>Projects implementing these advanced features will be evaluated on:</p> <ul> <li>Architecture Quality: Well-defined layered architecture with separation of concerns</li> <li>Container Management: Proper use of Docker containers and orchestration</li> <li>Security Practices: Secure handling of credentials, data, and communications</li> <li>Observability: Effectiveness of monitoring and logging solutions</li> <li>Scalability: Design considerations for horizontal scaling and resilience</li> <li>Documentation: Clear documentation of the advanced features and configurations</li> <li>DevOps Practices: CI/CD configuration, container deployment, environment management</li> </ul> <p>Note: While these advanced features can earn bonus points, the core project requirements must still be met. Focus on implementing the core functionality first, then enhance your project with these advanced features.</p>"},{"location":"project-guide/#project-description","title":"Project Description","text":""},{"location":"project-guide/#project-selection","title":"Project Selection","text":"<p>Choose an application from the provided appendix. Ensure no two teams select the same application to prevent plagiarism. Teams are self-formed; projects are not pre-assigned by us. Also, if you have taken this course again do not select the same project as other courses. You will select a single project idea and you will use develop same project in C/C++, Java and Csharp with prepared project templates for you.</p>"},{"location":"project-guide/#project-setup","title":"Project Setup:","text":"<p>Fork the templates from following repositories</p> <ul> <li> <p>C/C++ Cmake </p> </li> <li> <p>https://github.com/ucoruh/cpp-cmake-ctest-template</p> </li> <li> <p>Name this repository <code>ce205-final-name-surname-cpp</code></p> </li> <li> <p>Net Core Csharp </p> </li> <li> <p>https://github.com/ucoruh/vs-net-core-template</p> </li> <li> <p>Name this repository <code>ce205-final-name-surname-csharp</code></p> </li> <li> <p>Java Maven </p> </li> <li> <p>https://github.com/ucoruh/eclipse-java-maven-template</p> </li> <li> <p>Name this repository <code>ce205-final-name-surname-java</code></p> </li> </ul> <p>Your code must reside in a private GitHub repository, accessible only to us.</p>"},{"location":"project-guide/#development","title":"Development:","text":"<p>Construct a console application where the main functionality is housed within a separate library. This console application will utilize the said library for its operations. If There is a storage operation use binary files to record data. If There is a socket communications, APIs or Integrations with Remote services generate mockups to simulate operations. Each project idea has menu tree to define operations you should complete all operations and for console menu operations use keyboard arrows or tab for option and menu selections.</p>"},{"location":"project-guide/#team-collaboration","title":"Team Collaboration:","text":"<p>Include your team members in the GitHub project. There should be only one project repository for each team.</p>"},{"location":"project-guide/#instructor-collaboration","title":"Instructor Collaboration:","text":"<p>Add your instructor as a collaborator on the project.</p>"},{"location":"project-guide/#repository-privacy","title":"Repository Privacy:","text":"<p>Maintain the privacy of your repository. Public repositories will be treated as instances of plagiarism.</p>"},{"location":"project-guide/#development-documentation","title":"Development &amp; Documentation:","text":"<p>Develop the application and its accompanying unit tests. Document both the application and the library using Doxygen.</p>"},{"location":"project-guide/#template-usage","title":"Template Usage:","text":"<p>Ensure comprehensive utilization of the provided template. The template aids in building, testing, generating documentation, measuring test and documentation coverages, and packaging essential files. Failure to adhere to the template standards will result in non-acceptance.</p>"},{"location":"project-guide/#coverage-thresholds","title":"Coverage Thresholds:","text":"<p>Achieve a minimum of 100%-unit test coverage and 100% documentation coverage for project acceptance.</p>"},{"location":"project-guide/#platform-compatibility","title":"Platform Compatibility:","text":"<p>Ensure your application is compatible with both WSL/Linux and Windows OS.</p>"},{"location":"project-guide/#coding-standards","title":"Coding Standards:","text":"<p>Pay meticulous attention to your coding style, including function and variable naming conventions.</p>"},{"location":"project-guide/#presentation","title":"Presentation:","text":"<p>Prepare a presentation deck, with a limit of 10 slides, detailing your project.</p>"},{"location":"project-guide/#video-submission","title":"Video Submission:","text":"<p>Record a video presentation of your project. Each team member should contribute to the video, which should not exceed 4 minutes in total duration.</p>"},{"location":"project-guide/#contribution-tracking","title":"Contribution Tracking:","text":"<p>Individual contributions will be tracked via git commits. Commit frequently to reflect your involvement accurately.</p>"},{"location":"project-guide/#repository-management","title":"Repository Management:","text":"<p>On your GitHub, ensure well-maintained README.md files, gitignore, git usage notes, collaboration ratios, and manage merges/conflict resolutions. Documentation coverage will be evaluated in your repository.</p>"},{"location":"project-guide/#report-submission","title":"Report Submission:","text":"<p>Submit a detailed report named ce205-final-name-surname.docx.</p>"},{"location":"project-guide/#classroom-code-submission","title":"Classroom Code Submission:","text":"<p>Share your code in Classroom, excluding binaries. Any binary files present will result in a penalty. Remove any superfluous files.</p>"},{"location":"project-guide/#code-understanding","title":"Code Understanding:","text":"<p>Comment on your code thoroughly, providing explanations for your logic. Only submit work you understand.</p>"},{"location":"project-guide/#code-aesthetics","title":"Code Aesthetics:","text":"<p>Ensure your code is neatly formatted and indented for clarity.</p>"},{"location":"project-guide/#file-management","title":"File Management:","text":"<p>Ensure correct project and file types.</p>"},{"location":"project-guide/#code-quality","title":"Code Quality:","text":"<p>Do not submit malfunctioning or bug-ridden code.</p>"},{"location":"project-guide/#test-results","title":"Test Results:","text":"<p>Your project's test outcomes must be accurate.</p>"},{"location":"project-guide/#algorithm-explanation","title":"Algorithm Explanation:","text":"<p>If your project involves algorithmic solutions, provide a step-by-step explanation of your methods.</p>"},{"location":"project-guide/#source-code-naming","title":"Source Code Naming:","text":"<p>The source code should be archived and named as ce205-final-name-surname.rar. This archive should contain the Visual Studio solution cloned from GitHub.</p>"},{"location":"project-guide/#originality","title":"Originality:","text":"<p>Do not replicate someone else's code. We will employ software to detect similarities. Take ownership of the provided source codes and make them uniquely yours. Strict plagiarism checks will be in place.</p>"},{"location":"project-guide/#documentation-sharing","title":"Documentation Sharing:","text":"<p>Only share the Doxygen-generated PDF documentation. Refrain from sending any HTML or other auto-generated documentation components.</p>"},{"location":"project-guide/#warning","title":"Warning:","text":"<p>Relying on tools like ChatGPT for your project development or documentation is discouraged. Authenticity and originality are paramount.</p>"},{"location":"project-guide/#devops","title":"DevOps:","text":"<p>Csharp and Java templates should create releases.</p>"},{"location":"project-guide/#homework-check-thresholds","title":"Homework Check Thresholds","text":"<p>(If Below are Not Provided Homework won't be Accepted)</p> <ul> <li> <p>If No Submission or Missing Submission, No Github Repository or No Collaborative Work. </p> </li> <li> <p>No Releases for Csharp and Java Templates</p> </li> <li> <p>If Documentation Coverage and Unit Test Coverage is Below %100</p> </li> <li> <p>If Release Folders with All Files Are Not Generated Correctly, if you cannot use CMake, Maven and .Net Core Templates correctly. </p> </li> <li> <p>If Unit Tests are Not Exist</p> </li> <li> <p>If Plagiarism Detected</p> </li> </ul>"},{"location":"project-guide/#these-questions-will-be-asked-to-you-during-review","title":"These Questions Will Be Asked to You During Review","text":""},{"location":"project-guide/#github-and-git-usage","title":"Github and Git Usage","text":"<ul> <li> <p>Did you used following templates </p> </li> <li> <p>C/C++ Cmake</p> </li> <li> <p>https://github.com/ucoruh/cpp-cmake-ctest-template</p> </li> <li> <p>Name this repository ce205-final-name-surname-cpp</p> </li> <li> <p>.Net Core Csharp</p> </li> <li> <p>https://github.com/ucoruh/vs-net-core-template</p> </li> <li> <p>Name this repository ce205-final-name-surname-csharp</p> </li> <li> <p>Java Maven</p> </li> <li> <p>https://github.com/ucoruh/eclipse-java-maven-template</p> </li> <li> <p>Name this repository ce205-final-name-surname-java</p> </li> <li> <p>Did you open Private Github Repository with Correct naming ce205-final-name-surname prefix, there should be three repository for each team. </p> </li> <li> <p>Did you work with your friend is there any collaboration commits?</p> </li> <li> <p>Did you commit frequently?</p> </li> <li> <p>What are merger and conflict operations?</p> </li> <li> <p>Did you work on separate branches?</p> </li> <li> <p>Did you configure your e-mail with the correct name surname to profile and make your profile public?</p> </li> <li> <p>Did you upload your picture to Github repository?</p> </li> <li> <p>Did you configure pre-commit scripts with 1-configure-pre-commit.bat to avoid errors. </p> </li> <li> <p>Did you configure your gitignore file if there is a file that should be in projects?</p> </li> <li> <p>Did you generated releases on Github for maven and .netcore templates.</p> </li> </ul>"},{"location":"project-guide/#homework-submission","title":"Homework Submission","text":"<ul> <li> <p>Did you generate release files and submit your homework to Microsoft Teams?</p> </li> <li> <p>Project repository without files that configured in gitignore</p> </li> <li> <p>Windows and Linux also MacOS Release Files (example outputs)</p> </li> <li> <p>Did you submit Video 4 minute for each team member that you explained project?</p> </li> <li> <p>Did you submit Presentation 10 Pages that you prepared as startup concept to explain your project.</p> </li> </ul>"},{"location":"project-guide/#development-environment-setup","title":"Development Environment Setup","text":"<ul> <li> <p>Did you install WSL for Linux Development</p> </li> <li> <p>Did you install choco and scoop on Both Windows and WSL</p> </li> <li> <p>Test with choco \u2013version and scoop \u2013version</p> </li> <li> <p>Installed with 3-install-package-manager.bat. </p> </li> <li> <p>Did you install Windows and Linux Environment with Batch Scripts</p> </li> <li> <p>Windows Environment Installed with 4-install-windows-enviroment.bat.</p> </li> <li> <p>Linux Environment Installed with 4-install-wsl-environment.sh.</p> </li> <li> <p>Did you configure the project with 9-clean-configure-app-windows.bat to generate a Visual Studio Community Edition Solution for Programming. </p> </li> <li> <p>Did you try Open Project Folder with Visual Studio Community Edition to Develop Directly from Cmakelist.txt Scripts. </p> </li> </ul>"},{"location":"project-guide/#project-folder-structure-and-cmake-configuration","title":"Project Folder Structure and CMake Configuration","text":"<ul> <li> <p>Did you organize the project as an app, lib, and test like calculator examples?</p> </li> <li> <p>Did you locate your project's common functions in lib? </p> </li> <li> <p>Did you develop unit tests for library function these are located on test project?</p> </li> <li> <p>Did you integrate unit tests?</p> </li> <li> <p>Did you reference lib from both app and test projects? </p> </li> </ul>"},{"location":"project-guide/#project-feature-checklist","title":"Project Feature Checklist","text":"<ul> <li> <p>Does your application work on both Windows and WSL, Open Windows Command line and WSL and Show Running Applications. Run Application from Directly Executables. </p> </li> <li> <p>Did you complete your application requirement features, open console application and show usage? </p> </li> <li> <p>Show file operations adding, editing, deleting, and listing records etc. </p> </li> <li> <p>Show menu operations, are they managed with keyboards.</p> </li> <li> <p>In file operations did you use structures.</p> </li> <li> <p>Did you use binary files to store your records?</p> </li> <li> <p>Show your unit tests and unit test coverages.</p> </li> <li> <p>Show your documentation and documentation coverage.</p> </li> <li> <p>Open Doxygen outputs, did you configure Doxygen files.</p> </li> <li> <p>Did you test inputs with unit tests?</p> </li> </ul>"},{"location":"project-guide/#programming-skills-checklist-cc-java-and-csharp-net-core-maven-and-cmake","title":"Programming Skills Checklist C/C++, Java and Csharp .Net Core, Maven and CMake","text":"<ul> <li> <p>Ask Questions about C/C++ Flow Controls</p> </li> <li> <p>If/Else, While, For etc.</p> </li> <li> <p>Ask Questions about Pointers and Arrays</p> </li> <li> <p>Ask Questions about Structures</p> </li> <li> <p>Ask Questions about Dynamic Memory Allocations Malloc/Free New/Delete</p> </li> <li> <p>Ask Questions about File Read/Write Operations</p> </li> <li> <p>Ask Questions about Preprocessors</p> </li> <li> <p>Ask Questions about Functions and Types, Function Parameter Usage, Passing Parameters as a Reference etc.</p> </li> <li> <p>Ask Questions about Cross-Compile Operations.</p> </li> <li> <p>Ask Questions about to show how Call stack checked on Visual Studio</p> </li> <li> <p>Ask Questions about how to debug applications and see variables.</p> </li> <li> <p>Ask Questions about how to see memory during debug.</p> </li> <li> <p>Ask Questions about configuration types x86/Wind32 and x64 Differences. </p> </li> <li> <p>Etc.</p> </li> </ul>"},{"location":"project-guide/#appendix-application-list","title":"Appendix \u2013 Application List","text":""},{"location":"project-guide/#01-book-exchange-platform","title":"01-Book Exchange Platform:","text":"<ul> <li> <p>Listing books for exchange.</p> </li> <li> <p>Managing exchange requests.</p> </li> <li> <p>Rating system for users.</p> </li> <li> <p>Tracking exchange history.</p> </li> </ul>"},{"location":"project-guide/#common-features","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Implement a login system to allow registered users to access the platform. Users should be able to create accounts and log in securely.</p> </li> <li> <p>Book Database: Create a file to store information about books available for exchange. Each book entry should include details like title, author, genre, and owner.</p> </li> <li> <p>Menu System: Design a user-friendly console menu system to navigate through various options in the application. Users can use keyboard inputs to select menu items.</p> </li> <li> <p>Search and Listing: Allow users to search for books based on criteria like title, author, or genre. Users should also be able to list their own books for exchange.</p> </li> <li> <p>Exchange Requests: Users should be able to send and receive exchange requests for books. Include options to accept or decline requests from console application.</p> </li> <li> <p>Rating System: Implement a rating system where users can rate and leave reviews for each other after a successful exchange. Display user ratings alongside their profiles.</p> </li> <li> <p>History Tracking: Keep a record of all past exchange transactions, including details of the books exchanged, date, and user information.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store book information and transaction history in binary files.</p> </li> <li> <p>Implement a text-based UI for the console menu.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details","title":"C# Specific Details:","text":"<ul> <li>Use C#'s file handling capabilities to manage data storage.</li> </ul> <p>Create a well-structured console application using the Console class for user interactions. Remember to optimize the code for efficient data storage and retrieval, error handling, and user experience. These are the core features you can include in your console application for a Book Exchange Platform in these programming languages. You can further enhance the functionality based on your specific requirements.</p> <p></p>"},{"location":"project-guide/#02-personal-time-tracker","title":"02-Personal Time Tracker:","text":"<ul> <li> <p>Activity logging.</p> </li> <li> <p>Time spent analysis.</p> </li> <li> <p>Productivity reports.</p> </li> <li> <p>Break reminders.</p> </li> </ul>"},{"location":"project-guide/#common-features_1","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts and log in securely to track their time. Implement user profiles with usernames and passwords.</p> </li> <li> <p>Activity Logging: Provide a way for users to log their activities throughout the day. They should be able to enter details such as activity name, start time, and end time.</p> </li> <li> <p>Time Spent Analysis: Calculate and display the total time spent on each activity, both daily and over longer periods. Present this information in a clear and concise manner.</p> </li> <li> <p>Productivity Reports: Generate productivity reports based on the logged data. These reports can include graphs or charts to visualize time spent on different activities.</p> </li> <li> <p>Break Reminders: Implement a feature to remind users to take regular breaks. Users can set the duration between breaks and receive notifications.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_1","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store activity logs and user data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to log activities and view reports.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_1","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_1","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like data export (e.g., exporting reports to a CSV file), customizable break reminders, and the ability to categorize activities for more detailed analysis. Ensure that the application is optimized for performance and user-friendly for efficient time tracking and analysis.</p> <p></p>"},{"location":"project-guide/#03-digital-journaldiary","title":"03-Digital Journal/Diary:","text":"<ul> <li> <p>Daily entry logging.</p> </li> <li> <p>Search and filter entries.</p> </li> <li> <p>Password protection.</p> </li> <li> <p>Mood tracking.</p> </li> </ul>"},{"location":"project-guide/#common-features_2","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts with usernames and passwords. Password protection ensures the privacy and security of journal entries.</p> </li> <li> <p>Daily Entry Logging: Provide users with the ability to create daily journal entries. Each entry should include a date, time, and the option to write down thoughts, experiences, or notes.</p> </li> <li> <p>Search and Filter Entries: Implement a search functionality that allows users to find specific journal entries by date, keyword, or mood. Users can filter their entries based on criteria of their choice.</p> </li> <li> <p>Password Protection: Ensure that the journal is password-protected, so only authorized users can access their entries. Passwords should be securely stored.</p> </li> <li> <p>Mood Tracking: Allow users to record their mood for each journal entry, such as happy, sad, stressed, or relaxed. This can help users track their emotional journey over time.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_2","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store journal entries and user data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to add, search, and read journal entries.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_2","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_2","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider enhancing the application with additional features like the ability to attach images or files to entries, tagging entries with keywords, and generating summary reports based on mood or specific date ranges. Ensure that the application is optimized for performance and provides a secure and user-friendly environment for journaling.</p> <p></p>"},{"location":"project-guide/#04-expense-sharing-among-friends","title":"04-Expense Sharing Among Friends:","text":"<ul> <li> <p>Expense recording and splitting.</p> </li> <li> <p>Balance tracking.</p> </li> <li> <p>Notifications for settlements.</p> </li> <li> <p>Summary of shared expenses.</p> </li> </ul>"},{"location":"project-guide/#common-features_3","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts with usernames and passwords. User accounts will help track expenses and balances accurately.</p> </li> <li> <p>Expense Recording and Splitting: Provide a way for users to record their expenses and split them among friends. Users should be able to enter details such as the expense amount, description, and the friends with whom they are sharing the expense.</p> </li> <li> <p>Balance Tracking: Keep track of the balances between users, showing who owes money to whom. Update balances automatically when expenses are added or settled.</p> </li> <li> <p>Notifications for Settlements: Implement a notification system to inform users when they have pending settlements or when someone has settled an expense with them.</p> </li> <li> <p>Summary of Shared Expenses: Generate a summary of all shared expenses, showing each user's contributions, shared expenses, and balances. This summary can be viewed for individual users or groups of friends.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_3","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store expense data, user accounts, and balances in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to record expenses, view balances, and settle debts.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_3","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_3","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like expense categories, the ability to create and manage groups of friends for shared expenses, and exporting reports to a file for record-keeping. Ensure that the application efficiently handles expense calculations and provides a convenient way for friends to track shared expenses and settle debts.</p> <p></p>"},{"location":"project-guide/#05-virtual-study-timer-pomodoro-technique","title":"05-Virtual Study Timer (Pomodoro Technique):","text":"<ul> <li> <p>Customizable work/break intervals.</p> </li> <li> <p>Progress tracking.</p> </li> <li> <p>Reminder alarms.</p> </li> <li> <p>Statistics on study patterns.</p> </li> </ul>"},{"location":"project-guide/#common-features_4","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts if they want to save their study statistics and preferences. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Customizable Work/Break Intervals: Let users customize the length of their work (study) and break intervals. They should be able to set the duration of work sessions and breaks according to their preferences.</p> </li> <li> <p>Progress Tracking: Display a timer that counts down during work sessions and break periods. Users should be able to see the remaining time for their current task.</p> </li> <li> <p>Reminder Alarms: Provide users with optional reminder alarms at the end of each work session and break to notify them to switch tasks. Allow them to choose their preferred sound or notification method.</p> </li> <li> <p>Statistics on Study Patterns: Keep track of study patterns, such as the number of completed work sessions, total study time, and average session length. Generate statistics and charts to help users analyze their study habits.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_4","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user preferences and study statistics in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to start, pause, and customize study sessions.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_4","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_4","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to set long-term study goals, analyze historical study data, and export statistics for future reference. Ensure that the application is optimized for efficient time management and provides a motivating environment for productive study sessions.</p> <p></p>"},{"location":"project-guide/#06-diet-planner","title":"06-Diet Planner:","text":"<ul> <li> <p>Meal planning and logging.</p> </li> <li> <p>Calorie and nutrient tracking.</p> </li> <li> <p>Personalized diet recommendations.</p> </li> <li> <p>Shopping list generator.</p> </li> </ul>"},{"location":"project-guide/#common-features_5","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their diet plans and track their progress. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Meal Planning and Logging: Provide a way for users to plan their meals for the day or week. Allow users to log the foods and portions they consume for each meal.</p> </li> <li> <p>Calorie and Nutrient Tracking: Implement a calorie and nutrient tracker that calculates the total calorie intake and nutritional values based on the logged foods. Users can set daily calorie and nutrient goals.</p> </li> <li> <p>Personalized Diet Recommendations: Offer personalized diet recommendations based on user profiles, including age, gender, weight, height, and dietary preferences (e.g., vegetarian, vegan, or low-carb).</p> </li> <li> <p>Shopping List Generator: Generate a shopping list based on the meal plans and recipes selected by the user. The list should include the quantities of ingredients needed.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_5","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, meal plans, and diet data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan meals, log food, and view nutrition information.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_5","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_5","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a food database with nutritional information, the ability to track weight and fitness goals, and meal plan sharing with friends or nutritionists. Ensure that the application provides accurate nutritional information and helps users make healthier dietary choices.</p> <p></p>"},{"location":"project-guide/#07-personal-career-tracker","title":"07-Personal Career Tracker:","text":"<ul> <li> <p>Job application tracker.</p> </li> <li> <p>Skill development progress.</p> </li> <li> <p>Interview preparation notes.</p> </li> <li> <p>Career milestone logging.</p> </li> </ul>"},{"location":"project-guide/#common-features_6","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their career tracking and store their data securely.</p> </li> <li> <p>Job Application Tracker: Provide a way for users to track their job applications. Users can log details such as the company name, position applied for, application date, and status of the application (e.g., pending, rejected, interview scheduled).</p> </li> <li> <p>Skill Development Progress: Implement a skill development tracker where users can list their skills and track their progress in acquiring and improving those skills. They can set goals and log achievements.</p> </li> <li> <p>Interview Preparation Notes: Allow users to create and store interview preparation notes for specific job applications. This can include details about the company, job role, common interview questions, and personal notes.</p> </li> <li> <p>Career Milestone Logging: Enable users to log and celebrate career milestones and achievements, such as promotions, certifications, or completed projects.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_6","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, job application data, skill progress, interview notes, and career milestones in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to add, edit, and view career-related information.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_6","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_6","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like goal setting for career development, the ability to export reports for job applications and skill progress, and integration with job search websites for streamlined application tracking. Ensure that the application helps users stay organized and motivated in their career pursuits.</p> <p></p>"},{"location":"project-guide/#08-password-manager","title":"08-Password Manager:","text":"<ul> <li> <p>Secure storage of passwords.</p> </li> <li> <p>Password generator.</p> </li> <li> <p>Auto-login feature.</p> </li> <li> <p>Multi-platform compatibility.</p> </li> </ul>"},{"location":"project-guide/#common-features_7","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create a master password to access the password manager securely. This master password should be securely stored and used to encrypt and decrypt stored passwords.</p> </li> <li> <p>Secure Storage of Passwords: Implement secure storage for passwords using encryption algorithms to protect sensitive data. Passwords should be organized by categories or accounts for easy retrieval.</p> </li> <li> <p>Password Generator: Provide a password generation feature to create strong, unique passwords for various online accounts. Users can specify password length and complexity.</p> </li> <li> <p>Auto-Login Feature: Allow users to configure auto-login for selected accounts. When enabled, the password manager can automatically enter the credentials for a specific website or application.</p> </li> <li> <p>Multi-Platform Compatibility: Ensure that the password manager is compatible with multiple platforms, such as Windows, macOS, Linux, and mobile devices (Android and iOS). You can create separate versions for different platforms if needed.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_7","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store encrypted password data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage passwords, generate passwords, and enable auto-login.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_7","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_7","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>For multi-platform compatibility, consider creating a command-line interface (CLI) version of the password manager that can run on different operating systems. Additionally, ensure that the application follows industry best practices for encryption and security to protect user passwords effectively.</p> <p></p>"},{"location":"project-guide/#09-yogameditation-scheduler","title":"09-Yoga/Meditation Scheduler:","text":"<ul> <li> <p>Session scheduling.</p> </li> <li> <p>Pose and technique library.</p> </li> <li> <p>Progress tracking.</p> </li> <li> <p>Reminder for daily practice.</p> </li> </ul>"},{"location":"project-guide/#common-features_8","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their yoga/meditation practice and track their progress. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Session Scheduling: Provide a way for users to schedule their yoga or meditation sessions. Users can specify the date, time, duration, and type of practice (e.g., yoga, meditation, specific poses).</p> </li> <li> <p>Pose and Technique Library: Include a library with a collection of yoga poses, meditation techniques, and breathing exercises. Users can browse and select from this library when scheduling their sessions.</p> </li> <li> <p>Progress Tracking: Implement a progress tracker that records the user's practice history. Track factors like the number of sessions completed, session duration, and improvements in flexibility or mindfulness.</p> </li> <li> <p>Reminder for Daily Practice: Allow users to set reminders for their daily yoga or meditation practice. Users can choose to receive notifications or alarms at their preferred practice times.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_8","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, session data, and progress tracking in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to schedule sessions, view progress, and set reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_8","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_8","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to create custom sessions, track mood or stress levels before and after practice, and provide guided audio or video instructions for sessions. Ensure that the application encourages regular yoga and meditation practice and helps users improve their well-being.</p> <p></p>"},{"location":"project-guide/#10-coding-snippet-manager","title":"10-Coding Snippet Manager:","text":"<ul> <li> <p>Storing and categorizing code snippets.</p> </li> <li> <p>Search functionality.</p> </li> <li> <p>Sharing snippets with others.</p> </li> <li> <p>Integrations with popular IDEs.</p> </li> </ul>"},{"location":"project-guide/#common-features_9","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts for personalized code snippet management and tracking. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Storing and Categorizing Code Snippets: Provide a way for users to store and categorize their code snippets based on programming languages, frameworks, or specific projects. Users can add titles, descriptions, and tags to each snippet.</p> </li> <li> <p>Search Functionality: Implement a robust search functionality that allows users to search for code snippets using keywords, tags, or programming languages. Display search results with relevant snippets.</p> </li> <li> <p>Sharing Snippets with Others: Enable users to share their code snippets with others, either through a public repository or by sharing a link. Users can set visibility options for their snippets (public, private, or shared with specific users).</p> </li> <li> <p>Integrations with Popular IDEs: Integrate the code snippet manager with popular Integrated Development Environments (IDEs) like Visual Studio Code, IntelliJ IDEA, or Visual Studio. Users can easily import and export snippets directly from their development environment.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_9","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, code snippets, and sharing settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage snippets, search, and share.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_9","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_9","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>For integrations with IDEs, consider creating plugins or extensions that seamlessly connect the code snippet manager to developers' preferred development environments. Additionally, allow users to rate and comment on shared code snippets to foster a collaborative coding community. Ensure that the application helps developers manage and find code snippets efficiently.</p> <p></p>"},{"location":"project-guide/#11-home-renovation-planner","title":"11-Home Renovation Planner:","text":"<ul> <li> <p>Project and budget planning.</p> </li> <li> <p>Task assignment and tracking.</p> </li> <li> <p>Cost analysis and reporting.</p> </li> <li> <p>Supplier and contractor database.</p> </li> </ul>"},{"location":"project-guide/#common-features_10","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their renovation projects and track their progress. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Project and Budget Planning: Provide a way for users to plan their home renovation projects. Users can specify project details, including scope, timeline, and budget. They can also set milestones and goals.</p> </li> <li> <p>Task Assignment and Tracking: Implement task management features that allow users to assign tasks to team members or contractors. Users can track the status of each task and set deadlines.</p> </li> <li> <p>Cost Analysis and Reporting: Create tools for users to track project expenses. Users can enter costs for materials, labor, and other expenses. Generate reports that provide a breakdown of expenses and budget status.</p> </li> <li> <p>Supplier and Contractor Database: Include a database where users can store information about suppliers, contractors, and service providers. Users can add contact details, reviews, and project history.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_10","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, project data, task assignments, and cost records in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan projects, assign tasks, and view cost reports.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_10","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_10","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like document management for project plans and contracts, a calendar for scheduling tasks and deadlines, and the ability to export reports in various formats (PDF, CSV). Ensure that the application helps users efficiently plan and manage their home renovation projects within budget and on schedule.</p> <p></p>"},{"location":"project-guide/#12-car-maintenance-log","title":"12-Car Maintenance Log:","text":"<ul> <li> <p>Service history tracking.</p> </li> <li> <p>Maintenance reminders.</p> </li> <li> <p>Expense logging.</p> </li> <li> <p>Fuel efficiency reports.</p> </li> </ul>"},{"location":"project-guide/#common-features_11","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts for personalized car maintenance tracking and record-keeping. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Service History Tracking: Provide a way for users to log and track the service history of their vehicles. Users can record details such as service date, type of service (e.g., oil change, tire rotation), service provider, and cost.</p> </li> <li> <p>Maintenance Reminders: Implement a reminder system that notifies users when it's time for scheduled maintenance tasks (e.g., oil change, brake inspection) based on mileage or time intervals.</p> </li> <li> <p>Expense Logging: Allow users to log and categorize expenses related to their vehicles, including fuel costs, repairs, and maintenance. Users can track expenses over time and generate reports.</p> </li> <li> <p>Fuel Efficiency Reports: Calculate and provide fuel efficiency reports that show metrics like miles per gallon (MPG) or liters per 100 kilometers (L/100km). Users can see their vehicle's fuel efficiency trends.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_11","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, vehicle data, service records, expense logs, and reminders in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to log maintenance, view reminders, and generate reports.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_11","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_11","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to store vehicle specifications (make, model, year), upload and store service invoices, and generate charts or graphs to visualize maintenance and fuel efficiency trends. Ensure that the application helps users keep their vehicles well-maintained and cost-efficient.</p> <p></p>"},{"location":"project-guide/#13-music-practice-scheduler","title":"13-Music Practice Scheduler:","text":"<ul> <li> <p>Instrument practice logging.</p> </li> <li> <p>Set goals and track progress.</p> </li> <li> <p>Reminder for practice sessions.</p> </li> <li> <p>Music theory reference.</p> </li> </ul>"},{"location":"project-guide/#common-features_12","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts for personalized music practice tracking and progress monitoring. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Instrument Practice Logging: Provide a way for users to log their instrument practice sessions. Users can record details such as practice date, instrument played, duration, and specific exercises or pieces practiced.</p> </li> <li> <p>Goal Setting and Progress Tracking: Implement goal-setting features that allow users to set specific practice goals (e.g., learning a new song, mastering a technique) and track their progress over time. Show statistics and progress reports.</p> </li> <li> <p>Reminder for Practice Sessions: Set up a reminder system to notify users of scheduled practice sessions. Users can configure practice session reminders at preferred times.</p> </li> <li> <p>Music Theory Reference: Include a built-in music theory reference section where users can access information on music theory concepts, scales, chords, and more to aid their practice.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_12","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, practice session data, practice goals, and progress records in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to log practice sessions, set goals, and view progress.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_12","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_12","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a metronome tool, the ability to record and playback practice sessions, and practice session sharing with teachers or fellow musicians. Ensure that the application motivates users to practice regularly and helps them achieve their musical goals.</p> <p></p>"},{"location":"project-guide/#14-household-chore-scheduler","title":"14-Household Chore Scheduler:","text":"<ul> <li> <p>Chore assignment for family members.</p> </li> <li> <p>Schedule and reminder setup.</p> </li> <li> <p>Progress tracking.</p> </li> <li> <p>Reward system for completed chores.</p> </li> </ul>"},{"location":"project-guide/#common-features_13","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow family members to create accounts or profiles within the application. This can help personalize chore assignments and tracking for each user.</p> </li> <li> <p>Chore Assignment for Family Members: Implement a system for assigning chores to family members. Users can specify the chore, assign it to a family member, and set due dates or frequencies (e.g., daily, weekly).</p> </li> <li> <p>Schedule and Reminder Setup: Enable users to set up schedules for chore completion and receive reminders when chores are due. Reminders can be sent through notifications or emails.</p> </li> <li> <p>Progress Tracking: Create a progress tracker that records completed chores and shows which family members are actively participating in household tasks. Users can view their own progress and that of others.</p> </li> <li> <p>Reward System for Completed Chores: Implement a reward or incentive system where family members earn points or rewards for completing chores. Users can redeem points for rewards determined by the family.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_13","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, chore assignments, progress records, and reward data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to assign chores, set schedules, and track progress.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_13","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_13","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a leaderboard to track the most active family members in completing chores, a messaging system for communication between family members, and the ability to customize rewards based on the family's preferences. Ensure that the application promotes a fair distribution of household responsibilities and encourages family members to contribute to chores.</p> <p></p>"},{"location":"project-guide/#15-personal-energy-consumption-tracker","title":"15-Personal Energy Consumption Tracker:","text":"<ul> <li> <p>Monitoring energy use in the home.</p> </li> <li> <p>Tips for reducing consumption.</p> </li> <li> <p>Cost calculation based on usage.</p> </li> <li> <p>Carbon footprint analysis.</p> </li> </ul>"},{"location":"project-guide/#common-features_14","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their energy consumption tracking and access historical data. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Monitoring Energy Use in the Home: Implement a system for monitoring energy consumption in the home. Users can input data from utility bills or use smart meters to track electricity and gas usage. The application can also integrate with IoT devices to capture real-time data.</p> </li> <li> <p>Tips for Reducing Consumption: Provide energy-saving tips and recommendations to help users reduce their energy consumption. These tips can be based on usage patterns and historical data.</p> </li> <li> <p>Cost Calculation Based on Usage: Calculate and display the cost of energy consumption based on usage. Users can input their utility rates, and the application calculates and displays the cost of energy use over time.</p> </li> <li> <p>Carbon Footprint Analysis: Analyze the carbon footprint associated with energy consumption. Show users the environmental impact of their energy use and provide suggestions for reducing carbon emissions.</p> </li> </ul> <p>#### C/C++ Specific Details:</p> <ul> <li> <p>Use file handling to store user profiles, energy consumption data, and cost calculations in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to input data, view energy usage, and receive tips and reports.</p> </li> </ul> <p>#### Java Specific Details:</p> <ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul> <p>#### C# Specific Details:</p> <ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to set energy-saving goals, view historical consumption trends, and receive notifications or alerts when energy usage exceeds predefined thresholds. Ensure that the application helps users make informed decisions about their energy consumption and contributes to environmental sustainability.</p> <p></p>"},{"location":"project-guide/#16-kids-activity-planner","title":"16-Kids' Activity Planner:","text":"<ul> <li> <p>Educational resource integration.</p> </li> <li> <p>Scheduling activities and playdates.</p> </li> <li> <p>Development milestone tracker.</p> </li> <li> <p>Parental notes and reminders.</p> </li> </ul>"},{"location":"project-guide/#common-features_15","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow parents or caregivers to create accounts to personalize the activity planning for their children. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Scheduling Activities and Playdates: Implement a calendar or scheduling system where parents can plan and schedule activities, playdates, and events for their kids. Parents can set date, time, location, and descriptions for each activity.</p> </li> <li> <p>Educational Resource Integration: Integrate educational resources such as educational games, videos, or articles relevant to children's    development. Parents can access and share these resources with their kids.</p> </li> <li> <p>Development Milestone Tracker: Provide a milestone tracking feature that helps parents monitor their child's developmental progress. Parents can record and view milestones achieved in areas like language development, motor skills, and social interactions.</p> </li> <li> <p>Parental Notes and Reminders: Allow parents to add notes and reminders related to their children's activities and development. These can include specific instructions, appointments, or important dates.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_14","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, activity schedules, milestone records, and notes in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan activities, track milestones, and view reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_14","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_14","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a child-friendly interface for age-appropriate educational resources, a growth chart to visualize development progress, and the ability to share activities and milestones with other family members or caregivers. Ensure that the application supports parents in planning engaging and educational activities for their kids and helps track their developmental milestones.</p> <p></p>"},{"location":"project-guide/#17-freelance-client-manager","title":"17-Freelance Client Manager:","text":"<ul> <li> <p>Client information storage.</p> </li> <li> <p>Project tracking and deadlines.</p> </li> <li> <p>Payment reminders.</p> </li> <li> <p>Communication log.</p> </li> </ul>"},{"location":"project-guide/#common-features_16","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow freelancers to create accounts to personalize their client management and project tracking. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Client Information Storage: Implement a system for storing client information, including contact details, project history, and any specific preferences or requirements.</p> </li> <li> <p>Project Tracking and Deadlines: Provide tools for freelancers to track ongoing projects, including project names, descriptions, deadlines, and progress status. The application can help manage multiple projects simultaneously.</p> </li> <li> <p>Payment Reminders: Set up a reminder system to notify freelancers of upcoming payment deadlines or milestones. Users can configure payment reminders based on project terms.</p> </li> <li> <p>Communication Log: Create a log for recording and storing communication with clients. This can include emails, messages, and notes related to specific projects or clients.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_15","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, client data, project details, payment records, and communication logs in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to add and manage client information, track projects, and set payment reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_15","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_15","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to generate invoices, track expenses related to freelance work, and export reports for financial analysis. Ensure that the application helps freelancers stay organized, meet deadlines, and effectively manage client relationships.</p> <p></p>"},{"location":"project-guide/#18-personal-reading-challenge-tracker","title":"18-Personal Reading Challenge Tracker:","text":"<ul> <li> <p>Setting reading goals.</p> </li> <li> <p>Tracking books read.</p> </li> <li> <p>Sharing reviews and ratings.</p> </li> <li> <p>Generating reading statistics.</p> </li> </ul>"},{"location":"project-guide/#common-features_17","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts for personalized reading challenge tracking and sharing. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Setting Reading Goals: Implement a system where users can set reading goals for a specific time period (e.g., yearly, monthly, or custom). Goals can include the number of books to read or reading time targets.</p> </li> <li> <p>Tracking Books Read: Provide a way for users to log and track the books they've read. Users can record book titles, authors, genres, and dates of completion.</p> </li> <li> <p>Sharing Reviews and Ratings: Allow users to write book reviews and provide ratings for the books they've read. Users can share their reviews with others in the community.</p> </li> <li> <p>Generating Reading Statistics: Generate statistics and charts to show users their reading progress. This can include the number of books read, reading time, genres explored, and more.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_16","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, reading goals, book records, reviews, and statistics in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to set goals, log books, write reviews, and view reading statistics.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_16","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_16","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a book recommendation system based on reading preferences, the ability to join or create reading challenges with friends, and the option to export reading statistics to share on social media. Ensure that the application motivates users to achieve their reading goals and provides a platform for discussing books and sharing recommendations with others.</p> <p></p>"},{"location":"project-guide/#19-greenhouse-management-tool","title":"19-Greenhouse Management Tool:","text":"<ul> <li> <p>Monitoring plant growth.</p> </li> <li> <p>Watering and fertilization schedule.</p> </li> <li> <p>Pest and disease log.</p> </li> <li> <p>Climate control settings.</p> </li> </ul>"},{"location":"project-guide/#common-features_18","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow greenhouse managers or gardeners to create accounts to personalize their greenhouse management and record-keeping. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Monitoring Plant Growth: Implement a system for monitoring the growth of plants in the greenhouse. Users can track the growth stages, health status, and any specific observations for each plant type.</p> </li> <li> <p>Watering and Fertilization Schedule: Provide tools for setting up watering and fertilization schedules based on plant type, soil moisture, and growth stage. Users can receive notifications when it's time to water or fertilize.</p> </li> <li> <p>Pest and Disease Log: Create a log for recording instances of pests and diseases affecting plants. Users can document the issue, treatment applied, and the outcome. This helps in identifying recurring problems.</p> </li> <li> <p>Climate Control Settings: Allow users to manage climate control settings such as temperature, humidity, and ventilation. Users can set ideal conditions for different plant types and receive alerts for climate anomalies.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_17","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, plant growth data, watering schedules, pest logs, and climate control settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to monitor plant growth, set schedules, and record pest and disease occurrences.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_17","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_17","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like data visualization (e.g., charts showing plant growth trends), plant-specific care guides, and the ability to export data for analysis or sharing with gardening communities. Ensure that the application helps greenhouse managers maintain healthy and thriving plants while effectively managing greenhouse conditions.</p> <p></p>"},{"location":"project-guide/#20-music-festival-planner","title":"20-Music Festival Planner:","text":"<ul> <li> <p>Band and artist management.</p> </li> <li> <p>Scheduling performances.</p> </li> <li> <p>Ticket sales tracking.</p> </li> <li> <p>Vendor and sponsor coordination.</p> </li> </ul>"},{"location":"project-guide/#common-features_19","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow festival organizers to create accounts to personalize their festival planning and record-keeping. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Band and Artist Management: Implement a system for managing information about bands and artists scheduled to perform. Users can enter details like band names, genres, contact information, and performance contracts.</p> </li> <li> <p>Scheduling Performances: Create a scheduling feature where festival organizers can schedule performances, set stage times, and create a festival lineup. Users can view the festival schedule with performance details.</p> </li> <li> <p>Ticket Sales Tracking: Track ticket sales, including the number of tickets sold, revenue generated, and attendee demographics. Users can access real-time sales data and generate reports.</p> </li> <li> <p>Vendor and Sponsor Coordination: Include tools for coordinating vendors and sponsors. Users can manage vendor applications, track sponsor agreements, and ensure that all necessary arrangements are made.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_18","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, band/artist data, performance schedules, ticket sales records, and vendor/sponsor information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage festival details, schedule performances, and track ticket sales.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_18","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_18","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like marketing and promotion tools, a budget tracker, and a map layout of the festival grounds. Additionally, provide communication features to facilitate coordination with bands, vendors, and sponsors. Ensure that the application streamlines the festival planning process and helps organizers deliver a successful event.</p> <p></p>"},{"location":"project-guide/#21-public-transportation-scheduler","title":"21-Public Transportation Scheduler:","text":"<ul> <li> <p>Bus and train schedules.</p> </li> <li> <p>Route planning.</p> </li> <li> <p>Fare calculation.</p> </li> <li> <p>Delay and disruption alerts.</p> </li> </ul>"},{"location":"project-guide/#common-features_20","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application. This can help personalize transportation planning and tracking.</p> </li> <li> <p>Bus and Train Schedules: Integrate and display real-time or updated schedules for buses and trains. Users can search for routes, view departure times, and plan their journeys.</p> </li> <li> <p>Route Planning: Provide a route planning feature where users can enter their starting and ending points, and the application suggests the most efficient public transportation routes, including transfers and walking directions.</p> </li> <li> <p>Fare Calculation: Calculate and display fare information based on the selected routes, ticket types, and any applicable discounts or promotions. Users can estimate the cost of their journey.</p> </li> <li> <p>Delay and Disruption Alerts: Implement a system that provides users with alerts or notifications about delays, disruptions, or service changes affecting their planned routes. These updates can be sourced from transportation authorities or crowd-sourced data.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_19","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, route data, fare information, and transportation alerts in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan routes, calculate fares, and receive alerts.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_19","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_19","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to save favorite routes, provide real-time tracking of public transportation vehicles, and integrate with payment systems for purchasing tickets or passes within the app. Ensure that the application helps users navigate public transportation systems efficiently and stay informed about any disruptions in their travel plans.</p> <p></p>"},{"location":"project-guide/#22-local-farmers-market-directory","title":"22-Local Farmer's Market Directory:","text":"<ul> <li> <p>Listing of local vendors and products.</p> </li> <li> <p>Seasonal produce guide.</p> </li> <li> <p>Price comparison.</p> </li> <li> <p>Market hours and locations.</p> </li> </ul>"},{"location":"project-guide/#common-features_21","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their farmer's market experience, save favorite vendors, and track their purchases. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Listing of Local Vendors and Products: Implement a directory of local farmers, vendors, and their products available at the market. Users can browse through vendor profiles and product listings.</p> </li> <li> <p>Seasonal Produce Guide: Provide a guide that highlights seasonal produce availability. Users can learn about which fruits and vegetables are in season at different times of the year.</p> </li> <li> <p>Price Comparison: Enable users to compare prices for similar products from different vendors. This feature helps users make informed purchasing decisions.</p> </li> <li> <p>Market Hours and Locations: Display information about various farmer's markets, including their hours of operation, locations, and any special events or promotions.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_20","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, vendor and product data, seasonal produce guides, and market information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to browse vendors, view produce guides, compare prices, and access market details.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_20","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_20","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a map with directions to the farmer's markets, user reviews and ratings for vendors and products, and the ability to create shopping lists based on the selected produce. Ensure that the application promotes local farming and helps users make fresh and sustainable food choices.</p> <p></p>"},{"location":"project-guide/#23-personal-music-library-organizer","title":"23-Personal Music Library Organizer:","text":"<ul> <li> <p>Cataloging music collection.</p> </li> <li> <p>Playlist creation and management.</p> </li> <li> <p>Metadata editing (artist, album, genre).</p> </li> <li> <p>Music recommendation based on preferences.</p> </li> </ul>"},{"location":"project-guide/#common-features_22","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their music library organization, playlists, and recommendations. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Cataloging Music Collection: Implement a system for users to catalog their music collection, including adding songs, albums, and artists. Users can import music files or manually enter details.</p> </li> <li> <p>Playlist Creation and Management: Provide tools for creating and managing playlists. Users can add songs from their catalog, reorder tracks, and create themed playlists.</p> </li> <li> <p>Metadata Editing (Artist, Album, Genre): Enable users to edit and update metadata for their music, including artist names, album titles, and genres. This ensures accurate organization and sorting.</p> </li> <li> <p>Music Recommendation based on Preferences: Implement a recommendation engine that suggests songs, albums, or artists based on the user's listening history and preferences. Users can discover new music.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_21","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, music library data, playlist information, metadata changes, and recommendation history in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to catalog music, create playlists, edit metadata, and receive music recommendations.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_21","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_21","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like album art display, the ability to rate songs, and integration with online music databases for automatic metadata retrieval. Additionally, offer sharing options for playlists and music recommendations with friends or social media. Ensure that the application helps users organize and enjoy their music collection efficiently.</p> <p></p>"},{"location":"project-guide/#24-virtual-bookshelf-organizer","title":"24-Virtual Bookshelf Organizer:","text":"<ul> <li> <p>Digital cataloging of personal book collection.</p> </li> <li> <p>Book lending and return tracking.</p> </li> <li> <p>Wish list management.</p> </li> <li> <p>Book recommendations based on reading history.</p> </li> </ul>"},{"location":"project-guide/#common-features_23","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their bookshelf organization, lending, and recommendations. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Digital Cataloging of Personal Book Collection: Implement a system for users to catalog their personal book collections. Users can enter book titles, authors, genres, and cover images. ISBN or barcode scanning can simplify data entry.</p> </li> <li> <p>Book Lending and Return Tracking: Provide tools for users to track book loans to friends or family members. Users can record who borrowed a book, set due dates, and receive notifications for book returns.</p> </li> <li> <p>Wish List Management: Enable users to create and manage wish lists of books they want to read or acquire. Users can add books to their wish list and mark them as acquired when purchased or borrowed.</p> </li> <li> <p>Book Recommendations based on Reading History: Implement a recommendation engine that suggests books based on the user's reading history and preferences. Users can discover new titles and authors.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_22","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, book catalog data, lending and return records, wish lists, and recommendation history in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to catalog books, manage lending, handle wish lists, and receive book recommendations.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_22","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_22","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to rate and review books, search for books by various criteria, and import book details from online databases. Additionally, offer sharing options for book recommendations with friends or social media. Ensure that the application helps users organize their reading materials and discover new books to enjoy.</p> <p></p>"},{"location":"project-guide/#25-basic-genealogy-tracker","title":"25-Basic Genealogy Tracker:","text":"<ul> <li> <p>Family tree creation and editing.</p> </li> <li> <p>Record keeping for family history.</p> </li> <li> <p>Birthday and anniversary reminders.</p> </li> <li> <p>Import/export GEDCOM files.</p> </li> </ul>"},{"location":"project-guide/#common-features_24","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their genealogy tracking and record-keeping. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Family Tree Creation and Editing: Implement tools for creating and editing family trees. Users can add family members, relationships, and relevant details like birth and death dates.</p> </li> <li> <p>Record Keeping for Family History: Provide a system for users to record family history information, including stories, photos, documents, and other historical records related to family members.</p> </li> <li> <p>Birthday and Anniversary Reminders: Set up a reminder system to notify users of upcoming family member birthdays and anniversaries. Users can configure reminders for important dates.</p> </li> <li> <p>Import/Export GEDCOM Files: Support the import and export of GEDCOM (Genealogical Data Communication) files, which are commonly used for sharing genealogical data with other software and users.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_23","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, family tree data, family history records, reminder settings, and GEDCOM files in binary or text format.</p> </li> <li> <p>Create a text-based interface for the console application to create and edit family trees, add family history records, manage reminders, and import/export GEDCOM files.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_23","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_23","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a family member search function, charts and visual representations of family trees, and the ability to generate reports or family history books. Ensure that the application helps users document and preserve their family's genealogical information and history.</p> <p></p>"},{"location":"project-guide/#26-volunteer-event-coordinator","title":"26-Volunteer Event Coordinator:","text":"<ul> <li> <p>Event creation and scheduling.</p> </li> <li> <p>Volunteer registration and assignment.</p> </li> <li> <p>Hours and contribution tracking.</p> </li> <li> <p>Communication platform for updates and alerts.</p> </li> </ul>"},{"location":"project-guide/#common-features_25","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow event organizers and volunteers to create accounts for personalized event coordination and participation. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Event Creation and Scheduling: Implement a system for event organizers to create and schedule volunteer events. Organizers can set event details, dates, times, locations, and roles needed.</p> </li> <li> <p>Volunteer Registration and Assignment: Provide tools for volunteers to register for events and for organizers to assign volunteers to specific roles or tasks within events.</p> </li> <li> <p>Hours and Contribution Tracking: Enable organizers to track volunteer hours and contributions during events. Volunteers can log their hours and provide details of their work.</p> </li> <li> <p>Communication Platform for Updates and Alerts: Include a communication platform for sending updates, reminders, and alerts to registered volunteers. Organizers can inform volunteers about event changes or important information.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_24","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, event data, volunteer registrations, hours logged, and communication records in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to create events, manage volunteer registrations, track hours, and send alerts.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_24","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_24","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like event performance reports, volunteer performance recognition, and a volunteer rating system. Additionally, ensure that the application facilitates efficient communication between organizers and volunteers, making it easier to coordinate and manage volunteer events effectively.</p> <p></p>"},{"location":"project-guide/#27-personal-finance-advisor","title":"27-Personal Finance Advisor:","text":"<ul> <li> <p>Budget planning and tracking.</p> </li> <li> <p>Investment portfolio management.</p> </li> <li> <p>Financial goal setting.</p> </li> <li> <p>Debt reduction strategies.</p> </li> </ul>"},{"location":"project-guide/#common-features_26","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their financial planning, investment management, and goal tracking. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Budget Planning and Tracking: Implement a budgeting tool where users can create budgets, categorize expenses, and track income and expenditures. Users can set spending limits and receive alerts when they exceed them.</p> </li> <li> <p>Investment Portfolio Management: Provide tools for users to manage their investment portfolios. Users can track investments, view portfolio performance, and receive insights and recommendations.</p> </li> <li> <p>Financial Goal Setting: Allow users to set financial goals, such as saving for a home, retirement, or a vacation. Users can track their progress and receive suggestions on how to achieve their goals.</p> </li> <li> <p>Debt Reduction Strategies: Offer strategies for debt reduction, including creating payoff plans, tracking debts, and optimizing repayment strategies. Users can visualize their debt reduction progress.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_25","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, budget data, investment portfolio information, goal progress, and debt reduction strategies in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan budgets, manage investments, set goals, and track debt reduction.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_25","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_25","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like expense analysis, investment risk assessment, and the ability to sync with bank accounts for automatic expense tracking. Additionally, provide educational resources on financial planning and investment strategies. Ensure that the application helps users make informed financial decisions and work toward their financial goals.</p> <p></p>"},{"location":"project-guide/#28-custom-workout-routine-planner","title":"28-Custom Workout Routine Planner:","text":"<ul> <li> <p>Personalized workout creation.</p> </li> <li> <p>Exercise demonstration library.</p> </li> <li> <p>Progress tracking and reporting.</p> </li> <li> <p>Injury prevention and recovery tips.</p> </li> </ul>"},{"location":"project-guide/#common-features_27","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their workout routines, track progress, and access injury prevention and recovery tips. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Personalized Workout Creation: Implement a system where users can create personalized workout routines based on their fitness goals, preferences, and available equipment. Users can select exercises, set repetitions and sets, and schedule workouts.</p> </li> <li> <p>Exercise Demonstration Library: Provide a library of exercise demonstrations with videos or images to ensure users perform exercises correctly. Users can access detailed instructions on how to perform each exercise safely and effectively.</p> </li> <li> <p>Progress Tracking and Reporting: Enable users to track their workout progress by recording sets, repetitions, and weights lifted. Generate reports and visualizations to show progress over time and help users adjust their routines accordingly.</p> </li> <li> <p>Injury Prevention and Recovery Tips: Include a section with tips and advice on injury prevention, proper warm-up and cool-down techniques, and strategies for recovering from injuries.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_26","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, workout routines, exercise data, progress records, and injury prevention information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to create workouts, track progress, access exercise demonstrations, and read injury prevention tips.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_26","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_26","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like workout scheduling, nutrition tracking, and the ability to set fitness goals and milestones. Additionally, provide guidance on proper form and technique for exercises, and offer adaptive workout recommendations based on users' progress. Ensure that the application helps users achieve their fitness goals while prioritizing safety and injury prevention.</p> <p></p>"},{"location":"project-guide/#29-local-library-search-tool","title":"29-Local Library Search Tool:","text":"<ul> <li> <p>Catalog search for books, movies, music.</p> </li> <li> <p>Reservation and renewal system.</p> </li> <li> <p>Event and workshop schedule.</p> </li> <li> <p>Library location and hours information.</p> </li> </ul>"},{"location":"project-guide/#common-features_28","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their library experience. This can include saving favorite books, managing reservations, and receiving event notifications. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Catalog Search for Books, Movies, and Music: Implement a search functionality where users can search for books, movies, and music available in the library. Users can search by title, author, genre, or other relevant criteria.</p> </li> <li> <p>Reservation and Renewal System: Allow users to reserve library materials and renew borrowed items through the application. Users can receive notifications about due dates and renew items as needed.</p> </li> <li> <p>Event and Workshop Schedule: Provide information about upcoming library events, workshops, and programs. Users can view event details, register for events, and receive reminders.</p> </li> <li> <p>Library Location and Hours Information: Display information about library locations, including addresses, hours of operation, and contact details. Users can easily find the nearest library branch.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_27","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, catalog data, reservation records, event schedules, and library location information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to search the catalog, manage reservations, view event schedules, and access library location details.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_27","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_27","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like user reviews and ratings for library materials, integration with e-book lending services, and a virtual library card for easy access to library services. Additionally, provide a map or directions to library locations and offer reading recommendations based on users' interests. Ensure that the application makes it convenient for users to access and utilize library resources and services.</p> <p></p>"},{"location":"project-guide/#30-camping-and-hiking-trip-planner","title":"30-Camping and Hiking Trip Planner:","text":"<ul> <li> <p>Trail database and recommendations.</p> </li> <li> <p>Gear checklist and management.</p> </li> <li> <p>Weather forecasts and alerts.</p> </li> <li> <p>Emergency contact information storage.</p> </li> </ul>"},{"location":"project-guide/#common-features_29","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their camping and hiking planning. This can include saving favorite trails, managing gear lists, and accessing weather forecasts. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Trail Database and Recommendations: Implement a database of hiking trails, including details such as trail difficulty, length, elevation gain, and user ratings. Offer trail recommendations based on user preferences and location.</p> </li> <li> <p>Gear Checklist and Management: Provide users with pre-made gear checklists for various types of trips (e.g., camping, backpacking, day hikes). Allow users to customize and save gear lists for their specific needs.</p> </li> <li> <p>Weather Forecasts and Alerts: Integrate with weather forecasting services to provide current weather conditions, forecasts, and alerts for the selected hiking location. Users can receive weather-related notifications.</p> </li> <li> <p>Emergency Contact Information Storage: Allow users to store emergency contact information, including names, phone numbers, and medical information. This information can be accessed in case of emergencies during the trip.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_28","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, trail data, gear checklists, weather forecasts, and emergency contact information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to search trails, manage gear lists, check weather forecasts, and access emergency contact information.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_28","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_28","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like GPS location tracking, trail maps, wildlife and plant identification guides, and community forums for sharing trip experiences and tips. Additionally, provide safety recommendations and outdoor ethics guidelines to ensure users have a safe and responsible camping and hiking experience.</p> <p></p>"},{"location":"project-guide/#31-simple-weather-station","title":"31-Simple Weather Station:","text":"<ul> <li> <p>Local weather updates.</p> </li> <li> <p>Temperature, humidity, and wind speed tracking.</p> </li> <li> <p>Severe weather alerts.</p> </li> <li> <p>Historical weather data analysis.</p> </li> </ul>"},{"location":"project-guide/#common-features_30","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their weather tracking and access historical data. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Local Weather Updates: Integrate with weather data APIs to provide real-time local weather updates, including current conditions, forecasts, and radar imagery.</p> </li> <li> <p>Temperature, Humidity, and Wind Speed Tracking: Implement sensors or data sources to track temperature, humidity, and wind speed. Users can view historical trends and current readings.</p> </li> <li> <p>Severe Weather Alerts: Offer severe weather alerts and warnings based on official sources. Users can receive notifications for events like storms, hurricanes, or extreme temperatures.</p> </li> <li> <p>Historical Weather Data Analysis: Allow users to access historical weather data and generate reports or visualizations to analyze trends, such as temperature fluctuations or annual rainfall patterns.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_29","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, weather data, historical data, and alert records in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to display weather updates, track environmental data, receive alerts, and access historical data analysis.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_29","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_29","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like customizable weather widgets, personalized weather forecasts, and a location-based weather map. Additionally, provide educational content on weather phenomena and climate science. Ensure that the application provides users with accurate and up-to-date weather information and tools for weather analysis.</p> <p></p>"},{"location":"project-guide/#32-culinary-technique-tutorial","title":"32-Culinary Technique Tutorial:","text":"<ul> <li> <p>Step-by-step cooking and baking techniques.</p> </li> <li> <p>Ingredient substitution guide.</p> </li> <li> <p>Utensil and equipment reference.</p> </li> <li> <p>Tips for recipe improvisation.</p> </li> </ul>"},{"location":"project-guide/#common-features_31","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to save their favorite techniques, access personalized tips, and receive updates. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Step-by-Step Cooking and Baking Techniques: Provide a library of culinary techniques with detailed step-by-step instructions and visual aids, such as images or videos. Users can learn how to chop, saut\u00e9, bake, and more.</p> </li> <li> <p>Ingredient Substitution Guide: Offer a guide that suggests ingredient substitutions for common and uncommon ingredients. Users can adapt recipes based on what they have on hand or dietary preferences.</p> </li> <li> <p>Utensil and Equipment Reference: Include a reference section with information on various cooking utensils and equipment, including their uses, care, and maintenance.</p> </li> <li> <p>Tips for Recipe Improvisation: Provide tips and suggestions for improvising recipes, adjusting flavors, and creating new dishes from existing ones. Users can experiment with confidence.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_30","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, technique data, substitution guides, utensil references, and improvisation tips in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to browse techniques, access substitution guides, reference utensils, and get improvisation tips.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_30","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_30","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like recipe collections, a cooking timer, and a meal planning tool. Additionally, offer interactive quizzes and challenges to reinforce culinary knowledge. Ensure that the application empowers users to become more skilled and creative in the kitchen, whether they are beginners or experienced cooks.</p> <p></p>"},{"location":"project-guide/#33-basic-stock-market-tracker","title":"33-Basic Stock Market Tracker:","text":"<ul> <li> <p>Stock price monitoring.</p> </li> <li> <p>Portfolio management.</p> </li> <li> <p>News and market trend analysis.</p> </li> <li> <p>Personalized alerts for stock movement.</p> </li> </ul>"},{"location":"project-guide/#common-features_32","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their stock portfolio, receive alerts, and access news and analysis. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Stock Price Monitoring: Integrate with stock market APIs to provide real-time or delayed stock price updates. Users can search for and track the performance of individual stocks.</p> </li> <li> <p>Portfolio Management: Implement tools for users to create and manage their stock portfolios. Users can add, edit, or remove stocks from their portfolio and view portfolio performance.</p> </li> <li> <p>News and Market Trend Analysis: Provide access to financial news articles, market analysis reports, and charts displaying market trends. Users can stay informed about market developments.</p> </li> <li> <p>Personalized Alerts for Stock Movement: Allow users to set personalized alerts for specific stock price movements (e.g., price reaches a certain level or percentage change). Users receive notifications when conditions are met.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_31","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, stock portfolio data, stock price history, news articles, and alert settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to monitor stock prices, manage portfolios, access news and analysis, and set alerts.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_31","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_31","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like stock performance analysis tools, historical price charting, and integration with financial data providers for real-time market data. Additionally, provide educational content on stock market basics and investment strategies. Ensure that the application helps users make informed investment decisions and stay updated on market developments.</p> <p></p>"},{"location":"project-guide/#34-personal-mindfulness-and-meditation-guide","title":"34-Personal Mindfulness and Meditation Guide:","text":"<ul> <li> <p>Guided meditation sessions.</p> </li> <li> <p>Mindfulness exercises.</p> </li> <li> <p>Tracking mood and stress levels.</p> </li> <li> <p>Customizable meditation timer.</p> </li> </ul>"},{"location":"project-guide/#common-features_33","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to save their meditation progress, track mood, and access personalized recommendations. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Guided Meditation Sessions: Provide a library of guided meditation sessions led by experienced instructors. Users can choose sessions based on themes like relaxation, focus, or stress reduction.</p> </li> <li> <p>Mindfulness Exercises: Offer mindfulness exercises and practices that help users cultivate mindfulness in daily life. These exercises can be brief and integrated into daily routines.</p> </li> <li> <p>Tracking Mood and Stress Levels: Implement tools for users to track their mood and stress levels over time. Users can record their emotional states before and after meditation or mindfulness exercises.</p> </li> <li> <p>Customizable Meditation Timer: Allow users to set their meditation duration and customize the meditation timer with options like interval chimes, background sounds, and visual cues.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_32","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, meditation session data, mood and stress records, and meditation timer settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to access guided meditation sessions, practice mindfulness exercises, track mood, and use the meditation timer.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_32","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_32","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like progress tracking, meditation history analysis, and integration with wearable devices for tracking physiological data during meditation. Additionally, provide educational content on mindfulness concepts and their benefits. Ensure that the application helps users cultivate mindfulness and manage stress effectively.</p> <p></p>"},{"location":"project-guide/#35-comic-book-collection-manager","title":"35-Comic Book Collection Manager:","text":"<ul> <li> <p>Cataloging comic book collection.</p> </li> <li> <p>Wishlist and trade list management.</p> </li> <li> <p>Value estimation based on market trends.</p> </li> <li> <p>Information on comic book events and conventions.</p> </li> </ul>"},{"location":"project-guide/#common-features_34","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their comic book collection, wishlist, and trade list. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Cataloging Comic Book Collection: Implement a system for users to catalog their comic book collections, including details such as title, issue number, condition, and cover art. Users can organize by series, publisher, or other criteria.</p> </li> <li> <p>Wishlist and Trade List Management: Enable users to create and manage wishlists of comics they want to acquire and trade lists for comics they are willing to trade. Users can track their progress in completing series.</p> </li> <li> <p>Value Estimation based on Market Trends: Integrate with comic book market databases or pricing guides to provide estimated values for users' comic books based on market trends and conditions.</p> </li> <li> <p>Information on Comic Book Events and Conventions: Offer information about upcoming comic book events, conventions, signings, and releases. Users can plan attendance and discover new comics.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_33","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, comic book collection data, wishlist, trade list, value estimations, and event information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to catalog comic books, manage wishlists and trade lists, access value estimations, and view event details.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_33","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_33","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like comic book cover scanning with image recognition, social sharing of collections, and a comic book grading guide. Additionally, provide access to online comic book marketplaces for buying, selling, and trading comics. Ensure that the application helps users manage their collections effectively and stay informed about the comic book world.</p> <p></p>"},{"location":"project-guide/#36-second-hand-goods-exchange-platform","title":"36-Second-hand Goods Exchange Platform:","text":"<ul> <li> <p>Listing items for exchange or giveaway.</p> </li> <li> <p>Search and filter function for items.</p> </li> <li> <p>User rating and review system.</p> </li> <li> <p>Exchange agreement and meeting coordination.</p> </li> </ul>"},{"location":"project-guide/#common-features_35","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their exchange listings, track reviews, and coordinate exchanges. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Listing Items for Exchange or Giveaway: Implement a system for users to list items they want to exchange or give away. Users can provide item details, photos, and exchange preferences.</p> </li> <li> <p>Search and Filter Function for Items: Offer search and filter options to help users find specific items or browse categories. Users can filter by location, item type, and other relevant criteria.</p> </li> <li> <p>User Rating and Review System: Enable users to rate and review their exchange partners. This helps build trust within the community and encourages responsible exchanges.</p> </li> <li> <p>Exchange Agreement and Meeting Coordination: Provide tools for users to discuss and agree upon the terms of their exchange. Users can coordinate meeting times and locations securely.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_34","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, exchange listings, reviews, and exchange agreements in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to list items, search for items, manage user ratings and reviews, and coordinate exchanges.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_34","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_34","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like messaging and chat functionality between users, item verification mechanisms, and a user reputation system based on successful exchanges. Additionally, ensure that the application promotes a safe and friendly environment for users to exchange their second-hand goods or give away items they no longer need.</p> <p></p>"},{"location":"project-guide/#37-basic-language-translator","title":"37-Basic Language Translator:","text":"<ul> <li> <p>Text input and translation.</p> </li> <li> <p>Language learning tips.</p> </li> <li> <p>Common phrase library.</p> </li> <li> <p>Pronunciation guide.</p> </li> </ul>"},{"location":"project-guide/#common-features_36","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to save their translation history, access language learning resources, and customize preferences. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Text Input and Translation: Implement a text input interface where users can enter text in one language and receive translations in their chosen target language. Use language translation APIs to perform translations.</p> </li> <li> <p>Language Learning Tips: Provide language learning tips and resources to help users improve their language skills. These can include grammar lessons, vocabulary building exercises, and cultural insights.</p> </li> <li> <p>Common Phrase Library: Offer a library of common phrases and expressions in different languages. Users can browse and learn useful phrases for everyday communication.</p> </li> <li> <p>Pronunciation Guide: Include a pronunciation guide with audio samples to help users learn how to correctly pronounce words and phrases in their target language.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_35","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, translation history, language learning resources, phrase library data, and pronunciation guides in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to input text, receive translations, access language learning tips, and practice pronunciation.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_35","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_35","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like language detection, language quizzes, and interactive language exercises. Additionally, provide access to online language learning courses and forums for language enthusiasts to connect and practice. Ensure that the application helps users learn and practice languages effectively and with accurate translations.</p> <p></p>"},{"location":"project-guide/#38-pet-care-reminder-system","title":"38-Pet Care Reminder System:","text":"<ul> <li> <p>Feeding and medication schedules.</p> </li> <li> <p>Veterinary appointment tracking.</p> </li> <li> <p>Pet exercise and grooming reminders.</p> </li> <li> <p>Pet birthday and adoption anniversary celebrations.</p> </li> </ul>"},{"location":"project-guide/#common-features_37","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their pet care reminders, track medical records, and set preferences. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Feeding and Medication Schedules: Enable users to create and manage feeding schedules for their pets, including meal times and portion sizes. Users can also set medication reminders with dosage instructions.</p> </li> <li> <p>Veterinary Appointment Tracking: Implement a calendar or appointment system for users to schedule and track veterinary appointments, vaccinations, and check-ups for their pets.</p> </li> <li> <p>Pet Exercise and Grooming Reminders: Provide tools for users to set exercise and grooming routines for their pets, with reminders for activities like walks, playtime, and grooming sessions.</p> </li> <li> <p>Pet Birthday and Adoption Anniversary Celebrations: Allow users to record and celebrate their pet's birthday and adoption anniversary with reminders and customizable celebrations.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_36","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, pet care schedules, veterinary appointment data, exercise and grooming reminders, and celebration records in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage pet care schedules, track appointments, set reminders, and celebrate pet milestones.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_36","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_36","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like pet health record keeping, pet behavior tracking, and integration with pet supply stores for ordering pet supplies and medications. Additionally, provide educational content on pet care, nutrition, and training tips. Ensure that the application helps users keep their pets healthy, happy, and well-cared for.</p> <p></p>"},{"location":"project-guide/#39-indoor-plant-care-guide","title":"39-Indoor Plant Care Guide:","text":"<ul> <li> <p>Plant species information.</p> </li> <li> <p>Watering and fertilization schedule.</p> </li> <li> <p>Sunlight and temperature requirements.</p> </li> <li> <p>Pest and disease management tips.</p> </li> </ul>"},{"location":"project-guide/#common-features_38","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their plant care information, track their indoor plants, and set reminders. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Plant Species Information: Provide a database of indoor plant species with detailed information about each plant, including common names,    scientific names, growth habits, and care requirements.</p> </li> <li> <p>Watering and Fertilization Schedule: Enable users to create customized watering and fertilization schedules for their indoor plants. Users can set frequency and quantity based on plant type and individual needs.</p> </li> <li> <p>Sunlight and Temperature Requirements: Offer guidance on the sunlight and temperature preferences of various indoor plant species. Users can understand the ideal conditions for their plants.</p> </li> <li> <p>Pest and Disease Management Tips: Include a section with advice on identifying and managing common pests and diseases that affect indoor plants. Users can learn how to keep their plants healthy.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_37","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, plant species data, watering and fertilization schedules, sunlight and temperature requirements, and pest management tips in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to access plant care information, set schedules, receive reminders, and access pest management tips.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_37","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_37","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like photo uploads for plant identification, a plant care journal, and integration with local weather data for temperature and humidity recommendations. Additionally, provide educational content on indoor gardening techniques and tips for creating a thriving indoor plant environment. Ensure that the application helps users successfully care for their indoor plants and keep them healthy and vibrant.</p> <p></p>"},{"location":"project-guide/#40-bicycle-maintenance-and-route-planner","title":"40-Bicycle Maintenance and Route Planner:","text":"<ul> <li> <p>Bicycle maintenance log.</p> </li> <li> <p>Cycling route planning and tracking.</p> </li> <li> <p>Performance statistics (speed, distance).</p> </li> <li> <p>Gear and equipment checklist.</p> </li> </ul>"},{"location":"project-guide/#common-features_39","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their maintenance records, save routes, and track their cycling performance. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Bicycle Maintenance Log: Implement a maintenance log where users can record and track maintenance activities such as tire changes, brake adjustments, and oiling. Set reminders for upcoming maintenance tasks.</p> </li> <li> <p>Cycling Route Planning and Tracking: Provide tools for users to plan cycling routes, either by entering addresses or selecting points of interest. Users can also track their progress during rides using GPS data.</p> </li> <li> <p>Performance Statistics (Speed and Distance): Display real-time and historical performance statistics such as speed, distance, elevation, and time spent cycling. Users can analyze their progress and set goals.</p> </li> <li> <p>Gear and Equipment Checklist: Allow users to create and manage checklists for gear and equipment needed for rides. This can include helmets, water bottles, spare tubes, and more.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_38","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, maintenance logs, route data, performance statistics, and gear checklists in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to record maintenance, plan and track routes, view performance data, and manage gear checklists.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_38","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_38","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like weather forecasts for route planning, integration with cycling tracking devices, and social sharing of routes and achievements. Additionally, provide educational content on bicycle maintenance best practices and safety tips. Ensure that the application helps cyclists maintain their bikes, plan enjoyable routes, and track their performance effectively.</p> <p></p>"},{"location":"project-guide/#41-book-club-management-system","title":"41-Book Club Management System:","text":"<ul> <li> <p>Member management: Add, update, delete member details.</p> </li> <li> <p>Reading schedule: Organize and track book reading schedules.</p> </li> <li> <p>Meeting planner: Schedule and manage book club meetings.</p> </li> <li> <p>Discussion forum: Enable members to post and respond to discussions.</p> </li> </ul>"},{"location":"project-guide/#common-features_40","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to participate in the book club, manage reading schedules, and engage in discussions. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Member Management: Implement tools for administrators to add, update, and delete member details, including names, contact information, and reading preferences. Members can view and edit their profiles.</p> </li> <li> <p>Reading Schedule: Enable members to organize and track their reading schedules for selected books. Users can set reading goals, track progress, and receive reminders for upcoming reading assignments.</p> </li> <li> <p>Meeting Planner: Provide a scheduling system for book club meetings, including date, time, location, and agenda details. Members can RSVP and receive meeting notifications.</p> </li> <li> <p>Discussion Forum: Create a discussion forum where members can post topics related to books, share thoughts, and engage in discussions. Users can respond to posts, like comments, and follow topics of interest.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_39","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, member data, reading schedules, meeting details, and discussion forum posts in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage member details, reading schedules, meeting planning, and access the discussion forum.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_39","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_39","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like book recommendations, voting on book selections, and integration with e-book platforms for easy access to reading materials. Additionally, provide tools for tracking reading statistics, such as reading speed and favorite genres. Ensure that the application fosters a vibrant book club community where members can connect and discuss literature effectively.</p> <p></p>"},{"location":"project-guide/#42-basic-task-scheduler","title":"42-Basic Task Scheduler:","text":"<ul> <li> <p>Task creation: Add and categorize tasks.</p> </li> <li> <p>Deadline setting: Assign deadlines to tasks.</p> </li> <li> <p>Reminder system: Notify users of upcoming deadlines.</p> </li> <li> <p>Task prioritization: Mark tasks by importance.</p> </li> </ul>"},{"location":"project-guide/#common-features_41","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their task lists, set reminders, and manage their tasks. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Task Creation: Implement tools for users to create tasks, including task names, descriptions, categories, and due dates. Users can organize    tasks by categories such as work, personal, and more.</p> </li> <li> <p>Deadline Setting: Enable users to assign deadlines to tasks. Users can specify due dates and times for each task.</p> </li> <li> <p>Reminder System: Provide a reminder system that notifies users of upcoming task deadlines. Users can receive notifications via email, SMS, or in-app notifications.</p> </li> <li> <p>Task Prioritization: Allow users to prioritize tasks by marking them as high, medium, or low importance. Users can also reorder tasks within categories based on priority.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_40","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, task data, deadline information, reminder settings, and task priorities in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to create and manage tasks, set reminders, prioritize tasks, and view upcoming deadlines.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_40","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_40","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like recurring tasks, task progress tracking, and integration with calendar applications. Additionally, provide tools for generating task reports, such as completed tasks and overdue tasks. Ensure that the application helps users manage their tasks efficiently and meet their deadlines effectively.</p> <p></p>"},{"location":"project-guide/#43-home-utility-tracker","title":"43-Home Utility Tracker:","text":"<ul> <li> <p>Utility logging: Record electricity, water, gas usage.</p> </li> <li> <p>Expense calculation: Calculate costs based on usage.</p> </li> <li> <p>Trend analysis: Analyze usage patterns over time.</p> </li> <li> <p>Reminder setup: Set reminders for bill payments.</p> </li> </ul>"},{"location":"project-guide/#common-features_42","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their utility tracking, view expense calculations, analyze trends, and set bill payment reminders. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Utility Logging: Implement tools for users to log their utility consumption, including electricity, water, gas, and any other utilities. Users can enter usage data regularly.</p> </li> <li> <p>Expense Calculation: Calculate utility expenses based on consumption data and current rates. Users can view expense summaries by utility type.</p> </li> <li> <p>Trend Analysis: Provide charts and graphs to help users analyze their utility usage patterns over time. Users can identify trends and make informed decisions to reduce consumption.</p> </li> <li> <p>Reminder Setup: Allow users to set reminders for bill payments, based on billing cycles or custom dates. Users can receive notifications before the due date.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_41","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, utility consumption data, expense calculations, trend analysis results, and reminder settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to log utility data, view expense calculations, analyze trends, and set bill payment reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_41","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_41","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like cost projection based on usage trends, energy-saving tips, and integration with utility provider websites for automated bill updates. Additionally, provide tools for tracking and comparing utility providers to find cost-effective options. Ensure that the application helps users manage their home utility expenses efficiently and make informed decisions about energy consumption.</p> <p></p>"},{"location":"project-guide/#44-vehicle-fuel-efficiency-tracker","title":"44-Vehicle Fuel Efficiency Tracker:","text":"<ul> <li> <p>Fuel log: Record fuel purchases and prices.</p> </li> <li> <p>Mileage tracker: Calculate mileage based on fuel and distance.</p> </li> <li> <p>Efficiency analysis: Report on fuel efficiency trends.</p> </li> <li> <p>Cost analysis: Evaluate total fuel expenditures.</p> </li> </ul>"},{"location":"project-guide/#common-features_43","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their fuel efficiency tracking, view mileage calculations, analyze efficiency trends, and assess cost data. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Fuel Log: Implement tools for users to log their fuel purchases, including the date, amount of fuel, fuel price, and odometer reading. Users can add entries whenever they refuel their vehicles.</p> </li> <li> <p>Mileage Tracker: Calculate and display mileage information based on fuel consumption and distance traveled. Users can view statistics such as miles per gallon (MPG) or kilometers per liter (KPL).</p> </li> <li> <p>Efficiency Analysis: Provide charts and graphs to help users analyze their vehicle's fuel efficiency trends over time. Users can identify patterns and make adjustments for better fuel economy.</p> </li> <li> <p>Cost Analysis: Evaluate total fuel expenditures by summing up fuel costs over a specified period. Users can see how much they spend on fuel for their vehicles.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_42","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, fuel purchase data, mileage calculations, efficiency trend data, and cost analysis results in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to log fuel purchases, calculate mileage, analyze efficiency trends, and view cost analysis reports.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_42","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_42","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like maintenance tracking, reminders for oil changes and tire rotations, and integration with GPS data for accurate distance tracking. Additionally, provide tools for comparing fuel efficiency among multiple vehicles if the user owns more than one. Ensure that the application helps users monitor their vehicle's fuel efficiency and make informed decisions to save on fuel costs.</p> <p></p>"},{"location":"project-guide/#45-local-sports-team-manager","title":"45-Local Sports Team Manager:","text":"<ul> <li> <p>Team roster: Manage player profiles and positions.</p> </li> <li> <p>Game scheduler: Organize and track game schedules.</p> </li> <li> <p>Statistic tracker: Record and analyze player performance.</p> </li> <li> <p>Communication tool: Coordinate team meetings and practices.</p> </li> </ul>"},{"location":"project-guide/#common-features_44","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to manage team information, schedule games, track statistics, and coordinate team communications. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Team Roster: Implement tools for users to manage player profiles, including names, positions, contact information, and player statistics. Users can add, edit, and remove players from the team roster.</p> </li> <li> <p>Game Scheduler: Create a scheduling system for organizing and tracking game schedules, including dates, times, opponents, and locations. Users can view upcoming games and past results.</p> </li> <li> <p>Statistic Tracker: Enable users to record and analyze player performance statistics during games. Users can track metrics such as goals scored, assists, saves, and more.</p> </li> <li> <p>Communication Tool: Provide features for coordinating team meetings, practices, and announcements. Users can send messages or notifications to team members.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_43","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, team rosters, game schedules, player statistics, and communication records in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage team rosters, schedule games, track statistics, and communicate with team members.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_43","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_43","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like player availability tracking, automatic game reminders, and integration with weather forecasts for outdoor games. Additionally, provide tools for generating player performance reports and team statistics. Ensure that the application helps team managers effectively organize and manage their local sports teams.</p> <p></p>"},{"location":"project-guide/#46-recipe-cost-calculator","title":"46-Recipe Cost Calculator:","text":"<ul> <li> <p>Ingredient management: Log and price ingredients.</p> </li> <li> <p>Recipe costing: Calculate cost per recipe.</p> </li> <li> <p>Price adjustment: Adjust costs based on ingredient changes.</p> </li> <li> <p>Budget planner: Plan meals within a budget.</p> </li> </ul>"},{"location":"project-guide/#common-features_45","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their ingredient management, calculate recipe costs, adjust prices, and plan meals within a budget. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Ingredient Management: Implement tools for users to log and price ingredients they commonly use in their recipes. Users can add new ingredients, update prices, and categorize ingredients.</p> </li> <li> <p>Recipe Costing: Enable users to create recipes by specifying ingredient quantities and units. Calculate the total cost of a recipe based on ingredient prices. Users can view the cost per serving.</p> </li> <li> <p>Price Adjustment: Provide the option to adjust ingredient costs based on changes in market prices or personal preferences. Users can update prices for individual ingredients or globally.</p> </li> <li> <p>Budget Planner: Allow users to plan meals and recipes within a specified budget. The application can provide budget recommendations based on user preferences.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_44","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, ingredient data, recipe details, price adjustments, and budget plans in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage ingredients, create recipes, calculate costs, adjust prices, and plan meals within a budget.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_44","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_44","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like recipe sharing with friends, generating shopping lists based on selected recipes, and dietary preference tracking. Additionally, provide tools for analyzing and optimizing recipes for cost and nutritional value. Ensure that the application helps users plan meals, manage their grocery expenses, and make informed choices when cooking within their budget.</p> <p></p>"},{"location":"project-guide/#47-garden-planner","title":"47-Garden Planner:","text":"<ul> <li> <p>Plant database: Record plant types and care instructions.</p> </li> <li> <p>Gardening schedule: Track planting and harvesting times.</p> </li> <li> <p>Maintenance reminders: Set reminders for watering, pruning.</p> </li> <li> <p>Garden layout: Plan and visualize garden layouts.</p> </li> </ul>"},{"location":"project-guide/#common-features_46","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their garden plans, track schedules, set reminders, and manage plant information. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Plant Database: Implement a database of plant types with detailed care instructions, including information about planting, watering, sunlight, and other care tips. Users can add, edit, and remove plants from their collection.</p> </li> <li> <p>Gardening Schedule: Provide tools for users to track planting and harvesting times for different plant types. Users can create schedules for each plant, specifying planting dates and expected harvest times.</p> </li> <li> <p>Maintenance Reminders: Set up reminders for maintenance tasks such as watering, pruning, fertilizing, and pest control. Users can receive notifications based on the schedules they create.</p> </li> <li> <p>Garden Layout: Allow users to plan and visualize garden layouts. They can design the layout of their garden beds, assign plants to specific locations, and view a visual representation of their garden.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_45","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, plant database information, gardening schedules, maintenance reminders, and garden layouts in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage plant information, schedule gardening tasks, set reminders, and plan garden layouts.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_45","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_45","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like garden journaling for keeping gardening notes, weather forecasts for planning garden activities, and integration with plant nurseries for plant ordering. Additionally, provide tools for tracking plant growth and health, and offer gardening tips and advice based on the user's plant collection. Ensure that the application helps garden enthusiasts plan and maintain their gardens effectively.</p> <p></p>"},{"location":"project-guide/#48-personal-library-catalog","title":"48-Personal Library Catalog:","text":"<ul> <li> <p>Book cataloging: Add, update, delete book entries.</p> </li> <li> <p>Loan management: Track lent and borrowed books.</p> </li> <li> <p>Wishlist: Maintain a list of desired books.</p> </li> <li> <p>Reading tracker: Log reading progress and history.</p> </li> </ul>"},{"location":"project-guide/#common-features_47","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their library catalog, track loans, maintain wishlists, and log reading progress. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Book Cataloging: Implement tools for users to add, update, and delete book entries in their personal library catalog. Users can include book details such as title, author, ISBN, genre, and cover images.</p> </li> <li> <p>Loan Management: Create a system for tracking lent and borrowed books. Users can record when they lend a book to someone or borrow a book from others, including due dates.</p> </li> <li> <p>Wishlist: Allow users to maintain a wishlist of desired books they intend to read or acquire. Users can add books to their wishlist and remove them when acquired.</p> </li> <li> <p>Reading Tracker: Provide a reading tracker that allows users to log their reading progress, mark books as \"read,\" and maintain a reading history. Users can add notes and ratings to their books.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_46","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, book catalog data, loan records, wishlists, and reading progress in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage book entries, track loans, maintain wishlists, and log reading progress.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_46","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_46","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like book recommendations based on reading history, book search and filtering options, and integration with online book databases for automatic cataloging. Additionally, provide tools for exporting and importing book catalogs to and from external formats like CSV or Excel. Ensure that the application helps users organize and enjoy their personal library effectively.</p> <p></p>"},{"location":"project-guide/#49-simple-inventory-management-for-crafters","title":"49-Simple Inventory Management for Crafters:","text":"<ul> <li> <p>Material inventory: Track crafting materials and quantities.</p> </li> <li> <p>Project tracking: Organize and monitor craft projects.</p> </li> <li> <p>Expense logging: Record costs of materials.</p> </li> <li> <p>Sales tracker: Keep track of items sold and profits.</p> </li> </ul>"},{"location":"project-guide/#common-features_48","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their material inventory, organize craft projects, log expenses, and track sales and profits. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Material Inventory: Implement tools for users to track crafting materials, including types, quantities, and purchase details. Users can add, edit, and remove materials from their inventory.</p> </li> <li> <p>Project Tracking: Create a system for organizing and monitoring craft projects. Users can associate materials with specific projects, set project goals, and track progress.</p> </li> <li> <p>Expense Logging: Enable users to record the costs of materials used in their projects. Users can link expenses to specific projects or simply log them in the material inventory.</p> </li> <li> <p>Sales Tracker: Provide features for keeping track of items sold, including quantities, prices, and sale dates. Users can calculate profits based on sales and material expenses.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_47","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, material inventory data, project details, expense records, and sales data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage material inventory, track projects, log expenses, and record sales.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_47","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_47","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a crafting calendar for scheduling project timelines, alerts for low material quantities, and integration with e-commerce platforms for online sales management. Additionally, provide tools for generating financial reports and profit analysis. Ensure that the application helps crafters effectively manage their materials, projects, expenses, and sales.</p> <p></p>"},{"location":"project-guide/#50-basic-language-learning-tool","title":"50-Basic Language Learning Tool:","text":"<ul> <li> <p>Vocabulary builder: Add and practice new words.</p> </li> <li> <p>Grammar exercises: Create and complete grammar tests.</p> </li> <li> <p>Progress tracking: Monitor learning milestones.</p> </li> <li> <p>Language resources: Compile useful language learning links.</p> </li> </ul>"},{"location":"project-guide/#common-features_49","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their language learning experience, build vocabulary, complete grammar exercises, track progress, and access language resources. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Vocabulary Builder: Implement tools for users to add new words to their vocabulary, including translations, definitions, example sentences, and pronunciation. Users can practice and review their vocabulary.</p> </li> <li> <p>Grammar Exercises: Create a system for creating and completing grammar tests and exercises. Users can choose from different grammar topics,    complete exercises, and receive feedback on their performance.</p> </li> <li> <p>Progress Tracking: Provide progress tracking features that allow users to monitor their learning milestones, track their vocabulary size, and view their performance in grammar exercises.</p> </li> <li> <p>Language Resources: Compile a collection of useful language learning links, including online courses, dictionaries, language forums, and other resources that can help users improve their language skills.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_48","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, vocabulary data, grammar exercises, progress records, and language resource links in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage vocabulary, complete grammar exercises, track progress, and access language resources.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_48","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_48","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like pronunciation practice with audio samples, flashcards for vocabulary review, and quizzes to test language proficiency. Additionally, provide tools for setting language learning goals and generating reports on progress. Ensure that the application supports users in their language learning journey and provides valuable resources for improvement.</p> <p></p>"},{"location":"project-guide/#51-personal-health-record-keeper","title":"51-Personal Health Record Keeper:","text":"<ul> <li> <p>Health logs: Record medical visits, medications, symptoms.</p> </li> <li> <p>Appointment scheduler: Track upcoming doctor appointments.</p> </li> <li> <p>Health trend analysis: Review health changes over time.</p> </li> <li> <p>Emergency information: Store critical health data.</p> </li> </ul>"},{"location":"project-guide/#common-features_50","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their health records, manage appointments, analyze health trends, and store emergency information. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Health Logs: Implement tools for users to record their medical visits, medications, symptoms, and other health-related information. Users can create detailed entries with dates and descriptions.</p> </li> <li> <p>Appointment Scheduler: Create a scheduling system for tracking upcoming doctor appointments, including appointment dates, times, and healthcare providers. Users can set reminders for appointments.</p> </li> <li> <p>Health Trend Analysis: Provide charts and graphs to help users review changes in their health over time. Users can monitor trends in symptoms, medications, and vital signs.</p> </li> <li> <p>Emergency Information: Allow users to store critical health data such as allergies, medications, blood type, and emergency contacts. This information can be easily accessible in case of emergencies.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_49","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, health log data, appointment schedules, health trend analysis results, and emergency information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage health logs, schedule appointments, review health trends, and access emergency information.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_49","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_49","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like health goal setting and progress tracking, integration with fitness trackers or wearable devices for health data synchronization, and the ability to generate health reports for sharing with healthcare providers. Additionally, ensure that the application complies with data privacy and security regulations to protect users' sensitive health information.</p> <p></p>"},{"location":"project-guide/#52-hobby-club-organizer","title":"52-Hobby Club Organizer:","text":"<ul> <li> <p>Member registration: Add and manage club members.</p> </li> <li> <p>Event calendar: Schedule club meetings and events.</p> </li> <li> <p>Resource sharing: Exchange hobby resources and tips.</p> </li> <li> <p>Activity log: Track club activities and participation.</p> </li> </ul>"},{"location":"project-guide/#common-features_51","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their club management, manage club members, schedule events, share resources, and track club activities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Member Registration: Implement tools for users to add and manage club members. Users can enter member details such as names, contact information, and hobbies.</p> </li> <li> <p>Event Calendar: Create an event calendar for scheduling and managing club meetings and events. Users can add, edit, and delete events, specify dates, times, and locations, and set reminders.</p> </li> <li> <p>Resource Sharing: Enable users to exchange hobby resources, tips, and recommendations within the club. Users can post and view resources related to their hobbies.</p> </li> <li> <p>Activity Log: Provide a log to track club activities and member participation. Users can record details about past events, attendance, and club achievements.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_50","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, member information, event schedules, resource sharing data, and activity logs in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage member registration, schedule events, share resources, and record club activities.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_50","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_50","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like discussion forums for club members, polls and surveys for event planning, and integration with social media platforms for club promotion. Additionally, provide tools for generating club reports and statistics on member participation and event attendance. Ensure that the application helps hobby clubs effectively organize and manage their activities and resources.</p> <p></p>"},{"location":"project-guide/#53-travel-expense-tracker","title":"53-Travel Expense Tracker:","text":"<ul> <li> <p>Trip planning: Organize trip details and itinerary.</p> </li> <li> <p>Expense recording: Log travel expenses.</p> </li> <li> <p>Budget management: Set and adhere to travel budgets.</p> </li> <li> <p>Summary report: Compile trip expenses and experiences.</p> </li> </ul>"},{"location":"project-guide/#common-features_52","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their travel planning, record expenses, manage budgets, and generate summary reports. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Trip Planning: Implement tools for users to organize trip details and create itineraries. Users can specify destinations, dates, accommodations, transportation, and activities.</p> </li> <li> <p>Expense Recording: Create a system for users to log travel expenses, including categories such as accommodation, transportation, meals, and entertainment. Users can enter expense details like date, amount, and payment method.</p> </li> <li> <p>Budget Management: Enable users to set and adhere to travel budgets. The application can provide budget recommendations based on trip details and user preferences.</p> </li> <li> <p>Summary Report: Provide a summary report that compiles trip expenses and experiences. Users can generate reports that include a breakdown of expenses, highlights, and memorable moments from their trips.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_51","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, trip details, expense records, budget information, and summary reports in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan trips, record expenses, manage budgets, and generate summary reports.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_51","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_51","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like currency conversion for expenses incurred in different currencies, integration with travel booking platforms for automatic expense tracking, and photo uploads to capture trip memories. Additionally, provide tools for generating expense charts and visualizing spending patterns. Ensure that the application helps travelers plan their trips effectively, manage expenses, and create memorable travel experiences.</p> <p></p>"},{"location":"project-guide/#54-simple-auction-tracker","title":"54-Simple Auction Tracker:","text":"<ul> <li> <p>Item catalog: List items available for auction.</p> </li> <li> <p>Bidding system: Track bids and bidders.</p> </li> <li> <p>Auction results: Record and analyze auction outcomes.</p> </li> <li> <p>Participant management: Manage bidder and seller profiles.</p> </li> </ul>"},{"location":"project-guide/#common-features_53","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their auction management, track bids and auctions, record results, and manage participant profiles. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Item Catalog: Implement a catalog system for listing items available for auction. Users can add item details such as descriptions, starting prices, and auction end times.</p> </li> <li> <p>Bidding System: Create a bidding system to track bids and bidders. Users can place bids on items, view current highest bids, and receive notifications when they are outbid.</p> </li> <li> <p>Auction Results: Record and analyze auction outcomes, including the final selling price of items, winning bidders, and auction duration. Users can review past auctions and outcomes.</p> </li> <li> <p>Participant Management: Provide tools for managing bidder and seller profiles. Users can register as bidders or sellers, update their profiles, and view their auction history.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_52","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, item catalog data, bid records, auction results, and participant profiles in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage the item catalog, place bids, record auction results, and manage participant profiles.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_52","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_52","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like automatic auction notifications for bidders, a rating and feedback system for sellers and bidders, and a search and filtering option for the item catalog. Additionally, provide tools for sellers to create and manage their auctions easily. Ensure that the application helps users effectively organize and participate in auctions.</p> <p></p>"},{"location":"project-guide/#55-volunteer-management-system","title":"55-Volunteer Management System:","text":"<ul> <li> <p>Volunteer profiles: Register and manage volunteers.</p> </li> <li> <p>Event scheduling: Plan and assign volunteer events.</p> </li> <li> <p>Hours tracking: Record volunteer hours and activities.</p> </li> <li> <p>Recognition: Acknowledge and reward volunteer contributions.</p> </li> </ul>"},{"location":"project-guide/#common-features_54","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their volunteer management, register volunteers, schedule events, track hours, and acknowledge contributions. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Volunteer Profiles: Implement tools for users to register and manage volunteer profiles. Users can collect details such as names, contact information, skills, and availability.</p> </li> <li> <p>Event Scheduling: Create a scheduling system for planning and assigning volunteer events. Users can specify event details, dates, times, locations, and the number of volunteers needed.</p> </li> <li> <p>Hours Tracking: Enable users to record volunteer hours and activities. Volunteers can log their hours, and administrators can approve and verify the hours worked.</p> </li> <li> <p>Recognition: Provide features for acknowledging and rewarding volunteer contributions. Recognitions can include certificates, badges, or thank-you messages for outstanding volunteers.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_53","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, volunteer data, event schedules, hours records, and recognition data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage volunteer profiles, schedule events, track hours, and provide recognitions.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_53","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_53","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like volunteer role assignments, communication tools for sending event notifications and updates, and reporting tools for generating volunteer activity reports. Additionally, provide a volunteer dashboard where volunteers can view their upcoming events, logged hours, and recognition status. Ensure that the application helps organizations effectively manage their volunteers and recognize their valuable contributions.</p> <p></p>"},{"location":"project-guide/#56-basic-career-planning-tool","title":"56-Basic Career Planning Tool:","text":"<ul> <li> <p>Goal setting: Define career objectives and milestones.</p> </li> <li> <p>Skill tracker: Log skills and professional development.</p> </li> <li> <p>Job search organizer: Track job applications and responses.</p> </li> <li> <p>Interview preparation: Compile interview questions and tips.</p> </li> </ul>"},{"location":"project-guide/#common-features_55","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their career planning, set goals, track skills, manage job searches, and prepare for interviews. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Goal Setting: Implement tools for users to define career objectives and milestones. Users can set specific goals, timelines, and action plans to achieve them.</p> </li> <li> <p>Skill Tracker: Create a system for logging skills and tracking professional development. Users can add skills, certifications, courses, and track their progress in developing these skills.</p> </li> <li> <p>Job Search Organizer: Enable users to track job applications, including details like job titles, companies, application dates, and responses. Users can set reminders for follow-ups.</p> </li> <li> <p>Interview Preparation: Provide features for compiling interview questions, tips, and resources. Users can prepare for interviews by reviewing questions and strategies.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_54","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, goal data, skill records, job application details, interview preparation data, and other information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage goal setting, track skills, organize job searches, and prepare for interviews.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_54","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_54","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a networking tracker for managing professional contacts, a resume builder, and integration with job search platforms for automatic job application tracking. Additionally, provide tools for generating career progress reports and setting up reminders for career-related tasks. Ensure that the application helps users effectively plan and manage their career development.</p> <p></p>"},{"location":"project-guide/#57-small-scale-rental-management","title":"57-Small Scale Rental Management:","text":"<ul> <li> <p>Property listing: Manage rental property details.</p> </li> <li> <p>Tenant records: Keep track of tenants and lease terms.</p> </li> <li> <p>Rent tracking: Record rent payments and due dates.</p> </li> <li> <p>Maintenance log: Schedule and track property maintenance.</p> </li> </ul>"},{"location":"project-guide/#common-features_56","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their rental property management, maintain property listings, manage tenant records, track rent payments, and log maintenance activities. This feature is optional but can    enhance the user experience.</p> </li> <li> <p>Property Listing: Implement tools for users to manage rental property details. Users can list properties with information such as property type, address, rent amount, and availability status.</p> </li> <li> <p>Tenant Records: Create a system for keeping track of tenants and lease terms. Users can record tenant details, lease start and end dates, and contact information.</p> </li> <li> <p>Rent Tracking: Enable users to record rent payments and due dates. Users can log payment amounts, methods, and generate rent receipts.</p> </li> <li> <p>Maintenance Log: Provide features for scheduling and tracking property maintenance. Users can schedule maintenance tasks, record maintenance    history, and set reminders for future maintenance.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_55","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, property listings, tenant records, rent payment data, maintenance logs, and other information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage property listings, tenant records, rent tracking, and maintenance logs.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_55","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_55","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like expense tracking for property-related costs, lease renewal reminders, and integration with payment gateways for online rent payments. Additionally, provide tools for generating financial reports, property occupancy reports, and maintenance schedules. Ensure that the application helps property owners effectively manage their rental properties and tenant relationships.</p> <p></p>"},{"location":"project-guide/#58-personal-fitness-challenge-tracker","title":"58-Personal Fitness Challenge Tracker:","text":"<ul> <li> <p>Challenge creation: Set personal fitness challenges.</p> </li> <li> <p>Progress logging: Record daily or weekly progress.</p> </li> <li> <p>Motivational reminders: Send alerts to stay on track.</p> </li> <li> <p>Achievement record: Celebrate milestones and successes.</p> </li> </ul>"},{"location":"project-guide/#common-features_57","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their fitness challenge tracking, set challenges, log progress, receive reminders, and record achievements. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Challenge Creation: Implement tools for users to set personal fitness challenges. Users can define challenge goals, durations, and specific activities or exercises to complete.</p> </li> <li> <p>Progress Logging: Create a system for users to record daily or weekly progress toward their fitness challenges. Users can log exercise details, duration, repetitions, and other relevant data.</p> </li> <li> <p>Motivational Reminders: Provide features to send alerts and motivational messages to users to help them stay on track with their challenges. Reminders can be scheduled at specific times or based on user preferences.</p> </li> <li> <p>Achievement Record: Enable users to celebrate milestones and successes achieved during their fitness challenges. Users can mark completed challenges, view achievements, and set new goals.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_56","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, challenge data, progress records, reminder settings, and achievement data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage challenge creation, progress logging, receive reminders, and record achievements.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_56","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_56","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like challenge sharing with friends for competition and motivation, integration with fitness trackers or wearables for automatic progress tracking, and the ability to generate fitness reports and statistics. Additionally, provide tools for setting fitness goals and generating workout plans based on user preferences. Ensure that the application helps users achieve their fitness goals and stay motivated throughout their challenges.</p> <p></p>"},{"location":"project-guide/#59-study-group-coordinator","title":"59-Study Group Coordinator:","text":"<ul> <li> <p>Group management: Organize study groups.</p> </li> <li> <p>Session scheduling: Plan study sessions and topics.</p> </li> <li> <p>Resource sharing: Distribute study materials.</p> </li> <li> <p>Discussion board: Facilitate group discussions.</p> </li> </ul>"},{"location":"project-guide/#common-features_58","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their study group coordination, manage study groups, schedule sessions, share resources, and facilitate discussions. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Group Management: Implement tools for users to organize study groups. Users can create and manage study groups, set group names, descriptions, and membership criteria.</p> </li> <li> <p>Session Scheduling: Create a scheduling system for planning study sessions and topics. Users can schedule sessions, specify dates, times, locations (virtual or physical), and provide descriptions or agendas.</p> </li> <li> <p>Resource Sharing: Enable users to distribute study materials within study groups. Users can upload and share documents, links, and notes relevant to the study topics.</p> </li> <li> <p>Discussion Board: Provide a discussion board for facilitating group discussions. Users can create discussion topics, post questions, and engage in conversations with fellow group members.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_57","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, study group data, session schedules, resource materials, and discussion board data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage study group creation, session scheduling, resource sharing, and discussions.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_57","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_57","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like automatic session reminders, polls and surveys for topic selection, and integration with video conferencing tools for virtual study sessions. Additionally, provide tools for generating study progress reports and tracking group attendance. Ensure that the application helps users effectively coordinate and collaborate in study groups for improved learning outcomes.</p> <p></p>"},{"location":"project-guide/#60-attendance-management-system-for-schools","title":"60-Attendance Management System for Schools:","text":"<ul> <li> <p>Student and teacher profiles: Registration, update, and deletion.</p> </li> <li> <p>Attendance tracking: Daily attendance recording for each class.</p> </li> <li> <p>Reporting: Generate monthly attendance reports for students.</p> </li> <li> <p>Summary: Overview of attendance trends and anomalies.</p> </li> </ul>"},{"location":"project-guide/#common-features_59","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including administrators, teachers, and staff, to create accounts or profiles within the application to personalize their attendance management, manage student and teacher profiles, track attendance, generate reports, and view attendance    summaries. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Student and Teacher Profiles: Implement tools for users to register, update, and delete student and teacher profiles. Users can collect details such as names, contact information, and class assignments.</p> </li> <li> <p>Attendance Tracking: Create a system for daily attendance recording for each class. Teachers can mark students present or absent for each class session.</p> </li> <li> <p>Reporting: Enable users to generate monthly attendance reports for students. Reports can include individual student attendance records, class-wise reports, and subject-wise reports.</p> </li> <li> <p>Summary: Provide an overview of attendance trends and anomalies. Users can view summary statistics, such as average attendance rates, frequently absent students, and trends over time.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_58","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, student and teacher data, attendance records, monthly reports, and summary data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage profiles, record attendance, generate reports, and view attendance summaries.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_58","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_58","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like automated notifications to parents for student absences, integration with student information systems for class rosters, and options for marking tardiness and leave requests. Additionally, provide tools for generating visual attendance charts and graphs for better data visualization. Ensure that the application helps schools efficiently manage student attendance records and monitor attendance trends.</p> <p></p>"},{"location":"project-guide/#61-small-business-accounting-software","title":"61-Small Business Accounting Software:","text":"<ul> <li> <p>Transaction recording: Log income and expenses.</p> </li> <li> <p>Financial reporting: Monthly and annual financial statements.</p> </li> <li> <p>Budget planning: Set and track business budgets.</p> </li> <li> <p>Tax preparation: Summarize financial data for tax purposes.</p> </li> </ul>"},{"location":"project-guide/#common-features_60","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including small business owners and accountants, to create accounts or profiles within the application to personalize their accounting, record transactions, generate financial reports, plan budgets, and prepare for taxes. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Transaction Recording: Implement tools for users to log income and expenses. Users can record transaction details, such as date, amount, category (e.g., revenue, cost of goods sold, utilities), and payment method.</p> </li> <li> <p>Financial Reporting: Enable users to generate monthly and annual financial statements. Reports can include profit and loss statements (income statements), balance sheets, and cash flow statements.</p> </li> <li> <p>Budget Planning: Provide features for setting and tracking business budgets. Users can create budget categories, allocate funds, and compare actual expenses to budgeted amounts.</p> </li> <li> <p>Tax Preparation: Assist users in summarizing financial data for tax purposes. Generate reports and summaries that help with tax preparation and filing.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_59","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, transaction records, financial reports, budget data, tax-related information, and other financial data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage transaction recording, generate financial reports, plan budgets, and prepare for taxes.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_59","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_59","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like automated expense categorization, bank account reconciliation, support for multiple currencies, and integration with accounting standards and tax regulations. Additionally, provide tools for generating financial graphs and charts for visualizing financial performance. Ensure that the application helps small businesses effectively manage their accounting and financial reporting needs.</p> <p></p>"},{"location":"project-guide/#62-local-event-planner","title":"62-Local Event Planner:","text":"<ul> <li> <p>Event details: Create and manage event information.</p> </li> <li> <p>Attendee management: Register and track attendees.</p> </li> <li> <p>Schedule organizer: Plan event timelines and activities.</p> </li> <li> <p>Feedback collection: Gather post-event feedback from attendees.</p> </li> </ul>"},{"location":"project-guide/#common-features_61","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow event organizers to create accounts or profiles within the application to personalize their event planning, manage event details, register attendees, organize schedules, and collect feedback. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Event Details: Implement tools for event organizers to create and manage event information. Users can specify event names, dates, locations, descriptions, and other relevant details.</p> </li> <li> <p>Attendee Management: Create a system for registering and tracking event attendees. Organizers can record attendee information, ticket details, and payment status.</p> </li> <li> <p>Schedule Organizer: Provide features for planning event timelines and activities. Users can schedule sessions, workshops, performances, and other event activities.</p> </li> <li> <p>Feedback Collection: Enable organizers to gather post-event feedback from attendees. Users can collect feedback on event satisfaction, specific sessions or activities, and suggestions for improvement.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_60","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, event data, attendee records, schedule details, and feedback data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage event details, register attendees, organize schedules, and collect feedback.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_60","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_60","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like ticketing and payment processing, event promotion tools, and integration with calendar applications for attendee reminders. Additionally, provide tools for generating event reports, attendance statistics, and feedback analysis. Ensure that the application helps event organizers efficiently plan and manage local events while collecting valuable feedback for future improvements.</p> <p></p>"},{"location":"project-guide/#63-simple-project-management-tool","title":"63-Simple Project Management Tool:","text":"<ul> <li> <p>Project setup: Define project scope and objectives.</p> </li> <li> <p>Task assignment: Allocate tasks to team members.</p> </li> <li> <p>Progress tracking: Monitor task completion and deadlines.</p> </li> <li> <p>Reporting: Generate project status reports.</p> </li> </ul>"},{"location":"project-guide/#common-features_62","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including project managers and team members, to create accounts or profiles within the application to personalize their project management, define project scopes, assign tasks, track progress, and generate reports. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Project Setup: Implement tools for defining project scope and objectives. Users can create projects, set project names, descriptions, objectives, and specify project timelines.</p> </li> <li> <p>Task Assignment: Create a system for allocating tasks to team members. Project managers can assign tasks, set deadlines, and designate responsible team members.</p> </li> <li> <p>Progress Tracking: Provide features for monitoring task completion and deadlines. Users can update task statuses, mark tasks as completed, and view progress timelines.</p> </li> <li> <p>Reporting: Enable users to generate project status reports. Reports can include project timelines, task statuses, completed tasks, and remaining work.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_61","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, project data, task assignments, progress records, and report data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage project setup, task assignment, progress tracking, and report generation.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_61","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_61","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like Gantt chart generation for visual project timelines, integration with calendar applications for task reminders, and options for setting task priorities and dependencies. Additionally, provide tools for generating performance metrics and project summary dashboards. Ensure that the application helps project managers efficiently plan and track project progress while providing valuable insights through reports and analytics.</p> <p></p>"},{"location":"project-guide/#64-basic-crm-customer-relationship-management","title":"64-Basic CRM (Customer Relationship Management):","text":"<ul> <li> <p>Customer data: Store and manage customer information.</p> </li> <li> <p>Interaction logging: Record customer interactions and notes.</p> </li> <li> <p>Sales tracking: Monitor sales activities and history.</p> </li> <li> <p>Customer service: Manage customer inquiries and resolutions.</p> </li> </ul>"},{"location":"project-guide/#common-features_63","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including sales representatives and customer support agents, to create accounts or profiles within the application to personalize their CRM activities, store customer data, log interactions, track sales, and manage customer inquiries. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Customer Data: Implement tools for storing and managing customer information. Users can create customer profiles, record contact details, demographic information, and preferences.</p> </li> <li> <p>Interaction Logging: Create a system for recording customer interactions and notes. Users can log phone calls, emails, meetings, and other    interactions, along with relevant details and follow-up actions.</p> </li> <li> <p>Sales Tracking: Provide features for monitoring sales activities and history. Users can track leads, opportunities, quotes, orders, and invoices associated with each customer.</p> </li> <li> <p>Customer Service: Enable users to manage customer inquiries and resolutions. Users can log and track customer service requests, assign them to agents, and document solutions.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_62","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, customer data, interaction logs, sales records, and customer service data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage customer data, log interactions, track sales, and handle customer service.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_62","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_62","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like task assignment for follow-up actions, contact history timelines, lead conversion tracking, and integration with email and calendar applications for seamless communication. Additionally, provide tools for generating customer reports, sales forecasts, and customer satisfaction surveys. Ensure that the application helps sales and customer service teams effectively manage customer relationships and enhance customer satisfaction.</p> <p></p>"},{"location":"project-guide/#65-employee-performance-review-system","title":"65-Employee Performance Review System:","text":"<ul> <li> <p>Employee profiles: Add, update, and delete employee data.</p> </li> <li> <p>Performance metrics: Track key performance indicators.</p> </li> <li> <p>Review scheduling: Organize periodic review meetings.</p> </li> <li> <p>Feedback compilation: Aggregate feedback from multiple sources.</p> </li> </ul>"},{"location":"project-guide/#common-features_64","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including HR managers, supervisors, and employees, to create accounts or profiles within the application to personalize their performance review activities, manage employee data, track performance metrics, schedule reviews, and compile feedback. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Employee Profiles: Implement tools for adding, updating, and deleting employee data. Users can create employee profiles with details such as names, positions, departments, and contact information.</p> </li> <li> <p>Performance Metrics: Create a system for tracking key performance indicators (KPIs) for each employee. Users can define KPIs relevant to the employee's role and responsibilities.</p> </li> <li> <p>Review Scheduling: Provide features for organizing periodic review meetings. HR managers and supervisors can schedule review dates, set reminders, and invite participants.</p> </li> <li> <p>Feedback Compilation: Enable users to aggregate feedback from multiple sources. Feedback can come from supervisors, peers, self-assessments, and other stakeholders. Users can record feedback, assign scores, and generate performance reports.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_63","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, employee data, performance metrics, review schedules, and feedback data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage employee profiles, track performance metrics, schedule reviews, and compile feedback.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_63","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_63","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like goal setting and tracking, 360-degree feedback capabilities, performance improvement plans, and integration with HR management systems for employee data synchronization. Additionally, provide tools for generating performance dashboards and trend analysis reports. Ensure that the application helps organizations effectively manage employee performance reviews, enhance productivity, and support employee development.</p> <p></p>"},{"location":"project-guide/#66-fitness-center-membership-management","title":"66-Fitness Center Membership Management:","text":"<ul> <li> <p>Member data management: Register and update member profiles.</p> </li> <li> <p>Subscription tracking: Monitor membership status and renewals.</p> </li> <li> <p>Class scheduling: Organize fitness classes and registrations.</p> </li> <li> <p>Payment processing: Manage membership fees and transactions.</p> </li> </ul>"},{"location":"project-guide/#common-features_65","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including fitness center staff and administrators, to create accounts or profiles within the application to personalize their membership management, register members, track subscriptions, schedule classes, and process payments. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Member Data Management: Implement tools for registering and updating member profiles. Users can create member profiles with details such as names, contact information, membership types, and fitness goals.</p> </li> <li> <p>Subscription Tracking: Create a system for monitoring membership status and renewals. Users can track subscription start and end dates, send renewal reminders, and manage membership tiers.</p> </li> <li> <p>Class Scheduling: Provide features for organizing fitness classes and registrations. Users can schedule classes, specify instructors, set class capacities, and allow members to register for classes.</p> </li> <li> <p>Payment Processing: Enable users to manage membership fees and transactions. Users can process payments for new memberships, renewals, and class registrations. Implement secure payment methods.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_64","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, member data, subscription records, class schedules, and payment transactions in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage member data, track subscriptions, schedule classes, and process payments.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_64","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_64","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like attendance tracking for fitness classes, membership card generation, waitlist management for fully booked classes, and integration with fitness tracking devices. Additionally, provide tools for generating financial reports, membership statistics, and class utilization reports. Ensure that the application helps fitness centers efficiently manage memberships, improve member experiences, and streamline payment processes.</p> <p></p>"},{"location":"project-guide/#67-personal-document-organizer","title":"67-Personal Document Organizer:","text":"<ul> <li> <p>Document categorization: Sort documents by type or date.</p> </li> <li> <p>Indexing: Create an index for quick document retrieval.</p> </li> <li> <p>Secure storage: Encrypt and save personal documents.</p> </li> <li> <p>Search function: Locate documents using keywords.</p> </li> </ul>"},{"location":"project-guide/#common-features_66","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their document organization, categorization, indexing, secure storage, and search functionalities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Document Categorization: Implement tools for sorting documents by type, date, or custom categories. Users can create folders or tags to organize their documents based on their preferences.</p> </li> <li> <p>Indexing: Create an indexing system for quick document retrieval. The application can automatically generate metadata and index documents based on their content and properties.</p> </li> <li> <p>Secure Storage: Provide secure storage for personal documents. Encrypt and save documents to protect sensitive information. Implement access control to ensure only authorized users can view or modify documents.</p> </li> <li> <p>Search Function: Enable users to locate documents quickly using keywords or search queries. Implement a robust search engine that scans document content, titles, tags, and metadata.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_65","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, document data, indexing information, and encryption keys in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage document categorization, indexing, secure storage, and search functions.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_65","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_65","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like document versioning, document sharing with others, document expiration reminders, and synchronization with cloud storage services for backup. Additionally, provide tools for generating document reports, statistics on document types, and document access history logs. Ensure that the application helps users efficiently organize and secure their personal documents while providing convenient search capabilities.</p> <p></p>"},{"location":"project-guide/#68-retail-sales-tracker","title":"68-Retail Sales Tracker:","text":"<ul> <li> <p>Product catalog: Manage product details and prices.</p> </li> <li> <p>Sales recording: Log daily sales transactions.</p> </li> <li> <p>Inventory management: Track stock levels and reorder needs.</p> </li> <li> <p>Revenue analysis: Generate sales performance reports.</p> </li> </ul>"},{"location":"project-guide/#common-features_67","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including store managers and sales staff, to create accounts or profiles within the application to personalize their retail sales tracking, manage product catalog, record sales, monitor inventory, and analyze revenue. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Product Catalog Management: Implement tools for managing product details and prices. Users can create and update a product catalog with information such as product names, descriptions, categories, prices, and stock levels.</p> </li> <li> <p>Sales Recording: Create a system for logging daily sales transactions. Users can record sales data, including product names, quantities sold, prices, and customer information.</p> </li> <li> <p>Inventory Management: Provide features for tracking stock levels and reorder needs. The application can automatically update stock quantities based on sales and generate reorder alerts when stock levels are low.</p> </li> <li> <p>Revenue Analysis: Enable users to generate sales performance reports and revenue analysis. Users can view sales trends, revenue by product category, and profit margins.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_66","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, product catalog data, sales transaction records, inventory data, and sales performance reports in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage the product catalog, record sales, track inventory, and analyze revenue.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_66","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_66","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like sales order management, customer relationship management, integration with barcode scanners or POS systems, and automatic generation of sales invoices. Additionally, provide tools for generating financial statements, sales forecasts, and product performance reports. Ensure that the application helps retailers efficiently manage their product catalog, sales, and inventory while providing insights for revenue growth and cost management.</p> <p></p>"},{"location":"project-guide/#69-freelance-client-manager","title":"69-Freelance Client Manager:","text":"<ul> <li> <p>Client information storage.</p> </li> <li> <p>Project tracking and deadlines.</p> </li> <li> <p>Payment reminders.</p> </li> <li> <p>Communication log.</p> </li> </ul>"},{"location":"project-guide/#common-features_68","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow freelancers to create accounts or profiles within the application to personalize their client management and project tracking. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Client Information Storage: Implement a system for storing client information, including contact details, project history, and any specific preferences or requirements.</p> </li> <li> <p>Project Tracking and Deadlines: Provide tools for freelancers to track ongoing projects, including project names, descriptions, deadlines, and progress status. The application can help manage multiple projects simultaneously.</p> </li> <li> <p>Payment Reminders: Set up a reminder system to notify freelancers of upcoming payment deadlines or milestones. Users can configure payment reminders based on project terms.</p> </li> <li> <p>Communication Log: Create a log for recording and storing communication with clients. This can include emails, messages, and notes related to specific projects or clients.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_67","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, client data, project details, payment records, and communication logs in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to add and manage client information, track projects, and set payment reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_67","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_67","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to generate invoices, track expenses related to freelance work, and export reports for financial analysis. Ensure that the application helps freelancers stay organized, meet deadlines, and effectively manage client relationships.</p> <p></p>"},{"location":"project-guide/#70-basic-legal-case-tracker","title":"70-Basic Legal Case Tracker:","text":"<ul> <li> <p>Case management: Add, update, delete legal cases.</p> </li> <li> <p>Client tracking: Record client details and case history.</p> </li> <li> <p>Hearing scheduler: Manage court dates and reminders.</p> </li> <li> <p>Document storage: Organize and retrieve legal documents.</p> </li> </ul>"},{"location":"project-guide/#common-features_69","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including legal professionals, to create accounts or profiles within the application to personalize their case management, client tracking, hearing scheduling, and document storage activities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Case Management: Implement tools for adding, updating, and deleting legal cases. Users can create case profiles with details such as case numbers, titles, types, and parties involved.</p> </li> <li> <p>Client Tracking: Create a system for recording client details and case history. Users can associate clients with specific cases, track contact information, case statuses, and client interactions.</p> </li> <li> <p>Hearing Scheduler: Provide features for managing court dates and reminders. Users can schedule hearings, set reminders for important dates, and receive notifications.</p> </li> <li> <p>Document Storage: Enable users to organize and retrieve legal documents related to each case. Users can upload, categorize, and search for documents based on case information.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_68","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, case data, client information, hearing schedules, document metadata, and document files in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage case profiles, track clients, schedule hearings, and store and retrieve documents.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_68","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_68","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like task assignment for case activities, legal research tools, deadline tracking, and secure document sharing with clients or other legal professionals. Additionally, provide tools for generating case summaries, legal reports, and document tracking reports. Ensure that the application helps legal professionals efficiently manage their caseload, improve client communication, and streamline document organization and retrieval.</p> <p></p>"},{"location":"project-guide/#71-recipe-and-nutrition-tracker","title":"71-Recipe and Nutrition Tracker:","text":"<ul> <li> <p>Recipe storage: Add and manage personal recipes.</p> </li> <li> <p>Nutritional calculator: Analyze recipes for calorie and nutrient content.</p> </li> <li> <p>Meal planner: Organize daily and weekly meals.</p> </li> <li> <p>Shopping list generator: Create grocery lists based on meal plans.</p> </li> </ul>"},{"location":"project-guide/#common-features_70","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their recipe storage, nutritional analysis, meal planning, and shopping list generation activities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Recipe Storage: Implement tools for adding and managing personal recipes. Users can create recipe profiles with details such as recipe names, ingredients, quantities, instructions, and preparation times.</p> </li> <li> <p>Nutritional Calculator: Create a nutritional analysis system for recipes. Users can analyze recipes for calorie and nutrient content, including carbohydrates, proteins, fats, vitamins, and minerals.</p> </li> <li> <p>Meal Planner: Provide features for organizing daily and weekly meals. Users can create meal plans by selecting recipes, specifying serving sizes, and planning meals for breakfast, lunch, dinner, and snacks.</p> </li> <li> <p>Shopping List Generator: Enable users to create grocery lists based on meal plans. The application can automatically generate shopping lists by aggregating ingredients from selected recipes.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_69","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, recipe data, nutritional analysis results, meal plans, and shopping lists in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage recipe storage, nutritional analysis, meal planning, and shopping list generation.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_69","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_69","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like dietary preference tracking (e.g., vegetarian, vegan, gluten-free), recipe sharing with other users, and integration with nutritional databases for accurate analysis. Additionally, provide tools for generating nutrition reports, meal preparation schedules, and cost estimates for shopping lists. Ensure that the application helps users manage their recipes, plan balanced meals, and make informed dietary choices based on nutritional analysis.</p> <p></p>"},{"location":"project-guide/#72-language-learning-companion","title":"72-Language Learning Companion:","text":"<ul> <li> <p>Vocabulary builder: Store and review new words and phrases.</p> </li> <li> <p>Grammar exercises: Practice grammar with interactive exercises.</p> </li> <li> <p>Progress tracker: Monitor language learning progress.</p> </li> <li> <p>Daily practice reminders: Set reminders for daily language practice.</p> </li> </ul>"},{"location":"project-guide/#common-features_71","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their language learning, vocabulary building, grammar exercises, progress tracking, and daily practice reminders. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Vocabulary Builder: Implement tools for users to store and review new words and phrases. Users can add vocabulary items, categorize them, and practice with flashcards or quizzes.</p> </li> <li> <p>Grammar Exercises: Provide interactive grammar exercises for language practice. Users can complete exercises related to sentence structure, verb conjugation, tenses, and more.</p> </li> <li> <p>Progress Tracker: Enable users to monitor their language learning progress. Users can track their performance in vocabulary, grammar, and overall language proficiency.</p> </li> <li> <p>Daily Practice Reminders: Allow users to set reminders for daily language practice. Users can customize the frequency and timing of reminders to fit their schedules.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_70","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, vocabulary items, exercise data, progress records, and reminder settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage vocabulary building, grammar exercises, progress tracking, and daily practice reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_70","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_70","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like language-specific pronunciation guides, language proficiency assessments, and language learning goals. Additionally, provide tools for generating progress reports, vocabulary usage statistics, and grammar exercise scores. Ensure that the application helps language learners build their vocabulary, improve their grammar skills, and stay motivated through daily practice reminders.</p> <p></p>"},{"location":"project-guide/#73-personal-vehicle-log","title":"73-Personal Vehicle Log:","text":"<ul> <li> <p>Vehicle details: Record information about personal vehicles.</p> </li> <li> <p>Mileage tracker: Log and analyze vehicle mileage.</p> </li> <li> <p>Fuel log: Keep track of fuel expenses and consumption.</p> </li> <li> <p>Service reminders: Schedule regular maintenance checks.</p> </li> </ul>"},{"location":"project-guide/#common-features_72","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their vehicle details management, mileage tracking, fuel logging, and service reminders. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Vehicle Details Management: Implement tools for users to record information about their personal vehicles. Users can add vehicle profiles with details such as make, model, year, registration number, and insurance information.</p> </li> <li> <p>Mileage Tracker: Provide features for logging and analyzing vehicle mileage. Users can record odometer readings at the start and end of trips, track distances traveled, and view mileage trends.</p> </li> <li> <p>Fuel Log: Enable users to keep track of fuel expenses and consumption. Users can record fuel purchases, including fuel type, price, gallons/liters filled, and calculate fuel efficiency.</p> </li> <li> <p>Service Reminders: Allow users to schedule regular maintenance checks and receive reminders. Users can set reminders for oil changes, tire rotations, inspections, and other service tasks.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_71","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, vehicle data, mileage records, fuel logs, service reminders, and maintenance history in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage vehicle details, track mileage, log fuel data, and schedule service reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_71","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_71","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like expense tracking for maintenance and repairs, service history reports, and integration with GPS data for trip tracking. Additionally, provide tools for generating fuel efficiency reports, cost analysis, and reminders for upcoming service tasks. Ensure that the application helps users efficiently manage their personal vehicle information, monitor fuel consumption, and schedule maintenance to keep their vehicles in top condition.</p> <p></p>"},{"location":"project-guide/#74-freelance-writers-organizer","title":"74-Freelance Writer's Organizer:","text":"<ul> <li> <p>Article tracking: Manage assignments and deadlines.</p> </li> <li> <p>Idea notebook: Store and categorize writing ideas.</p> </li> <li> <p>Submission log: Track submissions to publishers and responses.</p> </li> <li> <p>Income tracker: Monitor earnings from writing assignments.</p> </li> </ul>"},{"location":"project-guide/#common-features_73","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow freelance writers to create accounts or profiles within the application to personalize their article tracking, idea notebook, submission log, and income tracking activities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Article Tracking: Implement tools for managing writing assignments and deadlines. Users can create article profiles with details such as article titles, publishers, submission deadlines, and progress status.</p> </li> <li> <p>Idea Notebook: Provide a space for users to store and categorize writing ideas. Users can create idea profiles, add descriptions, and categorize ideas by genre or topic.</p> </li> <li> <p>Submission Log: Enable users to track submissions to publishers and responses. Users can record submission dates, publisher details, submission statuses (e.g., pending, accepted, rejected), and responses received.</p> </li> <li> <p>Income Tracker: Allow users to monitor earnings from writing assignments. Users can log income details, including payment dates, amounts, and sources.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_72","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, article data, idea profiles, submission records, income data, and progress status in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage article tracking, idea notebook, submission log, and income tracking.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_72","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_72","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like expense category insights, expense history reports, and automated budget alerts when nearing budget limits. Additionally, provide tools for generating savings progress charts, budget analysis reports, and financial goals achievement reports. Ensure that the application helps students manage their finances effectively, develop budgeting skills, and work towards their savings goals.</p> <p></p>"},{"location":"project-guide/#76-diy-project-planner","title":"76-DIY Project Planner:","text":"<ul> <li> <p>Project catalog: Store and organize DIY project ideas.</p> </li> <li> <p>Material list: Track materials and tools needed.</p> </li> <li> <p>Step tracker: Log progress on ongoing projects.</p> </li> <li> <p>Budget manager: Monitor project expenses.</p> </li> </ul>"},{"location":"project-guide/#common-features_74","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their project planning, material tracking, step logging, and budget management activities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Project Catalog: Implement tools for users to store and organize DIY project ideas. Users can create project profiles with details such as project names, descriptions, images, and categories (e.g., woodworking, home improvement).</p> </li> <li> <p>Material List: Provide a feature to track materials and tools needed for each project. Users can list required items, quantities, prices, and purchase links or stores.</p> </li> <li> <p>Step Tracker: Enable users to log progress on ongoing projects. Users can record completed steps, add notes, images, or videos, and set completion dates for each project step.</p> </li> <li> <p>Budget Manager: Allow users to monitor project expenses. Users can input costs for materials, tools, and other project-related expenses. The application can calculate total project costs and compare them to the set budget.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_73","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, project data, material lists, step logs, and budget information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage project catalog, material list, step tracker, and budget manager.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_73","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_73","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like project progress visualization (e.g., Gantt charts), project timeline tracking, and project priority setting. Additionally, provide tools for generating project cost reports, material shopping lists, and project completion certificates. Ensure that the application helps DIY enthusiasts plan, track, and manage their projects efficiently, whether they involve home improvement, crafting, or any other DIY endeavor.</p> <p></p>"},{"location":"project-guide/#77-final-phase-gui-application-development","title":"77-Final Phase: GUI Application Development","text":"<ul> <li>GUI Implementation: Extend your console application with a graphical user interface using JavaFX or Swing.</li> <li>Architectural Integrity: Maintain the core business logic from your console application, demonstrating proper separation of concerns between UI and business logic.</li> <li>User Experience: Create an intuitive, responsive, and visually appealing user interface with proper event handling.</li> <li>Cross-Platform Testing: Ensure your GUI application works correctly on different platforms (Windows, Linux, macOS if possible).</li> </ul>"},{"location":"project-guide/#78-final-submission","title":"78-Final Submission","text":"<ul> <li>Midterm Submission: Submit your console application with comprehensive documentation and testing by the midterm deadline.</li> <li>Final Submission: Submit your complete GUI application with additional documentation and testing by the final deadline.</li> <li>Presentation: Prepare a concise presentation deck (up to 10 slides) and a video presentation (up to 4 minutes) that summarizes the project's architecture, functionality, and key learning points.</li> <li>Code and Documentation Submission: Ensure your code is well-commented, adheres to the coding standards, and is thoroughly tested on both WSL/Linux and Windows OS. Submit a detailed project report and the source code named ce204-hw-name-surname.rar, containing the GitHub cloned templates.</li> </ul>"},{"location":"project-guide/#79-additional-requirements","title":"79-Additional Requirements","text":"<ul> <li>Originality: Maintain originality in your work. Use of plagiarism detection software is encouraged to ensure the uniqueness of your code.</li> <li>External Tools: The use of tools like ChatGPT for project development or documentation should be carefully considered to maintain the authenticity of your work.</li> </ul>"},{"location":"project-guide/#80-oop-specific-evaluation-criteria","title":"80-OOP-Specific Evaluation Criteria","text":"<p>Your project will be evaluated based on the following OOP-specific criteria:</p> <ul> <li>Class Design: How well your classes are designed (cohesion, coupling, granularity)</li> <li>Inheritance Implementation: Appropriate use of inheritance, avoiding unnecessary inheritance relationships</li> <li>Polymorphism Usage: Effective use of polymorphism to simplify code and improve extensibility</li> <li>Abstraction Quality: Appropriate use of abstract classes and interfaces</li> <li>Encapsulation Practice: Proper hiding of implementation details and data protection</li> <li>Design Pattern Implementation: Correct implementation of design patterns and explanation of why they were chosen</li> <li>Code Reusability: How reusable and modular your code components are</li> <li>Exception Handling: Proper implementation of exception handling for robust code</li> <li>GUI Implementation (Final): Quality of GUI implementation and integration with business logic</li> <li>Architecture Evolution: How effectively your design evolved from console to GUI application</li> </ul>"},{"location":"project-guide/#81-best-practices-and-standards","title":"81-Best Practices and Standards","text":"<ul> <li>Adhere strictly to coding standards, file management, code aesthetics, and ensure the application's cross-platform compatibility.</li> <li>Engage in DevOps practices as applicable to Java projects, including creating releases according to the project's needs.</li> <li>Follow Java naming conventions for classes, methods, variables, and packages.</li> <li>Properly organize your code into packages that reflect the application's domain and architecture.</li> </ul>"},{"location":"project-guide/#82-conclusion-and-encouragement","title":"82-Conclusion and Encouragement","text":"<p>This two-phase project is an opportunity to apply theoretical knowledge in a practical setting, enhancing your software engineering and OOP skills. It's also a chance to experience real-world development processes, from initial console-based design to a full GUI application. Remember, the grading rubric and further details are available on Microsoft Teams. Best of luck, and we look forward to seeing your innovative applications!</p>"},{"location":"project-guide/#83-wishing-you-the-best-of-luck-the-grading-rubric-can-be-found-on-microsoft-teams","title":"83-Wishing you the best of luck! The grading rubric can be found on Microsoft Teams.","text":""},{"location":"project-guide/#84-homework-check-thresholds-if-below-are-not-provided-homework-wont-be-accepted","title":"84-Homework Check Thresholds (If Below are Not Provided Homework won't be Accepted)","text":"<ul> <li> <p>If No Submission or Missing Submission, No Github Repository or No Collaborative Work.</p> </li> <li> <p>No Releases for Csharp and Java Templates</p> </li> <li> <p>If Documentation Coverage %100 and Unit Test Coverage is Below %100</p> </li> <li> <p>If Release Folders with All Files Are Not Generated Correctly, if you cannot use CMake and Maven Templates correctly.</p> </li> <li> <p>If Unit Tests are Not Exist</p> </li> <li> <p>If Plagiarism Detected</p> </li> </ul>"},{"location":"project-guide/#85-github-and-git-usage","title":"85-Github and Git Usage","text":"<ul> <li>Did you used following templates</li> </ul> <p>o Java Maven</p> <p>\u00a7 GitHub - ucoruh/eclipse-java-maven-template: Maven (Build,Test,Coverage,Publish) + Doxygen (HTML, Latex, RTF) + ReportGenerator + QA (Test Coverage) + Astyle Template</p> <p>\u00a7 Name this repository ce204-hw-name-surname-java</p> <ul> <li> <p>Did you open Private Github Repository with Correct naming ce204-hw-name-surname prefix, there should be three repositories for each team.</p> </li> <li> <p>Did you work with your friend is there any collaboration commits?</p> </li> <li> <p>Did you commit frequently?</p> </li> <li> <p>What are merger and conflict operations?</p> </li> <li> <p>Did you work on separate branches?</p> </li> <li> <p>Did you configure your e-mail with the correct name surname to profile and make your profile public?</p> </li> <li> <p>Did you upload your picture to Github repository?</p> </li> <li> <p>Did you configure pre-commit scripts with 1-configure-pre-commit.bat to avoid errors.</p> </li> <li> <p>Did you configure your gitignore file if there is a file that should be in projects?</p> </li> <li> <p>Did you generated releases on Github for maven templates.</p> </li> </ul>"},{"location":"project-guide/#86-homework-submission","title":"86-Homework Submission","text":"<ul> <li>Did you generate release files and submit your homework to Microsoft Teams?</li> </ul> <p>o Project repository without files that configured in gitignore.</p> <p>o Windows and Linux also MacOS Release Files (example outputs)</p> <p>o Did you submit Video 4 minute for each team member that you explained project?</p> <p>o Did you submit Presentation 10 Pages that you prepared as startup concept to explain your project.</p>"},{"location":"project-guide/#87-development-environment-setup","title":"87-Development Environment Setup","text":"<ul> <li> <p>Did you install WSL for Linux Development</p> </li> <li> <p>Did you install choco and scoop on Both Windows and WSL</p> </li> </ul> <p>o Test with choco \u2013version and scoop \u2013version</p> <p>o Installed with 3-install-package-manager.bat.</p> <ul> <li>Did you install Windows and Linux Environment with Batch Scripts</li> </ul> <p>o Windows Environment Installed with 4-install-windows-enviroment.bat.</p> <p>o Linux Environment Installed with 4-install-wsl-environment.sh.</p> <ul> <li> <p>Did you configure the project with 9-clean-configure-app-windows.bat to generate a Visual Studio Community Edition Solution for Programming.</p> </li> <li> <p>Did you try Open Project Folder with Visual Studio Community Edition to Develop Directly from Cmakelist.txt Scripts.</p> </li> </ul>"},{"location":"project-guide/#88-project-folder-structure-and-cmake-configuration","title":"88-Project Folder Structure and CMake Configuration","text":"<ul> <li> <p>Did you organize the project as an app, lib, and test like calculator examples?</p> </li> <li> <p>Did you locate your project's common functions in lib?</p> </li> <li> <p>Did you develop unit tests for library function these are located on test project?</p> </li> <li> <p>Did you integrate unit tests?</p> </li> <li> <p>Did you reference lib from both app and test projects?</p> </li> </ul>"},{"location":"project-guide/#89-project-feature-checklist","title":"89-Project Feature Checklist","text":"<ul> <li> <p>Does your application work on both Windows and WSL, Open Windows Command line and WSL and Show Running Applications. Run Application from Directly Executables.</p> </li> <li> <p>Did you complete your application requirement features, open console application and show usage?</p> </li> </ul> <p>o Show file operations adding, editing, deleting, and listing records etc.</p> <p>o Show menu operations, are they managed with keyboards.</p> <p>o In file operations did you use structures.</p> <p>o Did you use binary files to store your records?</p> <ul> <li> <p>Show your unit tests and unit test coverages.</p> </li> <li> <p>Show your documentation and documentation coverage.</p> </li> </ul> <p>o Open Doxygen outputs, did you configure Doxygen files.</p> <ul> <li>Did you test inputs with unit tests?</li> </ul>"},{"location":"project-guide/#90-programming-skills-checklist-cc-java-and-csharp-net-core-maven-and-cmake","title":"90-Programming Skills Checklist C/C++, Java and Csharp .Net Core, Maven and CMake","text":"<ul> <li>Ask Questions about C/C++ Flow Controls</li> </ul> <p>o If/Else, While, For etc.</p> <ul> <li> <p>Ask Questions about Pointers and Arrays</p> </li> <li> <p>Ask Questions about Structures</p> </li> <li> <p>Ask Questions about Dynamic Memory Allocations Malloc/Free New/Delete</p> </li> <li> <p>Ask Questions about File Read/Write Operations</p> </li> <li> <p>Ask Questions about Preprocessors</p> </li> <li> <p>Ask Questions about Functions and Types, Function Parameter Usage, Passing Parameters as a Reference etc.</p> </li> <li> <p>Ask Questions about Cross-Compile Operations.</p> </li> <li> <p>Ask Questions about to show how Call stack checked on Visual Studio</p> </li> <li> <p>Ask Questions about how to debug applications and see variables.</p> </li> <li> <p>Ask Questions about how to see memory during debug.</p> </li> <li> <p>Ask Questions about configuration types x86/Wind32 and x64 Differences.</p> </li> <li> <p>Etc.</p> </li> </ul>"},{"location":"project-guide/#91-appendix-application-list","title":"91-Appendix \u2013 Application List","text":""},{"location":"project-guide/#01-book-exchange-platform_1","title":"01-Book Exchange Platform:","text":"<ul> <li> <p>Listing books for exchange.</p> </li> <li> <p>Managing exchange requests.</p> </li> <li> <p>Rating system for users.</p> </li> <li> <p>Tracking exchange history.</p> </li> </ul>"},{"location":"project-guide/#common-features_75","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Implement a login system to allow registered users to access the platform. Users should be able to create accounts and log in securely.</p> </li> <li> <p>Book Database: Create a file to store information about books available for exchange. Each book entry should include details like title, author, genre, and owner.</p> </li> <li> <p>Menu System: Design a user-friendly console menu system to navigate through various options in the application. Users can use keyboard inputs to select menu items.</p> </li> <li> <p>Search and Listing: Allow users to search for books based on criteria like title, author, or genre. Users should also be able to list their own books for exchange.</p> </li> <li> <p>Exchange Requests: Users should be able to send and receive exchange requests for books. Include options to accept or decline requests from console application.</p> </li> <li> <p>Rating System: Implement a rating system where users can rate and leave reviews for each other after a successful exchange. Display user ratings alongside their profiles.</p> </li> <li> <p>History Tracking: Keep a record of all past exchange transactions, including details of the books exchanged, date, and user information.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_74","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store book information and transaction history in binary files.</p> </li> <li> <p>Implement a text-based UI for the console menu.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_74","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_74","title":"C# Specific Details:","text":"<ul> <li>Use C#'s file handling capabilities to manage data storage.</li> </ul> <p>Create a well-structured console application using the Console class for user interactions. Remember to optimize the code for efficient data storage and retrieval, error handling, and user experience. These are the core features you can include in your console application for a Book Exchange Platform in these programming languages. You can further enhance the functionality based on your specific requirements.</p> <p></p>"},{"location":"project-guide/#02-personal-time-tracker_1","title":"02-Personal Time Tracker:","text":"<ul> <li> <p>Activity logging.</p> </li> <li> <p>Time spent analysis.</p> </li> <li> <p>Productivity reports.</p> </li> <li> <p>Break reminders.</p> </li> </ul>"},{"location":"project-guide/#common-features_76","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts and log in securely to track their time. Implement user profiles with usernames and passwords.</p> </li> <li> <p>Activity Logging: Provide users with the ability to log their activities throughout the day. They should be able to enter details such as activity name, start time, and end time.</p> </li> <li> <p>Time Spent Analysis: Calculate and display the total time spent on each activity, both daily and over longer periods. Present this information in a clear and concise manner.</p> </li> <li> <p>Productivity Reports: Generate productivity reports based on the logged data. These reports can include graphs or charts to visualize time spent on different activities.</p> </li> <li> <p>Break Reminders: Implement a feature to remind users to take regular breaks. Users can set the duration between breaks and receive notifications.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_75","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store activity logs and user data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to log activities and view reports.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_75","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_75","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like data export (e.g., exporting reports to a CSV file), customizable break reminders, and the ability to categorize activities for more detailed analysis. Ensure that the application is optimized for performance and user-friendly for efficient time tracking and analysis.</p> <p></p>"},{"location":"project-guide/#03-digital-journaldiary_1","title":"03-Digital Journal/Diary:","text":"<ul> <li> <p>Daily entry logging.</p> </li> <li> <p>Search and filter entries.</p> </li> <li> <p>Password protection.</p> </li> <li> <p>Mood tracking.</p> </li> </ul>"},{"location":"project-guide/#common-features_77","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts with usernames and passwords. Password protection ensures the privacy and security of journal entries.</p> </li> <li> <p>Daily Entry Logging: Provide users with the ability to create daily journal entries. Each entry should include a date, time, and the option to write down thoughts, experiences, or notes.</p> </li> <li> <p>Search and Filter Entries: Implement a search functionality that allows users to find specific journal entries by date, keyword, or mood. Users can filter their entries based on criteria of their choice.</p> </li> <li> <p>Password Protection: Ensure that the journal is password-protected, so only authorized users can access their entries. Passwords should be securely stored.</p> </li> <li> <p>Mood Tracking: Allow users to record their mood for each journal entry, such as happy, sad, stressed, or relaxed. This can help users track their emotional journey over time.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_76","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store journal entries and user data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to add, search, and read journal entries.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_76","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_76","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider enhancing the application with additional features like the ability to attach images or files to entries, tagging entries with keywords, and generating summary reports based on mood or specific date ranges. Ensure that the application is optimized for performance and provides a secure and user-friendly environment for journaling.</p> <p></p>"},{"location":"project-guide/#04-expense-sharing-among-friends_1","title":"04-Expense Sharing Among Friends:","text":"<ul> <li> <p>Expense recording and splitting.</p> </li> <li> <p>Balance tracking.</p> </li> <li> <p>Notifications for settlements.</p> </li> <li> <p>Summary of shared expenses.</p> </li> </ul>"},{"location":"project-guide/#common-features_78","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts with usernames and passwords. User accounts will help track expenses and balances accurately.</p> </li> <li> <p>Expense Recording and Splitting: Provide a way for users to record their expenses and split them among friends. Users should be able to enter details such as the expense amount, description, and the friends with whom they are sharing the expense.</p> </li> <li> <p>Balance Tracking: Keep track of the balances between users, showing who owes money to whom. Update balances automatically when expenses are added or settled.</p> </li> <li> <p>Notifications for Settlements: Implement a notification system to inform users when they have pending settlements or when someone has settled an expense with them.</p> </li> <li> <p>Summary of Shared Expenses: Generate a summary of all shared expenses, showing each user's contributions, shared expenses, and balances. This summary can be viewed for individual users or groups of friends.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_77","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store expense data, user accounts, and balances in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to record expenses, view balances, and settle debts.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_77","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_77","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like expense categories, the ability to create and manage groups of friends for shared expenses, and exporting reports to a file for record-keeping. Ensure that the application efficiently handles expense calculations and provides a convenient way for friends to track shared expenses and settle debts.</p> <p></p>"},{"location":"project-guide/#05-virtual-study-timer-pomodoro-technique_1","title":"05-Virtual Study Timer (Pomodoro Technique):","text":"<ul> <li> <p>Customizable work/break intervals.</p> </li> <li> <p>Progress tracking.</p> </li> <li> <p>Reminder alarms.</p> </li> <li> <p>Statistics on study patterns.</p> </li> </ul>"},{"location":"project-guide/#common-features_79","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts if they want to save their study statistics and preferences. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Customizable Work/Break Intervals: Let users customize the length of their work (study) and break intervals. They should be able to set the duration of work sessions and breaks according to their preferences.</p> </li> <li> <p>Progress Tracking: Display a timer that counts down during work sessions and break periods. Users should be able to see the remaining time for their current task.</p> </li> <li> <p>Reminder Alarms: Provide users with optional reminder alarms at the end of each work session and break to notify them to switch tasks. Allow them to choose their preferred sound or notification method.</p> </li> <li> <p>Statistics on Study Patterns: Keep track of study patterns, such as the number of completed work sessions, total study time, and average session length. Generate statistics and charts to help users analyze their study habits.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_78","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user preferences and study statistics in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to start, pause, and customize study sessions.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_78","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_78","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to set long-term study goals, analyze historical study data, and export statistics for future reference. Ensure that the application is optimized for efficient time management and provides a motivating environment for productive study sessions.</p> <p></p>"},{"location":"project-guide/#06-diet-planner_1","title":"06-Diet Planner:","text":"<ul> <li> <p>Meal planning and logging.</p> </li> <li> <p>Calorie and nutrient tracking.</p> </li> <li> <p>Personalized diet recommendations.</p> </li> <li> <p>Shopping list generator.</p> </li> </ul>"},{"location":"project-guide/#common-features_80","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their diet plans and track their progress. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Meal Planning and Logging: Provide a way for users to plan their meals for the day or week. Allow users to log the foods and portions they consume for each meal.</p> </li> <li> <p>Calorie and Nutrient Tracking: Implement a calorie and nutrient tracker that calculates the total calorie intake and nutritional values based on the logged foods. Users can set daily calorie and nutrient goals.</p> </li> <li> <p>Personalized Diet Recommendations: Offer personalized diet recommendations based on user profiles, including age, gender, weight, height, and dietary preferences (e.g., vegetarian, vegan, or low-carb).</p> </li> <li> <p>Shopping List Generator: Generate a shopping list based on the meal plans and recipes selected by the user. The list should include the quantities of ingredients needed.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_79","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, meal plans, and diet data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan meals, log food, and view nutrition information.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_79","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_79","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a food database with nutritional information, the ability to track weight and fitness goals, and meal plan sharing with friends or nutritionists. Ensure that the application provides accurate nutritional information and helps users make healthier dietary choices.</p> <p></p>"},{"location":"project-guide/#07-personal-career-tracker_1","title":"07-Personal Career Tracker:","text":"<ul> <li> <p>Job application tracker.</p> </li> <li> <p>Skill development progress.</p> </li> <li> <p>Interview preparation notes.</p> </li> <li> <p>Career milestone logging.</p> </li> </ul>"},{"location":"project-guide/#common-features_81","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their career tracking and store their data securely.</p> </li> <li> <p>Job Application Tracker: Provide a way for users to track their job applications. Users can log details such as the company name, position applied for, application date, and status of the application (e.g., pending, rejected, interview scheduled).</p> </li> <li> <p>Skill Development Progress: Implement a skill development tracker where users can list their skills and track their progress in acquiring and improving those skills. They can set goals and log achievements.</p> </li> <li> <p>Interview Preparation Notes: Allow users to create and store interview preparation notes for specific job applications. This can include details about the company, job role, common interview questions, and personal notes.</p> </li> <li> <p>Career Milestone Logging: Enable users to log and celebrate career milestones and achievements, such as promotions, certifications, or completed projects.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_80","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, job application data, skill progress, interview notes, and career milestones in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to add, edit, and view career-related information.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_80","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_80","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like goal setting for career development, the ability to export reports for job applications and skill progress, and integration with job search websites for streamlined application tracking. Ensure that the application helps users stay organized and motivated in their career pursuits.</p> <p></p>"},{"location":"project-guide/#08-password-manager_1","title":"08-Password Manager:","text":"<ul> <li> <p>Secure storage of passwords.</p> </li> <li> <p>Password generator.</p> </li> <li> <p>Auto-login feature.</p> </li> <li> <p>Multi-platform compatibility.</p> </li> </ul>"},{"location":"project-guide/#common-features_82","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create a master password to access the password manager securely. This master password should be securely stored and used to encrypt and decrypt stored passwords.</p> </li> <li> <p>Secure Storage of Passwords: Implement secure storage for passwords using encryption algorithms to protect sensitive data. Passwords should be organized by categories or accounts for easy retrieval.</p> </li> <li> <p>Password Generator: Provide a password generation feature to create strong, unique passwords for various online accounts. Users can specify password length and complexity.</p> </li> <li> <p>Auto-Login Feature: Allow users to configure auto-login for selected accounts. When enabled, the password manager can automatically enter the credentials for a specific website or application.</p> </li> <li> <p>Multi-Platform Compatibility: Ensure that the password manager is compatible with multiple platforms, such as Windows, macOS, Linux, and mobile devices (Android and iOS). You can create separate versions for different platforms if needed.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_81","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store encrypted password data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage passwords, generate passwords, and enable auto-login.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_81","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_81","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>For multi-platform compatibility, consider creating a command-line interface (CLI) version of the password manager that can run on different operating systems. Additionally, ensure that the application follows industry best practices for encryption and security to protect user passwords effectively.</p> <p></p>"},{"location":"project-guide/#09-yogameditation-scheduler_1","title":"09-Yoga/Meditation Scheduler:","text":"<ul> <li> <p>Session scheduling.</p> </li> <li> <p>Pose and technique library.</p> </li> <li> <p>Progress tracking.</p> </li> <li> <p>Reminder for daily practice.</p> </li> </ul>"},{"location":"project-guide/#common-features_83","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their yoga/meditation practice and track their progress. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Session Scheduling: Provide a way for users to schedule their yoga or meditation sessions. Users can specify the date, time, duration, and type of practice (e.g., yoga, meditation, specific poses).</p> </li> <li> <p>Pose and Technique Library: Include a library with a collection of yoga poses, meditation techniques, and breathing exercises. Users can browse and select from this library when scheduling their sessions.</p> </li> <li> <p>Progress Tracking: Implement a progress tracker that records the user's practice history. Track factors like the number of sessions completed, session duration, and improvements in flexibility or mindfulness.</p> </li> <li> <p>Reminder for Daily Practice: Allow users to set reminders for their daily yoga or meditation practice. Users can choose to receive notifications or alarms at their preferred practice times.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_82","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, session data, and progress tracking in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to schedule sessions, view progress, and set reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_82","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_82","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to create custom sessions, track mood or stress levels before and after practice, and provide guided audio or video instructions for sessions. Ensure that the application encourages regular yoga and meditation practice and helps users improve their well-being.</p> <p></p>"},{"location":"project-guide/#10-coding-snippet-manager_1","title":"10-Coding Snippet Manager:","text":"<ul> <li> <p>Storing and categorizing code snippets.</p> </li> <li> <p>Search functionality.</p> </li> <li> <p>Sharing snippets with others.</p> </li> <li> <p>Integrations with popular IDEs.</p> </li> </ul>"},{"location":"project-guide/#common-features_84","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts for personalized code snippet management and tracking. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Storing and Categorizing Code Snippets: Provide a way for users to store and categorize their code snippets based on programming languages, frameworks, or specific projects. Users can add titles, descriptions, and tags to each snippet.</p> </li> <li> <p>Search Functionality: Implement a robust search functionality that allows users to search for code snippets using keywords, tags, or programming languages. Display search results with relevant snippets.</p> </li> <li> <p>Sharing Snippets with Others: Enable users to share their code snippets with others, either through a public repository or by sharing a link. Users can set visibility options for their snippets (public, private, or shared with specific users).</p> </li> <li> <p>Integrations with Popular IDEs: Integrate the code snippet manager with popular Integrated Development Environments (IDEs) like Visual Studio Code, IntelliJ IDEA, or Visual Studio. Users can easily import and export snippets directly from their development environment.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_83","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, code snippets, and sharing settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage snippets, search, and share.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_83","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_83","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>For integrations with IDEs, consider creating plugins or extensions that seamlessly connect the code snippet manager to developers' preferred development environments. Additionally, allow users to rate and comment on shared code snippets to foster a collaborative coding community. Ensure that the application helps developers manage and find code snippets efficiently.</p> <p></p>"},{"location":"project-guide/#11-home-renovation-planner_1","title":"11-Home Renovation Planner:","text":"<ul> <li> <p>Project and budget planning.</p> </li> <li> <p>Task assignment and tracking.</p> </li> <li> <p>Cost analysis and reporting.</p> </li> <li> <p>Supplier and contractor database.</p> </li> </ul>"},{"location":"project-guide/#common-features_85","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their renovation projects and track their progress. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Project and Budget Planning: Provide a way for users to plan their home renovation projects. Users can specify project details, including scope, timeline, and budget. They can also set milestones and goals.</p> </li> <li> <p>Task Assignment and Tracking: Implement task management features that allow users to assign tasks to team members or contractors. Users can track the status of each task and set deadlines.</p> </li> <li> <p>Cost Analysis and Reporting: Create tools for users to track project expenses. Users can enter costs for materials, labor, and other expenses. Generate reports that provide a breakdown of expenses and budget status.</p> </li> <li> <p>Supplier and Contractor Database: Include a database where users can store information about suppliers, contractors, and service providers. Users can add contact details, reviews, and project history.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_84","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, project data, task assignments, and cost records in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan projects, assign tasks, and view cost reports.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_84","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_84","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like document management for project plans and contracts, a calendar for scheduling tasks and deadlines, and the ability to export reports in various formats (PDF, CSV). Ensure that the application helps users efficiently plan and manage their home renovation projects within budget and on schedule.</p>"},{"location":"project-guide/#template-mainhtml","title":"template: main.html","text":""},{"location":"project-guide/#homework-project-guideline_1","title":"Homework &amp; Project Guideline","text":"<p>Objective: Your primary goal is to collaboratively design and develop a console-based application in Java with Eclipse JDK 11 or 17 preferred. This project will test your skills in software engineering, object-oriented programming, understanding and application of UML diagrams, and effective team collaboration. You'll start by using a provided Java Maven template for your project setup, adhering to a comprehensive list of development, documentation, and testing standards to ensure a robust application.</p> <p>Structured Task Breakdown</p> <p>1. Team Formation and Project Selection</p> <ul> <li>Form Teams: Collaboratively form your teams based on the course guidelines. Diversity in team composition is encouraged.</li> <li>Select a Project: Choose a unique application from the course's appendix list. Ensure your selection differs from your peers to avoid overlaps and potential plagiarism. Also, you shouldn't select same topics from previous terms and lectures.</li> <li>Justification: Document why you chose your specific project, focusing on what software engineering and OOP concepts you anticipate learning or applying.</li> </ul> <p>2. Project Setup and Repository Management</p> <ul> <li>Fork and Rename Repository: Fork the Java Maven template provided at GitHub - ucoruh/eclipse-java-maven-template: Maven (Build,Test,Coverage,Publish) + Doxygen (HTML, Latex, RTF) + ReportGenerator + QA (Test Coverage) + Astyle Template. Rename your repository following the pattern ce204-hw-name-surname-java to maintain consistency and organization.</li> <li>Privacy Setting: Your repository should be set to private, ensuring only team members and your instructor have access.</li> </ul> <p>3. Application Development</p> <ul> <li>Console Application Design: Develop a console application, ensuring the core functionality is modularized in a separate library. Depending on project requirements, incorporate binary file storage or mock-ups for simulating network communications.</li> <li>Interface Design: Craft a user-friendly console interface that supports navigation through keyboard inputs (e.g., arrows, tabs).</li> <li>Object-Oriented Architecture: Design your application following solid object-oriented principles. Your code should demonstrate a clear understanding of classes, objects, inheritance, and polymorphism.</li> </ul> <p>4. OOP Requirements and Principles</p> <ul> <li>Class Hierarchy: Implement a meaningful class hierarchy that demonstrates proper inheritance relationships. Your classes should have clearly defined parent-child relationships where appropriate.</li> <li>Encapsulation: Apply proper encapsulation techniques by using access modifiers (private, protected, public) appropriately. Data should be hidden within classes and accessed through getter and setter methods.</li> <li>Polymorphism: Demonstrate polymorphic behavior through method overriding and/or method overloading. Include examples of runtime polymorphism where appropriate.</li> <li>Abstraction: Use abstract classes and/or interfaces to define common behaviors and enforce contracts between classes.</li> <li>Design Patterns: Implement at least two design patterns (e.g., Singleton, Factory, Observer, Strategy) that are appropriate for your application's requirements.</li> <li>SOLID Principles: Apply SOLID principles (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion) in your code design.</li> </ul> <p>5. UML Design and Documentation</p> <ul> <li>UML Diagrams: Utilize PlantUML to create detailed UML diagrams (class, sequence, and use cases) that illustrate your application's design and workflow.</li> <li>Class Diagrams: Create comprehensive class diagrams showing all classes, their attributes, methods, and relationships (inheritance, association, aggregation, composition).</li> <li>Sequence Diagrams: Develop sequence diagrams to illustrate the interactions between objects in your application for key use cases.</li> <li>Design Justification: Explain your design choices, focusing on how they embody OOP principles like encapsulation, inheritance, polymorphism, and abstraction.</li> </ul> <p>6. Collaboration, Documentation, and Testing</p> <ul> <li>Team Collaboration: Use GitHub for all aspects of team collaboration. This includes branching, committing, merging, and resolving conflicts. Ensure to commit regularly to accurately reflect each team member's contributions.</li> <li>Documentation: Use Doxygen for documenting both the application and the library. Aim for 100% documentation coverage. Documentation should include:</li> <li>Class descriptions (purpose and functionality)</li> <li>Method descriptions (parameters, return values, exceptions)</li> <li>Relationship explanations (why certain inheritance or composition relationships exist)</li> <li>Design pattern implementations</li> <li>Testing: Develop comprehensive unit tests for all functionalities, striving for 100% test coverage. Tests should verify that:</li> <li>Classes function correctly individually</li> <li>Inheritance relationships work as expected</li> <li>Polymorphic behavior produces correct results</li> <li>Design patterns are implemented correctly</li> </ul> <p>7. Finalization and Submission</p> <ul> <li>Presentation: Prepare a concise presentation deck (up to 10 slides) and a video presentation (up to 4 minutes) that summarizes the project's architecture, functionality, and key learning points.</li> <li>Code and Documentation Submission: Ensure your code is well-commented, adheres to the coding standards, and is thoroughly tested on both WSL/Linux and Windows OS. Submit a detailed project report and the source code named ce204-hw-name-surname.rar, containing the GitHub cloned templates.</li> </ul> <p>8. Additional Requirements and Integrity</p> <ul> <li>Originality: Maintain originality in your work. Use of plagiarism detection software is encouraged to ensure the uniqueness of your code.</li> <li>External Tools: The use of tools like ChatGPT for project development or documentation should be carefully considered to maintain the authenticity of your work.</li> </ul> <p>9. OOP-Specific Evaluation Criteria</p> <p>Your project will be evaluated based on the following OOP-specific criteria:</p> <ul> <li>Class Design: How well your classes are designed (cohesion, coupling, granularity)</li> <li>Inheritance Implementation: Appropriate use of inheritance, avoiding unnecessary inheritance relationships</li> <li>Polymorphism Usage: Effective use of polymorphism to simplify code and improve extensibility</li> <li>Abstraction Quality: Appropriate use of abstract classes and interfaces</li> <li>Encapsulation Practice: Proper hiding of implementation details and data protection</li> <li>Design Pattern Implementation: Correct implementation of design patterns and explanation of why they were chosen</li> <li>Code Reusability: How reusable and modular your code components are</li> <li>Exception Handling: Proper implementation of exception handling for robust code</li> </ul> <p>10. Best Practices and Standards</p> <ul> <li>Adhere strictly to coding standards, file management, code aesthetics, and ensure the application's cross-platform compatibility.</li> <li>Engage in DevOps practices as applicable to Java projects, including creating releases according to the project's needs.</li> <li>Follow Java naming conventions for classes, methods, variables, and packages.</li> <li>Properly organize your code into packages that reflect the application's domain and architecture.</li> </ul> <p>Conclusion and Encouragement</p> <p>This project is an opportunity to apply theoretical knowledge in a practical setting, enhancing your software engineering and OOP skills. It's also a chance to experience real-world development processes, from initial design to final presentation. Remember, the grading rubric and further details are available on Microsoft Teams. Best of luck, and we look forward to seeing your innovative applications!</p> <p>Wishing you the best of luck! The grading rubric can be found on Microsoft Teams.</p> <p>Homework Check Thresholds (If Below are Not Provided Homework won't be Accepted)</p> <ul> <li> <p>If No Submission or Missing Submission, No Github Repository or No Collaborative Work.</p> </li> <li> <p>No Releases for Csharp and Java Templates</p> </li> <li> <p>If Documentation Coverage %100 and Unit Test Coverage is Below %100</p> </li> <li> <p>If Release Folders with All Files Are Not Generated Correctly, if you cannot use CMake and Maven Templates correctly.</p> </li> <li> <p>If Unit Tests are Not Exist</p> </li> <li> <p>If Plagiarism Detected</p> </li> </ul> <p>Github and Git Usage</p> <ul> <li>Did you used following templates</li> </ul> <p>o Java Maven</p> <p>\u00a7 GitHub - ucoruh/eclipse-java-maven-template: Maven (Build,Test,Coverage,Publish) + Doxygen (HTML, Latex, RTF) + ReportGenerator + QA (Test Coverage) + Astyle Template</p> <p>\u00a7 Name this repository ce204-hw-name-surname-java</p> <ul> <li> <p>Did you open Private Github Repository with Correct naming ce204-hw-name-surname prefix, there should be three repositories for each team.</p> </li> <li> <p>Did you work with your friend is there any collaboration commits?</p> </li> <li> <p>Did you commit frequently?</p> </li> <li> <p>What are merger and conflict operations?</p> </li> <li> <p>Did you work on separate branches?</p> </li> <li> <p>Did you configure your e-mail with the correct name surname to profile and make your profile public?</p> </li> <li> <p>Did you upload your picture to Github repository?</p> </li> <li> <p>Did you configure pre-commit scripts with 1-configure-pre-commit.bat to avoid errors.</p> </li> <li> <p>Did you configure your gitignore file if there is a file that should be in projects?</p> </li> <li> <p>Did you generated releases on Github for maven templates.</p> </li> </ul> <p>Homework Submission</p> <ul> <li>Did you generate release files and submit your homework to Microsoft Teams?</li> </ul> <p>o Project repository without files that configured in gitignore.</p> <p>o Windows and Linux also MacOS Release Files (example outputs)</p> <p>o Did you submit Video 4 minute for each team member that you explained project?</p> <p>o Did you submit Presentation 10 Pages that you prepared as startup concept to explain your project.</p> <p>Development Environment Setup</p> <ul> <li> <p>Did you install WSL for Linux Development</p> </li> <li> <p>Did you install choco and scoop on Both Windows and WSL</p> </li> </ul> <p>o Test with choco \u2013version and scoop \u2013version</p> <p>o Installed with 3-install-package-manager.bat.</p> <ul> <li>Did you install Windows and Linux Environment with Batch Scripts</li> </ul> <p>o Windows Environment Installed with 4-install-windows-enviroment.bat.</p> <p>o Linux Environment Installed with 4-install-wsl-environment.sh.</p> <ul> <li> <p>Did you configure the project with 9-clean-configure-app-windows.bat to generate a Visual Studio Community Edition Solution for Programming.</p> </li> <li> <p>Did you try Open Project Folder with Visual Studio Community Edition to Develop Directly from Cmakelist.txt Scripts.</p> </li> </ul> <p>Project Folder Structure and CMake Configuration</p> <ul> <li> <p>Did you organize the project as an app, lib, and test like calculator examples?</p> </li> <li> <p>Did you locate your project's common functions in lib?</p> </li> <li> <p>Did you develop unit tests for library function these are located on test project?</p> </li> <li> <p>Did you integrate unit tests?</p> </li> <li> <p>Did you reference lib from both app and test projects?</p> </li> </ul> <p>Project Feature Checklist</p> <ul> <li> <p>Does your application work on both Windows and WSL, Open Windows Command line and WSL and Show Running Applications. Run Application from Directly Executables.</p> </li> <li> <p>Did you complete your application requirement features, open console application and show usage?</p> </li> </ul> <p>o Show file operations adding, editing, deleting, and listing records etc.</p> <p>o Show menu operations, are they managed with keyboards.</p> <p>o In file operations did you use structures.</p> <p>o Did you use binary files to store your records?</p> <ul> <li> <p>Show your unit tests and unit test coverages.</p> </li> <li> <p>Show your documentation and documentation coverage.</p> </li> </ul> <p>o Open Doxygen outputs, did you configure Doxygen files.</p> <ul> <li>Did you test inputs with unit tests?</li> </ul> <p>Programming Skills Checklist C/C++, Java and Csharp .Net Core, Maven and CMake</p> <ul> <li>Ask Questions about C/C++ Flow Controls</li> </ul> <p>o If/Else, While, For etc.</p> <ul> <li> <p>Ask Questions about Pointers and Arrays</p> </li> <li> <p>Ask Questions about Structures</p> </li> <li> <p>Ask Questions about Dynamic Memory Allocations Malloc/Free New/Delete</p> </li> <li> <p>Ask Questions about File Read/Write Operations</p> </li> <li> <p>Ask Questions about Preprocessors</p> </li> <li> <p>Ask Questions about Functions and Types, Function Parameter Usage, Passing Parameters as a Reference etc.</p> </li> <li> <p>Ask Questions about Cross-Compile Operations.</p> </li> <li> <p>Ask Questions about how to see memory during debug.</p> </li> <li> <p>Ask Questions about configuration types x86/Wind32 and x64 Differences.</p> </li> <li> <p>Etc.</p> </li> </ul>"},{"location":"project-guide/#project-description_1","title":"Project Description","text":""},{"location":"project-guide/#project-selection_1","title":"Project Selection","text":"<p>Choose an application from the provided appendix. Ensure no two teams select the same application to prevent plagiarism. Teams are self-formed; projects are not pre-assigned by us. Also, if you have taken this course again do not select the same project as other courses. You will select a single project idea and you will use develop same project in C/C++, Java and Csharp with prepared project templates for you.</p>"},{"location":"project-guide/#project-setup_1","title":"Project Setup:","text":"<p>Fork the templates from following repositories</p> <ul> <li> <p>C/C++ Cmake </p> </li> <li> <p>https://github.com/ucoruh/cpp-cmake-ctest-template</p> </li> <li> <p>Name this repository <code>ce205-final-name-surname-cpp</code></p> </li> <li> <p>Net Core Csharp </p> </li> <li> <p>https://github.com/ucoruh/vs-net-core-template</p> </li> <li> <p>Name this repository <code>ce205-final-name-surname-csharp</code></p> </li> <li> <p>Java Maven </p> </li> <li> <p>https://github.com/ucoruh/eclipse-java-maven-template</p> </li> <li> <p>Name this repository <code>ce205-final-name-surname-java</code></p> </li> </ul> <p>Your code must reside in a private GitHub repository, accessible only to us.</p>"},{"location":"project-guide/#development_1","title":"Development:","text":"<p>Construct a console application where the main functionality is housed within a separate library. This console application will utilize the said library for its operations. If There is a storage operation use binary files to record data. If There is a socket communications, APIs or Integrations with Remote services generate mockups to simulate operations. Each project idea has menu tree to define operations you should complete all operations and for console menu operations use keyboard arrows or tab for option and menu selections.</p>"},{"location":"project-guide/#team-collaboration_1","title":"Team Collaboration:","text":"<p>Include your team members in the GitHub project. There should be only one project repository for each team.</p>"},{"location":"project-guide/#instructor-collaboration_1","title":"Instructor Collaboration:","text":"<p>Add your instructor as a collaborator on the project.</p>"},{"location":"project-guide/#repository-privacy_1","title":"Repository Privacy:","text":"<p>Maintain the privacy of your repository. Public repositories will be treated as instances of plagiarism.</p>"},{"location":"project-guide/#development-documentation_1","title":"Development &amp; Documentation:","text":"<p>Develop the application and its accompanying unit tests. Document both the application and the library using Doxygen.</p>"},{"location":"project-guide/#template-usage_1","title":"Template Usage:","text":"<p>Ensure comprehensive utilization of the provided template. The template aids in building, testing, generating documentation, measuring test and documentation coverages, and packaging essential files. Failure to adhere to the template standards will result in non-acceptance.</p>"},{"location":"project-guide/#coverage-thresholds_1","title":"Coverage Thresholds:","text":"<p>Achieve a minimum of 100%-unit test coverage and 100% documentation coverage for project acceptance.</p>"},{"location":"project-guide/#platform-compatibility_1","title":"Platform Compatibility:","text":"<p>Ensure your application is compatible with both WSL/Linux and Windows OS.</p>"},{"location":"project-guide/#coding-standards_1","title":"Coding Standards:","text":"<p>Pay meticulous attention to your coding style, including function and variable naming conventions.</p>"},{"location":"project-guide/#presentation_1","title":"Presentation:","text":"<p>Prepare a presentation deck, with a limit of 10 slides, detailing your project.</p>"},{"location":"project-guide/#video-submission_1","title":"Video Submission:","text":"<p>Record a video presentation of your project. Each team member should contribute to the video, which should not exceed 4 minutes in total duration.</p>"},{"location":"project-guide/#contribution-tracking_1","title":"Contribution Tracking:","text":"<p>Individual contributions will be tracked via git commits. Commit frequently to reflect your involvement accurately.</p>"},{"location":"project-guide/#repository-management_1","title":"Repository Management:","text":"<p>On your GitHub, ensure well-maintained README.md files, gitignore, git usage notes, collaboration ratios, and manage merges/conflict resolutions. Documentation coverage will be evaluated in your repository.</p>"},{"location":"project-guide/#report-submission_1","title":"Report Submission:","text":"<p>Submit a detailed report named ce205-final-name-surname.docx.</p>"},{"location":"project-guide/#classroom-code-submission_1","title":"Classroom Code Submission:","text":"<p>Share your code in Classroom, excluding binaries. Any binary files present will result in a penalty. Remove any superfluous files.</p>"},{"location":"project-guide/#code-understanding_1","title":"Code Understanding:","text":"<p>Comment on your code thoroughly, providing explanations for your logic. Only submit work you understand.</p>"},{"location":"project-guide/#code-aesthetics_1","title":"Code Aesthetics:","text":"<p>Ensure your code is neatly formatted and indented for clarity.</p>"},{"location":"project-guide/#file-management_1","title":"File Management:","text":"<p>Ensure correct project and file types.</p>"},{"location":"project-guide/#code-quality_1","title":"Code Quality:","text":"<p>Do not submit malfunctioning or bug-ridden code.</p>"},{"location":"project-guide/#test-results_1","title":"Test Results:","text":"<p>Your project's test outcomes must be accurate.</p>"},{"location":"project-guide/#algorithm-explanation_1","title":"Algorithm Explanation:","text":"<p>If your project involves algorithmic solutions, provide a step-by-step explanation of your methods.</p>"},{"location":"project-guide/#source-code-naming_1","title":"Source Code Naming:","text":"<p>The source code should be archived and named as ce205-final-name-surname.rar. This archive should contain the Visual Studio solution cloned from GitHub.</p>"},{"location":"project-guide/#originality_1","title":"Originality:","text":"<p>Do not replicate someone else's code. We will employ software to detect similarities. Take ownership of the provided source codes and make them uniquely yours. Strict plagiarism checks will be in place.</p>"},{"location":"project-guide/#documentation-sharing_1","title":"Documentation Sharing:","text":"<p>Only share the Doxygen-generated PDF documentation. Refrain from sending any HTML or other auto-generated documentation components.</p>"},{"location":"project-guide/#warning_1","title":"Warning:","text":"<p>Relying on tools like ChatGPT for your project development or documentation is discouraged. Authenticity and originality are paramount.</p>"},{"location":"project-guide/#devops_1","title":"DevOps:","text":"<p>Csharp and Java templates should create releases.</p>"},{"location":"project-guide/#homework-check-thresholds_1","title":"Homework Check Thresholds","text":"<p>(If Below are Not Provided Homework won't be Accepted)</p> <ul> <li> <p>If No Submission or Missing Submission, No Github Repository or No Collaborative Work. </p> </li> <li> <p>No Releases for Csharp and Java Templates</p> </li> <li> <p>If Documentation Coverage and Unit Test Coverage is Below %100</p> </li> <li> <p>If Release Folders with All Files Are Not Generated Correctly, if you cannot use CMake, Maven and .Net Core Templates correctly. </p> </li> <li> <p>If Unit Tests are Not Exist</p> </li> <li> <p>If Plagiarism Detected</p> </li> </ul>"},{"location":"project-guide/#these-questions-will-be-asked-to-you-during-review_1","title":"These Questions Will Be Asked to You During Review","text":""},{"location":"project-guide/#github-and-git-usage_1","title":"Github and Git Usage","text":"<ul> <li> <p>Did you used following templates </p> </li> <li> <p>C/C++ Cmake</p> </li> <li> <p>https://github.com/ucoruh/cpp-cmake-ctest-template</p> </li> <li> <p>Name this repository ce205-final-name-surname-cpp</p> </li> <li> <p>.Net Core Csharp</p> </li> <li> <p>https://github.com/ucoruh/vs-net-core-template</p> </li> <li> <p>Name this repository ce205-final-name-surname-csharp</p> </li> <li> <p>Java Maven</p> </li> <li> <p>https://github.com/ucoruh/eclipse-java-maven-template</p> </li> <li> <p>Name this repository ce205-final-name-surname-java</p> </li> <li> <p>Did you open Private Github Repository with Correct naming ce205-final-name-surname prefix, there should be three repository for each team. </p> </li> <li> <p>Did you work with your friend is there any collaboration commits?</p> </li> <li> <p>Did you commit frequently?</p> </li> <li> <p>What are merger and conflict operations?</p> </li> <li> <p>Did you work on separate branches?</p> </li> <li> <p>Did you configure your e-mail with the correct name surname to profile and make your profile public?</p> </li> <li> <p>Did you upload your picture to Github repository?</p> </li> <li> <p>Did you configure pre-commit scripts with 1-configure-pre-commit.bat to avoid errors. </p> </li> <li> <p>Did you configure your gitignore file if there is a file that should be in projects?</p> </li> <li> <p>Did you generated releases on Github for maven and .netcore templates.</p> </li> </ul>"},{"location":"project-guide/#homework-submission_1","title":"Homework Submission","text":"<ul> <li> <p>Did you generate release files and submit your homework to Microsoft Teams?</p> </li> <li> <p>Project repository without files that configured in gitignore</p> </li> <li> <p>Windows and Linux also MacOS Release Files (example outputs)</p> </li> <li> <p>Did you submit Video 4 minute for each team member that you explained project?</p> </li> <li> <p>Did you submit Presentation 10 Pages that you prepared as startup concept to explain your project.</p> </li> </ul>"},{"location":"project-guide/#development-environment-setup_1","title":"Development Environment Setup","text":"<ul> <li> <p>Did you install WSL for Linux Development</p> </li> <li> <p>Did you install choco and scoop on Both Windows and WSL</p> </li> <li> <p>Test with choco \u2013version and scoop \u2013version</p> </li> <li> <p>Installed with 3-install-package-manager.bat. </p> </li> <li> <p>Did you install Windows and Linux Environment with Batch Scripts</p> </li> <li> <p>Windows Environment Installed with 4-install-windows-enviroment.bat.</p> </li> <li> <p>Linux Environment Installed with 4-install-wsl-environment.sh.</p> </li> <li> <p>Did you configure the project with 9-clean-configure-app-windows.bat to generate a Visual Studio Community Edition Solution for Programming. </p> </li> <li> <p>Did you try Open Project Folder with Visual Studio Community Edition to Develop Directly from Cmakelist.txt Scripts. </p> </li> </ul>"},{"location":"project-guide/#project-folder-structure-and-cmake-configuration_1","title":"Project Folder Structure and CMake Configuration","text":"<ul> <li> <p>Did you organize the project as an app, lib, and test like calculator examples?</p> </li> <li> <p>Did you locate your project's common functions in lib? </p> </li> <li> <p>Did you develop unit tests for library function these are located on test project?</p> </li> <li> <p>Did you integrate unit tests?</p> </li> <li> <p>Did you reference lib from both app and test projects? </p> </li> </ul>"},{"location":"project-guide/#project-feature-checklist_1","title":"Project Feature Checklist","text":"<ul> <li> <p>Does your application work on both Windows and WSL, Open Windows Command line and WSL and Show Running Applications. Run Application from Directly Executables. </p> </li> <li> <p>Did you complete your application requirement features, open console application and show usage?</p> </li> <li> <p>Show file operations adding, editing, deleting, and listing records etc. </p> </li> <li> <p>Show menu operations, are they managed with keyboards.</p> </li> <li> <p>In file operations did you use structures.</p> </li> <li> <p>Did you use binary files to store your records?</p> </li> <li> <p>Show your unit tests and unit test coverages.</p> </li> <li> <p>Show your documentation and documentation coverage.</p> </li> <li> <p>Open Doxygen outputs, did you configure Doxygen files.</p> </li> <li> <p>Did you test inputs with unit tests?</p> </li> </ul>"},{"location":"project-guide/#programming-skills-checklist-cc-java-and-csharp-net-core-maven-and-cmake_1","title":"Programming Skills Checklist C/C++, Java and Csharp .Net Core, Maven and CMake","text":"<ul> <li> <p>Ask Questions about C/C++ Flow Controls</p> </li> <li> <p>If/Else, While, For etc.</p> </li> <li> <p>Ask Questions about Pointers and Arrays</p> </li> <li> <p>Ask Questions about Structures</p> </li> <li> <p>Ask Questions about Dynamic Memory Allocations Malloc/Free New/Delete</p> </li> <li> <p>Ask Questions about File Read/Write Operations</p> </li> <li> <p>Ask Questions about Preprocessors</p> </li> <li> <p>Ask Questions about Functions and Types, Function Parameter Usage, Passing Parameters as a Reference etc.</p> </li> <li> <p>Ask Questions about Cross-Compile Operations.</p> </li> <li> <p>Ask Questions about to show how Call stack checked on Visual Studio</p> </li> <li> <p>Ask Questions about how to debug applications and see variables.</p> </li> <li> <p>Ask Questions about how to see memory during debug.</p> </li> <li> <p>Ask Questions about configuration types x86/Wind32 and x64 Differences. </p> </li> <li> <p>Etc.</p> </li> </ul>"},{"location":"project-guide/#appendix-application-list_1","title":"Appendix \u2013 Application List","text":""},{"location":"project-guide/#01-book-exchange-platform_2","title":"01-Book Exchange Platform:","text":"<ul> <li> <p>Listing books for exchange.</p> </li> <li> <p>Managing exchange requests.</p> </li> <li> <p>Rating system for users.</p> </li> <li> <p>Tracking exchange history.</p> </li> </ul>"},{"location":"project-guide/#common-features_86","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Implement a login system to allow registered users to access the platform. Users should be able to create accounts and log in securely.</p> </li> <li> <p>Book Database: Create a file to store information about books available for exchange. Each book entry should include details like title, author, genre, and owner.</p> </li> <li> <p>Menu System: Design a user-friendly console menu system to navigate through various options in the application. Users can use keyboard inputs to select menu items.</p> </li> <li> <p>Search and Listing: Allow users to search for books based on criteria like title, author, or genre. Users should also be able to list their own books for exchange.</p> </li> <li> <p>Exchange Requests: Users should be able to send and receive exchange requests for books. Include options to accept or decline requests from console application.</p> </li> <li> <p>Rating System: Implement a rating system where users can rate and leave reviews for each other after a successful exchange. Display user ratings alongside their profiles.</p> </li> <li> <p>History Tracking: Keep a record of all past exchange transactions, including details of the books exchanged, date, and user information.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_85","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store book information and transaction history in binary files.</p> </li> <li> <p>Implement a text-based UI for the console menu.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_85","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_85","title":"C# Specific Details:","text":"<ul> <li>Use C#'s file handling capabilities to manage data storage.</li> </ul> <p>Create a well-structured console application using the Console class for user interactions. Remember to optimize the code for efficient data storage and retrieval, error handling, and user experience. These are the core features you can include in your console application for a Book Exchange Platform in these programming languages. You can further enhance the functionality based on your specific requirements.</p> <p></p>"},{"location":"project-guide/#02-personal-time-tracker_2","title":"02-Personal Time Tracker:","text":"<ul> <li> <p>Activity logging.</p> </li> <li> <p>Time spent analysis.</p> </li> <li> <p>Productivity reports.</p> </li> <li> <p>Break reminders.</p> </li> </ul>"},{"location":"project-guide/#common-features_87","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts and log in securely to track their time. Implement user profiles with usernames and passwords.</p> </li> <li> <p>Activity Logging: Provide users with the ability to log their activities throughout the day. They should be able to enter details such as activity name, start time, and end time.</p> </li> <li> <p>Time Spent Analysis: Calculate and display the total time spent on each activity, both daily and over longer periods. Present this information in a clear and concise manner.</p> </li> <li> <p>Productivity Reports: Generate productivity reports based on the logged data. These reports can include graphs or charts to visualize time spent on different activities.</p> </li> <li> <p>Break Reminders: Implement a feature to remind users to take regular breaks. Users can set the duration between breaks and receive notifications.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_86","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store activity logs and user data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to log activities and view reports.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_86","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_86","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like data export (e.g., exporting reports to a CSV file), customizable break reminders, and the ability to categorize activities for more detailed analysis. Ensure that the application is optimized for performance and user-friendly for efficient time tracking and analysis.</p> <p></p>"},{"location":"project-guide/#03-digital-journaldiary_2","title":"03-Digital Journal/Diary:","text":"<ul> <li> <p>Daily entry logging.</p> </li> <li> <p>Search and filter entries.</p> </li> <li> <p>Password protection.</p> </li> <li> <p>Mood tracking.</p> </li> </ul>"},{"location":"project-guide/#common-features_88","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts with usernames and passwords. Password protection ensures the privacy and security of journal entries.</p> </li> <li> <p>Daily Entry Logging: Provide users with the ability to create daily journal entries. Each entry should include a date, time, and the option to write down thoughts, experiences, or notes.</p> </li> <li> <p>Search and Filter Entries: Implement a search functionality that allows users to find specific journal entries by date, keyword, or mood. Users can filter their entries based on criteria of their choice.</p> </li> <li> <p>Password Protection: Ensure that the journal is password-protected, so only authorized users can access their entries. Passwords should be securely stored.</p> </li> <li> <p>Mood Tracking: Allow users to record their mood for each journal entry, such as happy, sad, stressed, or relaxed. This can help users track their emotional journey over time.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_87","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store journal entries and user data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to add, search, and read journal entries.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_87","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_87","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider enhancing the application with additional features like the ability to attach images or files to entries, tagging entries with keywords, and generating summary reports based on mood or specific date ranges. Ensure that the application is optimized for performance and provides a secure and user-friendly environment for journaling.</p> <p></p>"},{"location":"project-guide/#04-expense-sharing-among-friends_2","title":"04-Expense Sharing Among Friends:","text":"<ul> <li> <p>Expense recording and splitting.</p> </li> <li> <p>Balance tracking.</p> </li> <li> <p>Notifications for settlements.</p> </li> <li> <p>Summary of shared expenses.</p> </li> </ul>"},{"location":"project-guide/#common-features_89","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts with usernames and passwords. User accounts will help track expenses and balances accurately.</p> </li> <li> <p>Expense Recording and Splitting: Provide a way for users to record their expenses and split them among friends. Users should be able to enter details such as the expense amount, description, and the friends with whom they are sharing the expense.</p> </li> <li> <p>Balance Tracking: Keep track of the balances between users, showing who owes money to whom. Update balances automatically when expenses are added or settled.</p> </li> <li> <p>Notifications for Settlements: Implement a notification system to inform users when they have pending settlements or when someone has settled an expense with them.</p> </li> <li> <p>Summary of Shared Expenses: Generate a summary of all shared expenses, showing each user's contributions, shared expenses, and balances. This summary can be viewed for individual users or groups of friends.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_88","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store expense data, user accounts, and balances in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to record expenses, view balances, and settle debts.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_88","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_88","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like expense categories, the ability to create and manage groups of friends for shared expenses, and exporting reports to a file for record-keeping. Ensure that the application efficiently handles expense calculations and provides a convenient way for friends to track shared expenses and settle debts.</p> <p></p>"},{"location":"project-guide/#05-virtual-study-timer-pomodoro-technique_2","title":"05-Virtual Study Timer (Pomodoro Technique):","text":"<ul> <li> <p>Customizable work/break intervals.</p> </li> <li> <p>Progress tracking.</p> </li> <li> <p>Reminder alarms.</p> </li> <li> <p>Statistics on study patterns.</p> </li> </ul>"},{"location":"project-guide/#common-features_90","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts if they want to save their study statistics and preferences. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Customizable Work/Break Intervals: Let users customize the length of their work (study) and break intervals. They should be able to set the duration of work sessions and breaks according to their preferences.</p> </li> <li> <p>Progress Tracking: Display a timer that counts down during work sessions and break periods. Users should be able to see the remaining time for their current task.</p> </li> <li> <p>Reminder Alarms: Provide users with optional reminder alarms at the end of each work session and break to notify them to switch tasks. Allow them to choose their preferred sound or notification method.</p> </li> <li> <p>Statistics on Study Patterns: Keep track of study patterns, such as the number of completed work sessions, total study time, and average session length. Generate statistics and charts to help users analyze their study habits.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_89","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user preferences and study statistics in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to start, pause, and customize study sessions.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_89","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_89","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to set long-term study goals, analyze historical study data, and export statistics for future reference. Ensure that the application is optimized for efficient time management and provides a motivating environment for productive study sessions.</p> <p></p>"},{"location":"project-guide/#06-diet-planner_2","title":"06-Diet Planner:","text":"<ul> <li> <p>Meal planning and logging.</p> </li> <li> <p>Calorie and nutrient tracking.</p> </li> <li> <p>Personalized diet recommendations.</p> </li> <li> <p>Shopping list generator.</p> </li> </ul>"},{"location":"project-guide/#common-features_91","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their diet plans and track their progress. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Meal Planning and Logging: Provide a way for users to plan their meals for the day or week. Allow users to log the foods and portions they consume for each meal.</p> </li> <li> <p>Calorie and Nutrient Tracking: Implement a calorie and nutrient tracker that calculates the total calorie intake and nutritional values based on the logged foods. Users can set daily calorie and nutrient goals.</p> </li> <li> <p>Personalized Diet Recommendations: Offer personalized diet recommendations based on user profiles, including age, gender, weight, height, and dietary preferences (e.g., vegetarian, vegan, or low-carb).</p> </li> <li> <p>Shopping List Generator: Generate a shopping list based on the meal plans and recipes selected by the user. The list should include the quantities of ingredients needed.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_90","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, meal plans, and diet data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan meals, log food, and view nutrition information.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_90","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_90","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a food database with nutritional information, the ability to track weight and fitness goals, and meal plan sharing with friends or nutritionists. Ensure that the application provides accurate nutritional information and helps users make healthier dietary choices.</p> <p></p>"},{"location":"project-guide/#07-personal-career-tracker_2","title":"07-Personal Career Tracker:","text":"<ul> <li> <p>Job application tracker.</p> </li> <li> <p>Skill development progress.</p> </li> <li> <p>Interview preparation notes.</p> </li> <li> <p>Career milestone logging.</p> </li> </ul>"},{"location":"project-guide/#common-features_92","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their career tracking and store their data securely.</p> </li> <li> <p>Job Application Tracker: Provide a way for users to track their job applications. Users can log details such as the company name, position applied for, application date, and status of the application (e.g., pending, rejected, interview scheduled).</p> </li> <li> <p>Skill Development Progress: Implement a skill development tracker where users can list their skills and track their progress in acquiring and improving those skills. They can set goals and log achievements.</p> </li> <li> <p>Interview Preparation Notes: Allow users to create and store interview preparation notes for specific job applications. This can include details about the company, job role, common interview questions, and personal notes.</p> </li> <li> <p>Career Milestone Logging: Enable users to log and celebrate career milestones and achievements, such as promotions, certifications, or completed projects.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_91","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, job application data, skill progress, interview notes, and career milestones in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to add, edit, and view career-related information.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_91","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_91","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like goal setting for career development, the ability to export reports for job applications and skill progress, and integration with job search websites for streamlined application tracking. Ensure that the application helps users stay organized and motivated in their career pursuits.</p> <p></p>"},{"location":"project-guide/#08-password-manager_2","title":"08-Password Manager:","text":"<ul> <li> <p>Secure storage of passwords.</p> </li> <li> <p>Password generator.</p> </li> <li> <p>Auto-login feature.</p> </li> <li> <p>Multi-platform compatibility.</p> </li> </ul>"},{"location":"project-guide/#common-features_93","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create a master password to access the password manager securely. This master password should be securely stored and used to encrypt and decrypt stored passwords.</p> </li> <li> <p>Secure Storage of Passwords: Implement secure storage for passwords using encryption algorithms to protect sensitive data. Passwords should be organized by categories or accounts for easy retrieval.</p> </li> <li> <p>Password Generator: Provide a password generation feature to create strong, unique passwords for various online accounts. Users can specify password length and complexity.</p> </li> <li> <p>Auto-Login Feature: Allow users to configure auto-login for selected accounts. When enabled, the password manager can automatically enter the credentials for a specific website or application.</p> </li> <li> <p>Multi-Platform Compatibility: Ensure that the password manager is compatible with multiple platforms, such as Windows, macOS, Linux, and mobile devices (Android and iOS). You can create separate versions for different platforms if needed.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_92","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store encrypted password data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage passwords, generate passwords, and enable auto-login.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_92","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_92","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>For multi-platform compatibility, consider creating a command-line interface (CLI) version of the password manager that can run on different operating systems. Additionally, ensure that the application follows industry best practices for encryption and security to protect user passwords effectively.</p> <p></p>"},{"location":"project-guide/#09-yogameditation-scheduler_2","title":"09-Yoga/Meditation Scheduler:","text":"<ul> <li> <p>Session scheduling.</p> </li> <li> <p>Pose and technique library.</p> </li> <li> <p>Progress tracking.</p> </li> <li> <p>Reminder for daily practice.</p> </li> </ul>"},{"location":"project-guide/#common-features_94","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their yoga/meditation practice and track their progress. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Session Scheduling: Provide a way for users to schedule their yoga or meditation sessions. Users can specify the date, time, duration, and type of practice (e.g., yoga, meditation, specific poses).</p> </li> <li> <p>Pose and Technique Library: Include a library with a collection of yoga poses, meditation techniques, and breathing exercises. Users can browse and select from this library when scheduling their sessions.</p> </li> <li> <p>Progress Tracking: Implement a progress tracker that records the user's practice history. Track factors like the number of sessions completed, session duration, and improvements in flexibility or mindfulness.</p> </li> <li> <p>Reminder for Daily Practice: Allow users to set reminders for their daily yoga or meditation practice. Users can choose to receive notifications or alarms at their preferred practice times.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_93","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, session data, and progress tracking in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to schedule sessions, view progress, and set reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_93","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_93","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to create custom sessions, track mood or stress levels before and after practice, and provide guided audio or video instructions for sessions. Ensure that the application encourages regular yoga and meditation practice and helps users improve their well-being.</p> <p></p>"},{"location":"project-guide/#10-coding-snippet-manager_2","title":"10-Coding Snippet Manager:","text":"<ul> <li> <p>Storing and categorizing code snippets.</p> </li> <li> <p>Search functionality.</p> </li> <li> <p>Sharing snippets with others.</p> </li> <li> <p>Integrations with popular IDEs.</p> </li> </ul>"},{"location":"project-guide/#common-features_95","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts for personalized code snippet management and tracking. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Storing and Categorizing Code Snippets: Provide a way for users to store and categorize their code snippets based on programming languages, frameworks, or specific projects. Users can add titles, descriptions, and tags to each snippet.</p> </li> <li> <p>Search Functionality: Implement a robust search functionality that allows users to search for code snippets using keywords, tags, or programming languages. Display search results with relevant snippets.</p> </li> <li> <p>Sharing Snippets with Others: Enable users to share their code snippets with others, either through a public repository or by sharing a link. Users can set visibility options for their snippets (public, private, or shared with specific users).</p> </li> <li> <p>Integrations with Popular IDEs: Integrate the code snippet manager with popular Integrated Development Environments (IDEs) like Visual Studio Code, IntelliJ IDEA, or Visual Studio. Users can easily import and export snippets directly from their development environment.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_94","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, code snippets, and sharing settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage snippets, search, and share.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_94","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_94","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>For integrations with IDEs, consider creating plugins or extensions that seamlessly connect the code snippet manager to developers' preferred development environments. Additionally, allow users to rate and comment on shared code snippets to foster a collaborative coding community. Ensure that the application helps developers manage and find code snippets efficiently.</p> <p></p>"},{"location":"project-guide/#11-home-renovation-planner_2","title":"11-Home Renovation Planner:","text":"<ul> <li> <p>Project and budget planning.</p> </li> <li> <p>Task assignment and tracking.</p> </li> <li> <p>Cost analysis and reporting.</p> </li> <li> <p>Supplier and contractor database.</p> </li> </ul>"},{"location":"project-guide/#common-features_96","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their renovation projects and track their progress. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Project and Budget Planning: Provide a way for users to plan their home renovation projects. Users can specify project details, including scope, timeline, and budget. They can also set milestones and goals.</p> </li> <li> <p>Task Assignment and Tracking: Implement task management features that allow users to assign tasks to team members or contractors. Users can track the status of each task and set deadlines.</p> </li> <li> <p>Cost Analysis and Reporting: Create tools for users to track project expenses. Users can enter costs for materials, labor, and other expenses. Generate reports that provide a breakdown of expenses and budget status.</p> </li> <li> <p>Supplier and Contractor Database: Include a database where users can store information about suppliers, contractors, and service providers. Users can add contact details, reviews, and project history.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_95","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, project data, task assignments, and cost records in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan projects, assign tasks, and view cost reports.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_95","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_95","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like document management for project plans and contracts, a calendar for scheduling tasks and deadlines, and the ability to export reports in various formats (PDF, CSV). Ensure that the application helps users efficiently plan and manage their home renovation projects within budget and on schedule.</p> <p></p>"},{"location":"project-guide/#12-car-maintenance-log_1","title":"12-Car Maintenance Log:","text":"<ul> <li> <p>Service history tracking.</p> </li> <li> <p>Maintenance reminders.</p> </li> <li> <p>Expense logging.</p> </li> <li> <p>Fuel efficiency reports.</p> </li> </ul>"},{"location":"project-guide/#common-features_97","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts for personalized car maintenance tracking and record-keeping. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Service History Tracking: Provide a way for users to log and track the service history of their vehicles. Users can record details such as service date, type of service (e.g., oil change, tire rotation), service provider, and cost.</p> </li> <li> <p>Maintenance Reminders: Implement a reminder system that notifies users when it's time for scheduled maintenance tasks (e.g., oil change, brake inspection) based on mileage or time intervals.</p> </li> <li> <p>Expense Logging: Allow users to log and categorize expenses related to their vehicles, including fuel costs, repairs, and maintenance. Users can track expenses over time and generate reports.</p> </li> <li> <p>Fuel Efficiency Reports: Calculate and provide fuel efficiency reports that show metrics like miles per gallon (MPG) or liters per 100 kilometers (L/100km). Users can see their vehicle's fuel efficiency trends.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_96","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, vehicle data, service records, expense logs, and reminders in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to log maintenance, view reminders, and generate reports.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_96","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_96","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to store vehicle specifications (make, model, year), upload and store service invoices, and generate charts or graphs to visualize maintenance and fuel efficiency trends. Ensure that the application helps users keep their vehicles well-maintained and cost-efficient.</p> <p></p>"},{"location":"project-guide/#13-music-practice-scheduler_1","title":"13-Music Practice Scheduler:","text":"<ul> <li> <p>Instrument practice logging.</p> </li> <li> <p>Set goals and track progress.</p> </li> <li> <p>Reminder for practice sessions.</p> </li> <li> <p>Music theory reference.</p> </li> </ul>"},{"location":"project-guide/#common-features_98","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts for personalized music practice tracking and progress monitoring. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Instrument Practice Logging: Provide a way for users to log their instrument practice sessions. Users can record details such as practice date, instrument played, duration, and specific exercises or pieces practiced.</p> </li> <li> <p>Goal Setting and Progress Tracking: Implement goal-setting features that allow users to set specific practice goals (e.g., learning a new song, mastering a technique) and track their progress over time. Show statistics and progress reports.</p> </li> <li> <p>Reminder for Practice Sessions: Set up a reminder system to notify users of scheduled practice sessions. Users can configure practice session reminders at preferred times.</p> </li> <li> <p>Music Theory Reference: Include a built-in music theory reference section where users can access information on music theory concepts, scales, chords, and more to aid their practice.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_97","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, practice session data, practice goals, and progress records in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to log practice sessions, set goals, and view progress.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_97","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_97","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a metronome tool, the ability to record and playback practice sessions, and practice session sharing with teachers or fellow musicians. Ensure that the application motivates users to practice regularly and helps them achieve their musical goals.</p> <p></p>"},{"location":"project-guide/#14-household-chore-scheduler_1","title":"14-Household Chore Scheduler:","text":"<ul> <li> <p>Chore assignment for family members.</p> </li> <li> <p>Schedule and reminder setup.</p> </li> <li> <p>Progress tracking.</p> </li> <li> <p>Reward system for completed chores.</p> </li> </ul>"},{"location":"project-guide/#common-features_99","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow family members to create accounts or profiles within the application. This can help personalize chore assignments and tracking for each user.</p> </li> <li> <p>Chore Assignment for Family Members: Implement a system for assigning chores to family members. Users can specify the chore, assign it to a family member, and set due dates or frequencies (e.g., daily, weekly).</p> </li> <li> <p>Schedule and Reminder Setup: Enable users to set up schedules for chore completion and receive reminders when chores are due. Reminders can be sent through notifications or emails.</p> </li> <li> <p>Progress Tracking: Create a progress tracker that records completed chores and shows which family members are actively participating in household tasks. Users can view their own progress and that of others.</p> </li> <li> <p>Reward System for Completed Chores: Implement a reward or incentive system where family members earn points or rewards for completing chores. Users can redeem points for rewards determined by the family.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_98","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, chore assignments, progress records, and reward data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to assign chores, set schedules, and track progress.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_98","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_98","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a leaderboard to track the most active family members in completing chores, a messaging system for communication between family members, and the ability to customize rewards based on the family's preferences. Ensure that the application promotes a fair distribution of household responsibilities and encourages family members to contribute to chores.</p> <p></p>"},{"location":"project-guide/#15-personal-energy-consumption-tracker_1","title":"15-Personal Energy Consumption Tracker:","text":"<ul> <li> <p>Monitoring energy use in the home.</p> </li> <li> <p>Tips for reducing consumption.</p> </li> <li> <p>Cost calculation based on usage.</p> </li> <li> <p>Carbon footprint analysis.</p> </li> </ul>"},{"location":"project-guide/#common-features_100","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their energy consumption tracking and access historical data. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Monitoring Energy Use in the Home: Implement a system for monitoring energy consumption in the home. Users can input data from utility bills or use smart meters to track electricity and gas usage. The application can also integrate with IoT devices to capture real-time data.</p> </li> <li> <p>Tips for Reducing Consumption: Provide energy-saving tips and recommendations to help users reduce their energy consumption. These tips can be based on usage patterns and historical data.</p> </li> <li> <p>Cost Calculation Based on Usage: Calculate and display the cost of energy consumption based on usage. Users can input their utility rates, and the application calculates and displays the cost of energy use over time.</p> </li> <li> <p>Carbon Footprint Analysis: Analyze the carbon footprint associated with energy consumption. Show users the environmental impact of their energy use and provide suggestions for reducing carbon emissions.</p> </li> </ul> <p>#### C/C++ Specific Details:</p> <ul> <li> <p>Use file handling to store user profiles, energy consumption data, and cost calculations in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to input data, view energy usage, and receive tips and reports.</p> </li> </ul> <p>#### Java Specific Details:</p> <ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul> <p>#### C# Specific Details:</p> <ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to set energy-saving goals, view historical consumption trends, and receive notifications or alerts when energy usage exceeds predefined thresholds. Ensure that the application helps users make informed decisions about their energy consumption and contributes to environmental sustainability.</p> <p></p>"},{"location":"project-guide/#16-kids-activity-planner_1","title":"16-Kids' Activity Planner:","text":"<ul> <li> <p>Educational resource integration.</p> </li> <li> <p>Scheduling activities and playdates.</p> </li> <li> <p>Development milestone tracker.</p> </li> <li> <p>Parental notes and reminders.</p> </li> </ul>"},{"location":"project-guide/#common-features_101","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow parents or caregivers to create accounts to personalize the activity planning for their children. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Scheduling Activities and Playdates: Implement a calendar or scheduling system where parents can plan and schedule activities, playdates, and events for their kids. Parents can set date, time, location, and descriptions for each activity.</p> </li> <li> <p>Educational Resource Integration: Integrate educational resources such as educational games, videos, or articles relevant to children's    development. Parents can access and share these resources with their kids.</p> </li> <li> <p>Development Milestone Tracker: Provide a milestone tracking feature that helps parents monitor their child's developmental progress. Parents can record and view milestones achieved in areas like language development, motor skills, and social interactions.</p> </li> <li> <p>Parental Notes and Reminders: Allow parents to add notes and reminders related to their children's activities and development. These can include specific instructions, appointments, or important dates.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_99","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, activity schedules, milestone records, and notes in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan activities, track milestones, and view reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_99","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_99","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a child-friendly interface for age-appropriate educational resources, a growth chart to visualize development progress, and the ability to share activities and milestones with other family members or caregivers. Ensure that the application supports parents in planning engaging and educational activities for their kids and helps track their developmental milestones.</p> <p></p>"},{"location":"project-guide/#17-freelance-client-manager_1","title":"17-Freelance Client Manager:","text":"<ul> <li> <p>Client information storage.</p> </li> <li> <p>Project tracking and deadlines.</p> </li> <li> <p>Payment reminders.</p> </li> <li> <p>Communication log.</p> </li> </ul>"},{"location":"project-guide/#common-features_102","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow freelancers to create accounts to personalize their client management and project tracking. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Client Information Storage: Implement a system for storing client information, including contact details, project history, and any specific preferences or requirements.</p> </li> <li> <p>Project Tracking and Deadlines: Provide tools for freelancers to track ongoing projects, including project names, descriptions, deadlines, and progress status. The application can help manage multiple projects simultaneously.</p> </li> <li> <p>Payment Reminders: Set up a reminder system to notify freelancers of upcoming payment deadlines or milestones. Users can configure payment reminders based on project terms.</p> </li> <li> <p>Communication Log: Create a log for recording and storing communication with clients. This can include emails, messages, and notes related to specific projects or clients.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_100","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, client data, project details, payment records, and communication logs in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to add and manage client information, track projects, and set payment reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_100","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_100","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to generate invoices, track expenses related to freelance work, and export reports for financial analysis. Ensure that the application helps freelancers stay organized, meet deadlines, and effectively manage client relationships.</p> <p></p>"},{"location":"project-guide/#18-personal-reading-challenge-tracker_1","title":"18-Personal Reading Challenge Tracker:","text":"<ul> <li> <p>Setting reading goals.</p> </li> <li> <p>Tracking books read.</p> </li> <li> <p>Sharing reviews and ratings.</p> </li> <li> <p>Generating reading statistics.</p> </li> </ul>"},{"location":"project-guide/#common-features_103","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts for personalized reading challenge tracking and sharing. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Setting Reading Goals: Implement a system where users can set reading goals for a specific time period (e.g., yearly, monthly, or custom). Goals can include the number of books to read or reading time targets.</p> </li> <li> <p>Tracking Books Read: Provide a way for users to log and track the books they've read. Users can record book titles, authors, genres, and dates of completion.</p> </li> <li> <p>Sharing Reviews and Ratings: Allow users to write book reviews and provide ratings for the books they've read. Users can share their reviews with others in the community.</p> </li> <li> <p>Generating Reading Statistics: Generate statistics and charts to show users their reading progress. This can include the number of books read, reading time, genres explored, and more.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_101","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, reading goals, book records, reviews, and statistics in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to set goals, log books, write reviews, and view reading statistics.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_101","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_101","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a book recommendation system based on reading preferences, the ability to join or create reading challenges with friends, and the option to export reading statistics to share on social media. Ensure that the application motivates users to achieve their reading goals and provides a platform for discussing books and sharing recommendations with others.</p> <p></p>"},{"location":"project-guide/#19-greenhouse-management-tool_1","title":"19-Greenhouse Management Tool:","text":"<ul> <li> <p>Monitoring plant growth.</p> </li> <li> <p>Watering and fertilization schedule.</p> </li> <li> <p>Pest and disease log.</p> </li> <li> <p>Climate control settings.</p> </li> </ul>"},{"location":"project-guide/#common-features_104","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow greenhouse managers or gardeners to create accounts to personalize their greenhouse management and record-keeping. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Monitoring Plant Growth: Implement a system for monitoring the growth of plants in the greenhouse. Users can track the growth stages, health status, and any specific observations for each plant type.</p> </li> <li> <p>Watering and Fertilization Schedule: Provide tools for setting up watering and fertilization schedules based on plant type, soil moisture, and growth stage. Users can receive notifications when it's time to water or fertilize.</p> </li> <li> <p>Pest and Disease Log: Create a log for recording instances of pests and diseases affecting plants. Users can document the issue, treatment applied, and the outcome. This helps in identifying recurring problems.</p> </li> <li> <p>Climate Control Settings: Allow users to manage climate control settings such as temperature, humidity, and ventilation. Users can set ideal conditions for different plant types and receive alerts for climate anomalies.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_102","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, plant growth data, watering schedules, pest logs, and climate control settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to monitor plant growth, set schedules, and record pest and disease occurrences.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_102","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_102","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like data visualization (e.g., charts showing plant growth trends), plant-specific care guides, and the ability to export data for analysis or sharing with gardening communities. Ensure that the application helps greenhouse managers maintain healthy and thriving plants while effectively managing greenhouse conditions.</p> <p></p>"},{"location":"project-guide/#20-music-festival-planner_1","title":"20-Music Festival Planner:","text":"<ul> <li> <p>Band and artist management.</p> </li> <li> <p>Scheduling performances.</p> </li> <li> <p>Ticket sales tracking.</p> </li> <li> <p>Vendor and sponsor coordination.</p> </li> </ul>"},{"location":"project-guide/#common-features_105","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow festival organizers to create accounts to personalize their festival planning and record-keeping. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Band and Artist Management: Implement a system for managing information about bands and artists scheduled to perform. Users can enter details like band names, genres, contact information, and performance contracts.</p> </li> <li> <p>Scheduling Performances: Create a scheduling feature where festival organizers can schedule performances, set stage times, and create a festival lineup. Users can view the festival schedule with performance details.</p> </li> <li> <p>Ticket Sales Tracking: Track ticket sales, including the number of tickets sold, revenue generated, and attendee demographics. Users can access real-time sales data and generate reports.</p> </li> <li> <p>Vendor and Sponsor Coordination: Include tools for coordinating vendors and sponsors. Users can manage vendor applications, track sponsor agreements, and ensure that all necessary arrangements are made.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_103","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, band/artist data, performance schedules, ticket sales records, and vendor/sponsor information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage festival details, schedule performances, and track ticket sales.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_103","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_103","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like marketing and promotion tools, a budget tracker, and a map layout of the festival grounds. Additionally, provide communication features to facilitate coordination with bands, vendors, and sponsors. Ensure that the application streamlines the festival planning process and helps organizers deliver a successful event.</p> <p></p>"},{"location":"project-guide/#21-public-transportation-scheduler_1","title":"21-Public Transportation Scheduler:","text":"<ul> <li> <p>Bus and train schedules.</p> </li> <li> <p>Route planning.</p> </li> <li> <p>Fare calculation.</p> </li> <li> <p>Delay and disruption alerts.</p> </li> </ul>"},{"location":"project-guide/#common-features_106","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application. This can help personalize transportation planning and tracking.</p> </li> <li> <p>Bus and Train Schedules: Integrate and display real-time or updated schedules for buses and trains. Users can search for routes, view departure times, and plan their journeys.</p> </li> <li> <p>Route Planning: Provide a route planning feature where users can enter their starting and ending points, and the application suggests the most efficient public transportation routes, including transfers and walking directions.</p> </li> <li> <p>Fare Calculation: Calculate and display fare information based on the selected routes, ticket types, and any applicable discounts or promotions. Users can estimate the cost of their journey.</p> </li> <li> <p>Delay and Disruption Alerts: Implement a system that provides users with alerts or notifications about delays, disruptions, or service changes affecting their planned routes. These updates can be sourced from transportation authorities or crowd-sourced data.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_104","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, route data, fare information, and transportation alerts in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan routes, calculate fares, and receive alerts.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_104","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_104","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to save favorite routes, provide real-time tracking of public transportation vehicles, and integrate with payment systems for purchasing tickets or passes within the app. Ensure that the application helps users navigate public transportation systems efficiently and stay informed about any disruptions in their travel plans.</p> <p></p>"},{"location":"project-guide/#22-local-farmers-market-directory_1","title":"22-Local Farmer's Market Directory:","text":"<ul> <li> <p>Listing of local vendors and products.</p> </li> <li> <p>Seasonal produce guide.</p> </li> <li> <p>Price comparison.</p> </li> <li> <p>Market hours and locations.</p> </li> </ul>"},{"location":"project-guide/#common-features_107","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their farmer's market experience, save favorite vendors, and track their purchases. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Listing of Local Vendors and Products: Implement a directory of local farmers, vendors, and their products available at the market. Users can browse through vendor profiles and product listings.</p> </li> <li> <p>Seasonal Produce Guide: Provide a guide that highlights seasonal produce availability. Users can learn about which fruits and vegetables are in season at different times of the year.</p> </li> <li> <p>Price Comparison: Enable users to compare prices for similar products from different vendors. This feature helps users make informed purchasing decisions.</p> </li> <li> <p>Market Hours and Locations: Display information about various farmer's markets, including their hours of operation, locations, and any special events or promotions.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_105","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, vendor and product data, seasonal produce guides, and market information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to browse vendors, view produce guides, compare prices, and access market details.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_105","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_105","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a map with directions to the farmer's markets, user reviews and ratings for vendors and products, and the ability to create shopping lists based on the selected produce. Ensure that the application promotes local farming and helps users make fresh and sustainable food choices.</p> <p></p>"},{"location":"project-guide/#23-personal-music-library-organizer_1","title":"23-Personal Music Library Organizer:","text":"<ul> <li> <p>Cataloging music collection.</p> </li> <li> <p>Playlist creation and management.</p> </li> <li> <p>Metadata editing (artist, album, genre).</p> </li> <li> <p>Music recommendation based on preferences.</p> </li> </ul>"},{"location":"project-guide/#common-features_108","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their music library organization, playlists, and recommendations. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Cataloging Music Collection: Implement a system for users to catalog their music collection, including adding songs, albums, and artists. Users can import music files or manually enter details.</p> </li> <li> <p>Playlist Creation and Management: Provide tools for creating and managing playlists. Users can add songs from their catalog, reorder tracks, and create themed playlists.</p> </li> <li> <p>Metadata Editing (Artist, Album, Genre): Enable users to edit and update metadata for their music, including artist names, album titles, and genres. This ensures accurate organization and sorting.</p> </li> <li> <p>Music Recommendation based on Preferences: Implement a recommendation engine that suggests songs, albums, or artists based on the user's listening history and preferences. Users can discover new music.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_106","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, music library data, playlist information, metadata changes, and recommendation history in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to catalog music, create playlists, edit metadata, and receive music recommendations.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_106","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_106","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like album art display, the ability to rate songs, and integration with online music databases for automatic metadata retrieval. Additionally, offer sharing options for playlists and music recommendations with friends or social media. Ensure that the application helps users organize and enjoy their music collection efficiently.</p> <p></p>"},{"location":"project-guide/#24-virtual-bookshelf-organizer_1","title":"24-Virtual Bookshelf Organizer:","text":"<ul> <li> <p>Digital cataloging of personal book collection.</p> </li> <li> <p>Book lending and return tracking.</p> </li> <li> <p>Wish list management.</p> </li> <li> <p>Book recommendations based on reading history.</p> </li> </ul>"},{"location":"project-guide/#common-features_109","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their bookshelf organization, lending, and recommendations. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Digital Cataloging of Personal Book Collection: Implement a system for users to catalog their personal book collections. Users can enter book titles, authors, genres, and cover images. ISBN or barcode scanning can simplify data entry.</p> </li> <li> <p>Book Lending and Return Tracking: Provide tools for users to track book loans to friends or family members. Users can record who borrowed a book, set due dates, and receive notifications for book returns.</p> </li> <li> <p>Wish List Management: Enable users to create and manage wish lists of books they want to read or acquire. Users can add books to their wish list and mark them as acquired when purchased or borrowed.</p> </li> <li> <p>Book Recommendations based on Reading History: Implement a recommendation engine that suggests books based on the user's reading history and preferences. Users can discover new titles and authors.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_107","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, book catalog data, lending and return records, wish lists, and recommendation history in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to catalog books, manage lending, handle wish lists, and receive book recommendations.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_107","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_107","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like event performance reports, volunteer performance recognition, and a volunteer rating system. Additionally, ensure that the application facilitates efficient communication between organizers and volunteers, making it easier to coordinate and manage volunteer events effectively.</p> <p></p>"},{"location":"project-guide/#27-personal-finance-advisor_1","title":"27-Personal Finance Advisor:","text":"<ul> <li> <p>Budget planning and tracking.</p> </li> <li> <p>Investment portfolio management.</p> </li> <li> <p>Financial goal setting.</p> </li> <li> <p>Debt reduction strategies.</p> </li> </ul>"},{"location":"project-guide/#common-features_110","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their financial planning, investment management, and goal tracking. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Budget Planning and Tracking: Implement a budgeting tool where users can create budgets, categorize expenses, and track income and expenditures. Users can set spending limits and receive alerts when they exceed them.</p> </li> <li> <p>Investment Portfolio Management: Provide tools for users to manage their investment portfolios. Users can track investments, view portfolio performance, and receive insights and recommendations.</p> </li> <li> <p>Financial Goal Setting: Allow users to set financial goals, such as saving for a home, retirement, or a vacation. Users can track their progress and receive suggestions on how to achieve their goals.</p> </li> <li> <p>Debt Reduction Strategies: Offer strategies for debt reduction, including creating payoff plans, tracking debts, and optimizing repayment strategies. Users can visualize their debt reduction progress.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_108","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, budget data, investment portfolio information, goal progress, and debt reduction strategies in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan budgets, manage investments, set goals, and track debt reduction.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_108","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_108","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like expense analysis, investment risk assessment, and the ability to sync with bank accounts for automatic expense tracking. Additionally, provide educational resources on financial planning and investment strategies. Ensure that the application helps users make informed financial decisions and work toward their financial goals.</p> <p></p>"},{"location":"project-guide/#28-custom-workout-routine-planner_1","title":"28-Custom Workout Routine Planner:","text":"<ul> <li> <p>Personalized workout creation.</p> </li> <li> <p>Exercise demonstration library.</p> </li> <li> <p>Progress tracking and reporting.</p> </li> <li> <p>Injury prevention and recovery tips.</p> </li> </ul>"},{"location":"project-guide/#common-features_111","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts to personalize their workout routines, track progress, and access injury prevention and recovery tips. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Personalized Workout Creation: Implement a system where users can create personalized workout routines based on their fitness goals, preferences, and available equipment. Users can select exercises, set repetitions and sets, and schedule workouts.</p> </li> <li> <p>Exercise Demonstration Library: Provide a library of exercise demonstrations with videos or images to ensure users perform exercises correctly. Users can access detailed instructions on how to perform each exercise safely and effectively.</p> </li> <li> <p>Progress Tracking and Reporting: Enable users to track their workout progress by recording sets, repetitions, and weights lifted. Generate reports and visualizations to show progress over time and help users adjust their routines accordingly.</p> </li> <li> <p>Injury Prevention and Recovery Tips: Include a section with tips and advice on injury prevention, proper warm-up and cool-down techniques, and strategies for recovering from injuries.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_109","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, workout routines, exercise data, progress records, and injury prevention information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to create workouts, track progress, access exercise demonstrations, and read injury prevention tips.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_109","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_109","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like workout scheduling, nutrition tracking, and the ability to set fitness goals and milestones. Additionally, provide guidance on proper form and technique for exercises, and offer adaptive workout recommendations based on users' progress. Ensure that the application helps users achieve their fitness goals while prioritizing safety and injury prevention.</p> <p></p>"},{"location":"project-guide/#29-local-library-search-tool_1","title":"29-Local Library Search Tool:","text":"<ul> <li> <p>Catalog search for books, movies, music.</p> </li> <li> <p>Reservation and renewal system.</p> </li> <li> <p>Event and workshop schedule.</p> </li> <li> <p>Library location and hours information.</p> </li> </ul>"},{"location":"project-guide/#common-features_112","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their library experience. This can include saving favorite books, managing reservations, and receiving event notifications. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Catalog Search for Books, Movies, and Music: Implement a search functionality where users can search for books, movies, and music available in the library. Users can search by title, author, genre, or other relevant criteria.</p> </li> <li> <p>Reservation and Renewal System: Allow users to reserve library materials and renew borrowed items through the application. Users can receive notifications about due dates and renew items as needed.</p> </li> <li> <p>Event and Workshop Schedule: Provide information about upcoming library events, workshops, and programs. Users can view event details, register for events, and receive reminders.</p> </li> <li> <p>Library Location and Hours Information: Display information about library locations, including addresses, hours of operation, and contact details. Users can easily find the nearest library branch.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_110","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, catalog data, reservation records, event schedules, and library location information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to search the catalog, manage reservations, view event schedules, and access library location details.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_110","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_110","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like user reviews and ratings for library materials, integration with e-book lending services, and a virtual library card for easy access to library services. Additionally, provide a map or directions to library locations and offer reading recommendations based on users' interests. Ensure that the application makes it convenient for users to access and utilize library resources and services.</p> <p></p>"},{"location":"project-guide/#30-camping-and-hiking-trip-planner_1","title":"30-Camping and Hiking Trip Planner:","text":"<ul> <li> <p>Trail database and recommendations.</p> </li> <li> <p>Gear checklist and management.</p> </li> <li> <p>Weather forecasts and alerts.</p> </li> <li> <p>Emergency contact information storage.</p> </li> </ul>"},{"location":"project-guide/#common-features_113","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their camping and hiking planning. This can include saving favorite trails, managing gear lists, and accessing weather forecasts. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Trail Database and Recommendations: Implement a database of hiking trails, including details such as trail difficulty, length, elevation gain, and user ratings. Offer trail recommendations based on user preferences and location.</p> </li> <li> <p>Gear Checklist and Management: Provide users with pre-made gear checklists for various types of trips (e.g., camping, backpacking, day hikes). Allow users to customize and save gear lists for their specific needs.</p> </li> <li> <p>Weather Forecasts and Alerts: Integrate with weather forecasting services to provide current weather conditions, forecasts, and alerts for the selected hiking location. Users can receive weather-related notifications.</p> </li> <li> <p>Emergency Contact Information Storage: Allow users to store emergency contact information, including names, phone numbers, and medical information. This information can be accessed in case of emergencies during the trip.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_111","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, trail data, gear checklists, weather forecasts, and emergency contact information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to search trails, manage gear lists, check weather forecasts, and access emergency contact information.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_111","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_111","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like GPS location tracking, trail maps, wildlife and plant identification guides, and community forums for sharing trip experiences and tips. Additionally, provide safety recommendations and outdoor ethics guidelines to ensure users have a safe and responsible camping and hiking experience.</p> <p></p>"},{"location":"project-guide/#31-simple-weather-station_1","title":"31-Simple Weather Station:","text":"<ul> <li> <p>Local weather updates.</p> </li> <li> <p>Temperature, humidity, and wind speed tracking.</p> </li> <li> <p>Severe weather alerts.</p> </li> <li> <p>Historical weather data analysis.</p> </li> </ul>"},{"location":"project-guide/#common-features_114","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their weather tracking and access historical data. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Local Weather Updates: Integrate with weather data APIs to provide real-time local weather updates, including current conditions, forecasts, and radar imagery.</p> </li> <li> <p>Temperature, Humidity, and Wind Speed Tracking: Implement sensors or data sources to track temperature, humidity, and wind speed. Users can view historical trends and current readings.</p> </li> <li> <p>Severe Weather Alerts: Offer severe weather alerts and warnings based on official sources. Users can receive notifications for events like storms, hurricanes, or extreme temperatures.</p> </li> <li> <p>Historical Weather Data Analysis: Allow users to access historical weather data and generate reports or visualizations to analyze trends, such as temperature fluctuations or annual rainfall patterns.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_112","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, weather data, historical data, and alert records in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to display weather updates, track environmental data, receive alerts, and access historical data analysis.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_112","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_112","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like customizable weather widgets, personalized weather forecasts, and a location-based weather map. Additionally, provide educational content on weather phenomena and climate science. Ensure that the application provides users with accurate and up-to-date weather information and tools for weather analysis.</p> <p></p>"},{"location":"project-guide/#32-culinary-technique-tutorial_1","title":"32-Culinary Technique Tutorial:","text":"<ul> <li> <p>Step-by-step cooking and baking techniques.</p> </li> <li> <p>Ingredient substitution guide.</p> </li> <li> <p>Utensil and equipment reference.</p> </li> <li> <p>Tips for recipe improvisation.</p> </li> </ul>"},{"location":"project-guide/#common-features_115","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to save their favorite techniques, access personalized tips, and receive updates. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Step-by-Step Cooking and Baking Techniques: Provide a library of culinary techniques with detailed step-by-step instructions and visual aids, such as images or videos. Users can learn how to chop, saut\u00e9, bake, and more.</p> </li> <li> <p>Ingredient Substitution Guide: Offer a guide that suggests ingredient substitutions for common and uncommon ingredients. Users can adapt recipes based on what they have on hand or dietary preferences.</p> </li> <li> <p>Utensil and Equipment Reference: Include a reference section with information on various cooking utensils and equipment, including their uses, care, and maintenance.</p> </li> <li> <p>Tips for Recipe Improvisation: Provide tips and suggestions for improvising recipes, adjusting flavors, and creating new dishes from existing ones. Users can experiment with confidence.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_113","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, technique data, substitution guides, utensil references, and improvisation tips in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to browse techniques, access substitution guides, reference utensils, and get improvisation tips.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_113","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_113","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like recipe collections, a cooking timer, and a meal planning tool. Additionally, offer interactive quizzes and challenges to reinforce culinary knowledge. Ensure that the application empowers users to become more skilled and creative in the kitchen, whether they are beginners or experienced cooks.</p> <p></p>"},{"location":"project-guide/#33-basic-stock-market-tracker_1","title":"33-Basic Stock Market Tracker:","text":"<ul> <li> <p>Stock price monitoring.</p> </li> <li> <p>Portfolio management.</p> </li> <li> <p>News and market trend analysis.</p> </li> <li> <p>Personalized alerts for stock movement.</p> </li> </ul>"},{"location":"project-guide/#common-features_116","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their stock portfolio, receive alerts, and access news and analysis. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Stock Price Monitoring: Integrate with stock market APIs to provide real-time or delayed stock price updates. Users can search for and track the performance of individual stocks.</p> </li> <li> <p>Portfolio Management: Implement tools for users to create and manage their stock portfolios. Users can add, edit, or remove stocks from their portfolio and view portfolio performance.</p> </li> <li> <p>News and Market Trend Analysis: Provide access to financial news articles, market analysis reports, and charts displaying market trends. Users can stay informed about market developments.</p> </li> <li> <p>Personalized Alerts for Stock Movement: Allow users to set personalized alerts for specific stock price movements (e.g., price reaches a certain level or percentage change). Users receive notifications when conditions are met.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_114","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, stock portfolio data, stock price history, news articles, and alert settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to monitor stock prices, manage portfolios, access news and analysis, and set alerts.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_114","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_114","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like stock performance analysis tools, historical price charting, and integration with financial data providers for real-time market data. Additionally, provide educational content on stock market basics and investment strategies. Ensure that the application helps users make informed investment decisions and stay updated on market developments.</p> <p></p>"},{"location":"project-guide/#34-personal-mindfulness-and-meditation-guide_1","title":"34-Personal Mindfulness and Meditation Guide:","text":"<ul> <li> <p>Guided meditation sessions.</p> </li> <li> <p>Mindfulness exercises.</p> </li> <li> <p>Tracking mood and stress levels.</p> </li> <li> <p>Customizable meditation timer.</p> </li> </ul>"},{"location":"project-guide/#common-features_117","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to save their meditation progress, track mood, and access personalized recommendations. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Guided Meditation Sessions: Provide a library of guided meditation sessions led by experienced instructors. Users can choose sessions based on themes like relaxation, focus, or stress reduction.</p> </li> <li> <p>Mindfulness Exercises: Offer mindfulness exercises and practices that help users cultivate mindfulness in daily life. These exercises can be brief and integrated into daily routines.</p> </li> <li> <p>Tracking Mood and Stress Levels: Implement tools for users to track their mood and stress levels over time. Users can record their emotional states before and after meditation or mindfulness exercises.</p> </li> <li> <p>Customizable Meditation Timer: Allow users to set their meditation duration and customize the meditation timer with options like interval chimes, background sounds, and visual cues.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_115","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, meditation session data, mood and stress records, and meditation timer settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to access guided meditation sessions, practice mindfulness exercises, track mood, and use the meditation timer.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_115","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_115","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like progress tracking, meditation history analysis, and integration with wearable devices for tracking physiological data during meditation. Additionally, provide educational content on mindfulness concepts and their benefits. Ensure that the application helps users cultivate mindfulness and manage stress effectively.</p> <p></p>"},{"location":"project-guide/#35-comic-book-collection-manager_1","title":"35-Comic Book Collection Manager:","text":"<ul> <li> <p>Cataloging comic book collection.</p> </li> <li> <p>Wishlist and trade list management.</p> </li> <li> <p>Value estimation based on market trends.</p> </li> <li> <p>Information on comic book events and conventions.</p> </li> </ul>"},{"location":"project-guide/#common-features_118","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their comic book collection, wishlist, and trade list. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Cataloging Comic Book Collection: Implement a system for users to catalog their comic book collections, including details such as title, issue number, condition, and cover art. Users can organize by series, publisher, or other criteria.</p> </li> <li> <p>Wishlist and Trade List Management: Enable users to create and manage wishlists of comics they want to acquire and trade lists for comics they are willing to trade. Users can track their progress in completing series.</p> </li> <li> <p>Value Estimation based on Market Trends: Integrate with comic book market databases or pricing guides to provide estimated values for users' comic books based on market trends and conditions.</p> </li> <li> <p>Information on Comic Book Events and Conventions: Offer information about upcoming comic book events, conventions, signings, and releases. Users can plan attendance and discover new comics.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_116","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, comic book collection data, wishlist, trade list, value estimations, and event information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to catalog comic books, manage wishlists and trade lists, access value estimations, and view event details.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_116","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_116","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like comic book cover scanning with image recognition, social sharing of collections, and a comic book grading guide. Additionally, provide access to online comic book marketplaces for buying, selling, and trading comics. Ensure that the application helps users manage their collections effectively and stay informed about the comic book world.</p> <p></p>"},{"location":"project-guide/#36-second-hand-goods-exchange-platform_1","title":"36-Second-hand Goods Exchange Platform:","text":"<ul> <li> <p>Listing items for exchange or giveaway.</p> </li> <li> <p>Search and filter function for items.</p> </li> <li> <p>User rating and review system.</p> </li> <li> <p>Exchange agreement and meeting coordination.</p> </li> </ul>"},{"location":"project-guide/#common-features_119","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their exchange listings, track reviews, and coordinate exchanges. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Listing Items for Exchange or Giveaway: Implement a system for users to list items they want to exchange or give away. Users can provide item details, photos, and exchange preferences.</p> </li> <li> <p>Search and Filter Function for Items: Offer search and filter options to help users find specific items or browse categories. Users can filter by location, item type, and other relevant criteria.</p> </li> <li> <p>User Rating and Review System: Enable users to rate and review their exchange partners. This helps build trust within the community and encourages responsible exchanges.</p> </li> <li> <p>Exchange Agreement and Meeting Coordination: Provide tools for users to discuss and agree upon the terms of their exchange. Users can coordinate meeting times and locations securely.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_117","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, exchange listings, reviews, and exchange agreements in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to list items, search for items, manage user ratings and reviews, and coordinate exchanges.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_117","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_117","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like messaging and chat functionality between users, item verification mechanisms, and a user reputation system based on successful exchanges. Additionally, ensure that the application promotes a safe and friendly environment for users to exchange their second-hand goods or give away items they no longer need.</p> <p></p>"},{"location":"project-guide/#37-basic-language-translator_1","title":"37-Basic Language Translator:","text":"<ul> <li> <p>Text input and translation.</p> </li> <li> <p>Language learning tips.</p> </li> <li> <p>Common phrase library.</p> </li> <li> <p>Pronunciation guide.</p> </li> </ul>"},{"location":"project-guide/#common-features_120","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to save their translation history, access language learning resources, and customize preferences. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Text Input and Translation: Implement a text input interface where users can enter text in one language and receive translations in their chosen target language. Use language translation APIs to perform translations.</p> </li> <li> <p>Language Learning Tips: Provide language learning tips and resources to help users improve their language skills. These can include grammar lessons, vocabulary building exercises, and cultural insights.</p> </li> <li> <p>Common Phrase Library: Offer a library of common phrases and expressions in different languages. Users can browse and learn useful phrases for everyday communication.</p> </li> <li> <p>Pronunciation Guide: Include a pronunciation guide with audio samples to help users learn how to correctly pronounce words and phrases in their target language.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_118","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, translation history, language learning resources, phrase library data, and pronunciation guides in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to input text, receive translations, access language learning tips, and practice pronunciation.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_118","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_118","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like language detection, language quizzes, and interactive language exercises. Additionally, provide access to online language learning courses and forums for language enthusiasts to connect and practice. Ensure that the application helps users learn and practice languages effectively and with accurate translations.</p> <p></p>"},{"location":"project-guide/#38-pet-care-reminder-system_1","title":"38-Pet Care Reminder System:","text":"<ul> <li> <p>Feeding and medication schedules.</p> </li> <li> <p>Veterinary appointment tracking.</p> </li> <li> <p>Pet exercise and grooming reminders.</p> </li> <li> <p>Pet birthday and adoption anniversary celebrations.</p> </li> </ul>"},{"location":"project-guide/#common-features_121","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their pet care reminders, track medical records, and set preferences. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Feeding and Medication Schedules: Enable users to create and manage feeding schedules for their pets, including meal times and portion sizes. Users can also set medication reminders with dosage instructions.</p> </li> <li> <p>Veterinary Appointment Tracking: Implement a calendar or appointment system for users to schedule and track veterinary appointments, vaccinations, and check-ups for their pets.</p> </li> <li> <p>Pet Exercise and Grooming Reminders: Provide tools for users to set exercise and grooming routines for their pets, with reminders for activities like walks, playtime, and grooming sessions.</p> </li> <li> <p>Pet Birthday and Adoption Anniversary Celebrations: Allow users to record and celebrate their pet's birthday and adoption anniversary with reminders and customizable celebrations.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_119","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, pet care schedules, veterinary appointment data, exercise and grooming reminders, and celebration records in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage pet care schedules, track appointments, set reminders, and celebrate pet milestones.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_119","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_119","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like pet health record keeping, pet behavior tracking, and integration with pet supply stores for ordering pet supplies and medications. Additionally, provide educational content on pet care, nutrition, and training tips. Ensure that the application helps users keep their pets healthy, happy, and well-cared for.</p> <p></p>"},{"location":"project-guide/#39-indoor-plant-care-guide_1","title":"39-Indoor Plant Care Guide:","text":"<ul> <li> <p>Plant species information.</p> </li> <li> <p>Watering and fertilization schedule.</p> </li> <li> <p>Sunlight and temperature requirements.</p> </li> <li> <p>Pest and disease management tips.</p> </li> </ul>"},{"location":"project-guide/#common-features_122","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their plant care information, track their indoor plants, and set reminders. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Plant Species Information: Provide a database of indoor plant species with detailed information about each plant, including common names,    scientific names, growth habits, and care requirements.</p> </li> <li> <p>Watering and Fertilization Schedule: Enable users to create customized watering and fertilization schedules for their indoor plants. Users can set frequency and quantity based on plant type and individual needs.</p> </li> <li> <p>Sunlight and Temperature Requirements: Offer guidance on the sunlight and temperature preferences of various indoor plant species. Users can understand the ideal conditions for their plants.</p> </li> <li> <p>Pest and Disease Management Tips: Include a section with advice on identifying and managing common pests and diseases that affect indoor plants. Users can learn how to keep their plants healthy.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_120","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, plant species data, watering and fertilization schedules, sunlight and temperature requirements, and pest management tips in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to access plant care information, set schedules, receive reminders, and access pest management tips.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_120","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_120","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like photo uploads for plant identification, a plant care journal, and integration with local weather data for temperature and humidity recommendations. Additionally, provide educational content on indoor gardening techniques and tips for creating a thriving indoor plant environment. Ensure that the application helps users successfully care for their indoor plants and keep them healthy and vibrant.</p> <p></p>"},{"location":"project-guide/#40-bicycle-maintenance-and-route-planner_1","title":"40-Bicycle Maintenance and Route Planner:","text":"<ul> <li> <p>Bicycle maintenance log.</p> </li> <li> <p>Cycling route planning and tracking.</p> </li> <li> <p>Performance statistics (speed, distance).</p> </li> <li> <p>Gear and equipment checklist.</p> </li> </ul>"},{"location":"project-guide/#common-features_123","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their maintenance records, save routes, and track their cycling performance. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Bicycle Maintenance Log: Implement a maintenance log where users can record and track maintenance activities such as tire changes, brake adjustments, and oiling. Set reminders for upcoming maintenance tasks.</p> </li> <li> <p>Cycling Route Planning and Tracking: Provide tools for users to plan cycling routes, either by entering addresses or selecting points of interest. Users can also track their progress during rides using GPS data.</p> </li> <li> <p>Performance Statistics (Speed and Distance): Display real-time and historical performance statistics such as speed, distance, elevation, and time spent cycling. Users can analyze their progress and set goals.</p> </li> <li> <p>Gear and Equipment Checklist: Allow users to create and manage checklists for gear and equipment needed for rides. This can include helmets, water bottles, spare tubes, and more.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_121","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, maintenance logs, route data, performance statistics, and gear checklists in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to record maintenance, plan and track routes, view performance data, and manage gear checklists.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_121","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_121","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like weather forecasts for route planning, integration with cycling tracking devices, and social sharing of routes and achievements. Additionally, provide educational content on bicycle maintenance best practices and safety tips. Ensure that the application helps cyclists maintain their bikes, plan enjoyable routes, and track their performance effectively.</p> <p></p>"},{"location":"project-guide/#41-book-club-management-system_1","title":"41-Book Club Management System:","text":"<ul> <li> <p>Member management: Add, update, delete member details.</p> </li> <li> <p>Reading schedule: Organize and track book reading schedules.</p> </li> <li> <p>Meeting planner: Schedule and manage book club meetings.</p> </li> <li> <p>Discussion forum: Enable members to post and respond to discussions.</p> </li> </ul>"},{"location":"project-guide/#common-features_124","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to participate in the book club, manage reading schedules, and engage in discussions. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Member Management: Implement tools for administrators to add, update, and delete member details, including names, contact information, and reading preferences. Members can view and edit their profiles.</p> </li> <li> <p>Reading Schedule: Enable members to organize and track their reading schedules for selected books. Users can set reading goals, track progress, and receive reminders for upcoming reading assignments.</p> </li> <li> <p>Meeting Planner: Provide a scheduling system for book club meetings, including date, time, location, and agenda details. Members can RSVP and receive meeting notifications.</p> </li> <li> <p>Discussion Forum: Create a discussion forum where members can post topics related to books, share thoughts, and engage in discussions. Users can respond to posts, like comments, and follow topics of interest.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_122","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, member data, reading schedules, meeting details, and discussion forum posts in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage member details, reading schedules, meeting planning, and access the discussion forum.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_122","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_122","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like book recommendations, voting on book selections, and integration with e-book platforms for easy access to reading materials. Additionally, provide tools for tracking reading statistics, such as reading speed and favorite genres. Ensure that the application fosters a vibrant book club community where members can connect and discuss literature effectively.</p> <p></p>"},{"location":"project-guide/#42-basic-task-scheduler_1","title":"42-Basic Task Scheduler:","text":"<ul> <li> <p>Task creation: Add and categorize tasks.</p> </li> <li> <p>Deadline setting: Assign deadlines to tasks.</p> </li> <li> <p>Reminder system: Notify users of upcoming deadlines.</p> </li> <li> <p>Task prioritization: Mark tasks by importance.</p> </li> </ul>"},{"location":"project-guide/#common-features_125","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their task lists, set reminders, and manage their tasks. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Task Creation: Implement tools for users to create tasks, including task names, descriptions, categories, and due dates. Users can organize    tasks by categories such as work, personal, and more.</p> </li> <li> <p>Deadline Setting: Enable users to assign deadlines to tasks. Users can specify due dates and times for each task.</p> </li> <li> <p>Reminder System: Provide a reminder system that notifies users of upcoming task deadlines. Users can receive notifications via email, SMS, or in-app notifications.</p> </li> <li> <p>Task Prioritization: Allow users to prioritize tasks by marking them as high, medium, or low importance. Users can also reorder tasks within categories based on priority.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_123","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, task data, deadline information, reminder settings, and task priorities in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to create and manage tasks, set reminders, prioritize tasks, and view upcoming deadlines.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_123","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_123","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like recurring tasks, task progress tracking, and integration with calendar applications. Additionally, provide tools for generating task reports, such as completed tasks and overdue tasks. Ensure that the application helps users manage their tasks efficiently and meet their deadlines effectively.</p> <p></p>"},{"location":"project-guide/#43-home-utility-tracker_1","title":"43-Home Utility Tracker:","text":"<ul> <li> <p>Utility logging: Record electricity, water, gas usage.</p> </li> <li> <p>Expense calculation: Calculate costs based on usage.</p> </li> <li> <p>Trend analysis: Analyze usage patterns over time.</p> </li> <li> <p>Reminder setup: Set reminders for bill payments.</p> </li> </ul>"},{"location":"project-guide/#common-features_126","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their utility tracking, view expense calculations, analyze trends, and set bill payment reminders. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Utility Logging: Implement tools for users to log their utility consumption, including electricity, water, gas, and any other utilities. Users can enter usage data regularly.</p> </li> <li> <p>Expense Calculation: Calculate utility expenses based on consumption data and current rates. Users can view expense summaries by utility type.</p> </li> <li> <p>Trend Analysis: Provide charts and graphs to help users analyze their utility usage patterns over time. Users can identify trends and make informed decisions to reduce consumption.</p> </li> <li> <p>Reminder Setup: Allow users to set reminders for bill payments, based on billing cycles or custom dates. Users can receive notifications before the due date.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_124","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, utility consumption data, expense calculations, trend analysis results, and reminder settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to log utility data, view expense calculations, analyze trends, and set bill payment reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_124","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_124","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like cost projection based on usage trends, energy-saving tips, and integration with utility provider websites for automated bill updates. Additionally, provide tools for tracking and comparing utility providers to find cost-effective options. Ensure that the application helps users manage their home utility expenses efficiently and make informed decisions about energy consumption.</p> <p></p>"},{"location":"project-guide/#44-vehicle-fuel-efficiency-tracker_1","title":"44-Vehicle Fuel Efficiency Tracker:","text":"<ul> <li> <p>Fuel log: Record fuel purchases and prices.</p> </li> <li> <p>Mileage tracker: Calculate mileage based on fuel and distance.</p> </li> <li> <p>Efficiency analysis: Report on fuel efficiency trends.</p> </li> <li> <p>Cost analysis: Evaluate total fuel expenditures.</p> </li> </ul>"},{"location":"project-guide/#common-features_127","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their fuel efficiency tracking, view mileage calculations, analyze efficiency trends, and assess cost data. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Fuel Log: Implement tools for users to log their fuel purchases, including the date, amount of fuel, fuel price, and odometer reading. Users can add entries whenever they refuel their vehicles.</p> </li> <li> <p>Mileage Tracker: Calculate and display mileage information based on fuel consumption and distance traveled. Users can view statistics such as miles per gallon (MPG) or kilometers per liter (KPL).</p> </li> <li> <p>Efficiency Analysis: Provide charts and graphs to help users analyze their vehicle's fuel efficiency trends over time. Users can identify patterns and make adjustments for better fuel economy.</p> </li> <li> <p>Cost Analysis: Evaluate total fuel expenditures by summing up fuel costs over a specified period. Users can see how much they spend on fuel for their vehicles.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_125","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, fuel purchase data, mileage calculations, efficiency trend data, and cost analysis results in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to log fuel purchases, calculate mileage, analyze efficiency trends, and view cost analysis reports.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_125","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_125","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like maintenance tracking, reminders for oil changes and tire rotations, and integration with GPS data for accurate distance tracking. Additionally, provide tools for comparing fuel efficiency among multiple vehicles if the user owns more than one. Ensure that the application helps users monitor their vehicle's fuel efficiency and make informed decisions to save on fuel costs.</p> <p></p>"},{"location":"project-guide/#45-local-sports-team-manager_1","title":"45-Local Sports Team Manager:","text":"<ul> <li> <p>Team roster: Manage player profiles and positions.</p> </li> <li> <p>Game scheduler: Organize and track game schedules.</p> </li> <li> <p>Statistic tracker: Record and analyze player performance.</p> </li> <li> <p>Communication tool: Coordinate team meetings and practices.</p> </li> </ul>"},{"location":"project-guide/#common-features_128","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to manage team information, schedule games, track statistics, and coordinate team communications. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Team Roster: Implement tools for users to manage player profiles, including names, positions, contact information, and player statistics. Users can add, edit, and remove players from the team roster.</p> </li> <li> <p>Game Scheduler: Create a scheduling system for organizing and tracking game schedules, including dates, times, opponents, and locations. Users can view upcoming games and past results.</p> </li> <li> <p>Statistic Tracker: Enable users to record and analyze player performance statistics during games. Users can track metrics such as goals scored, assists, saves, and more.</p> </li> <li> <p>Communication Tool: Provide features for coordinating team meetings, practices, and announcements. Users can send messages or notifications to team members.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_126","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, team rosters, game schedules, player statistics, and communication records in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage team rosters, schedule games, track statistics, and communicate with team members.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_126","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_126","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like player availability tracking, automatic game reminders, and integration with weather forecasts for outdoor games. Additionally, provide tools for generating player performance reports and team statistics. Ensure that the application helps team managers effectively organize and manage their local sports teams.</p> <p></p>"},{"location":"project-guide/#46-recipe-cost-calculator_1","title":"46-Recipe Cost Calculator:","text":"<ul> <li> <p>Ingredient management: Log and price ingredients.</p> </li> <li> <p>Recipe costing: Calculate cost per recipe.</p> </li> <li> <p>Price adjustment: Adjust costs based on ingredient changes.</p> </li> <li> <p>Budget planner: Plan meals within a budget.</p> </li> </ul>"},{"location":"project-guide/#common-features_129","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their ingredient management, calculate recipe costs, adjust prices, and plan meals within a budget. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Ingredient Management: Implement tools for users to log and price ingredients they commonly use in their recipes. Users can add new ingredients, update prices, and categorize ingredients.</p> </li> <li> <p>Recipe Costing: Enable users to create recipes by specifying ingredient quantities and units. Calculate the total cost of a recipe based on ingredient prices. Users can view the cost per serving.</p> </li> <li> <p>Price Adjustment: Provide the option to adjust ingredient costs based on changes in market prices or personal preferences. Users can update prices for individual ingredients or globally.</p> </li> <li> <p>Budget Planner: Allow users to plan meals and recipes within a specified budget. The application can provide budget recommendations based on user preferences.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_127","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, ingredient data, recipe details, price adjustments, and budget plans in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage ingredients, create recipes, calculate costs, adjust prices, and plan meals within a budget.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_127","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_127","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like recipe sharing with friends, generating shopping lists based on selected recipes, and dietary preference tracking. Additionally, provide tools for analyzing and optimizing recipes for cost and nutritional value. Ensure that the application helps users plan meals, manage their grocery expenses, and make informed choices when cooking within their budget.</p> <p></p>"},{"location":"project-guide/#47-garden-planner_1","title":"47-Garden Planner:","text":"<ul> <li> <p>Plant database: Record plant types and care instructions.</p> </li> <li> <p>Gardening schedule: Track planting and harvesting times.</p> </li> <li> <p>Maintenance reminders: Set reminders for watering, pruning.</p> </li> <li> <p>Garden layout: Plan and visualize garden layouts.</p> </li> </ul>"},{"location":"project-guide/#common-features_130","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their garden plans, track schedules, set reminders, and manage plant information. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Plant Database: Implement a database of plant types with detailed care instructions, including information about planting, watering, sunlight, and other care tips. Users can add, edit, and remove plants from their collection.</p> </li> <li> <p>Gardening Schedule: Provide tools for users to track planting and harvesting times for different plant types. Users can create schedules for each plant, specifying planting dates and expected harvest times.</p> </li> <li> <p>Maintenance Reminders: Set up reminders for maintenance tasks such as watering, pruning, fertilizing, and pest control. Users can receive notifications based on the schedules they create.</p> </li> <li> <p>Garden Layout: Allow users to plan and visualize garden layouts. They can design the layout of their garden beds, assign plants to specific locations, and view a visual representation of their garden.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_128","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, plant database information, gardening schedules, maintenance reminders, and garden layouts in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage plant information, schedule gardening tasks, set reminders, and plan garden layouts.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_128","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_128","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like garden journaling for keeping gardening notes, weather forecasts for planning garden activities, and integration with plant nurseries for plant ordering. Additionally, provide tools for tracking plant growth and health, and offer gardening tips and advice based on the user's plant collection. Ensure that the application helps garden enthusiasts plan and maintain their gardens effectively.</p> <p></p>"},{"location":"project-guide/#48-personal-library-catalog_1","title":"48-Personal Library Catalog:","text":"<ul> <li> <p>Book cataloging: Add, update, delete book entries.</p> </li> <li> <p>Loan management: Track lent and borrowed books.</p> </li> <li> <p>Wishlist: Maintain a list of desired books.</p> </li> <li> <p>Reading tracker: Log reading progress and history.</p> </li> </ul>"},{"location":"project-guide/#common-features_131","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their library catalog, track loans, maintain wishlists, and log reading progress. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Book Cataloging: Implement tools for users to add, update, and delete book entries in their personal library catalog. Users can include book details such as title, author, ISBN, genre, and cover images.</p> </li> <li> <p>Loan Management: Create a system for tracking lent and borrowed books. Users can record when they lend a book to someone or borrow a book from others, including due dates.</p> </li> <li> <p>Wishlist: Allow users to maintain a wishlist of desired books they intend to read or acquire. Users can add books to their wishlist and remove them when acquired.</p> </li> <li> <p>Reading Tracker: Provide a reading tracker that allows users to log their reading progress, mark books as \"read,\" and maintain a reading history. Users can add notes and ratings to their books.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_129","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, book catalog data, loan records, wishlists, and reading progress in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage book entries, track loans, maintain wishlists, and log reading progress.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_129","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_129","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like book recommendations based on reading history, book search and filtering options, and integration with online book databases for automatic cataloging. Additionally, provide tools for exporting and importing book catalogs to and from external formats like CSV or Excel. Ensure that the application helps users organize and enjoy their personal library effectively.</p> <p></p>"},{"location":"project-guide/#49-simple-inventory-management-for-crafters_1","title":"49-Simple Inventory Management for Crafters:","text":"<ul> <li> <p>Material inventory: Track crafting materials and quantities.</p> </li> <li> <p>Project tracking: Organize and monitor craft projects.</p> </li> <li> <p>Expense logging: Record costs of materials.</p> </li> <li> <p>Sales tracker: Keep track of items sold and profits.</p> </li> </ul>"},{"location":"project-guide/#common-features_132","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their material inventory, organize craft projects, log expenses, and track sales and profits. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Material Inventory: Implement tools for users to track crafting materials, including types, quantities, and purchase details. Users can add, edit, and remove materials from their inventory.</p> </li> <li> <p>Project Tracking: Create a system for organizing and monitoring craft projects. Users can associate materials with specific projects, set project goals, and track progress.</p> </li> <li> <p>Expense Logging: Enable users to record the costs of materials used in their projects. Users can link expenses to specific projects or simply log them in the material inventory.</p> </li> <li> <p>Sales Tracker: Provide features for keeping track of items sold, including quantities, prices, and sale dates. Users can calculate profits based on sales and material expenses.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_130","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, material inventory data, project details, expense records, and sales data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage material inventory, track projects, log expenses, and record sales.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_130","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_130","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a crafting calendar for scheduling project timelines, alerts for low material quantities, and integration with e-commerce platforms for online sales management. Additionally, provide tools for generating financial reports and profit analysis. Ensure that the application helps crafters effectively manage their materials, projects, expenses, and sales.</p> <p></p>"},{"location":"project-guide/#50-basic-language-learning-tool_1","title":"50-Basic Language Learning Tool:","text":"<ul> <li> <p>Vocabulary builder: Add and practice new words.</p> </li> <li> <p>Grammar exercises: Create and complete grammar tests.</p> </li> <li> <p>Progress tracking: Monitor learning milestones.</p> </li> <li> <p>Language resources: Compile useful language learning links.</p> </li> </ul>"},{"location":"project-guide/#common-features_133","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their language learning experience, build vocabulary, complete grammar exercises, track progress, and access language resources. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Vocabulary Builder: Implement tools for users to add new words to their vocabulary, including translations, definitions, example sentences, and pronunciation. Users can practice and review their vocabulary.</p> </li> <li> <p>Grammar Exercises: Create a system for creating and completing grammar tests and exercises. Users can choose from different grammar topics,    complete exercises, and receive feedback on their performance.</p> </li> <li> <p>Progress Tracking: Provide progress tracking features that allow users to monitor their learning milestones, track their vocabulary size, and view their performance in grammar exercises.</p> </li> <li> <p>Language Resources: Compile a collection of useful language learning links, including online courses, dictionaries, language forums, and other resources that can help users improve their language skills.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_131","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, vocabulary data, grammar exercises, progress records, and language resource links in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage vocabulary, complete grammar exercises, track progress, and access language resources.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_131","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_131","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like pronunciation practice with audio samples, flashcards for vocabulary review, and quizzes to test language proficiency. Additionally, provide tools for setting language learning goals and generating reports on progress. Ensure that the application supports users in their language learning journey and provides valuable resources for improvement.</p> <p></p>"},{"location":"project-guide/#51-personal-health-record-keeper_1","title":"51-Personal Health Record Keeper:","text":"<ul> <li> <p>Health logs: Record medical visits, medications, symptoms.</p> </li> <li> <p>Appointment scheduler: Track upcoming doctor appointments.</p> </li> <li> <p>Health trend analysis: Review health changes over time.</p> </li> <li> <p>Emergency information: Store critical health data.</p> </li> </ul>"},{"location":"project-guide/#common-features_134","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their health records, manage appointments, analyze health trends, and store emergency information. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Health Logs: Implement tools for users to record their medical visits, medications, symptoms, and other health-related information. Users can create detailed entries with dates and descriptions.</p> </li> <li> <p>Appointment Scheduler: Create a scheduling system for tracking upcoming doctor appointments, including appointment dates, times, and healthcare providers. Users can set reminders for appointments.</p> </li> <li> <p>Health Trend Analysis: Provide charts and graphs to help users review changes in their health over time. Users can monitor trends in symptoms, medications, and vital signs.</p> </li> <li> <p>Emergency Information: Allow users to store critical health data such as allergies, medications, blood type, and emergency contacts. This information can be easily accessible in case of emergencies.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_132","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, health log data, appointment schedules, health trend analysis results, and emergency information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage health logs, schedule appointments, review health trends, and access emergency information.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_132","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_132","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like health goal setting and progress tracking, integration with fitness trackers or wearable devices for health data synchronization, and the ability to generate health reports for sharing with healthcare providers. Additionally, ensure that the application complies with data privacy and security regulations to protect users' sensitive health information.</p> <p></p>"},{"location":"project-guide/#52-hobby-club-organizer_1","title":"52-Hobby Club Organizer:","text":"<ul> <li> <p>Member registration: Add and manage club members.</p> </li> <li> <p>Event calendar: Schedule club meetings and events.</p> </li> <li> <p>Resource sharing: Exchange hobby resources and tips.</p> </li> <li> <p>Activity log: Track club activities and participation.</p> </li> </ul>"},{"location":"project-guide/#common-features_135","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their club management, manage club members, schedule events, share resources, and track club activities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Member Registration: Implement tools for users to add and manage club members. Users can enter member details such as names, contact information, and hobbies.</p> </li> <li> <p>Event Calendar: Create an event calendar for scheduling and managing club meetings and events. Users can add, edit, and delete events, specify dates, times, and locations, and set reminders.</p> </li> <li> <p>Resource Sharing: Enable users to exchange hobby resources, tips, and recommendations within the club. Users can post and view resources related to their hobbies.</p> </li> <li> <p>Activity Log: Provide a log to track club activities and member participation. Users can record details about past events, attendance, and club achievements.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_133","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, member information, event schedules, resource sharing data, and activity logs in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage member registration, schedule events, share resources, and record club activities.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_133","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_133","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like discussion forums for club members, polls and surveys for event planning, and integration with social media platforms for club promotion. Additionally, provide tools for generating club reports and statistics on member participation and event attendance. Ensure that the application helps hobby clubs effectively organize and manage their activities and resources.</p> <p></p>"},{"location":"project-guide/#53-travel-expense-tracker_1","title":"53-Travel Expense Tracker:","text":"<ul> <li> <p>Trip planning: Organize trip details and itinerary.</p> </li> <li> <p>Expense recording: Log travel expenses.</p> </li> <li> <p>Budget management: Set and adhere to travel budgets.</p> </li> <li> <p>Summary report: Compile trip expenses and experiences.</p> </li> </ul>"},{"location":"project-guide/#common-features_136","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their travel planning, record expenses, manage budgets, and generate summary reports. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Trip Planning: Implement tools for users to organize trip details and create itineraries. Users can specify destinations, dates, accommodations, transportation, and activities.</p> </li> <li> <p>Expense Recording: Create a system for users to log travel expenses, including categories such as accommodation, transportation, meals, and entertainment. Users can enter expense details like date, amount, and payment method.</p> </li> <li> <p>Budget Management: Enable users to set and adhere to travel budgets. The application can provide budget recommendations based on trip details and user preferences.</p> </li> <li> <p>Summary Report: Provide a summary report that compiles trip expenses and experiences. Users can generate reports that include a breakdown of expenses, highlights, and memorable moments from their trips.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_134","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, trip details, expense records, budget information, and summary reports in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to plan trips, record expenses, manage budgets, and generate summary reports.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_134","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_134","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like currency conversion for expenses incurred in different currencies, integration with travel booking platforms for automatic expense tracking, and photo uploads to capture trip memories. Additionally, provide tools for generating expense charts and visualizing spending patterns. Ensure that the application helps travelers plan their trips effectively, manage expenses, and create memorable travel experiences.</p> <p></p>"},{"location":"project-guide/#54-simple-auction-tracker_1","title":"54-Simple Auction Tracker:","text":"<ul> <li> <p>Item catalog: List items available for auction.</p> </li> <li> <p>Bidding system: Track bids and bidders.</p> </li> <li> <p>Auction results: Record and analyze auction outcomes.</p> </li> <li> <p>Participant management: Manage bidder and seller profiles.</p> </li> </ul>"},{"location":"project-guide/#common-features_137","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their auction management, track bids and auctions, record results, and manage participant profiles. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Item Catalog: Implement a catalog system for listing items available for auction. Users can add item details such as descriptions, starting prices, and auction end times.</p> </li> <li> <p>Bidding System: Create a bidding system to track bids and bidders. Users can place bids on items, view current highest bids, and receive notifications when they are outbid.</p> </li> <li> <p>Auction Results: Record and analyze auction outcomes, including the final selling price of items, winning bidders, and auction duration. Users can review past auctions and outcomes.</p> </li> <li> <p>Participant Management: Provide tools for managing bidder and seller profiles. Users can register as bidders or sellers, update their profiles, and view their auction history.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_135","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, item catalog data, bid records, auction results, and participant profiles in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage the item catalog, place bids, record auction results, and manage participant profiles.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_135","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_135","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like automatic auction notifications for bidders, a rating and feedback system for sellers and bidders, and a search and filtering option for the item catalog. Additionally, provide tools for sellers to create and manage their auctions easily. Ensure that the application helps users effectively organize and participate in auctions.</p> <p></p>"},{"location":"project-guide/#55-volunteer-management-system_1","title":"55-Volunteer Management System:","text":"<ul> <li> <p>Volunteer profiles: Register and manage volunteers.</p> </li> <li> <p>Event scheduling: Plan and assign volunteer events.</p> </li> <li> <p>Hours tracking: Record volunteer hours and activities.</p> </li> <li> <p>Recognition: Acknowledge and reward volunteer contributions.</p> </li> </ul>"},{"location":"project-guide/#common-features_138","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their volunteer management, register volunteers, schedule events, track hours, and acknowledge contributions. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Volunteer Profiles: Implement tools for users to register and manage volunteer profiles. Users can collect details such as names, contact information, skills, and availability.</p> </li> <li> <p>Event Scheduling: Create a scheduling system for planning and assigning volunteer events. Users can specify event details, dates, times, locations, and the number of volunteers needed.</p> </li> <li> <p>Hours Tracking: Enable users to record volunteer hours and activities. Volunteers can log their hours, and administrators can approve and verify the hours worked.</p> </li> <li> <p>Recognition: Provide features for acknowledging and rewarding volunteer contributions. Recognitions can include certificates, badges, or thank-you messages for outstanding volunteers.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_136","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, volunteer data, event schedules, hours records, and recognition data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage volunteer profiles, schedule events, track hours, and provide recognitions.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_136","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_136","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like volunteer role assignments, communication tools for sending event notifications and updates, and reporting tools for generating volunteer activity reports. Additionally, provide a volunteer dashboard where volunteers can view their upcoming events, logged hours, and recognition status. Ensure that the application helps organizations effectively manage their volunteers and recognize their valuable contributions.</p> <p></p>"},{"location":"project-guide/#56-basic-career-planning-tool_1","title":"56-Basic Career Planning Tool:","text":"<ul> <li> <p>Goal setting: Define career objectives and milestones.</p> </li> <li> <p>Skill tracker: Log skills and professional development.</p> </li> <li> <p>Job search organizer: Track job applications and responses.</p> </li> <li> <p>Interview preparation: Compile interview questions and tips.</p> </li> </ul>"},{"location":"project-guide/#common-features_139","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their career planning, set goals, track skills, manage job searches, and prepare for interviews. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Goal Setting: Implement tools for users to define career objectives and milestones. Users can set specific goals, timelines, and action plans to achieve them.</p> </li> <li> <p>Skill Tracker: Create a system for logging skills and tracking professional development. Users can add skills, certifications, courses, and track their progress in developing these skills.</p> </li> <li> <p>Job Search Organizer: Enable users to track job applications, including details like job titles, companies, application dates, and responses. Users can set reminders for follow-ups.</p> </li> <li> <p>Interview Preparation: Provide features for compiling interview questions, tips, and resources. Users can prepare for interviews by reviewing questions and strategies.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_137","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, goal data, skill records, job application details, interview preparation data, and other information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage goal setting, track skills, organize job searches, and prepare for interviews.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_137","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_137","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like a networking tracker for managing professional contacts, a resume builder, and integration with job search platforms for automatic job application tracking. Additionally, provide tools for generating career progress reports and setting up reminders for career-related tasks. Ensure that the application helps users effectively plan and manage their career development.</p> <p></p>"},{"location":"project-guide/#57-small-scale-rental-management_1","title":"57-Small Scale Rental Management:","text":"<ul> <li> <p>Property listing: Manage rental property details.</p> </li> <li> <p>Tenant records: Keep track of tenants and lease terms.</p> </li> <li> <p>Rent tracking: Record rent payments and due dates.</p> </li> <li> <p>Maintenance log: Schedule and track property maintenance.</p> </li> </ul>"},{"location":"project-guide/#common-features_140","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their rental property management, maintain property listings, manage tenant records, track rent payments, and log maintenance activities. This feature is optional but can    enhance the user experience.</p> </li> <li> <p>Property Listing: Implement tools for users to manage rental property details. Users can list properties with information such as property type, address, rent amount, and availability status.</p> </li> <li> <p>Tenant Records: Create a system for keeping track of tenants and lease terms. Users can record tenant details, lease start and end dates, and contact information.</p> </li> <li> <p>Rent Tracking: Enable users to record rent payments and due dates. Users can log payment amounts, methods, and generate rent receipts.</p> </li> <li> <p>Maintenance Log: Provide features for scheduling and tracking property maintenance. Users can schedule maintenance tasks, record maintenance    history, and set reminders for future maintenance.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_138","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, property listings, tenant records, rent payment data, maintenance logs, and other information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage property listings, tenant records, rent tracking, and maintenance logs.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_138","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_138","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like expense tracking for property-related costs, lease renewal reminders, and integration with payment gateways for online rent payments. Additionally, provide tools for generating financial reports, property occupancy reports, and maintenance schedules. Ensure that the application helps property owners effectively manage their rental properties and tenant relationships.</p> <p></p>"},{"location":"project-guide/#58-personal-fitness-challenge-tracker_1","title":"58-Personal Fitness Challenge Tracker:","text":"<ul> <li> <p>Challenge creation: Set personal fitness challenges.</p> </li> <li> <p>Progress logging: Record daily or weekly progress.</p> </li> <li> <p>Motivational reminders: Send alerts to stay on track.</p> </li> <li> <p>Achievement record: Celebrate milestones and successes.</p> </li> </ul>"},{"location":"project-guide/#common-features_141","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their fitness challenge tracking, set challenges, log progress, receive reminders, and record achievements. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Challenge Creation: Implement tools for users to set personal fitness challenges. Users can define challenge goals, durations, and specific activities or exercises to complete.</p> </li> <li> <p>Progress Logging: Create a system for users to record daily or weekly progress toward their fitness challenges. Users can log exercise details, duration, repetitions, and other relevant data.</p> </li> <li> <p>Motivational Reminders: Provide features to send alerts and motivational messages to users to help them stay on track with their challenges. Reminders can be scheduled at specific times or based on user preferences.</p> </li> <li> <p>Achievement Record: Enable users to celebrate milestones and successes achieved during their fitness challenges. Users can mark completed challenges, view achievements, and set new goals.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_139","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, challenge data, progress records, reminder settings, and achievement data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage challenge creation, progress logging, receive reminders, and record achievements.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_139","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_139","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like challenge sharing with friends for competition and motivation, integration with fitness trackers or wearables for automatic progress tracking, and the ability to generate fitness reports and statistics. Additionally, provide tools for setting fitness goals and generating workout plans based on user preferences. Ensure that the application helps users achieve their fitness goals and stay motivated throughout their challenges.</p> <p></p>"},{"location":"project-guide/#59-study-group-coordinator_1","title":"59-Study Group Coordinator:","text":"<ul> <li> <p>Group management: Organize study groups.</p> </li> <li> <p>Session scheduling: Plan study sessions and topics.</p> </li> <li> <p>Resource sharing: Distribute study materials.</p> </li> <li> <p>Discussion board: Facilitate group discussions.</p> </li> </ul>"},{"location":"project-guide/#common-features_142","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their study group coordination, manage study groups, schedule sessions, share resources, and facilitate discussions. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Group Management: Implement tools for users to organize study groups. Users can create and manage study groups, set group names, descriptions, and membership criteria.</p> </li> <li> <p>Session Scheduling: Create a scheduling system for planning study sessions and topics. Users can schedule sessions, specify dates, times, locations (virtual or physical), and provide descriptions or agendas.</p> </li> <li> <p>Resource Sharing: Enable users to distribute study materials within study groups. Users can upload and share documents, links, and notes relevant to the study topics.</p> </li> <li> <p>Discussion Board: Provide a discussion board for facilitating group discussions. Users can create discussion topics, post questions, and engage in conversations with fellow group members.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_140","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, study group data, session schedules, resource materials, and discussion board data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage study group creation, session scheduling, resource sharing, and discussions.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_140","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_140","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like automatic session reminders, polls and surveys for topic selection, and integration with video conferencing tools for virtual study sessions. Additionally, provide tools for generating study progress reports and tracking group attendance. Ensure that the application helps users effectively coordinate and collaborate in study groups for improved learning outcomes.</p> <p></p>"},{"location":"project-guide/#60-attendance-management-system-for-schools_1","title":"60-Attendance Management System for Schools:","text":"<ul> <li> <p>Student and teacher profiles: Registration, update, and deletion.</p> </li> <li> <p>Attendance tracking: Daily attendance recording for each class.</p> </li> <li> <p>Reporting: Generate monthly attendance reports for students.</p> </li> <li> <p>Summary: Overview of attendance trends and anomalies.</p> </li> </ul>"},{"location":"project-guide/#common-features_143","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including administrators, teachers, and staff, to create accounts or profiles within the application to personalize their attendance management, manage student and teacher profiles, track attendance, generate reports, and view attendance    summaries. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Student and Teacher Profiles: Implement tools for users to register, update, and delete student and teacher profiles. Users can collect details such as names, contact information, and class assignments.</p> </li> <li> <p>Attendance Tracking: Create a system for daily attendance recording for each class. Teachers can mark students present or absent for each class session.</p> </li> <li> <p>Reporting: Enable users to generate monthly attendance reports for students. Reports can include individual student attendance records, class-wise reports, and subject-wise reports.</p> </li> <li> <p>Summary: Provide an overview of attendance trends and anomalies. Users can view summary statistics, such as average attendance rates, frequently absent students, and trends over time.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_141","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, student and teacher data, attendance records, monthly reports, and summary data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage profiles, record attendance, generate reports, and view attendance summaries.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_141","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_141","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like automated notifications to parents for student absences, integration with student information systems for class rosters, and options for marking tardiness and leave requests. Additionally, provide tools for generating visual attendance charts and graphs for better data visualization. Ensure that the application helps schools efficiently manage student attendance records and monitor attendance trends.</p> <p></p>"},{"location":"project-guide/#61-small-business-accounting-software_1","title":"61-Small Business Accounting Software:","text":"<ul> <li> <p>Transaction recording: Log income and expenses.</p> </li> <li> <p>Financial reporting: Monthly and annual financial statements.</p> </li> <li> <p>Budget planning: Set and track business budgets.</p> </li> <li> <p>Tax preparation: Summarize financial data for tax purposes.</p> </li> </ul>"},{"location":"project-guide/#common-features_144","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including small business owners and accountants, to create accounts or profiles within the application to personalize their accounting, record transactions, generate financial reports, plan budgets, and prepare for taxes. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Transaction Recording: Implement tools for users to log income and expenses. Users can record transaction details, such as date, amount, category (e.g., revenue, cost of goods sold, utilities), and payment method.</p> </li> <li> <p>Financial Reporting: Enable users to generate monthly and annual financial statements. Reports can include profit and loss statements (income statements), balance sheets, and cash flow statements.</p> </li> <li> <p>Budget Planning: Provide features for setting and tracking business budgets. Users can create budget categories, allocate funds, and compare actual expenses to budgeted amounts.</p> </li> <li> <p>Tax Preparation: Assist users in summarizing financial data for tax purposes. Generate reports and summaries that help with tax preparation and filing.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_142","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, transaction records, financial reports, budget data, tax-related information, and other financial data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage transaction recording, generate financial reports, plan budgets, and prepare for taxes.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_142","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_142","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like automated expense categorization, bank account reconciliation, support for multiple currencies, and integration with accounting standards and tax regulations. Additionally, provide tools for generating financial graphs and charts for visualizing financial performance. Ensure that the application helps small businesses effectively manage their accounting and financial reporting needs.</p> <p></p>"},{"location":"project-guide/#62-local-event-planner_1","title":"62-Local Event Planner:","text":"<ul> <li> <p>Event details: Create and manage event information.</p> </li> <li> <p>Attendee management: Register and track attendees.</p> </li> <li> <p>Schedule organizer: Plan event timelines and activities.</p> </li> <li> <p>Feedback collection: Gather post-event feedback from attendees.</p> </li> </ul>"},{"location":"project-guide/#common-features_145","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow event organizers to create accounts or profiles within the application to personalize their event planning, manage event details, register attendees, organize schedules, and collect feedback. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Event Details: Implement tools for event organizers to create and manage event information. Users can specify event names, dates, locations, descriptions, and other relevant details.</p> </li> <li> <p>Attendee Management: Create a system for registering and tracking event attendees. Organizers can record attendee information, ticket details, and payment status.</p> </li> <li> <p>Schedule Organizer: Provide features for planning event timelines and activities. Users can schedule sessions, workshops, performances, and other event activities.</p> </li> <li> <p>Feedback Collection: Enable organizers to gather post-event feedback from attendees. Users can collect feedback on event satisfaction, specific sessions or activities, and suggestions for improvement.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_143","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, event data, attendee records, schedule details, and feedback data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage event details, register attendees, organize schedules, and collect feedback.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_143","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_143","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like ticketing and payment processing, event promotion tools, and integration with calendar applications for attendee reminders. Additionally, provide tools for generating event reports, attendance statistics, and feedback analysis. Ensure that the application helps event organizers efficiently plan and manage local events while collecting valuable feedback for future improvements.</p> <p></p>"},{"location":"project-guide/#63-simple-project-management-tool_1","title":"63-Simple Project Management Tool:","text":"<ul> <li> <p>Project setup: Define project scope and objectives.</p> </li> <li> <p>Task assignment: Allocate tasks to team members.</p> </li> <li> <p>Progress tracking: Monitor task completion and deadlines.</p> </li> <li> <p>Reporting: Generate project status reports.</p> </li> </ul>"},{"location":"project-guide/#common-features_146","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including project managers and team members, to create accounts or profiles within the application to personalize their project management, define project scopes, assign tasks, track progress, and generate reports. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Project Setup: Implement tools for defining project scope and objectives. Users can create projects, set project names, descriptions, objectives, and specify project timelines.</p> </li> <li> <p>Task Assignment: Create a system for allocating tasks to team members. Project managers can assign tasks, set deadlines, and designate responsible team members.</p> </li> <li> <p>Progress Tracking: Provide features for monitoring task completion and deadlines. Users can update task statuses, mark tasks as completed, and view progress timelines.</p> </li> <li> <p>Reporting: Enable users to generate project status reports. Reports can include project timelines, task statuses, completed tasks, and remaining work.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_144","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, project data, task assignments, progress records, and report data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage project setup, task assignment, progress tracking, and report generation.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_144","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_144","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like Gantt chart generation for visual project timelines, integration with calendar applications for task reminders, and options for setting task priorities and dependencies. Additionally, provide tools for generating performance metrics and project summary dashboards. Ensure that the application helps project managers efficiently plan and track project progress while providing valuable insights through reports and analytics.</p> <p></p>"},{"location":"project-guide/#64-basic-crm-customer-relationship-management_1","title":"64-Basic CRM (Customer Relationship Management):","text":"<ul> <li> <p>Customer data: Store and manage customer information.</p> </li> <li> <p>Interaction logging: Record customer interactions and notes.</p> </li> <li> <p>Sales tracking: Monitor sales activities and history.</p> </li> <li> <p>Customer service: Manage customer inquiries and resolutions.</p> </li> </ul>"},{"location":"project-guide/#common-features_147","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including sales representatives and customer support agents, to create accounts or profiles within the application to personalize their CRM activities, store customer data, log interactions, track sales, and manage customer inquiries. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Customer Data: Implement tools for storing and managing customer information. Users can create customer profiles, record contact details, demographic information, and preferences.</p> </li> <li> <p>Interaction Logging: Create a system for recording customer interactions and notes. Users can log phone calls, emails, meetings, and other    interactions, along with relevant details and follow-up actions.</p> </li> <li> <p>Sales Tracking: Provide features for monitoring sales activities and history. Users can track leads, opportunities, quotes, orders, and invoices associated with each customer.</p> </li> <li> <p>Customer Service: Enable users to manage customer inquiries and resolutions. Users can log and track customer service requests, assign them to agents, and document solutions.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_145","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, customer data, interaction logs, sales records, and customer service data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage customer data, log interactions, track sales, and handle customer service.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_145","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_145","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like task assignment for follow-up actions, contact history timelines, lead conversion tracking, and integration with email and calendar applications for seamless communication. Additionally, provide tools for generating customer reports, sales forecasts, and customer satisfaction surveys. Ensure that the application helps sales and customer service teams effectively manage customer relationships and enhance customer satisfaction.</p> <p></p>"},{"location":"project-guide/#65-employee-performance-review-system_1","title":"65-Employee Performance Review System:","text":"<ul> <li> <p>Employee profiles: Add, update, and delete employee data.</p> </li> <li> <p>Performance metrics: Track key performance indicators.</p> </li> <li> <p>Review scheduling: Organize periodic review meetings.</p> </li> <li> <p>Feedback compilation: Aggregate feedback from multiple sources.</p> </li> </ul>"},{"location":"project-guide/#common-features_148","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including HR managers, supervisors, and employees, to create accounts or profiles within the application to personalize their performance review activities, manage employee data, track performance metrics, schedule reviews, and compile feedback. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Employee Profiles: Implement tools for adding, updating, and deleting employee data. Users can create employee profiles with details such as names, positions, departments, and contact information.</p> </li> <li> <p>Performance Metrics: Create a system for tracking key performance indicators (KPIs) for each employee. Users can define KPIs relevant to the employee's role and responsibilities.</p> </li> <li> <p>Review Scheduling: Provide features for organizing periodic review meetings. HR managers and supervisors can schedule review dates, set reminders, and invite participants.</p> </li> <li> <p>Feedback Compilation: Enable users to aggregate feedback from multiple sources. Feedback can come from supervisors, peers, self-assessments, and other stakeholders. Users can record feedback, assign scores, and generate performance reports.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_146","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, employee data, performance metrics, review schedules, and feedback data in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage employee profiles, track performance metrics, schedule reviews, and compile feedback.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_146","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_146","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like goal setting and tracking, 360-degree feedback capabilities, performance improvement plans, and integration with HR management systems for employee data synchronization. Additionally, provide tools for generating performance dashboards and trend analysis reports. Ensure that the application helps organizations effectively manage employee performance reviews, enhance productivity, and support employee development.</p> <p></p>"},{"location":"project-guide/#66-fitness-center-membership-management_1","title":"66-Fitness Center Membership Management:","text":"<ul> <li> <p>Member data management: Register and update member profiles.</p> </li> <li> <p>Subscription tracking: Monitor membership status and renewals.</p> </li> <li> <p>Class scheduling: Organize fitness classes and registrations.</p> </li> <li> <p>Payment processing: Manage membership fees and transactions.</p> </li> </ul>"},{"location":"project-guide/#common-features_149","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including fitness center staff and administrators, to create accounts or profiles within the application to personalize their membership management, register members, track subscriptions, schedule classes, and process payments. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Member Data Management: Implement tools for registering and updating member profiles. Users can create member profiles with details such as names, contact information, membership types, and fitness goals.</p> </li> <li> <p>Subscription Tracking: Create a system for monitoring membership status and renewals. Users can track subscription start and end dates, send renewal reminders, and manage membership tiers.</p> </li> <li> <p>Class Scheduling: Provide features for organizing fitness classes and registrations. Users can schedule classes, specify instructors, set class capacities, and allow members to register for classes.</p> </li> <li> <p>Payment Processing: Enable users to manage membership fees and transactions. Users can process payments for new memberships, renewals, and class registrations. Implement secure payment methods.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_147","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, member data, subscription records, class schedules, and payment transactions in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage member data, track subscriptions, schedule classes, and process payments.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_147","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_147","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like attendance tracking for fitness classes, membership card generation, waitlist management for fully booked classes, and integration with fitness tracking devices. Additionally, provide tools for generating financial reports, membership statistics, and class utilization reports. Ensure that the application helps fitness centers efficiently manage memberships, improve member experiences, and streamline payment processes.</p> <p></p>"},{"location":"project-guide/#67-personal-document-organizer_1","title":"67-Personal Document Organizer:","text":"<ul> <li> <p>Document categorization: Sort documents by type or date.</p> </li> <li> <p>Indexing: Create an index for quick document retrieval.</p> </li> <li> <p>Secure storage: Encrypt and save personal documents.</p> </li> <li> <p>Search function: Locate documents using keywords.</p> </li> </ul>"},{"location":"project-guide/#common-features_150","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their document organization, categorization, indexing, secure storage, and search functionalities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Document Categorization: Implement tools for sorting documents by type, date, or custom categories. Users can create folders or tags to organize their documents based on their preferences.</p> </li> <li> <p>Indexing: Create an indexing system for quick document retrieval. The application can automatically generate metadata and index documents based on their content and properties.</p> </li> <li> <p>Secure Storage: Provide secure storage for personal documents. Encrypt and save documents to protect sensitive information. Implement access control to ensure only authorized users can view or modify documents.</p> </li> <li> <p>Search Function: Enable users to locate documents quickly using keywords or search queries. Implement a robust search engine that scans document content, titles, tags, and metadata.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_148","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, document data, indexing information, and encryption keys in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage document categorization, indexing, secure storage, and search functions.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_148","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_148","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like document versioning, document sharing with others, document expiration reminders, and synchronization with cloud storage services for backup. Additionally, provide tools for generating document reports, statistics on document types, and document access history logs. Ensure that the application helps users efficiently organize and secure their personal documents while providing convenient search capabilities.</p> <p></p>"},{"location":"project-guide/#68-retail-sales-tracker_1","title":"68-Retail Sales Tracker:","text":"<ul> <li> <p>Product catalog: Manage product details and prices.</p> </li> <li> <p>Sales recording: Log daily sales transactions.</p> </li> <li> <p>Inventory management: Track stock levels and reorder needs.</p> </li> <li> <p>Revenue analysis: Generate sales performance reports.</p> </li> </ul>"},{"location":"project-guide/#common-features_151","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including store managers and sales staff, to create accounts or profiles within the application to personalize their retail sales tracking, manage product catalog, record sales, monitor inventory, and analyze revenue. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Product Catalog Management: Implement tools for managing product details and prices. Users can create and update a product catalog with information such as product names, descriptions, categories, prices, and stock levels.</p> </li> <li> <p>Sales Recording: Create a system for logging daily sales transactions. Users can record sales data, including product names, quantities sold, prices, and customer information.</p> </li> <li> <p>Inventory Management: Provide features for tracking stock levels and reorder needs. The application can automatically update stock quantities based on sales and generate reorder alerts when stock levels are low.</p> </li> <li> <p>Revenue Analysis: Enable users to generate sales performance reports and revenue analysis. Users can view sales trends, revenue by product category, and profit margins.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_149","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, product catalog data, sales transaction records, inventory data, and sales performance reports in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage the product catalog, record sales, track inventory, and analyze revenue.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_149","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_149","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like sales order management, customer relationship management, integration with barcode scanners or POS systems, and automatic generation of sales invoices. Additionally, provide tools for generating financial statements, sales forecasts, and product performance reports. Ensure that the application helps retailers efficiently manage their product catalog, sales, and inventory while providing insights for revenue growth and cost management.</p> <p></p>"},{"location":"project-guide/#69-freelance-client-manager_1","title":"69-Freelance Client Manager:","text":"<ul> <li> <p>Client information storage.</p> </li> <li> <p>Project tracking and deadlines.</p> </li> <li> <p>Payment reminders.</p> </li> <li> <p>Communication log.</p> </li> </ul>"},{"location":"project-guide/#common-features_152","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow freelancers to create accounts or profiles within the application to personalize their client management and project tracking. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Client Information Storage: Implement a system for storing client information, including contact details, project history, and any specific preferences or requirements.</p> </li> <li> <p>Project Tracking and Deadlines: Provide tools for freelancers to track ongoing projects, including project names, descriptions, deadlines, and progress status. The application can help manage multiple projects simultaneously.</p> </li> <li> <p>Payment Reminders: Set up a reminder system to notify freelancers of upcoming payment deadlines or milestones. Users can configure payment reminders based on project terms.</p> </li> <li> <p>Communication Log: Create a log for recording and storing communication with clients. This can include emails, messages, and notes related to specific projects or clients.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_150","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, client data, project details, payment records, and communication logs in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to add and manage client information, track projects, and set payment reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_150","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_150","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like the ability to generate invoices, track expenses related to freelance work, and export reports for financial analysis. Ensure that the application helps freelancers stay organized, meet deadlines, and effectively manage client relationships.</p> <p></p>"},{"location":"project-guide/#70-basic-legal-case-tracker_1","title":"70-Basic Legal Case Tracker:","text":"<ul> <li> <p>Case management: Add, update, delete legal cases.</p> </li> <li> <p>Client tracking: Record client details and case history.</p> </li> <li> <p>Hearing scheduler: Manage court dates and reminders.</p> </li> <li> <p>Document storage: Organize and retrieve legal documents.</p> </li> </ul>"},{"location":"project-guide/#common-features_153","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users, including legal professionals, to create accounts or profiles within the application to personalize their case management, client tracking, hearing scheduling, and document storage activities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Case Management: Implement tools for adding, updating, and deleting legal cases. Users can create case profiles with details such as case numbers, titles, types, and parties involved.</p> </li> <li> <p>Client Tracking: Create a system for recording client details and case history. Users can associate clients with specific cases, track contact information, case statuses, and client interactions.</p> </li> <li> <p>Hearing Scheduler: Provide features for managing court dates and reminders. Users can schedule hearings, set reminders for important dates, and receive notifications.</p> </li> <li> <p>Document Storage: Enable users to organize and retrieve legal documents related to each case. Users can upload, categorize, and search for documents based on case information.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_151","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, case data, client information, hearing schedules, document metadata, and document files in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage case profiles, track clients, schedule hearings, and store and retrieve documents.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_151","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_151","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like task assignment for case activities, legal research tools, deadline tracking, and secure document sharing with clients or other legal professionals. Additionally, provide tools for generating case summaries, legal reports, and document tracking reports. Ensure that the application helps legal professionals efficiently manage their caseload, improve client communication, and streamline document organization and retrieval.</p> <p></p>"},{"location":"project-guide/#71-recipe-and-nutrition-tracker_1","title":"71-Recipe and Nutrition Tracker:","text":"<ul> <li> <p>Recipe storage: Add and manage personal recipes.</p> </li> <li> <p>Nutritional calculator: Analyze recipes for calorie and nutrient content.</p> </li> <li> <p>Meal planner: Organize daily and weekly meals.</p> </li> <li> <p>Shopping list generator: Create grocery lists based on meal plans.</p> </li> </ul>"},{"location":"project-guide/#common-features_154","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their recipe storage, nutritional analysis, meal planning, and shopping list generation activities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Recipe Storage: Implement tools for adding and managing personal recipes. Users can create recipe profiles with details such as recipe names, ingredients, quantities, instructions, and preparation times.</p> </li> <li> <p>Nutritional Calculator: Create a nutritional analysis system for recipes. Users can analyze recipes for calorie and nutrient content, including carbohydrates, proteins, fats, vitamins, and minerals.</p> </li> <li> <p>Meal Planner: Provide features for organizing daily and weekly meals. Users can create meal plans by selecting recipes, specifying serving sizes, and planning meals for breakfast, lunch, dinner, and snacks.</p> </li> <li> <p>Shopping List Generator: Enable users to create grocery lists based on meal plans. The application can automatically generate shopping lists by aggregating ingredients from selected recipes.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_152","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, recipe data, nutritional analysis results, meal plans, and shopping lists in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage recipe storage, nutritional analysis, meal planning, and shopping list generation.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_152","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_152","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like dietary preference tracking (e.g., vegetarian, vegan, gluten-free), recipe sharing with other users, and integration with nutritional databases for accurate analysis. Additionally, provide tools for generating nutrition reports, meal preparation schedules, and cost estimates for shopping lists. Ensure that the application helps users manage their recipes, plan balanced meals, and make informed dietary choices based on nutritional analysis.</p> <p></p>"},{"location":"project-guide/#72-language-learning-companion_1","title":"72-Language Learning Companion:","text":"<ul> <li> <p>Vocabulary builder: Store and review new words and phrases.</p> </li> <li> <p>Grammar exercises: Practice grammar with interactive exercises.</p> </li> <li> <p>Progress tracker: Monitor language learning progress.</p> </li> <li> <p>Daily practice reminders: Set reminders for daily language practice.</p> </li> </ul>"},{"location":"project-guide/#common-features_155","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their language learning, vocabulary building, grammar exercises, progress tracking, and daily practice reminders. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Vocabulary Builder: Implement tools for users to store and review new words and phrases. Users can add vocabulary items, categorize them, and practice with flashcards or quizzes.</p> </li> <li> <p>Grammar Exercises: Provide interactive grammar exercises for language practice. Users can complete exercises related to sentence structure, verb conjugation, tenses, and more.</p> </li> <li> <p>Progress Tracker: Enable users to monitor their language learning progress. Users can track their performance in vocabulary, grammar, and overall language proficiency.</p> </li> <li> <p>Daily Practice Reminders: Allow users to set reminders for daily language practice. Users can customize the frequency and timing of reminders to fit their schedules.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_153","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, vocabulary items, exercise data, progress records, and reminder settings in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage vocabulary building, grammar exercises, progress tracking, and daily practice reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_153","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_153","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like language-specific pronunciation guides, language proficiency assessments, and language learning goals. Additionally, provide tools for generating progress reports, vocabulary usage statistics, and grammar exercise scores. Ensure that the application helps language learners build their vocabulary, improve their grammar skills, and stay motivated through daily practice reminders.</p> <p></p>"},{"location":"project-guide/#73-personal-vehicle-log_1","title":"73-Personal Vehicle Log:","text":"<ul> <li> <p>Vehicle details: Record information about personal vehicles.</p> </li> <li> <p>Mileage tracker: Log and analyze vehicle mileage.</p> </li> <li> <p>Fuel log: Keep track of fuel expenses and consumption.</p> </li> <li> <p>Service reminders: Schedule regular maintenance checks.</p> </li> </ul>"},{"location":"project-guide/#common-features_156","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their vehicle details management, mileage tracking, fuel logging, and service reminders. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Vehicle Details Management: Implement tools for users to record information about their personal vehicles. Users can add vehicle profiles with details such as make, model, year, registration number, and insurance information.</p> </li> <li> <p>Mileage Tracker: Provide features for logging and analyzing vehicle mileage. Users can record odometer readings at the start and end of trips, track distances traveled, and view mileage trends.</p> </li> <li> <p>Fuel Log: Enable users to keep track of fuel expenses and consumption. Users can record fuel purchases, including fuel type, price, gallons/liters filled, and calculate fuel efficiency.</p> </li> <li> <p>Service Reminders: Allow users to schedule regular maintenance checks and receive reminders. Users can set reminders for oil changes, tire rotations, inspections, and other service tasks.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_154","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, vehicle data, mileage records, fuel logs, service reminders, and maintenance history in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage vehicle details, track mileage, log fuel data, and schedule service reminders.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_154","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_154","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like expense tracking for maintenance and repairs, service history reports, and integration with GPS data for trip tracking. Additionally, provide tools for generating fuel efficiency reports, cost analysis, and reminders for upcoming service tasks. Ensure that the application helps users efficiently manage their personal vehicle information, monitor fuel consumption, and schedule maintenance to keep their vehicles in top condition.</p> <p></p>"},{"location":"project-guide/#74-freelance-writers-organizer_1","title":"74-Freelance Writer's Organizer:","text":"<ul> <li> <p>Article tracking: Manage assignments and deadlines.</p> </li> <li> <p>Idea notebook: Store and categorize writing ideas.</p> </li> <li> <p>Submission log: Track submissions to publishers and responses.</p> </li> <li> <p>Income tracker: Monitor earnings from writing assignments.</p> </li> </ul>"},{"location":"project-guide/#common-features_157","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow freelance writers to create accounts or profiles within the application to personalize their article tracking, idea notebook, submission log, and income tracking activities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Article Tracking: Implement tools for managing writing assignments and deadlines. Users can create article profiles with details such as article titles, publishers, submission deadlines, and progress status.</p> </li> <li> <p>Idea Notebook: Provide a space for users to store and categorize writing ideas. Users can create idea profiles, add descriptions, and categorize ideas by genre or topic.</p> </li> <li> <p>Submission Log: Enable users to track submissions to publishers and responses. Users can record submission dates, publisher details, submission statuses (e.g., pending, accepted, rejected), and responses received.</p> </li> <li> <p>Income Tracker: Allow users to monitor earnings from writing assignments. Users can log income details, including payment dates, amounts, and sources.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_155","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, article data, idea profiles, submission records, income data, and progress status in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage article tracking, idea notebook, submission log, and income tracking.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_155","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_155","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like deadline reminders, productivity statistics, and integration with writing software or platforms for document management. Additionally, provide tools for generating income reports, submission history reports, and idea brainstorming assistance. Ensure that the application helps freelance writers efficiently manage their writing assignments, track their ideas, and stay organized throughout the writing and submission process.</p> <p></p>"},{"location":"project-guide/#75-basic-budgeting-and-expense-tracker-for-students","title":"75-Basic Budgeting and Expense Tracker for Students:","text":"<ul> <li> <p>Budget creation: Set up a simple budget for students.</p> </li> <li> <p>Expense logging: Record daily expenses.</p> </li> <li> <p>Savings goal: Track progress towards saving targets.</p> </li> <li> <p>Financial summary: Review spending habits and savings.</p> </li> </ul>"},{"location":"project-guide/#common-features_158","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow students to create accounts or profiles within the application to personalize their budgeting, expense logging, savings goal tracking, and financial summary activities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Budget Creation: Implement tools for students to set up a simple budget. Users can define budget categories (e.g., food, transportation, entertainment), allocate monthly or weekly limits, and customize budget periods.</p> </li> <li> <p>Expense Logging: Provide features for recording daily expenses. Users can log individual expenses, categorize them based on budget categories, add descriptions, and specify dates.</p> </li> <li> <p>Savings Goal: Enable users to track progress towards saving targets. Users can set savings goals, allocate funds toward those goals from their budget, and monitor the progress.</p> </li> <li> <p>Financial Summary: Allow users to review their spending habits and savings. Users can view budget vs. actual spending, track savings achievements, and receive financial summaries.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_156","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, budget data, expense records, savings goals, and financial summaries in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage budget creation, expense logging, savings goal tracking, and financial summaries.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_156","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_156","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like expense category insights, expense history reports, and automated budget alerts when nearing budget limits. Additionally, provide tools for generating savings progress charts, budget analysis reports, and financial goals achievement reports. Ensure that the application helps students manage their finances effectively, develop budgeting skills, and work towards their savings goals.</p> <p></p>"},{"location":"project-guide/#76-diy-project-planner_1","title":"76-DIY Project Planner:","text":"<ul> <li> <p>Project catalog: Store and organize DIY project ideas.</p> </li> <li> <p>Material list: Track materials and tools needed.</p> </li> <li> <p>Step tracker: Log progress on ongoing projects.</p> </li> <li> <p>Budget manager: Monitor project expenses.</p> </li> </ul>"},{"location":"project-guide/#common-features_159","title":"Common Features:","text":"<ul> <li> <p>User Authentication: Allow users to create accounts or profiles within the application to personalize their project planning, material tracking, step logging, and budget management activities. This feature is optional but can enhance the user experience.</p> </li> <li> <p>Project Catalog: Implement tools for users to store and organize DIY project ideas. Users can create project profiles with details such as project names, descriptions, images, and categories (e.g., woodworking, home improvement).</p> </li> <li> <p>Material List: Provide a feature to track materials and tools needed for each project. Users can list required items, quantities, prices, and purchase links or stores.</p> </li> <li> <p>Step Tracker: Enable users to log progress on ongoing projects. Users can record completed steps, add notes, images, or videos, and set completion dates for each project step.</p> </li> <li> <p>Budget Manager: Allow users to monitor project expenses. Users can input costs for materials, tools, and other project-related expenses. The application can calculate total project costs and compare them to the set budget.</p> </li> </ul>"},{"location":"project-guide/#cc-specific-details_157","title":"C/C++ Specific Details:","text":"<ul> <li> <p>Use file handling to store user profiles, project data, material lists, step logs, and budget information in binary files.</p> </li> <li> <p>Create a text-based interface for the console application to manage project catalog, material list, step tracker, and budget manager.</p> </li> </ul>"},{"location":"project-guide/#java-specific-details_157","title":"Java Specific Details:","text":"<ul> <li> <p>Utilize Java's file I/O for data storage and retrieval.</p> </li> <li> <p>Implement a user-friendly text-based interface using the Console class or Scanner for input.</p> </li> </ul>"},{"location":"project-guide/#c-specific-details_157","title":"C# Specific Details:","text":"<ul> <li> <p>Use C#'s file handling capabilities to manage data storage.</p> </li> <li> <p>Create a well-structured console application using the Console class for user interactions.</p> </li> </ul> <p>Consider adding features like project progress visualization (e.g., Gantt charts), project timeline tracking, and project priority setting. Additionally, provide tools for generating project cost reports, material shopping lists, and project completion certificates. Ensure that the application helps DIY enthusiasts plan, track, and manage their projects efficiently, whether they involve home improvement, crafting, or any other DIY endeavor.</p> <p></p> \\[ END-OF-DOCUMENT \\]"},{"location":"resume/","title":"Resume","text":""},{"location":"resume/#resume","title":"Resume","text":"<p>Download </p> <ul> <li> <p>Resume-English</p> </li> <li> <p>Resume-Turkish</p> </li> </ul> English Turkish"},{"location":"syllabus/syllabus/","title":"CEN206 Object-Oriented Programming Syllabus","text":""},{"location":"syllabus/syllabus/#recep-tayyip-erdogan-university","title":"Recep Tayyip Erdogan University","text":""},{"location":"syllabus/syllabus/#faculty-of-engineering-and-architecture","title":"Faculty of Engineering and Architecture","text":""},{"location":"syllabus/syllabus/#computer-engineering","title":"Computer Engineering","text":""},{"location":"syllabus/syllabus/#cen206-object-oriented-programming","title":"CEN206 Object-Oriented Programming","text":""},{"location":"syllabus/syllabus/#syllabus","title":"Syllabus","text":""},{"location":"syllabus/syllabus/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC, SLIDE, PPTX</p> <p>Download WORD (Legacy), PDF (Legacy)</p> Instructor Asst. Prof. Dr. U\u011fur CORUH Contact Information ugur.coruh@erdogan.edu.tr Office No F-301 Google Classroom Code N/A Microsoft Teams Code 42ttevp Lecture Hours and Days Friday 13:00-16:00 (Theory and Lab) ED-K4-20 (D-414) Lecture Classroom \u0130\u0130BF &amp; Law Faculty Building / ED-K4-20 (D-414) or Online via Google Meet / Microsoft Teams Office Hours Meetings will be scheduled over Google Meet or Microsoft Teams with your university account and email and performed via demand emails. Please send emails with the subject starting with [CEN206] tag for the fast response and write formal, clear, and short emails Lecture and Communication Language English Theory/Laboratory Course Hour Per Week 3/0 Hours Credit 3 Prerequisite None Corequisite None Requirement None"},{"location":"syllabus/syllabus/#acourse-description","title":"A.Course Description","text":"<p>This course introduces advanced programming skills with a focus on object-oriented programming and design fundamentals using a high-level language such as Java. Object-oriented programming is the process of integrating software components into a large-scale software architecture. After learning the fundamentals of coding, this approach to software development is the next logical step, allowing for large-scale programs. The course focuses on understanding and applying object-oriented concepts such as classes, objects, data abstraction, methods, method overloading, inheritance, and polymorphism. The class will be built around sharing expertise and guiding students to find learning methods and practice for object-oriented programming topics. Making programming applications and projects in the courses will strengthen the learning process by putting theory into practice.</p>"},{"location":"syllabus/syllabus/#bcourse-learning-outcomes","title":"B.Course Learning Outcomes","text":"<p>After completing this course satisfactorily, a student will be able to:</p> <ul> <li> <p>Design applications using OO techniques</p> </li> <li> <p>Use the unified software development process to manage software development</p> </li> <li> <p>Use UML for the notation diagrams of applications</p> </li> <li> <p>Apply useful design and architecture patterns for software development.</p> </li> </ul>"},{"location":"syllabus/syllabus/#ccourse-topics","title":"C.Course Topics","text":"<ul> <li> <p>Object-oriented concepts</p> </li> <li> <p>Unified object-oriented analysis and design process</p> </li> <li> <p>Unified Model Language</p> </li> <li> <p>Use case analysis</p> </li> <li> <p>Object structure and behavior analysis</p> </li> <li> <p>System design</p> </li> <li> <p>Application architecture and design patterns</p> </li> <li> <p>Java implementation of object-oriented design</p> </li> </ul>"},{"location":"syllabus/syllabus/#dtextbooks-and-required-hardware-or-equipment","title":"D.Textbooks and Required Hardware or Equipment","text":"<p>This course does not require a coursebook. If necessary, you can use the following books and open-source online resources. </p> <ul> <li> <p>Timothy C. Lethbridge and Robert Lagani\u00e8re, Object-Oriented Software Engineering: Practical Software Development using UML and Java, McGraw Hill</p> </li> <li> <p>Walter Savitch, Absolute C++,  Addison-Wesley Longman</p> </li> </ul> <ul> <li> <p>Intro to Java Programming, Comprehensive Version (10<sup>th</sup> Edition) 10<sup>th</sup> Edition by Y. Daniel Liang</p> </li> <li> <p>Harvey M. Deitel and Paul J. Deitel. 2001. Java How to Program (4<sup>th</sup>. ed.). Prentice Hall PTR, USA.</p> </li> <li> <p>Paul Deitel and Harvey Deitel. 2016. Visual C# How to Program (6<sup>th</sup>. ed.). Pearson.</p> </li> <li> <p>Additional Books TBD</p> </li> </ul> <p>During this course, you should have a laptop for programming practices. You will have your development environment, and you will use this for examination and assignments also classroom practices. </p>"},{"location":"syllabus/syllabus/#egrading-system","title":"E.Grading System","text":"<p>You will complete one project and two written quizzes throughout the semester. You are expected to submit your Midterm Project Report (MPR1) at the midterm, demonstrating your project progress and implementation. In the 15<sup>th</sup> week, you will present and submit your Final Project Report (MPR2).</p> <p>You will take a written quiz (QUIZ1) in the 7<sup>th</sup> week and another (QUIZ2) in the 13<sup>th</sup> week.</p> Assessment Code Weight Scope Midterm Project Report MPR1 60% Midterm Quiz-1 QUIZ1 40% Midterm Final Project Report MPR2 70% Final Quiz-2 QUIZ2 30% Final \\[ GradeMidterm = 0.6MPR1 + 0.4QUIZ1 \\] \\[ GradeFinal = 0.7MPR2 + 0.3QUIZ2 \\] \\[ PassingGrade = (40 * GradeMidterm + 60 * GradeFinal)/100 \\]"},{"location":"syllabus/syllabus/#f-instructional-strategies-and-methods","title":"F. Instructional Strategies and Methods","text":"<p>The basic teaching method of this course will be planned to be face-to-face in the classroom, and support resources, home works, and announcements will be shared over google classroom. In unexpected situations course will be planned for online for disaster scenarios. Students are expected to be in the university if face-to-face method selected. This responsibility is very important to complete this course with success. If pandemic situation changes and distance education is required during this course, this course will be done using synchronous and asynchronous distance education methods. In this scenario, students are expected to be in the online platform, zoom, or meet at the time specified in the course schedule. Attendance will be taken.</p>"},{"location":"syllabus/syllabus/#g-late-homework","title":"G. Late Homework","text":"<p>Throughout the semester, assignments must be submitted as specified by the announced deadline. Overdue assignments will not be accepted. Unexpected situations must be reported to the instructor for late homeworks by students</p>"},{"location":"syllabus/syllabus/#h-course-platform-and-communication","title":"H. Course Platform and Communication","text":"<p>Google Classroom and Github will be used as a course learning management system. All electronic resources and announcements about the course will be shared on this platform. It is very important to check the course page daily, access the necessary resources and announcements, and communicate with the instructor to complete the course with success.</p>"},{"location":"syllabus/syllabus/#i-academic-integrity-plagiarism-cheating","title":"I. Academic Integrity, Plagiarism &amp; Cheating","text":"<p>Academic Integrity is one of the most important principles of RTE\u00dc University. Anyone who breaches the principles of academic honesty is severely punished.</p> <p>It is natural to interact with classmates and others t.\"study together\". It may also be the case where a student asks to help from someone else, paid or unpaid, better understand a difficult topic or a whole course. However, what is the borderline between \"studying together\" or \"taking private lessons\" and \"academic dishonesty\"? When is it plagiarism, when is it cheating?</p> <p>It is obvious that looking at another student's paper or any source other than what is allowed during the exam is cheating and will be punished. However, it is known that many students come to university with very little experience concerning what is acceptable and what counts as \"copying,\"\" especially for assignments.</p> <p>The following are attempted as guidelines for the Faculty of Engineering and Architecture students to highlight the philosophy of academic honesty for assignments for which the student will be graded. Should a situation arise which is not described below, the student is advised to ask the instructor or assistant of the course whether what they intend to do would remain within the framework of academic honesty or not.</p>"},{"location":"syllabus/syllabus/#a-what-is-acceptable-when-preparing-an-assignment","title":"a. What is acceptable when preparing an assignment?","text":"<ul> <li>Communicating with classmates about the assignment to understand it better</li> </ul> <ul> <li> <p>Putting ideas, quotes, paragraphs, small pieces of code (snippets) that you find online   or elsewhere into your assignment, provided that</p> </li> <li> <p>these are not themselves the whole solution to the assignment,</p> </li> <li> <p>you cite the origins of these</p> </li> </ul> <ul> <li> <p>Asking sources for help in guiding you for the English language content of your   assignment.</p> </li> <li> <p>Sharing small pieces of your assignment in the classroom to create a class discussion   on some controversial topics.</p> </li> </ul> <ul> <li> <p>Turning to the web or elsewhere for instructions, references, and solutions to   technical difficulties, but not for direct answers to the assignment</p> </li> <li> <p>Discuss solutions to assignments with others using diagrams or summarized statements but not actual text or code.</p> </li> <li> <p>Working with (and even paying) a tutor to help you with the course, provided the tutor does not do your assignment for you.</p> </li> </ul>"},{"location":"syllabus/syllabus/#b-what-is-not-acceptable","title":"b. What is not acceptable?","text":"<ul> <li> <p>Ask a classmate to see their solution to a problem before submitting your own.</p> </li> <li> <p>Failing to cite the origins of any text (or code for programming courses) that you discover outside of the course's lessons and integrate into your work</p> </li> <li> <p>You are giving or showing a classmate your solution to a problem when the classmate is struggling to solve it.</p> </li> </ul>"},{"location":"syllabus/syllabus/#j-expectations","title":"J. Expectations","text":"<p>You are expected to attend classes on time by completing weekly course requirements (readings and assignments) during the semester. The main communication channel between the instructor and the students email emailed. Please send your questions to the instructor's email address about the course via the email address provided to you by the university. Ensure that you include the course name in the subject field of your message and your name in the text field. In addition, the instructor will contact you via email if necessary. For this reason, it is very important to check your email address every day for healthy communication.</p>"},{"location":"syllabus/syllabus/#k-lecture-content-and-syllabus-updates","title":"K. Lecture Content and Syllabus Updates","text":"<p>If deemed necessary, changes in the lecture content or course schedule can be made. If any changes are made in the scope of this document, the instructor will inform you about this.</p>"},{"location":"syllabus/syllabus/#course-schedule-overview","title":"Course Schedule Overview","text":"Week Date Subjects Other Tasks Week 1 14.02.2025 Course Plan and Communication Grading System, Assignments, and Exams. Software and Software Engineering Object Orientation and OOP with Java Part-I(Classes, Objects, Methods,Inheritance,Access Modifiers,This and InstanceOf Keywords) Week 2 21.02.2025 OOP with Java Part-II (super keyword, final keyword, Polymorphism / Encapsulation, Method Overriding, Nested Inner Class, Static Class, Anonymous Class, Enums / Enum-Constructor / Enum-String, Abstract Class, Object Class, Forms of Inheritance, Benefits, and Costs of Inheritance, Packages, Access Protection in Packages) Week Date Subjects Other Tasks Week 3 28.02.2025 OOP with Java Part-III(Defining and Interface and Interface Implementation, Nested Interfaces, Variables in Interfaces, Extending Interfaces, Reflection, Wrapper Classes, Lambda Notation) Week 4 07.03.2025 OOP with Java Part-III(Defining and Interface and Interface Implementation, Nested Interfaces, Variables in Interfaces, Extending Interfaces, Reflection, Wrapper Classes, Lambda Notation) Week 5 14.03.2025 OOP with Java Part-III(Defining and Interface and Interface Implementation, Nested Interfaces, Variables in Interfaces, Extending Interfaces, Reflection, Wrapper Classes, Lambda Notation) Week Date Subjects Other Tasks Week 6 21.03.2025 UMPLE and Examples Week 7 28.03.2025 UMPLE and Examples Quiz-1 (Wednesday afternoon) Week 8 04.04.2025 Project Homework Controls and Review with Summary Project homework review Week 9 11.04.2025 Midterm Midterm Project Report Due Week Date Subjects Other Tasks Week 10 18.04.2025 Using Design Patterns Week 11 25.04.2025 Using Design Patterns Week 12 02.05.2025 UML + UMPLE + Java Implementations Week 13 09.05.2025 Quiz 2 Quiz-2 Week Date Subjects Other Tasks Week 14 16.05.2025 SMC Remote Service Case Study and OOP ATM Case Study Week 15 23.05.2025 Project Homework Controls and Review with Summary Final Project Report Due Week 16 24.05.2025 Final <p>\\(End-Of-CEN206-Syllabus\\)</p>"},{"location":"week-1/ce204-week-1/","title":"CEN206 Object-Oriented Programming","text":""},{"location":"week-1/ce204-week-1/#cen206-object-oriented-programming","title":"CEN206 Object-Oriented Programming","text":""},{"location":"week-1/ce204-week-1/#week-1-software-engineering-and-oop-with-java-i","title":"Week-1 (Software Engineering and OOP with Java-I)","text":""},{"location":"week-1/ce204-week-1/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC-PDF, DOC-DOCX, SLIDE, PPTX</p>"},{"location":"week-1/ce204-week-1/#course-plan-and-communication","title":"Course Plan and Communication","text":"<ul> <li>Introduction to the course</li> <li>Course objectives and learning outcomes</li> <li>Grading system</li> <li>Assignments and exams</li> <li>Communication channels (Microsoft Teams Code: 42ttevp)</li> <li>Office hours and consultation</li> </ul>"},{"location":"week-1/ce204-week-1/#software-and-software-engineering","title":"Software and Software Engineering","text":""},{"location":"week-1/ce204-week-1/#what-is-software","title":"What is Software?","text":"<ul> <li>Programs</li> <li>Documents</li> <li>Data</li> </ul>"},{"location":"week-1/ce204-week-1/#software-engineering","title":"Software Engineering","text":"<ul> <li>A disciplined approach to software development</li> <li>Focus on both technical and non-technical aspects</li> <li>Methods, tools, and procedures for developing software systems</li> </ul>"},{"location":"week-1/ce204-week-1/#course-growth-track","title":"Course Growth Track","text":"<ul> <li>OOP with Java </li> <li>UML</li> <li>PlantUML + UMPLE + UML </li> <li>PlantUML + UMPLE + UML + Java</li> <li>Design Patterns + UML + Java + UMPLE</li> </ul>"},{"location":"week-1/ce204-week-1/#outline-1","title":"Outline (1)","text":"<ul> <li>Software and Software Engineering</li> <li>Object Orientation and Review</li> <li>OOP with Java Intro</li> <li>Basing Software Development on Reusable Technology</li> </ul>"},{"location":"week-1/ce204-week-1/#outline-2","title":"Outline (2)","text":"<ul> <li>Java Classes</li> <li>Java Objects</li> <li>Java Methods</li> <li>Java Inheritance</li> <li>Java Access Modifiers</li> <li>This and InstanceOf Keywords</li> </ul>"},{"location":"week-1/ce204-week-1/#software-and-software-engineering_1","title":"Software and Software Engineering","text":""},{"location":"week-1/ce204-week-1/#software","title":"Software","text":"<ul> <li> <p>Computer Software is the product that software engineers design and build.  </p> </li> <li> <p>It encompasses </p> </li> <li> <p>programs that execute within a computer of any size and      architecture,  </p> </li> <li> <p>documents that encompass hard-copy and virtual forms, </p> </li> <li> <p>data  that combine numbers and text but also includes representations of pictorial, video, and audio information. </p> </li> </ul>"},{"location":"week-1/ce204-week-1/#the-nature-of-software-1","title":"The Nature of Software... (1)","text":"<ul> <li> <p>Software is intangible   Hard to understand development effort</p> </li> <li> <p>Software is easy to reproduce</p> </li> <li> <p>Cost is in its development</p> <ul> <li>in other engineering products, manufacturing is the costly stage</li> </ul> </li> <li> <p>The industry is labor-intensive</p> </li> <li> <p>Hard to automate</p> </li> <li> <p>Untrained people can hack something together</p> </li> <li> <p>Quality problems are hard to notice</p> </li> </ul>"},{"location":"week-1/ce204-week-1/#the-nature-of-software-2","title":"The Nature of Software... (2)","text":"<ul> <li> <p>Software is easy to modify</p> </li> <li> <p>People make changes without fully understanding it</p> </li> <li> <p>Software does not \"wear out\"</p> </li> <li> <p>It deteriorates by having its design changed:</p> <ul> <li>erroneously, or</li> <li>in ways that were not anticipated, thus making it complex</li> </ul> </li> <li> <p>Conclusions</p> </li> <li> <p>Much software has poor design and is getting worse</p> </li> <li>We have to learn to 'engineer' software</li> </ul>"},{"location":"week-1/ce204-week-1/#some-types-of-software","title":"Some types of Software","text":"<ul> <li>Real time embedded software</li> <li>E.g. control and monitoring systems</li> <li>Must react immediately</li> <li>Safety often a concern</li> <li>Data processing software</li> <li>Used to run businesses</li> <li>Accuracy and security of data are key</li> <li>Game software</li> <li>Mobile device software</li> <li>Web-based software</li> <li>Etc.</li> </ul>"},{"location":"week-1/ce204-week-1/#single-chance","title":"Single Chance","text":"<p>Most of the clients use applications to ease their tasks to make money. For this reason, you do not have a chance to try your application development in real system. Before this deployment you have to use</p> <ul> <li> <p>Theory</p> </li> <li> <p>Experimentation</p> </li> <li> <p>Guesses</p> </li> <li> <p>Feedback</p> </li> </ul> <p>Lets talk about.</p>"},{"location":"week-1/ce204-week-1/#the-project-construction-cycle-the-tree-swing-example","title":"The Project Construction Cycle - The Tree Swing Example","text":""},{"location":"week-1/ce204-week-1/#1-how-the-customer-explained-it","title":"1-How the customer explained it","text":""},{"location":"week-1/ce204-week-1/#2-how-the-project-leader-understood-it","title":"2-How the project leader understood it.","text":""},{"location":"week-1/ce204-week-1/#3-how-the-analyst-designed-it","title":"3- How the analyst designed it","text":""},{"location":"week-1/ce204-week-1/#4-how-the-programmer-wrote-it","title":"4-How the programmer wrote it","text":""},{"location":"week-1/ce204-week-1/#5-what-the-beta-testers-received","title":"5-What the beta testers received","text":""},{"location":"week-1/ce204-week-1/#6-how-the-business-consultant-described-it","title":"6-How the business consultant described it","text":""},{"location":"week-1/ce204-week-1/#7-how-the-project-was-documented","title":"7- How the project was documented","text":""},{"location":"week-1/ce204-week-1/#8-what-operations-installed","title":"8-What operations installed","text":""},{"location":"week-1/ce204-week-1/#9-how-the-customer-was-billed","title":"9-How the customer was billed","text":""},{"location":"week-1/ce204-week-1/#10-how-it-was-supported","title":"10-How it was supported","text":""},{"location":"week-1/ce204-week-1/#11-what-marketing-advertised","title":"11-What marketing advertised","text":""},{"location":"week-1/ce204-week-1/#12-what-the-customer-really-needed","title":"12-What the customer really needed","text":""},{"location":"week-1/ce204-week-1/#13-the-disaster-recover-plan","title":"13-The disaster recover plan","text":""},{"location":"week-1/ce204-week-1/#14-what-the-digg-effect-can-do-to-your-site","title":"14- What the digg effect can do to your site","text":""},{"location":"week-1/ce204-week-1/#15-finally-when-it-was-delivered","title":"15- (Finally) When it was delivered","text":""},{"location":"week-1/ce204-week-1/#need-for-a-good-programming-method","title":"Need  for a good programming method","text":"<ul> <li> <p>Common problems </p> </li> <li> <p>Why does it take so long? </p> </li> <li> <p>Why are development costs so high? </p> </li> <li> <p>Why can't find all faults before delivery? </p> </li> <li> <p>Why can't we measure development?</p> </li> </ul> <p>NIST reported that even though 50 percent of software development budgets go to testing, flaws in software still cost the U.S. economy $59.5 billion annually.*</p> <p>Updated NIST Software Uses Combination Testing to Catch Bugs Fast and Easy | NIST</p>"},{"location":"week-1/ce204-week-1/#what-is-software-engineering-1","title":"What is Software Engineering? (1)","text":"<ul> <li>The process of solving customers' problems by the </li> <li>systematic development and evolution of large,</li> <li>high-quality software systems within <ul> <li>cost, </li> <li>time and </li> <li>other constraints</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#what-is-software-engineering-2","title":"What is Software Engineering? (2)","text":"<ul> <li>Solving customers' problems</li> <li>The goal<ul> <li>Sometimes the solution is to buy, not build</li> <li>Adding unnecessary features often makes software worse</li> <li>Software engineers must communicate effectively to identify and understand the problem</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#what-is-software-engineering-3","title":"What is Software Engineering? (3)","text":"<ul> <li>Systematic development and evolution</li> <li>An engineering process involves applying well understood techniques in a organized and disciplined way</li> <li>Many well-accepted practices have been formally standardized<ul> <li>e.g. by the IEEE or ISO </li> </ul> </li> <li>Most development work is evolution </li> </ul>"},{"location":"week-1/ce204-week-1/#what-is-software-engineering-4","title":"What is Software Engineering? (4)","text":"<ul> <li>Large, high quality software systems</li> <li>Software engineering techniques are needed because large systems cannot be completely understood by one person</li> <li>Teamwork and co-ordination are required</li> <li>Key challenge: Dividing up the work and ensuring that the parts of the system work properly together</li> <li>The end-product must be of sufficient quality </li> </ul>"},{"location":"week-1/ce204-week-1/#what-is-software-engineering-5","title":"What is Software Engineering? (5)","text":"<ul> <li>Cost, time and other constraints</li> <li>Finite resources</li> <li>The benefit must outweigh the cost</li> <li>Others are competing to do the job cheaper and faster</li> <li>Inaccurate estimates of cost and time have caused many project failures</li> </ul>"},{"location":"week-1/ce204-week-1/#the-software-engineering-profession","title":"The Software Engineering Profession","text":"<ul> <li> <p>The term Software Engineering was coined in 1968</p> </li> <li> <p>People began to realize that the principles of engineering should be applied to software development</p> </li> <li> <p>Engineering is a licensed profession</p> </li> <li> <p>In order to protect the public</p> </li> <li>Engineers design artifacts following well accepted practices which involve the application of science, mathematics and economics</li> <li> <p>Ethical practice is also a key tenet of the profession</p> </li> <li> <p>In many countries, much software engineering does not require an engineering licence, but is still engineering</p> </li> </ul>"},{"location":"week-1/ce204-week-1/#software-engineering-code-of-ethics","title":"Software Engineering Code of Ethics","text":"<ul> <li>Software engineers shall</li> <li>Act consistently with public interest</li> <li>Act in the best interests of their clients</li> <li>Develop and maintain with the highest standards possible</li> <li>Maintain integrity and independence</li> <li>Promote an ethical approach in management</li> <li>Advance the integrity and reputation of the profession</li> <li>Be fair and supportive to colleagues</li> <li>Participate in lifelong learning</li> </ul>"},{"location":"week-1/ce204-week-1/#software-quality","title":"Software Quality","text":"<ul> <li>Usability</li> <li>Users can learn it and fast and get their job done easily</li> <li>Efficiency</li> <li>It doesn't waste resources such as CPU time and memory</li> <li>Reliability</li> <li>It does what it is required to do without failing</li> <li>Maintainability</li> <li>It can be easily changed</li> <li>Reusability</li> <li>Its parts can be used in other projects, so reprogramming is not needed</li> </ul>"},{"location":"week-1/ce204-week-1/#software-quality-and-stakeholders","title":"Software Quality and Stakeholders","text":""},{"location":"week-1/ce204-week-1/#software-quality-and-stakeholders_1","title":"Software Quality and Stakeholders","text":"<ul> <li>Customer (those who pay):</li> <li>solves problems at an acceptable cost in terms of money paid and resources used</li> <li>User</li> <li>easy to learn; efficient to use; helps get work done</li> <li>Developer</li> <li>easy to design; easy to maintain; easy to reuse its parts</li> <li>Development manager</li> <li>sells more and pleases customers while costing less to develop and maintain</li> </ul>"},{"location":"week-1/ce204-week-1/#software-quality-metrics-user","title":"Software Quality Metrics \u2013 User","text":"<ul> <li>A program must do its job correctly. It must be useful and - usable </li> <li>A program must run as fast as necessary (Real-time constraints) </li> <li>A program must not waste system resources(processor time, - memory, disk capacity, network capacity) too much </li> <li>It must be reliable </li> <li>It must be easily updated </li> <li>A good software must have sufficient documentation (users manual) </li> </ul>"},{"location":"week-1/ce204-week-1/#software-quality-metrics-sw-developer","title":"Software Quality Metrics \u2013 SW Developer","text":"<ul> <li>Source code must be readable and understandable </li> <li>It must be easy to maintain and update the program </li> <li>A program must consist of independent modules </li> <li>An error may not affect other parts of a program (Locality of errors) </li> <li>Modules of the program must be reusable in other projects </li> <li>A software project must meet its deadline</li> <li>Good software must have sufficient documentation</li> </ul>"},{"location":"week-1/ce204-week-1/#software-quality-metrics-oop","title":"Software Quality Metrics - OOP","text":"<ul> <li>OOP techniques ensure high-quality programs </li> <li>While designing and coding a program, these quality metrics must always be considered </li> </ul>"},{"location":"week-1/ce204-week-1/#software-quality-conflicts-and-objectives","title":"Software Quality: Conflicts and Objectives","text":"<ul> <li> <p>The different qualities can conflict</p> </li> <li> <p>Increasing efficiency can reduce maintainability or reusability</p> </li> <li> <p>Increasing usability can reduce efficiency</p> </li> <li> <p>Setting objectives for quality is a key engineering activity</p> </li> <li> <p>You then design to meet the objectives</p> </li> <li>Avoids \"over-engineering\" which wastes money</li> </ul>"},{"location":"week-1/ce204-week-1/#software-engineering-projects","title":"Software Engineering Projects","text":"<ul> <li>Most projects are evolutionary or maintenance projects, involving work on legacy systems</li> <li>Corrective projects: fixing defects</li> <li>Adaptive projects: changing the system in response to changes in<ul> <li>Operating system</li> <li>Database</li> <li>Rules and regulations</li> </ul> </li> <li>Enhancement projects: adding new features for users</li> <li>Reengineering or  perfective projects: changing the system internally so it is more maintainable</li> </ul>"},{"location":"week-1/ce204-week-1/#software-engineering-projects-start-points","title":"Software Engineering Projects Start Points","text":"Green Field Development Brownfield Development Start afresh Build on existing code Choose your technology Technology already chosen Use your best ideas, patterns, techniques Understand previous developers' code Learn from mistakes Live with mistakes"},{"location":"week-1/ce204-week-1/#software-engineering-projects-start-points_1","title":"Software Engineering Projects Start Points","text":"Requirements must be determined Clients have produced requirements New development, Green Field Project A B Evolution of Existing System, Brown Field Project C D"},{"location":"week-1/ce204-week-1/#activities-common-to-software-projects","title":"Activities Common to Software Projects","text":"<ul> <li>Requirements and specification</li> <li>Includes<ul> <li>Domain analysis</li> <li>Defining the problem</li> <li>Requirements gathering</li> <li>Obtaining input from as many sources as possible</li> <li>Requirements analysis</li> <li>Organizing the information</li> <li>Requirements specification</li> <li>Writing detailed instructions about how the software should behave</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#activities-common-to-software-projects_1","title":"Activities Common to Software Projects","text":"<ul> <li>Design</li> <li>Deciding how the requirements should be implemented, using the available technology</li> <li>Includes:<ul> <li>Systems engineering: Deciding what should be in hardware and what in software</li> <li>Software architecture: Dividing the system into subsystems and deciding how the subsystems will interact</li> <li>Detailed design of the internals of a subsystem</li> <li>User interface design</li> <li>Design of databases</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#activities-common-to-software-projects_2","title":"Activities Common to Software Projects","text":"<ul> <li>Modeling</li> <li>Creating representations of the domain or the software<ul> <li>Use case modeling</li> <li>Structural modeling</li> <li>Dynamic and behavioural modeling</li> </ul> </li> <li>Programming</li> <li>Quality assurance</li> <li>Reviews and inspections</li> <li>Testing</li> <li>Deployment</li> <li>Managing the process</li> </ul>"},{"location":"week-1/ce204-week-1/#software-projects-development-team","title":"Software Projects Development Team","text":""},{"location":"week-1/ce204-week-1/#software-life-cycle","title":"Software Life Cycle","text":"<ul> <li>Requirements Phase </li> <li>Specification Phase </li> <li>Design Phase </li> <li>Implementation Phase </li> <li>Integration Phase </li> <li>Maintenance Phase </li> <li>Retirement Phase </li> </ul>"},{"location":"week-1/ce204-week-1/#requirements-phase","title":"Requirements Phase","text":"<ul> <li>Defining constraints   </li> <li>Functions </li> <li>Due dates </li> <li>Costs </li> <li>Reliability </li> <li>Size </li> <li>Types </li> <li>Functional </li> <li>Non-Functional </li> </ul>"},{"location":"week-1/ce204-week-1/#specification-phase","title":"Specification Phase","text":"<ul> <li>Documentation of requirements   </li> <li>Inputs &amp; Outputs </li> <li>Formal </li> <li>Understandable for user &amp; developer </li> <li>Usually functional requirements (what to do) </li> <li>Base for testing &amp; maintenance </li> <li>The contract between customer &amp; developer</li> </ul>"},{"location":"week-1/ce204-week-1/#design-phase","title":"Design Phase","text":"<ul> <li>Defining Internal structure (how to do) </li> <li>Has some levels (or types of docs) </li> <li>Architectural design </li> <li>Detailed design </li> <li>Important </li> <li>To backtrack the aims of decisions </li> <li>To easily maintain </li> </ul>"},{"location":"week-1/ce204-week-1/#implementation-and-integration-phases","title":"Implementation and Integration Phases","text":"<ul> <li>Implementation phase: Simply coding </li> <li>Unit tests <ul> <li>For verification </li> </ul> </li> <li>Combining modules </li> <li>System tests </li> <li>For validation </li> <li>Quality tests</li> </ul>"},{"location":"week-1/ce204-week-1/#maintenance-phase","title":"Maintenance Phase","text":"<ul> <li> <p>Corrective </p> </li> <li> <p>Enhancement </p> </li> <li> <p>Perfective </p> </li> <li> <p>Adaptive </p> </li> <li> <p>Usually maintainers are not the same people with developers. </p> </li> <li> <p>The only input is (in general) the source code of the software </p> </li> </ul>"},{"location":"week-1/ce204-week-1/#retirement-phase","title":"Retirement Phase","text":"<ul> <li>When the cost of maintenance is not effective. </li> <li>Changes are so drastic, that the software should be redesigned. </li> <li>So many changes may have been made. </li> <li>The update frequency of docs is not enough. </li> <li>The hardware (or OS) will be changed.</li> </ul>"},{"location":"week-1/ce204-week-1/#software-development-process","title":"Software Development Process","text":""},{"location":"week-1/ce204-week-1/#software-development-process_1","title":"Software Development Process","text":"<ul> <li>Analysis: Understanding requirements. They may change during (or after) development of the system! Building the programming team. </li> <li>Design: Identifying the key concepts involved in a solution and creation of the models. </li> <li>This stage has a strong effect on the quality of the software. Therefore, before the coding, verification of the created model must be done. </li> <li>Design process is connected with the programming scheme. Here, our design style is object-oriented. </li> </ul>"},{"location":"week-1/ce204-week-1/#software-development-process_2","title":"Software Development Process","text":"<ul> <li>Coding: The solution (model) is expressed in a program.    In this course we will use Java. </li> <li>Documentation: Each phase of a software project must be clearly explained. A users manual should also be written. </li> <li>Test: the behavior of the program for possible inputs must be examined. </li> </ul> <p>These steps are important design principles and design patterns, which help us developing high-quality software. The Unified Modeling Language (UML) is useful to express the model. </p>"},{"location":"week-1/ce204-week-1/#unified-process-up","title":"Unified Process (UP)","text":"<ul> <li>The UP promotes several best practices. </li> <li>Iterative </li> <li>Incremental </li> <li>Risk-driven</li> </ul>"},{"location":"week-1/ce204-week-1/#unified-process-up_1","title":"Unified Process (UP)","text":""},{"location":"week-1/ce204-week-1/#unified-process-up_2","title":"Unified Process (UP)","text":""},{"location":"week-1/ce204-week-1/#object-orientation-part-1","title":"Object Orientation Part-1","text":""},{"location":"week-1/ce204-week-1/#oop-concepts-in-java","title":"OOP Concepts in Java","text":"<p>OOP stands for Object-Oriented Programming. OOP is a programming paradigm in which every program is follows the concept of object. In other words, OOP is a way of writing programs based on the object concept.</p> <p>The object-oriented programming paradigm has the following core concepts.</p> <ul> <li>Encapsulation</li> <li>Inheritance</li> <li>Polymorphism</li> <li>Abstraction</li> </ul> <p>The popular object-oriented programming languages are Smalltalk, C++, Java, PHP, C#, Python, etc.</p>"},{"location":"week-1/ce204-week-1/#encapsulation","title":"Encapsulation","text":"<p>Encapsulation is the process of combining data and code into a single unit (object / class). In OOP, every object is associated with its data and code. In programming, data is defined as variables and code is defined as methods. The java programming language uses the class concept to implement encapsulation.</p>"},{"location":"week-1/ce204-week-1/#encapsulation_1","title":"Encapsulation","text":""},{"location":"week-1/ce204-week-1/#inheritance","title":"Inheritance","text":"<p>Inheritance is the process of acquiring properties and behaviors from one object to another object or one class to another class. In inheritance, we derive a new class from the existing class. Here, the new class acquires the properties and behaviors from the existing class. In the inheritance concept, the class which provides properties is called as parent class and the class which recieves the properties is called as child class. The parent class is also known as base class or supre class. The child class is also known as derived class or sub class.</p> <p>In the inheritance, the properties and behaviors of base class extended to its derived class, but the base class never receive properties or behaviors from its derived class.</p> <p>In java programming language the keyword extends is used to implement inheritance.</p>"},{"location":"week-1/ce204-week-1/#inheritance_1","title":"Inheritance","text":""},{"location":"week-1/ce204-week-1/#polymorphism","title":"Polymorphism","text":"<p>Polymorphism is the process of defining same method with different implementation. That means creating multiple methods with different behaviors.</p> <p>The java uses method overloading and method overriding to implement polymorphism.</p> <p>Method overloading - multiple methods with same name but different parameters.</p> <p>Method overriding - multiple methods with same name and same parameters.</p>"},{"location":"week-1/ce204-week-1/#polymorphism_1","title":"Polymorphism","text":""},{"location":"week-1/ce204-week-1/#abstraction","title":"Abstraction","text":"<p>Abstraction is hiding the internal details and showing only esential functionality. In the abstraction concept, we do not show the actual implemention to the end user, instead we provide only esential things. For example, if we want to drive a car, we does not need to know about the internal functionality like how wheel system works? how brake system works? how music system works? etc.</p>"},{"location":"week-1/ce204-week-1/#abstraction_1","title":"Abstraction","text":""},{"location":"week-1/ce204-week-1/#why-object-technology","title":"Why Object Technology","text":"<ul> <li> <p>Expectations are, </p> </li> <li> <p>Reducing the effort, complexity, and cost of development and maintenance of software systems. </p> </li> <li> <p>Reducing the time to adapt an existing system (quicker reaction to changes in the business environment): Flexibility, reusability. </p> </li> <li> <p>Increasing the reliability of the system. </p> </li> </ul>"},{"location":"week-1/ce204-week-1/#what-is-programming","title":"What is Programming?","text":"<ul> <li>A programming language provides a way to express concepts.  </li> <li>Program development involves creating models of real world - situations and building computer programs based on these models. </li> <li>Computer programs describe the method of implementing the model. </li> <li>Computer programs may contain computer world representations of the things that constitute the solutions of real world problems.</li> </ul>"},{"location":"week-1/ce204-week-1/#what-is-programming_1","title":"What is Programming?","text":"<p>If successful, this medium of expression (the object-oriented way) will be significantly easier, more flexible, and efficient than the alternatives as problems grow larger and more complex</p> <p></p>"},{"location":"week-1/ce204-week-1/#why-java","title":"Why JAVA","text":"<ul> <li>Java supports writing high quality programs (pure OO) </li> <li>Provides an easy-to-use language </li> <li>Provides an interpreted environment for </li> <li>Improved development speed </li> <li>Code portability </li> <li>Simple </li> <li>Architecture Neutral and Portable </li> <li>Robust and Secure </li> <li>High Performance </li> </ul>"},{"location":"week-1/ce204-week-1/#why-java_1","title":"Why JAVA","text":"<ul> <li>Write less code </li> <li>can be four times smaller than the same program written in C++ </li> <li>Write better code </li> <li>encourages good coding practices, garbage collection for  avoiding memory leaks, wide-ranging, easily extendible API </li> <li>Avoid platform dependencies </li> <li>Write once, run anywhere </li> <li>Gained popularity in gadgets such as </li> <li>PDAs, cell phones etc. </li> </ul>"},{"location":"week-1/ce204-week-1/#learning-java","title":"Learning JAVA","text":"<ul> <li>Many syntax and grammar rules </li> <li>Learning how to write \"good programs\" </li> <li>Focusing on concepts and not get lost in language-technical - details </li> <li>Paying attention to design techniques rather than details </li> <li>Building an effective programming scheme </li> <li>Practicing, practicing and practicing! </li> <li>Consequently, new and better ways of building systems </li> </ul>"},{"location":"week-1/ce204-week-1/#java-buzz-words","title":"Java Buzz Words","text":"<ul> <li>Simple</li> <li>Secure</li> <li>Portable</li> <li>Object-oriented</li> <li>Robust</li> <li>Architecture-neutral (or) Platform Independent</li> <li>Multi-threaded</li> <li>Interpreted</li> <li>High performance</li> <li>Distributed</li> <li>Dynamic</li> </ul>"},{"location":"week-1/ce204-week-1/#simple","title":"Simple","text":"<p>Java programming language is very simple and easy to learn, understand, and code. Most of the syntaxes in java follow basic programming language C and object-oriented programming concepts are similar to C++. In a java programming language, many complicated features like pointers, operator overloading, structures, unions, etc. have been removed. One of the most useful features is the garbage collector it makes java more simple.</p>"},{"location":"week-1/ce204-week-1/#secure","title":"Secure","text":"<p>Java is said to be more secure programming language because it does not have pointers concept, java provides a feature \"applet\" which can be embedded into a web application. The applet in java does not allow access to other parts of the computer, which keeps away from harmful programs like viruses and unauthorized access.</p>"},{"location":"week-1/ce204-week-1/#portable","title":"Portable","text":"<p>Portability is one of the core features of java which enables the java programs to run on any computer or operating system. For example, an applet developed using java runs on a wide variety of CPUs, operating systems, and browsers connected to the Internet.</p>"},{"location":"week-1/ce204-week-1/#object-oriented","title":"Object-oriented","text":"<p>Java is said to be a pure object-oriented programming language. In java, everything is an object. It supports all the features of the object-oriented programming paradigm. The primitive data types java also implemented as objects using wrapper classes, but still, it allows primitive data types to archive high-performance.</p>"},{"location":"week-1/ce204-week-1/#robust","title":"Robust","text":"<p>Java is more robust because the java code can be executed on a variety of environments, java has a strong memory management mechanism (garbage collector), java is a strictly typed language, it has a strong set of exception handling mechanism, and many more.</p>"},{"location":"week-1/ce204-week-1/#architecture-neutral-or-platform-independent","title":"Architecture-neutral (or) Platform Independent","text":"<p>Java has invented to archive \"write once; run anywhere, any time, forever\". The java provides JVM (Java Virtual Machine) to to archive architectural-neutral or platform-independent. The JVM allows the java program created using one operating system can be executed on any other operating system.</p>"},{"location":"week-1/ce204-week-1/#multi-threaded","title":"Multi-threaded","text":"<p>Java supports multi-threading programming, which allows us to write programs that do multiple operations simultaneously.</p>"},{"location":"week-1/ce204-week-1/#interpreted","title":"Interpreted","text":"<p>Java enables the creation of cross-platform programs by compiling into an intermediate representation called Java bytecode. The byte code is interpreted to any machine code so that it runs on the native machine.</p>"},{"location":"week-1/ce204-week-1/#high-performance","title":"High performance","text":"<p>Java provides high performance with the help of features like JVM, interpretation, and its simplicity.</p>"},{"location":"week-1/ce204-week-1/#distributed","title":"Distributed","text":"<p>Java programming language supports TCP/IP protocols which enable the java to support the distributed environment of the Internet. Java also supports Remote Method Invocation (RMI), this feature enables a program to invoke methods across a network.</p>"},{"location":"week-1/ce204-week-1/#dynamic","title":"Dynamic","text":"<p>Java is said to be dynamic because the java byte code may be dynamically updated on a running system and it has a dynamic memory allocation and deallocation (objects and garbage collector).</p>"},{"location":"week-1/ce204-week-1/#the-basics-of-java","title":"The Basics of Java","text":"<p>History</p> <ul> <li>The first object oriented programming language was Simula-67 </li> <li>designed to allow programmers to write simulation programs </li> <li>In the early 1980's, Smalltalk was developed at Xerox PARC </li> <li>New syntax, large open-source library of reusable code, bytecode, platform independence, garbage collection.</li> </ul>"},{"location":"week-1/ce204-week-1/#the-basics-of-java_1","title":"The Basics of Java","text":"<ul> <li>late 1980's, C++ was developed by B. Stroustrup, </li> <li>Recognized the advantages of OO but also recognized that there were tremendous numbers of C programmers</li> <li>In 1991, engineers at Sun Microsystems started a project to design a language that could be used in consumer 'smart devices': Oak </li> <li>When the Internet gained popularity, Sun saw an opportunity to exploit the technology. </li> <li>The new language, renamed Java, was formally presented in 1995 at the SunWorld '95 conference.</li> </ul>"},{"location":"week-1/ce204-week-1/#java-documentation","title":"Java documentation","text":"<ul> <li>Looking up classes and methods is an essential skill</li> <li>Looking up unknown classes and methods will get you a long way towards understanding code</li> <li>Java documentation can be automatically generated by a program called Javadoc</li> <li>Documentation is generated from the code and its comments</li> <li>You should format your comments as shown in some of the book's examples<ul> <li>These may include embeded html</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#characters-and-strings","title":"Characters and Strings","text":"<ul> <li>Character is a class representing Unicode characters </li> <li>More than a byte each</li> <li>Represent any world language</li> <li>char is a primitive data type containing a Unicode character</li> <li><code>String</code> is a class containing collections of characters</li> <li>+ is the operator used to concatenate strings</li> </ul>"},{"location":"week-1/ce204-week-1/#arrays-and-collections","title":"Arrays and Collections","text":"<ul> <li>Arrays are of fixed size and lack methods to manipulate them</li> <li>ArrayList is the most widely used class to hold a collection of other objects</li> <li>More powerful than arrays, but less efficient</li> <li>Iterators are used to access members of Vectors</li> <li>Enumerations were formally used, but were more complex</li> </ul> <pre><code>a = new ArrayList();\nIterator i = a.iterator();\nwhile(i.hasNext())\n{\n   aMethod(i.next());\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#casting","title":"Casting","text":"<ul> <li>Java is very strict about types</li> <li>If variable v is declared to have type X, you can only invoke operations on v that are defined in X or its superclasses<ul> <li>Even though an instance of a subclass of X may be actually stored in the variable</li> </ul> </li> <li>If you know an instance of a subclass is stored, then you can cast the variable to the subclass<ul> <li>E.g. if I know a Vector contains instances of String, I can get the next element of its Iterator using:     <code>(String)i.next();</code></li> <li>To avoid casting you could also have used templates::     <code>a = ArrayList&lt;String&gt;; i=a.iterator(); i.next()</code></li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#exceptions","title":"Exceptions","text":"<ul> <li>Anything that can go wrong should result in the raising of an Exception</li> <li>Exception is a class with many subclasses for specific things that can go wrong</li> <li>Use a try - catch block to trap an exception</li> </ul> <pre><code>try\n{\n   // some code\n}\ncatch (ArithmeticException e)\n{\n  // code to handle division by zero\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#interfaces","title":"Interfaces","text":"<ul> <li>Like abstract classes, but cannot have executable statements</li> <li>Define a set of operations that make sense in several classes</li> <li>Abstract Data Types</li> <li>A class can implement any number of interfaces</li> <li>It must have concrete methods for the operations</li> <li>You can declare the type of a variable to be an interface</li> <li>This is just like declaring the type to be an abstract class</li> <li>Important interfaces in Java's library include</li> <li>Runnable, Collection, Iterator, Comparable, Cloneable</li> </ul>"},{"location":"week-1/ce204-week-1/#packages-and-importing","title":"Packages and importing","text":"<ul> <li>A package combines related classes into subsystems</li> <li>All the classes in a particular directory</li> <li>Classes in different packages can have the same name</li> <li>Although not recommended</li> <li>Importing a package is done as follows:</li> <li><code>import finance.banking.accounts.*;</code></li> </ul>"},{"location":"week-1/ce204-week-1/#access-control","title":"Access control","text":"<ul> <li>Applies to methods and variables</li> <li>public<ul> <li>Any class can access</li> </ul> </li> <li>protected<ul> <li>Only code in the package, or subclasses can access</li> </ul> </li> <li>(blank)<ul> <li>Only code in the package can access</li> </ul> </li> <li>private<ul> <li>Only code written in the class can access</li> <li>Inheritance still occurs!</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#threads-and-concurrency","title":"Threads and concurrency","text":"<ul> <li>Thread:</li> <li>Sequence of executing statements that can be running concurrently with other threads</li> <li>To create a thread in Java:</li> <li>Create a class implementing Runnable or extending Thread</li> <li>Implement the run method as a loop that does something for a period of time</li> <li>Create an instance of this class</li> <li>Invoke the start operation, which calls run</li> </ul>"},{"location":"week-1/ce204-week-1/#programming-style-guidelines","title":"Programming Style Guidelines","text":"<ul> <li>Remember that programs are for people to read</li> <li>Always choose the simpler alternative</li> <li>Reject clever code that is hard to understand</li> <li>Shorter code is not necessarily better</li> <li>Choose good names</li> <li>Make them highly descriptive</li> <li>Do not worry about using long names</li> </ul>"},{"location":"week-1/ce204-week-1/#programming-style","title":"Programming style","text":"<ul> <li>Comment extensively</li> <li>Comment whatever is non-obvious</li> <li>Do not comment the obvious</li> <li>Comments should be 25-50% of the code</li> <li>Organize class elements consistently</li> <li>Variables, constructors, public methods then private methods</li> <li>Be consistent regarding layout of code</li> </ul>"},{"location":"week-1/ce204-week-1/#programming-style_1","title":"Programming style","text":"<ul> <li>Avoid duplication of code</li> <li>Do not \"clone\" if possible<ul> <li>Create a new method and call it</li> <li>Cloning results in two copies that may both have bugs</li> <li>When one copy of the bug is fixed, the other may be forgotten</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#programming-style_2","title":"Programming style","text":"<ul> <li>Adhere to good object oriented principles</li> <li>E.g. the 'isa rule'</li> <li>Prefer private as opposed to public</li> <li>Do not mix user interface code with non-user interface code</li> <li>Interact with the user in separate classes<ul> <li>This makes non-UI classes more reusable</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#difficulties-and-risks-in-programming","title":"Difficulties and Risks in Programming","text":"<ul> <li>Language evolution and deprecated features: </li> <li>Java is evolving, so some features are 'deprecated' at every release</li> <li>Efficiency can be a concern in some object oriented systems </li> <li>Java can be less efficient than other languages<ul> <li>VM-based</li> <li>Dynamic binding</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#c-vs-java","title":"C++ vs Java","text":"Comparison Index C++ Java Platform-independent C++ is platform-dependent. Java is platform-independent. Mainly used for C++ is mainly used for system programming. Java is mainly used for application programming. It is widely used in Windows-based, web-based, enterprise, and mobile applications."},{"location":"week-1/ce204-week-1/#c-vs-java_1","title":"C++ vs Java","text":"Comparison Index C++ Java Multiple inheritance C++ supports multiple inheritance. Java doesn't support multiple inheritance through class. It can be achieved by using interfaces in java. Operator Overloading C++ supports operator overloading. Java doesn't support operator overloading."},{"location":"week-1/ce204-week-1/#c-vs-java_2","title":"C++ vs Java","text":"Comparison Index C++ Java Goto C++ supports the goto statement. Java doesn't support the goto statement. Compiler and Interpreter C++ uses compiler only. C++ is compiled and run using the compiler which converts source code into machine code so, C++ is platform dependent. Java uses both compiler and interpreter. Java source code is converted into bytecode at compilation time. The interpreter executes this bytecode at runtime and produces output. Java is interpreted that is why it is platform-independent."},{"location":"week-1/ce204-week-1/#c-vs-java_3","title":"C++ vs Java","text":"Comparison Index C++ Java Pointers C++ supports pointers. You can write a pointer program in C++. Java supports pointer internally. However, you can't write the pointer program in java. It means java has restricted pointer support in java. Design Goal C++ was designed for systems and applications programming. It was an extension of the C programming language. Java was designed and created as an interpreter for printing systems but later extended as a support network computing. It was designed to be easy to use and accessible to a broader audience."},{"location":"week-1/ce204-week-1/#c-vs-java_4","title":"C++ vs Java","text":"Comparison Index C++ Java Structure and Union C++ supports structures and unions. Java doesn't support structures and unions. Thread Support C++ doesn't have built-in support for threads. It relies on third-party libraries for thread support. Java has built-in thread support."},{"location":"week-1/ce204-week-1/#c-vs-java_5","title":"C++ vs Java","text":"Comparison Index C++ Java Documentation comment C++ doesn't support documentation comments. Java supports documentation comment (/** ... */) to create documentation for java source code. Virtual Keyword C++ supports virtual keyword so that we can decide whether or not to override a function. Java has no virtual keyword. We can override all non-static methods by default. In other words, non-static methods are virtual by default."},{"location":"week-1/ce204-week-1/#c-vs-java_6","title":"C++ vs Java","text":"Comparison Index C++ Java unsigned right shift &gt;&gt;&gt; C++ doesn't support &gt;&gt;&gt; operator. Java supports unsigned right shift &gt;&gt;&gt; operator that fills zero at the top for the negative numbers. For positive numbers, it works same like &gt;&gt; operator. Inheritance Tree C++ always creates a new inheritance tree. Java always uses a single inheritance tree because all classes are the child of the Object class in Java. The Object class is the root of the inheritance tree in java."},{"location":"week-1/ce204-week-1/#c-vs-java_7","title":"C++ vs Java","text":"Comparison Index C++ Java Hardware C++ is nearer to hardware. Java is not so interactive with hardware. Object-oriented C++ is an object-oriented language. However, in the C language, a single root hierarchy is not possible. Java is also an object-oriented language. However, everything (except fundamental types) is an object in Java. It is a single root hierarchy as everything gets derived from java.lang.Object."},{"location":"week-1/ce204-week-1/#object-orientation-part-2","title":"Object Orientation Part-2","text":""},{"location":"week-1/ce204-week-1/#procedural-programming","title":"Procedural Programming","text":"<ul> <li>Pascal, C, Basic, Fortran and similar traditional languages are procedural</li> <li>Each statement tells the computer to do something</li> <li>The emphasis is on doing things </li> <li>Functions </li> <li>A program is divided into functions </li> <li>Each function has a clearly defined purpose and interface</li> </ul>"},{"location":"week-1/ce204-week-1/#procedural-programming_1","title":"Procedural Programming","text":""},{"location":"week-1/ce204-week-1/#problems-with-procedural-programming","title":"Problems with Procedural Programming","text":"<ul> <li>Data Is undervalued </li> <li>Data is, after all, the reason for a program's existence. The  important parts of a program are not functions that display  the data or functions that checks for correct input; they are  data </li> <li>Procedural programs don't model the real world very well.    The real world does not consist of functions </li> <li>Global data can be corrupted by functions that have no business changing it  </li> <li>To add new data items, all the functions that access data must  be modified so that they can also access these new items </li> <li>Creating new data types is difficult </li> </ul>"},{"location":"week-1/ce204-week-1/#besides","title":"Besides","text":"<ul> <li>It is also possible to write good programs by using procedural programming (C programs).  </li> <li>But object-oriented programming offers programmers many advantages, enables them to write high-quality programs</li> </ul>"},{"location":"week-1/ce204-week-1/#object-oriented-programming","title":"Object-Oriented Programming","text":"<p>The fundamental idea behind object-oriented programming:  </p> <ul> <li>The real world consists of objects. Computer programs may contain computer world representations of the things (objects) that constitute the solutions of real world problems.  </li> <li>Real world objects have two parts:  </li> <li>Properties (or state: characteristics that can change),  </li> <li>Behavior (or abilities: things they can do). </li> <li>To solve a programming problem in an object-oriented language,the programmer no longer asks how the problem will be divided into functions, but how it will be divided into objects.  </li> <li>The emphasis is on data </li> </ul>"},{"location":"week-1/ce204-week-1/#object-oriented-programming_1","title":"Object-Oriented Programming","text":"<ul> <li>What kinds of things become objects in object-oriented programs? </li> <li>Human entities: Employees, customers, salespeople,worker, manager </li> <li>Graphics program: Point, line, square, circle, ... </li> <li>Mathematics: Complex numbers, matrix </li> <li>Computer user environment: Windows, menus, buttons </li> <li>Data-storage constructs: Customized arrays, stacks, linked lists </li> </ul>"},{"location":"week-1/ce204-week-1/#oop-encapsulation-and-data-hiding","title":"OOP: Encapsulation and Data Hiding","text":"<ul> <li>Thinking in terms of objects rather than functions </li> <li>Close match between objects in the programming sense and  objects in the real world </li> <li>Both data and the functions that operate on that data are combined into a single program entity </li> <li>Data represent the properties (state), and functions represent the behavior of an object. Data and its functions are said to be encapsulated into a single entity </li> <li>An object's functions, called member functions in Java typically provide the only way to access its data. The data is hidden, so it is safe from accidental alteration. </li> </ul>"},{"location":"week-1/ce204-week-1/#oop-encapsulation-and-data-hiding_1","title":"OOP: Encapsulation and Data Hiding","text":"<ul> <li>Encapsulation and data hiding are key terms in the    description of object-oriented languages. </li> <li>If you want to modify the data in an object, you know exactly what functions to interact with it </li> <li>The member functions in the object. </li> <li>No other functions can access the data: This simplifies writing, debugging, and maintaining the program. </li> </ul>"},{"location":"week-1/ce204-week-1/#example-a-point-on-the-plane","title":"Example: A Point on the plane","text":"<ul> <li>A Point on a plane has two properties; x-y coordinates. </li> <li>Abilities (behavior) of a Point are, moving on the plane, appearing on the screen and disappearing.  </li> <li>A model for 2 dimensional points with the following parts: </li> <li>Two integer variables <code>(x,y)</code> to represent x and y  coordinates </li> <li>A function to move the point: <code>move</code> </li> <li>A function to print the point on the screen: <code>print</code> </li> <li>A function to hide the point: <code>hide</code> </li> </ul>"},{"location":"week-1/ce204-week-1/#example-a-point-on-the-plane_1","title":"Example: A Point on the plane","text":"<ul> <li>Once the model has been built and tested, it is  possible to create many objects of this model, in the  main program. </li> </ul> <pre><code>Point pointOne = new Point(67, 89); \nPoint pointTwo = new Point(12, 34); \n\npublic class Point { \n    public int x = 0; \n    public int y = 0; \n    public Point(int a, int b) { \n    x = a; \n    y = b; \n    } \n} \n</code></pre>"},{"location":"week-1/ce204-week-1/#object-model","title":"Object Model","text":"<p>A Java program typically consists of a number of  objects that communicate with each other by calling  one another's member functions.</p> <p></p>"},{"location":"week-1/ce204-week-1/#oop-vs-procedural-programming","title":"OOP vs. Procedural Programming","text":"<ul> <li>Procedural languages still require you to think in terms of the structure of the computer rather than the structure of the problem you are trying to solve. </li> <li>The programmer must establish the association between the machine model and the model of the problem that is actually being solved. </li> <li>The effort required to perform this mapping produces programs that are difficult to write and expensive to maintain. Because the real world thing and their models on the computer are quite different</li> </ul>"},{"location":"week-1/ce204-week-1/#example-procedural-programming","title":"Example: Procedural Programming","text":"<ul> <li>Real world thing: student </li> <li>Computer model: <code>char *, int, float</code> </li> <li>It is said that the C language is closer to the computer than the problem. </li> </ul>"},{"location":"week-1/ce204-week-1/#oop-vs-procedural-programming_1","title":"OOP vs. Procedural Programming","text":"<ul> <li>The OO approach provides tools for the programmer to represent elements in the problem space</li> <li>Objects are both in the problem space and the solution </li> <li>The OO programs are easy to update by adding new types of objects </li> <li>OOP allows you to describe the problem in terms of the problem, rather than in terms of the computer where the solution will run. </li> </ul>"},{"location":"week-1/ce204-week-1/#oop-vs-procedural-programming_2","title":"OOP vs. Procedural Programming","text":"<p>Benefits of the object-oriented programming: </p> <ul> <li>Readability </li> <li>Understandability </li> <li>Low probability of errors </li> <li>Maintenance </li> <li>Reusability </li> <li>Teamwork </li> </ul>"},{"location":"week-1/ce204-week-1/#oop-vs-procedural-programming_3","title":"OOP vs. Procedural Programming","text":"<ul> <li> <p>Procedural paradigm:</p> </li> <li> <p>Software is organized around the notion of procedures </p> </li> <li> <p>Procedural abstraction</p> <ul> <li>Works as long as the data is simple</li> </ul> </li> <li> <p>Adding data abstractions groups together the pieces of data that describe some entity</p> </li> <li> <p>Helps reduce the system's complexity. </p> <ul> <li>Such as Records and structures</li> </ul> </li> <li> <p>Object oriented paradigm:</p> </li> <li> <p>Organizing procedural abstractions in the context of data abstractions</p> </li> </ul>"},{"location":"week-1/ce204-week-1/#object-oriented-paradigm","title":"Object Oriented paradigm","text":"<ul> <li>All computations are performed in the context of objects. </li> <li>The objects are instances of classes, which:<ul> <li>are data abstractions</li> <li>contain procedural abstractions that operate on the objects</li> </ul> </li> <li>A running program can be seen as a collection of objects collaborating to perform a given task </li> </ul>"},{"location":"week-1/ce204-week-1/#a-view-of-the-two-paradigms","title":"A View of the Two paradigms","text":""},{"location":"week-1/ce204-week-1/#classes-and-objects","title":"Classes and Objects","text":"<p>Object</p> <ul> <li>A chunk of structured data in a running software system </li> <li>Has properties</li> <li>Represent its state</li> <li>Has behaviour</li> <li>How it acts and reacts</li> <li>May simulate the behaviour of an object in the real world</li> </ul>"},{"location":"week-1/ce204-week-1/#objects-shown-as-a-uml-instance-diagram","title":"Objects: Shown as a UML instance diagram","text":""},{"location":"week-1/ce204-week-1/#classes","title":"Classes","text":"<p>A class:</p> <ul> <li>A unit of abstraction in an object oriented (OO) program </li> <li>Represents similar objects</li> <li>Its instances</li> <li>A kind of software module</li> <li>Describes its instances' structure (properties)</li> <li>Contains methods to implement their behaviour</li> </ul>"},{"location":"week-1/ce204-week-1/#is-something-a-class-or-an-instance","title":"Is Something a Class or an Instance?","text":"<ul> <li> <p>Something should be a class if it could have instances</p> </li> <li> <p>Something should be an instance if it is clearly a single member of the set defined by a class  </p> </li> <li> <p>Film</p> </li> <li> <p>Class; instances are individual films.</p> </li> <li> <p>Reel of Film:</p> </li> <li> <p>Class; instances are physical reels</p> </li> <li> <p>Film reel with serial number SW19876</p> </li> <li> <p>Instance of ReelOfFilm</p> </li> </ul>"},{"location":"week-1/ce204-week-1/#is-something-a-class-or-an-instance_1","title":"Is Something a Class or an Instance?","text":"<ul> <li>Science Fiction</li> <li>Instance of the class Genre.</li> <li>Science Fiction Film</li> <li>Class; instances include 'Star Wars'</li> <li>Showing of 'Star Wars' in the Phoenix Cinema at 7 p.m.:</li> <li>Instance of ShowingOfFilm</li> </ul>"},{"location":"week-1/ce204-week-1/#naming-classes","title":"Naming classes","text":"<ul> <li>Use capital letters</li> <li>E.g. <code>BankAccount</code> not <code>bankAccount</code></li> <li>Use singular nouns</li> <li>Use the right level of generality</li> <li>E.g. <code>Municipality</code>, not <code>City</code></li> <li>Make sure the name has only one meaning</li> <li>E.g. \"bus\" has several meanings</li> </ul>"},{"location":"week-1/ce204-week-1/#instance-variables","title":"Instance Variables","text":"<ul> <li>Variables defined inside a class corresponding to data present in each instance</li> <li>Also called fields or member variables</li> <li>Attributes<ul> <li>Simple data</li> <li>E.g. <code>name</code>, <code>dateOfBirth</code></li> </ul> </li> <li>Associations<ul> <li>Relationships to other important classes</li> <li>E.g. <code>supervisor</code>, <code>coursesTaken</code></li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#variables-vs-objects","title":"Variables vs. Objects","text":"<ul> <li>A variable</li> <li>Refers to an object </li> <li>May refer to different objects at different points in time</li> <li>An object can be referred to by several different variables at the same time</li> <li>Type of a variable</li> <li>Determines what classes of objects it may contain </li> </ul>"},{"location":"week-1/ce204-week-1/#class-variables","title":"Class variables","text":"<ul> <li>A class variable's value is shared by all instances of a class.</li> <li>Also called a static variable</li> <li>If one instance sets the value of a class variable, then all the other instances see the same changed value. </li> <li>Class variables are useful for:<ul> <li>Default or 'constant' values (e.g. PI)</li> <li>Lookup tables and similar structures</li> </ul> </li> </ul> <p>Caution: do not over-use class variables </p>"},{"location":"week-1/ce204-week-1/#methods-operations-and-polymorphism","title":"Methods, Operations and Polymorphism","text":"<ul> <li>Operation</li> <li>A higher-level procedural abstraction that specifies a type of behaviour</li> <li>Independent of any code which implements that behaviour<ul> <li>E.g. calculating area (in general)</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#methods-operations-and-polymorphism_1","title":"Methods, Operations and Polymorphism","text":"<ul> <li>Method</li> <li>A procedural abstraction used to implement the behaviour of a class</li> <li>Several different classes can have methods with the same name<ul> <li>They implement the same abstract operation in ways suitable to each class </li> <li>E.g. calculating area in a rectangle is done differently from in a circle</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#polymorphism_2","title":"Polymorphism","text":"<ul> <li>A property of object oriented software by which an abstract operation may be performed in different ways in different classes.</li> <li>Requires that there be multiple methods of the same name</li> <li>The choice of which one to execute depends on the object that is in a variable</li> <li>Reduces the need for programmers to code many <code>if-else</code> or <code>switch</code> statements</li> </ul>"},{"location":"week-1/ce204-week-1/#organizing-classes-into-inheritance-hierarchies","title":"Organizing Classes into Inheritance Hierarchies","text":"<ul> <li>Superclasses</li> <li>Contain features common to a set of subclasses</li> <li>Inheritance hierarchies</li> <li>Show the relationships among superclasses and subclasses</li> <li>A triangle shows a generalization</li> <li>Inheritance</li> <li>The implicit possession by all subclasses of features defined in its superclasses</li> </ul>"},{"location":"week-1/ce204-week-1/#an-example-inheritance-hierarchy","title":"An Example Inheritance Hierarchy","text":"<ul> <li>Inheritance</li> <li>The implicit possession by all subclasses of features defined in its superclasses</li> </ul>"},{"location":"week-1/ce204-week-1/#the-is-a-rule","title":"The Is-a Rule","text":"<ul> <li>Always check generalizations to ensure they obey the isa rule</li> <li>\"A checking account is an account\"</li> <li>\"A village is a municipality\"</li> <li>Should 'Province' be a subclass of 'Country'?</li> <li>No, it violates the is-a rule</li> <li>\"A province is a country\" is invalid!</li> </ul>"},{"location":"week-1/ce204-week-1/#a-possible-inheritance-hierarchy-of-mathematical-objects","title":"A possible inheritance hierarchy of mathematical objects","text":""},{"location":"week-1/ce204-week-1/#make-sure-all-inherited-features-make-sense-in-subclasses","title":"Make Sure all Inherited Features Make Sense in Subclasses","text":""},{"location":"week-1/ce204-week-1/#inheritance-polymorphism-and-variables","title":"Inheritance, Polymorphism and Variables","text":""},{"location":"week-1/ce204-week-1/#some-operations-in-the-shape-example","title":"Some Operations in the Shape Example","text":""},{"location":"week-1/ce204-week-1/#abstract-classes-and-methods","title":"Abstract Classes and Methods","text":"<ul> <li>An operation should be declared to exist at the highest class in the hierarchy where it makes sense</li> <li>The operation may be abstract (lacking implementation) at that level</li> <li>If so, the class also must be abstract<ul> <li>No instances can be created</li> <li>The opposite of an abstract class is a concrete class</li> </ul> </li> <li>If a superclass has an abstract operation then its subclasses at some level must have a concrete method for the operation<ul> <li>Leaf classes must have or inherit concrete methods for all operations</li> <li>Leaf classes must be concrete</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#overriding","title":"Overriding","text":"<ul> <li>A method would be inherited, but a subclass contains a new version instead</li> <li>For extension<ul> <li>E.g. <code>SavingsAccount</code> might charge an extra fee following every debit</li> </ul> </li> <li>For optimization<ul> <li>E.g. The <code>getPerimeterLength</code> method in <code>Circle</code> is much simpler than the one in <code>Ellipse</code></li> </ul> </li> <li>For restriction (best to avoid)<ul> <li>E.g. <code>scale(x,y)</code> would not work in <code>Circle</code></li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#how-a-decision-is-made-about-which-method-to-run","title":"How a decision is made about which method to run","text":"<ul> <li>If there is a concrete method for the operation in the current class, run that method.</li> <li>Otherwise, check in the immediate superclass to see if there is a method there; if so, run it.</li> <li>Repeat step 2, looking in successively higher superclasses until a concrete method is found and run.</li> <li>If no method is found, then there is an error   In Java and C++ the program would not have compiled</li> <li>In Java and C++ the program would not have compiled</li> </ul>"},{"location":"week-1/ce204-week-1/#dynamic-binding","title":"Dynamic binding","text":"<ul> <li>Occurs when decision about which method to run can only be made at run time</li> <li>Needed when:<ul> <li>A variable is declared to have a superclass as its type, and</li> <li>There is more than one possible polymorphic method that could be run among the type of the variable and its subclasses</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#key-terminology","title":"Key Terminology","text":"<ul> <li>Abstraction</li> <li>Object \\(\\Longrightarrow\\) something in the world</li> <li>Class \\(\\Longrightarrow\\) objects</li> <li>Superclass \\(\\Longrightarrow\\) subclasses</li> <li>Operation \\(\\Longrightarrow\\) methods</li> <li>Attributes and associations \\(\\Longrightarrow\\) instance variables</li> <li>Modularity</li> <li>Code is divided into classes, and classes into methods</li> <li>Encapsulation</li> <li>Details can be hidden in classes</li> <li>This gives rise to information hiding: <ul> <li>Programmers do not need to know all the details of a class </li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#basing-software-development-on-reusable-technology","title":"Basing Software Development on Reusable Technology","text":""},{"location":"week-1/ce204-week-1/#building-on-the-experience-of-others","title":"Building on the Experience of Others","text":"<p>Software engineers should avoid re-developing software already developed</p> <ul> <li>Types of reuse:</li> <li>Reuse of expertise </li> <li>Reuse of standard designs and algorithms </li> <li>Reuse of libraries of classes or procedures </li> <li>Reuse of powerful commands built into languages and operating systems </li> <li>Reuse of frameworks</li> <li>Reuse of complete applications </li> </ul>"},{"location":"week-1/ce204-week-1/#frameworks-reusable-subsystems","title":"Frameworks: Reusable Subsystems","text":"<ul> <li>A framework is reusable software that implements a generic solution to a generalized problem. </li> <li>It provides common facilities applicable to different application programs.     - Principle: Applications that do different, but related, things tend to have similar designs</li> </ul>"},{"location":"week-1/ce204-week-1/#frameworks-to-promote-reuse","title":"Frameworks to promote reuse","text":"<ul> <li>A framework is intrinsically incomplete</li> <li>Certain classes or methods are used by the framework, but are missing (slots)</li> <li>Some functionality is optional<ul> <li>Allowance is made for developer to provide it (hooks or extension points) </li> </ul> </li> <li>Developers use the services that the framework provides<ul> <li>Taken together the services are called the Application Program Interface (API)</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#object-oriented-frameworks","title":"Object-oriented frameworks","text":"<ul> <li> <p>In the object oriented paradigm, a framework is composed of a library of classes. </p> </li> <li> <p>The API is defined by the set of all public methods of these classes.</p> </li> <li> <p>Some of the classes will normally be abstract and there are often many Interfaces </p> </li> <li> <p>Example: </p> </li> <li> <p>A framework for payroll management</p> </li> <li>A framework for frequent buyer clubs</li> <li>A framework for university registration</li> <li>A framework for e-commerce web sites</li> </ul>"},{"location":"week-1/ce204-week-1/#frameworks-and-product-lines","title":"Frameworks and product lines","text":"<ul> <li>A product line (or product family) is a set of products built on a common base of technology.</li> <li>The various products in the product line have different features to satisfy different markets</li> <li>The software common to all products in included in a framework</li> <li>Each product is produced by filling the available hooks and slots<ul> <li>E.g. software products offering \"demo\", \"lite\" or \"pro\" versions</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#types-of-frameworks","title":"Types of frameworks","text":"<ul> <li>A horizontal framework provides general application facilities that a large number of applications can use </li> <li>A vertical framework (application framework) is more 'complete' but still needs some slots to be filled to adapt it to specific application needs</li> </ul>"},{"location":"week-1/ce204-week-1/#the-client-server-architecture","title":"The Client-Server Architecture","text":"<ul> <li>A distributed system is a system in which: </li> <li>computations are performed by separate programs</li> <li>\u2026 normally running on separate pieces of hardware</li> <li>\u2026 that co-operate to perform the task of the system.</li> <li>Server:</li> <li>A program that provides a service for other programs that connect to it using a communication channel</li> <li>Client </li> <li>A program that accesses a server (or several servers) to obtain services</li> <li>A server may be accessed by many clients simultaneously  </li> </ul>"},{"location":"week-1/ce204-week-1/#example-of-client-server-systems","title":"Example of client-server systems","text":""},{"location":"week-1/ce204-week-1/#activities-of-a-server","title":"Activities of a server","text":"<ul> <li>Initializes itself</li> <li>Starts listening for clients </li> <li>Handles the following types of events originating from clients </li> <li>accepts connections </li> <li>responds to messages </li> <li>handles client disconnection </li> <li>May stop listening</li> <li>Must cleanly terminate</li> </ul>"},{"location":"week-1/ce204-week-1/#activities-of-a-client","title":"Activities of a client","text":"<ul> <li>Initializes itself</li> <li>Initiates a connection</li> <li>Sends messages </li> <li>Handles the following types of events originating from the server </li> <li>responds to messages </li> <li>handles server disconnection </li> <li>Must cleanly terminate </li> </ul>"},{"location":"week-1/ce204-week-1/#threads-in-a-client-server-system","title":"Threads in a client-server system","text":""},{"location":"week-1/ce204-week-1/#thin-versus-fat-client-systems","title":"Thin- versus fat-client systems","text":"<ul> <li>Thin-client system (a)</li> <li>Client is made as small as possible </li> <li>Most of the work is done in the server. </li> <li>Client easy to download over the network </li> <li>Fat-client system (b)</li> <li>As much work as possible is delegated to the clients. </li> <li>Server can handle more clients   </li> </ul>"},{"location":"week-1/ce204-week-1/#communications-protocols","title":"Communications protocols","text":"<ul> <li>The messages the client sends to the server form a language.</li> <li>The server has to be programmed to understand that language. </li> <li>The messages the server sends to the client also form a language.</li> <li>The client has to be programmed to understand that language. </li> <li>When a client and server are communicating, they are in effect having a conversation using these two languages</li> <li>The two languages and the rules of the conversation, taken together, are called the protocol </li> </ul>"},{"location":"week-1/ce204-week-1/#tasks-to-perform-to-develop-client-server-applications","title":"Tasks to perform to develop client-server applications","text":"<ul> <li>Design the primary work to be performed by both client and server </li> <li>Design how the work will be distributed </li> <li>Design the details of the set of messages that will be sent</li> <li>Design the mechanism for </li> <li>Initializing</li> <li>Handling connections</li> <li>Sending and receiving messages</li> <li>Terminating </li> </ul>"},{"location":"week-1/ce204-week-1/#advantages-of-client-server-systems","title":"Advantages of client-server systems","text":"<ul> <li>The work can be distributed among different machines </li> <li>The clients can access the server's functionality from a distance </li> <li>The client and server can be designed separately</li> <li>They can both be simpler</li> <li>There is a choice about where to keep data:</li> <li>All the data can be kept centrally at the server </li> <li>Data can be distributed among many different clients or servers</li> <li>The server can be accessed simultaneously by many clients </li> <li>Competing clients can be written to communicate with the same server, and vice-versa </li> </ul>"},{"location":"week-1/ce204-week-1/#technology-needed-to-build-client-server-systems","title":"Technology Needed to Build Client-Server Systems","text":"<ul> <li>Internet Protocol (IP)</li> <li>Route messages from one computer to another </li> <li>Long messages are normally split up into small pieces  </li> <li>Transmission Control Protocol (TCP)</li> <li>Handles connections between two computers</li> <li>Computers can then exchange many IP messages over a connection</li> <li>Assures that the messages have been satisfactorily received</li> <li>A host has an IP address and a host name</li> <li>Several servers can run on the same host. </li> <li>Each server is identified by a port number (0 to 65535). </li> <li>To initiate communication with a server, a client must know both the host name and the port number</li> </ul>"},{"location":"week-1/ce204-week-1/#establishing-a-connection-in-java","title":"Establishing a connection in Java","text":"<ul> <li>The <code>java.net</code> package</li> <li>Permits the creation of a TCP/IP connection between two applications</li> <li>Before a connection can be established, the server must start listening to one of the ports:</li> </ul> <pre><code>  ServerSocket serverSocket = new ServerSocket(port);\n  Socket clientSocket = serverSocket.accept();\n</code></pre> <ul> <li>For a client to connect to a server:</li> </ul> <pre><code>  Socket clientSocket= new Socket(host, port);\n</code></pre>"},{"location":"week-1/ce204-week-1/#exchanging-information-in-java","title":"Exchanging information in Java","text":"<ul> <li>Each program uses an instance of </li> <li>InputStream to receive messages from the other program</li> <li>OutputStream to send messages to the other program</li> <li>These are found in package java.io</li> </ul> <pre><code>output = clientSocket.getOutputStream();\n</code></pre> <pre><code>input = clientSocket.getInputStream();\n</code></pre>"},{"location":"week-1/ce204-week-1/#sending-and-receiving-messages","title":"Sending and receiving messages","text":"<ul> <li>without any filters (raw bytes)</li> </ul> <pre><code>output.write(msg);\nmsg = input.read();\n</code></pre> <ul> <li>or using DataInputStream / DataOutputStream filters</li> </ul> <pre><code>output.writeDouble(msg);\nmsg = input.readDouble();\n</code></pre> <ul> <li>or using ObjectInputStream / ObjectOutputStream filters</li> </ul> <pre><code>output.writeObject(msg);\nmsg = input.readObject();\n</code></pre>"},{"location":"week-1/ce204-week-1/#the-object-client-server-framework-ocsf","title":"The Object Client-Server Framework (OCSF)","text":""},{"location":"week-1/ce204-week-1/#using-ocsf","title":"Using OCSF","text":"<ul> <li> <p>Software engineers using OCSF never modify its three classes</p> </li> <li> <p>They:</p> </li> <li> <p>Create subclasses of the abstract classes in the framework </p> </li> <li>Call public methods that are provided by the framework</li> <li>Override certain slot and hook methods (explicitly designed to be overridden)  </li> </ul>"},{"location":"week-1/ce204-week-1/#the-client-side","title":"The Client Side","text":"<ul> <li>Consists of a single class: AbstractClient</li> <li>Must be subclassed<ul> <li>Any subclass must provide an implementation for handleMessageFromServer </li> <li>Takes appropriate action when a message is received from a server</li> </ul> </li> <li>Implements the Runnable interface</li> <li>Has a run method which<ul> <li>Contains a loop that executes for the lifetime of the thread </li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#the-public-interface-of-abstractclient","title":"The public interface of AbstractClient","text":"<ul> <li>Controlling methods:</li> <li>openConnection </li> <li>closeConnection </li> <li>sendToServer </li> <li>Accessing methods:</li> <li>isConnected </li> <li>getHost </li> <li>setHost </li> <li>getPort </li> <li>setPort </li> <li>getInetAddress </li> </ul>"},{"location":"week-1/ce204-week-1/#the-callback-methods-of-abstractclient","title":"The callback methods of AbstractClient","text":"<ul> <li> <p>Methods that may be overridden:</p> </li> <li> <p>connectionEstablished </p> </li> <li> <p>connectionClosed </p> </li> <li> <p>Method that must be implemented:</p> </li> <li> <p>handleMessageFromServer </p> </li> </ul>"},{"location":"week-1/ce204-week-1/#using-abstractclient","title":"Using AbstractClient","text":"<ul> <li>Create a subclass of AbstractClient </li> <li>Implement handleMessageFromServer slot method </li> <li>Write code that:</li> <li>Creates an instance of the new subclass </li> <li>Calls openConnection </li> <li>Sends messages to the server using the sendToServer service method </li> <li>Implement the connectionClosed callback </li> <li>Implement the connectionException callback </li> </ul>"},{"location":"week-1/ce204-week-1/#internals-of-abstractclient","title":"Internals of AbstractClient","text":"<ul> <li>Instance variables:</li> <li>A Socket which keeps all the information about the connection to the server </li> <li>Two streams, an ObjectOutputStream and an ObjectInputStream </li> <li>A Thread that runs using AbstractClient's run method </li> <li>Two variables storing the host and port of the server </li> </ul>"},{"location":"week-1/ce204-week-1/#the-server-side","title":"The Server Side","text":"<ul> <li>Two classes:</li> <li>One for the thread which listens for new connections (AbstractServer)</li> <li>One for the threads that handle the connections to clients (ConnectionToClient)</li> </ul>"},{"location":"week-1/ce204-week-1/#the-public-interface-of-abstractserver","title":"The public interface of AbstractServer","text":"<ul> <li>Controlling methods:</li> <li>listen </li> <li>stopListening </li> <li>close </li> <li>sendToAllClients </li> <li>Accessing methods:</li> <li>isListening </li> <li>getClientConnections </li> <li>getPort </li> <li>setPort</li> <li>setBacklog</li> </ul>"},{"location":"week-1/ce204-week-1/#the-callback-methods-of-abstractserver","title":"The callback methods of AbstractServer","text":"<ul> <li>Methods that may be overridden:</li> <li>serverStarted </li> <li>clientConnected </li> <li>clientDisconnected</li> <li>clientException</li> <li>serverStopped</li> <li>listeningException </li> <li>serverClosed</li> <li>Method that must be implemented:</li> <li>handleMessageFromClient </li> </ul>"},{"location":"week-1/ce204-week-1/#the-public-interface-of-connectiontoclient","title":"The public interface of ConnectionToClient","text":"<ul> <li> <p>Controlling methods:</p> </li> <li> <p>sendToClient </p> </li> <li> <p>close </p> </li> <li> <p>Accessing methods:</p> </li> <li> <p>getInetAddress</p> </li> <li>setInfo </li> <li>getInfo </li> </ul>"},{"location":"week-1/ce204-week-1/#using-abstractserver-and-connectiontoclient","title":"Using AbstractServer and ConnectionToClient","text":"<ul> <li>Create a subclass of AbstractServer </li> <li>Implement the slot method handleMessageFromClient </li> <li>Write code that:</li> <li>Creates an instance of the subclass of AbstractServer </li> <li>Calls the listen method</li> <li>Sends messages to clients, using:<ul> <li>the getClientConnections and  sendToClient service methods</li> <li>or sendToAllClients </li> </ul> </li> <li>Implement one or more of the other callback methods</li> </ul>"},{"location":"week-1/ce204-week-1/#internals-of-abstractserver-and-connectiontoclient","title":"Internals of AbstractServer and ConnectionToClient","text":"<ul> <li>The setInfo and getInfo methods make use of a Java class called HashMap </li> <li>Many methods in the server side are synchronized</li> <li>The collection of instances of ConnectionToClient is stored using a special class called ThreadGroup</li> <li>The server must pause from listening every 500ms to see if the stopListening method has been called</li> <li>if not, then it resumes listening immediately</li> </ul>"},{"location":"week-1/ce204-week-1/#an-instant-messaging-application-simplechat","title":"An Instant Messaging Application: SimpleChat","text":"<ul> <li>ClientConsole can eventually be replaced by  ClientGUI </li> </ul>"},{"location":"week-1/ce204-week-1/#the-server","title":"The server","text":"<ul> <li>EchoServer is a subclass of AbstractServer </li> <li>The main method creates a new instance and starts it<ul> <li>It listens for clients and handles connections until the server is stopped </li> </ul> </li> <li>The three callback methods just print out a message to the user</li> <li>handleMessageFromClient, serverStarted and serverStopped </li> <li>The slot method handleMessageFromClient calls sendToAllClients</li> <li>This echoes any messages</li> </ul>"},{"location":"week-1/ce204-week-1/#key-code-in-echoserver","title":"Key code in  EchoServer","text":"<pre><code>public void handleMessageFromClient \n  (Object msg, ConnectionToClient client)\n{\n   System.out.println( \n     \"Message received: \"\n     + msg + \" from \" + client);\n   this.sendToAllClients(msg);\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#the-client","title":"The client","text":"<ul> <li>When the client program starts, it creates instances of two classes:</li> <li>ChatClient <ul> <li>A subclass of AbstractClient </li> <li>Overrides handleMessageFromServer </li> <li>This calls the display method of the user interface</li> </ul> </li> <li>ClientConsole<ul> <li>User interface class that implements the interface ChatIF</li> <li>Hence implements display which outputs to the console</li> <li>Accepts user input by calling accept in its run method</li> <li>Sends all user input to the ChatClient by calling its handleMessageFromClientUI </li> <li>This, in turn, calls sendToServer</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#key-code-in-chatclient","title":"Key code in ChatClient","text":"<pre><code>public void handleMessageFromClientUI(\n  String message)\n{\n  try\n  {\n    sendToServer(message);\n  }\n  catch(IOException e)\n  {\n    clientUI.display (\n       \"Could not send message. \" +\n       \"Terminating client.\");\n    quit();\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#key-code-in-chatclient_1","title":"Key code in ChatClient","text":"<pre><code>public void handleMessageFromServer(Object msg) \n{\n  clientUI.display(msg.toString());\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#risks-when-reusing-technology","title":"Risks when reusing technology","text":"<ul> <li>Poor quality reusable components</li> <li>Ensure that the developers of the reusable technology: <ul> <li>follow good software engineering practices</li> <li>are willing to provide active support</li> </ul> </li> <li>Compatibility not maintained</li> <li>Avoid obscure features </li> <li>Only re-use technology that others are also re-using </li> </ul>"},{"location":"week-1/ce204-week-1/#risks-when-developing-reusable-technology","title":"Risks when developing reusable technology","text":"<ul> <li>Investment uncertainty</li> <li>Plan the development of the reusable technology, just as if it was a product for a client </li> <li>The \"not invented here syndrome\"</li> <li>Build confidence in the reusable technology by:<ul> <li>Guaranteeing support</li> <li>Ensuring it is of high quality</li> <li>Responding to the needs of its users</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#risks-when-developing-reusable-technology_1","title":"Risks when developing reusable technology","text":"<ul> <li>Competition </li> <li>The reusable technology must be as useful and as high quality as possible   </li> <li>Divergence (tendency of various groups to change technology in different ways)</li> <li>Design it to be general enough, test it and review it in advance  </li> </ul>"},{"location":"week-1/ce204-week-1/#risks-when-adopting-a-client-server-approach","title":"Risks when adopting a client-server approach","text":"<ul> <li>Security</li> <li>Security is a big problem with no perfect solutions: consider the use of encryption, firewalls, ...</li> <li>Need for adaptive maintenance</li> <li>Ensure that all software is forward and backward compatible with other versions of clients and servers</li> </ul>"},{"location":"week-1/ce204-week-1/#java-classes-and-objects","title":"Java Classes and Objects","text":""},{"location":"week-1/ce204-week-1/#java-classes","title":"Java Classes","text":"<p>Java is an object-oriented programming language, so everything in java program must be based on the object concept. In a java programming language, the class concept defines the skeleton of an object.</p>"},{"location":"week-1/ce204-week-1/#java-classes_1","title":"Java Classes","text":"<p>The java class is a template of an object. The class defines the blueprint of an object. Every class in java forms a new data type. Once a class got created, we can generate as many objects as we want. Every class defines the properties and behaviors of an object. All the objects of a class have the same properties and behaviors that were defined in the class.</p>"},{"location":"week-1/ce204-week-1/#java-classes_2","title":"Java Classes","text":"<p>Every class of java programming language has the following characteristics.</p> <ul> <li>Identity - It is the name given to the class.</li> <li>State - Represents data values that are associated with an object.</li> <li>Behavior - Represents actions can be performed by an object.</li> </ul>"},{"location":"week-1/ce204-week-1/#java-classes_3","title":"Java Classes","text":""},{"location":"week-1/ce204-week-1/#creating-a-class","title":"Creating a Class","text":"<p>In java, we use the keyword class to create a class. A class in java contains properties as variables and behaviors as methods. Following is the syntax of class in the java.</p> <pre><code>class &lt;ClassName&gt;{\n    data members declaration;\n    methods defination;\n}\n</code></pre> <p>Here, fields (variables) and methods represent the state and behavior of the object respectively.</p> <ul> <li>fields are used to store data</li> <li>methods are used to perform some operations</li> </ul>"},{"location":"week-1/ce204-week-1/#creating-a-class_1","title":"Creating a Class","text":"<ul> <li> <p>A class is a blueprint for the object. Before we create an object, we first need to define the class.</p> </li> <li> <p>We can think of the class as a sketch (prototype) of a house. It contains all the details about the floors, doors, windows, etc. Based on these descriptions we build the house. House is the object.</p> </li> <li> <p>Since many houses can be made from the same description, we can create many objects from a class.</p> </li> </ul>"},{"location":"week-1/ce204-week-1/#creating-a-class_2","title":"Creating a Class","text":"<ul> <li> <p>The ClassName must begin with an alphabet, and the Upper-case letter is preferred.</p> </li> <li> <p>The ClassName must follow all naming rules.</p> </li> </ul>"},{"location":"week-1/ce204-week-1/#creating-a-class_3","title":"Creating a Class","text":"<pre><code>class Bicycle {\n\n  // state or field\n  private int gear = 5;\n\n  // behavior or method\n  public void braking() {\n    System.out.println(\"Working of Braking\");\n  }\n}\n</code></pre> <p>In the above example, we have created a class named Bicycle. It contains a field named gear and a method named braking().</p>"},{"location":"week-1/ce204-week-1/#creating-a-class_4","title":"Creating a Class","text":"<p>Here, Bicycle is a prototype. Now, we can create any number of bicycles using the prototype. And, all the bicycles will share the fields and methods of the prototype.</p>"},{"location":"week-1/ce204-week-1/#creating-an-object","title":"Creating an Object","text":"<p>In java, an object is an instance of a class. When an object of a class is created, the class is said to be instantiated. All the objects that are created using a single class have the same properties and methods. But the value of properties is different for every object. Following is the syntax of class in the java.</p> <pre><code>&lt;ClassName&gt; &lt;objectName&gt; = new &lt;ClassName&gt;( );\n</code></pre>"},{"location":"week-1/ce204-week-1/#creating-an-object_1","title":"Creating an Object","text":"<ul> <li> <p>The objectName must begin with an alphabet, and a Lower-case letter is preferred.</p> </li> <li> <p>The objectName must follow all naming rules.</p> </li> </ul>"},{"location":"week-1/ce204-week-1/#creating-an-object_2","title":"Creating an Object","text":"<p>An object is called an instance of a class. For example, suppose Bicycle is a class then MountainBicycle, SportsBicycle, TouringBicycle, etc can be considered as objects of the class.</p> <pre><code>className object = new className();\n\n// for Bicycle class\nBicycle sportsBicycle = new Bicycle();\n\nBicycle touringBicycle = new Bicycle();\n</code></pre> <p>We have used the new keyword along with the constructor of the class to create an object. Constructors are similar to methods and have the same name as the class. For example, Bicycle() is the constructor of the Bicycle class. </p>"},{"location":"week-1/ce204-week-1/#creating-an-object_3","title":"Creating an Object","text":"<p>Here, sportsBicycle and touringBicycle are the names of objects. We can use them to access fields and methods of the class.</p>"},{"location":"week-1/ce204-week-1/#access-members-of-a-class","title":"Access Members of a Class","text":"<p>sportsBicycle.gear - access the field gear sportsBicycle.braking() - access the method braking()</p> <pre><code>class Bicycle {\n\n  // field of class\n  int gear = 5;\n\n  // method of class\n  void braking() {\n    ...\n  }\n}\n\n// create object\nBicycle sportsBicycle = new Bicycle();\n\n// access field and method\nsportsBicycle.gear;\nsportsBicycle.braking();\n</code></pre>"},{"location":"week-1/ce204-week-1/#example-java-class-and-objects","title":"Example: Java Class and Objects","text":"<pre><code>class Lamp {\n\n  // stores the value for light\n  // true if light is on\n  // false if light is off\n  boolean isOn;\n\n  // method to turn on the light\n  void turnOn() {\n    isOn = true;\n    System.out.println(\"Light on? \" + isOn);\n\n  }\n\n  // method to turnoff the light\n  void turnOff() {\n    isOn = false;\n    System.out.println(\"Light on? \" + isOn);\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#example-java-class-and-objects_1","title":"Example: Java Class and Objects","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n\n    // create objects led and halogen\n    Lamp led = new Lamp();\n    Lamp halogen = new Lamp();\n\n    // turn on the light by\n    // calling method turnOn()\n    led.turnOn();\n\n    // turn off the light by\n    // calling method turnOff()\n    halogen.turnOff();\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#example-create-objects-inside-the-same-class","title":"Example: Create objects inside the same class","text":"<p>Note that in the previous example, we have created objects inside another class and accessed the members from that class.</p> <p>However, we can also create objects inside the same class.</p>"},{"location":"week-1/ce204-week-1/#example-create-objects-inside-the-same-class_1","title":"Example: Create objects inside the same class","text":"<pre><code>class Lamp {\n\n  // stores the value for light\n  // true if light is on\n  // false if light is off\n  boolean isOn;\n\n  // method to turn on the light\n  void turnOn() {\n    isOn = true;\n    System.out.println(\"Light on? \" + isOn);\n\n  }\n\n  public static void main(String[] args) {\n\n    // create an object of Lamp\n    Lamp led = new Lamp();\n\n    // access method using object\n    led.turnOn();\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-methods","title":"Java Methods","text":""},{"location":"week-1/ce204-week-1/#java-methods_1","title":"Java Methods","text":"<p>A method is a block of statements under a name that gets executes only when it is called. Every method is used to perform a specific task. The major advantage of methods is code re-usability (define the code once, and use it many times).</p>"},{"location":"week-1/ce204-week-1/#java-methods_2","title":"Java Methods","text":"<p>In a java programming language, a method defined as a behavior of an object. That means, every method in java must belong to a class.</p> <p>Every method in java must be declared inside a class.</p>"},{"location":"week-1/ce204-week-1/#java-methods_3","title":"Java Methods","text":"<p>Every method declaration has the following characteristics.</p> <ul> <li>returnType - Specifies the data type of a return value.</li> <li>name - Specifies a unique name to identify it.</li> <li>parameters - The data values it may accept or recieve.</li> <li>{ } - Defienes the block belongs to the method.</li> </ul>"},{"location":"week-1/ce204-week-1/#creating-a-method","title":"Creating a method","text":"<p>A method is created inside the class and it may be created with any access specifier. However, specifying access specifier is optional.</p> <p>Following is the syntax for creating methods in java.</p> <pre><code>class &lt;ClassName&gt;{\n    &lt;accessSpecifier&gt; &lt;returnType&gt; &lt;methodName&gt;( parameters ){\n        ...\n        block of statements;\n        ...\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#creating-a-method_1","title":"Creating a method","text":"<pre><code>modifier static returnType nameOfMethod (parameter1, parameter2, ...) {\n  // method body\n}\n</code></pre> <p>modifier - It defines access types whether the method is public, private, and so on.  static - If we use the static keyword, it can be accessed without creating objects.</p>"},{"location":"week-1/ce204-week-1/#creating-a-method_2","title":"Creating a method","text":"<ul> <li> <p>The methodName must begin with an alphabet, and the Lower-case letter is preferred.</p> </li> <li> <p>The methodName must follow all naming rules.</p> </li> <li> <p>If you don't want to pass parameters, we ignore it.</p> </li> <li> <p>If a method defined with return type other than void, it must contain the return statement, otherwise, it may be ignored.</p> </li> </ul>"},{"location":"week-1/ce204-week-1/#calling-a-method","title":"Calling a method","text":"<p>In java, a method call precedes with the object name of the class to which it belongs and a dot operator. It may call directly if the method defined with the static modifier. Every method call must be made, as to the method name with parentheses (), and it must terminate with a semicolon.</p> <pre><code>&lt;objectName&gt;.&lt;methodName&gt;( actualArguments );\n</code></pre>"},{"location":"week-1/ce204-week-1/#calling-a-method_1","title":"Calling a method","text":"<ul> <li> <p>The method call must pass the values to parameters if it has.</p> </li> <li> <p>If the method has a return type, we must provide the receiver.</p> </li> </ul>"},{"location":"week-1/ce204-week-1/#calling-a-method-example","title":"Calling a Method : Example","text":"<pre><code>import java.util.Scanner;\npublic class JavaMethodsExample {\n    int sNo;\n    String name;\n    Scanner read = new Scanner(System.in);\n\n    void readData() {\n        System.out.print(\"Enter Serial Number: \");\n        sNo = read.nextInt();\n        System.out.print(\"Enter the Name: \");\n        name = read.next();\n    }\n\n    static void showData(int sNo, String name) {\n        System.out.println(\"Hello, \" + name + \"! your serial number is \" + sNo);\n    }\n...\n</code></pre>"},{"location":"week-1/ce204-week-1/#calling-a-method-example_1","title":"Calling a Method : Example","text":"<pre><code>...\n    public static void main(String[] args) {\n        JavaMethodsExample obj = new JavaMethodsExample();\n        obj.readData();   // method call using object\n        showData(obj.sNo, obj.name);  // method call without using object\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#variable-arguments-of-a-method","title":"Variable arguments of a method","text":"<p>In java, a method can be defined with a variable number of arguments. That means creating a method that receives any number of arguments of the same data type.</p> <pre><code>&lt;returnType&gt; &lt;methodName&gt;(dataType...parameterName);\n</code></pre>"},{"location":"week-1/ce204-week-1/#variable-arguments-of-a-method-example","title":"Variable arguments of a method : Example","text":"<pre><code>public class JavaMethodWithVariableArgs {\n\n    void diaplay(int...list) {\n\n        System.out.println(\"\\nNumber of arguments: \" + list.length);\n\n        for(int i : list) {\n            System.out.print(i + \"\\t\");\n        }\n\n    }\n...\n</code></pre>"},{"location":"week-1/ce204-week-1/#variable-arguments-of-a-method-example_1","title":"Variable arguments of a method : Example","text":"<pre><code>...\n    public static void main(String[] args) {\n\n        JavaMethodWithVariableArgs obj = new JavaMethodWithVariableArgs();\n\n        obj.diaplay(1, 2);\n        obj.diaplay(10, 20, 30, 40, 50);\n\n    }\n\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-normal-method-example","title":"Java Normal Method Example","text":"<pre><code>class Main {\n\n  // create a method\n  public int addNumbers(int a, int b) {\n    int sum = a + b;\n    // return value\n    return sum;\n  }\n\n  public static void main(String[] args) {\n\n    int num1 = 25;\n    int num2 = 15;\n\n    // create an object of Main\n    Main obj = new Main();\n    // calling method\n    int result = obj.addNumbers(num1, num2);\n    System.out.println(\"Sum is: \" + result);\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-static-method-example","title":"Java Static Method Example","text":"<pre><code>class Main {\n\n// create a method\n  public static int square(int num) {\n\n    // return statement\n    return num * num;\n  }\n\n  public static void main(String[] args) {\n    int result;\n\n    // call the method\n    // store returned value to result\n    result = square(10);\n\n    System.out.println(\"Squared value of 10 is: \" + result);\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-method-parameters","title":"Java Method Parameters","text":"<pre><code>class Main {\n\n  // method with no parameter\n  public void display1() {\n    System.out.println(\"Method without parameter\");\n  }\n\n  // method with single parameter\n  public void display2(int a) {\n    System.out.println(\"Method with a single parameter: \" + a);\n  }\n\n  public static void main(String[] args) {\n\n    // create an object of Main\n    Main obj = new Main();\n\n    // calling method with no parameter\n    obj.display1();\n\n    // calling method with the single parameter\n    obj.display2(24);\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-method-overloading","title":"Java Method Overloading","text":""},{"location":"week-1/ce204-week-1/#java-method-overloading_1","title":"Java Method Overloading","text":"<p>two or more methods may have the same name if they differ in parameters (different number of parameters, different types of parameters, or both). These methods are called overloaded methods and this feature is called method overloading.</p>"},{"location":"week-1/ce204-week-1/#java-method-overloading_2","title":"Java Method Overloading","text":"<pre><code>void func() { ... }\nvoid func(int a) { ... }\nfloat func(double a) { ... }\nfloat func(int a, float b) { ... }\n</code></pre> <p>Note: The return types of the above methods are not the same. It is because method overloading is not associated with return types. Overloaded methods may have the same or different return types, but they must differ in parameters.</p>"},{"location":"week-1/ce204-week-1/#why-method-overloading","title":"Why method overloading?","text":"<p>Suppose, you have to perform the addition of given numbers but there can be any number of arguments (let's say either 2 or 3 arguments for simplicity).</p> <p>In order to accomplish the task, you can create two methods sum2num(int, int) and sum3num(int, int, int) for two and three parameters respectively. However, other programmers, as well as you in the future may get confused as the behavior of both methods are the same but they differ by name.</p> <p>The better way to accomplish this task is by overloading methods. And, depending upon the argument passed, one of the overloaded methods is called. This helps to increase the readability of the program.</p>"},{"location":"week-1/ce204-week-1/#how-to-perform-method-overloading-in-java","title":"How to perform method overloading in Java?","text":"<ul> <li>Overloading by changing the number of parameters</li> </ul> <pre><code>class MethodOverloading {\n    private static void display(int a){\n        System.out.println(\"Arguments: \" + a);\n    }\n\n    private static void display(int a, int b){\n        System.out.println(\"Arguments: \" + a + \" and \" + b);\n    }\n\n    public static void main(String[] args) {\n        display(1);\n        display(1, 4);\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#how-to-perform-method-overloading-in-java_1","title":"How to perform method overloading in Java?","text":"<ul> <li>Method Overloading by changing the data type of parameters</li> </ul> <pre><code>class MethodOverloading {\n\n    // this method accepts int\n    private static void display(int a){\n        System.out.println(\"Got Integer data.\");\n    }\n\n    // this method  accepts String object\n    private static void display(String a){\n        System.out.println(\"Got String object.\");\n    }\n\n    public static void main(String[] args) {\n        display(1);\n        display(\"Hello\");\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-overloading-example","title":"Java Overloading Example","text":"<pre><code>class HelperService {\n\n    private String formatNumber(int value) {\n        return String.format(\"%d\", value);\n    }\n\n    private String formatNumber(double value) {\n        return String.format(\"%.3f\", value);\n    }\n\n    private String formatNumber(String value) {\n        return String.format(\"%.2f\", Double.parseDouble(value));\n    }\n\n    public static void main(String[] args) {\n        HelperService hs = new HelperService();\n        System.out.println(hs.formatNumber(500));\n        System.out.println(hs.formatNumber(89.9934));\n        System.out.println(hs.formatNumber(\"550\"));\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-constructor","title":"Java Constructor","text":""},{"location":"week-1/ce204-week-1/#java-constructor_1","title":"Java Constructor","text":"<p>A constructor is a special method of a class that has the same name as the class name. The constructor gets executes automatically on object creation. It does not require the explicit method call. A constructor may have parameters and access specifiers too. In java, if you do not provide any constructor the compiler automatically creates a default constructor.</p>"},{"location":"week-1/ce204-week-1/#java-constructor_2","title":"Java Constructor","text":"<p>A constructor can not have return value.</p> <pre><code>public class ConstructorExample {\n\n    ConstructorExample() {\n        System.out.println(\"Object created!\");\n    }\n    public static void main(String[] args) {\n\n        ConstructorExample obj1 = new ConstructorExample();\n        ConstructorExample obj2 = new ConstructorExample();\n    }\n\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#types-of-constructor","title":"Types of Constructor","text":"<p>In Java, constructors can be divided into 3 types:</p> <ul> <li>No-Arg Constructor</li> <li>Parameterized Constructor</li> <li>Default Constructor</li> </ul>"},{"location":"week-1/ce204-week-1/#java-no-arg-constructors","title":"Java No-Arg Constructors","text":"<ul> <li>Java private no-arg constructor</li> </ul> <pre><code>class Main {\n\n  int i;\n\n  // constructor with no parameter\n  private Main() {\n    i = 5;\n    System.out.println(\"Constructor is called\");\n  }\n\n  public static void main(String[] args) {\n\n    // calling the constructor without any parameter\n    Main obj = new Main();\n    System.out.println(\"Value of i: \" + obj.i);\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-no-arg-constructors_1","title":"Java No-Arg Constructors","text":"<ul> <li>Java public no-arg constructor</li> </ul> <pre><code>class Company {\n  String name;\n\n  // public constructor\n  public Company() {\n    name = \"My Company\";\n  }\n}\n\nclass Main {\n  public static void main(String[] args) {\n\n    // object is created in another class\n    Company obj = new Company();\n    System.out.println(\"Company name = \" + obj.name);\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-parameterized-constructor","title":"Java Parameterized Constructor","text":"<pre><code>class Main {\n\n  String languages;\n\n  // constructor accepting single value\n  Main(String lang) {\n    languages = lang;\n    System.out.println(languages + \" Programming Language\");\n  }\n\n  public static void main(String[] args) {\n\n    // call constructor by passing a single value\n    Main obj1 = new Main(\"Java\");\n    Main obj2 = new Main(\"Python\");\n    Main obj3 = new Main(\"C\");\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-default-constructor","title":"Java Default Constructor","text":"<pre><code>class Main {\n\n  int a;\n  boolean b;\n\n  public static void main(String[] args) {\n\n    // A default constructor is called\n    Main obj = new Main();\n\n    System.out.println(\"Default Value:\");\n    System.out.println(\"a = \" + obj.a);\n    System.out.println(\"b = \" + obj.b);\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-default-values","title":"Java Default Values","text":"<p>The default constructor initializes any uninitialized instance variables with default values.</p> <p>Type \\(\\Longrightarrow\\) Default Value boolean \\(\\Longrightarrow\\) false byte \\(\\Longrightarrow\\) 0 short \\(\\Longrightarrow\\) 0 int \\(\\Longrightarrow\\)    0 long \\(\\Longrightarrow\\) 0L char \\(\\Longrightarrow\\) \\u0000 float \\(\\Longrightarrow\\) 0.0f double \\(\\Longrightarrow\\) 0.0d object \\(\\Longrightarrow\\) Reference null</p>"},{"location":"week-1/ce204-week-1/#java-default-constructor-equivalent","title":"Java Default Constructor Equivalent","text":"<pre><code>class Main {\n\n  int a;\n  boolean b;\n\n  // a private constructor\n  private Main() {\n    a = 0;\n    b = false;\n  }\n\n  public static void main(String[] args) {\n    // call the constructor\n    Main obj = new Main();\n\n    System.out.println(\"Default Value:\");\n    System.out.println(\"a = \" + obj.a);\n    System.out.println(\"b = \" + obj.b);\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#constructors-overloading-in-java","title":"Constructors Overloading in Java","text":"<pre><code>class Main {\n\n  String language;\n\n  // constructor with no parameter\n  Main() {\n    this.language = \"Java\";\n  }\n\n  // constructor with a single parameter\n  Main(String language) {\n    this.language = language;\n  }\n\n  public void getName() {\n    System.out.println(\"Programming Langauage: \" + this.language);\n  }\n...\n</code></pre>"},{"location":"week-1/ce204-week-1/#constructors-overloading-in-java_1","title":"Constructors Overloading in Java","text":"<pre><code>...\n  public static void main(String[] args) {\n\n    // call constructor with no parameter\n    Main obj1 = new Main();\n\n    // call constructor with a single parameter\n    Main obj2 = new Main(\"Python\");\n\n    obj1.getName();\n    obj2.getName();\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-inheritance","title":"Java Inheritance","text":""},{"location":"week-1/ce204-week-1/#inheritance-concept","title":"Inheritance Concept","text":"<ul> <li>The inheritance is a very useful and powerful concept of object-oriented programming. </li> <li>In java, using the inheritance concept, we can use the existing features of one class in another class. - The inheritance provides a greate advantage called code re-usability. </li> <li>With the help of code re-usability, the commonly used code in an application need not be written again and again.</li> </ul>"},{"location":"week-1/ce204-week-1/#inheritance-concept_1","title":"Inheritance Concept","text":""},{"location":"week-1/ce204-week-1/#inheritance-concept_2","title":"Inheritance Concept","text":"<p>The inheritance is the process of acquiring the properties of one class to another class.</p>"},{"location":"week-1/ce204-week-1/#inheritance-basics","title":"Inheritance Basics","text":"<ul> <li>In inheritance, we use the terms like </li> <li>parent class, </li> <li>child class, </li> <li>base class, </li> <li>derived class, </li> <li>superclass, and </li> <li>subclass.</li> </ul>"},{"location":"week-1/ce204-week-1/#inheritance-basics_1","title":"Inheritance Basics","text":"<ul> <li> <p>The Parent class is the class which provides features to another class. </p> </li> <li> <p>The parent class is also known as Base class or Superclass.</p> </li> <li> <p>The Child class is the class which receives features from another class. </p> </li> <li> <p>The child class is also known as the Derived Class or Subclass.</p> </li> </ul>"},{"location":"week-1/ce204-week-1/#inheritance-basics_2","title":"Inheritance Basics","text":"<ul> <li>In the inheritance, </li> <li>the child class acquires the features from its parent class. </li> <li>But the parent class never acquires the features from its child class.</li> </ul>"},{"location":"week-1/ce204-week-1/#inheritance-basics_3","title":"Inheritance Basics","text":"<p>There are five types of inheritances, and they are as follows.</p> <ul> <li>Simple Inheritance (or) Single Inheritance</li> <li>Multiple Inheritance</li> <li>Multi-Level Inheritance</li> <li>Hierarchical Inheritance</li> <li>Hybrid Inheritance</li> </ul>"},{"location":"week-1/ce204-week-1/#inheritance-basics_4","title":"Inheritance Basics","text":"<ul> <li>Simple Inheritance (or) Single Inheritance</li> </ul>"},{"location":"week-1/ce204-week-1/#inheritance-basics_5","title":"Inheritance Basics","text":"<ul> <li>Multiple Inheritance</li> </ul>"},{"location":"week-1/ce204-week-1/#inheritance-basics_6","title":"Inheritance Basics","text":"<ul> <li>Multi-Level Inheritance</li> </ul>"},{"location":"week-1/ce204-week-1/#inheritance-basics_7","title":"Inheritance Basics","text":"<ul> <li>Hierarchical Inheritance</li> </ul>"},{"location":"week-1/ce204-week-1/#inheritance-basics_8","title":"Inheritance Basics","text":"<ul> <li>Hybrid Inheritance</li> </ul>"},{"location":"week-1/ce204-week-1/#inheritance-basics_9","title":"Inheritance Basics","text":"<ul> <li>The java programming language does not support multiple inheritance type. </li> <li>However, it provides an alternate with the concept of interfaces.</li> </ul>"},{"location":"week-1/ce204-week-1/#creating-child-class-in-java","title":"Creating Child Class in java","text":"<ul> <li>In java, we use the keyword extends to create a child class. </li> <li>The following syntax used to create a child class in java.</li> </ul> <pre><code>  class &lt;ChildClassName&gt; extends &lt;ParentClassName&gt;{\n    ...\n    //Implementation of child class\n    ...\n  }\n  ```\n\n  - In a java programming language, a class extends only one class. \n    - Extending multiple classes is not allowed in java.\n\n---\n\n### Single Inheritance in Java Example-1\n- In this type of inheritance, one child class derives from one parent class. \n\n``` Java linenums=\"1\"\nclass ParentClass{\n    int a;\n    void setData(int a) {\n        this.a = a;\n    }\n}\n</code></pre> <pre><code>class ChildClass extends ParentClass{\n    void showData() {\n        System.out.println(\"Value of a is \" + a);\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#single-inheritance-in-java-example-1","title":"Single Inheritance in Java Example-1","text":"<pre><code>public class SingleInheritance {\n\n    public static void main(String[] args) {\n\n        ChildClass obj = new ChildClass();\n        obj.setData(100);\n        obj.showData();\n\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#single-inheritance-in-java-example-2","title":"Single Inheritance in Java Example-2","text":"<pre><code>class Animal {\n\n  // field and method of the parent class\n  String name;\n  public void eat() {\n    System.out.println(\"I can eat\");\n  }\n}\n</code></pre> <pre><code>// inherit from Animal\nclass Dog extends Animal {\n\n  // new method in subclass\n  public void display() {\n    System.out.println(\"My name is \" + name);\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#single-inheritance-in-java-example-2_1","title":"Single Inheritance in Java Example-2","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n    // create an object of the subclass\n    Dog labrador = new Dog();\n    // access field of superclass\n    labrador.name = \"Rohu\";\n    labrador.display();\n    // call method of superclass\n    // using object of subclass\n    labrador.eat();\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#single-inheritance-in-java-example-2_2","title":"Single Inheritance in Java Example-2","text":""},{"location":"week-1/ce204-week-1/#single-inheritance-is-a-relationship","title":"Single Inheritance / is-a relationship","text":"<ul> <li>In Java, inheritance is an is-a relationship. That is, we use inheritance only if there exists an is-a relationship between two classes. For example,</li> <li>Car is a Vehicle</li> <li>Orange is a Fruit</li> <li>Surgeon is a Doctor</li> <li>Dog is an Animal<ul> <li>Here, Car can inherit from Vehicle, Orange can inherit from Fruit, and so on.</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#multi-level-inheritance-in-java","title":"Multi-level Inheritance in java","text":"<ul> <li>In this type of inheritance, the child class derives from a class which already derived from another class</li> </ul> <pre><code>class ParentClass{\n    int a;\n    void setData(int a) {\n        this.a = a;\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#multi-level-inheritance-in-java_1","title":"Multi-level Inheritance in java","text":"<pre><code>class ChildClass extends ParentClass{\n    void showData() {\n        System.out.println(\"Value of a is \" + a);\n    }\n}\n</code></pre> <pre><code>class ChildChildClass extends ChildClass{\n    void display() {\n        System.out.println(\"Inside ChildChildClass!\");\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#multi-level-inheritance-in-java_2","title":"Multi-level Inheritance in java","text":"<pre><code>public class MultipleInheritance {\n\n    public static void main(String[] args) {\n\n        ChildChildClass obj = new ChildChildClass();\n        obj.setData(100);\n        obj.showData();\n        obj.display();\n\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#hierarchical-inheritance-in-java","title":"Hierarchical Inheritance in java","text":"<ul> <li>In this type of inheritance, two or more child classes derive from one parent class.</li> </ul> <pre><code>class ParentClass{\n    int a;\n    void setData(int a) {\n        this.a = a;\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#hierarchical-inheritance-in-java_1","title":"Hierarchical Inheritance in java","text":"<pre><code>class ChildClass extends ParentClass{\n    void showData() {\n        System.out.println(\"Inside ChildClass!\");\n        System.out.println(\"Value of a is \" + a);\n    }\n}\n</code></pre> <pre><code>class ChildClassToo extends ParentClass{\n    void display() {\n        System.out.println(\"Inside ChildClassToo!\");\n        System.out.println(\"Value of a is \" + a);\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#hierarchical-inheritance-in-java_2","title":"Hierarchical Inheritance in java","text":"<pre><code>public class HierarchicalInheritance {\n    public static void main(String[] args) {\n        ChildClass child_obj = new ChildClass();\n        child_obj.setData(100);\n        child_obj.showData();\n\n        ChildClassToo childToo_obj = new ChildClassToo();\n        childToo_obj.setData(200);\n        childToo_obj.display();\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#hybrid-inheritance-in-java","title":"Hybrid Inheritance in java","text":"<ul> <li>The hybrid inheritance is the combination of more than one type of inheritance. </li> <li>We may use any combination as a <ul> <li>single with multiple inheritances, </li> <li>multi-level with multiple inheritances, etc.,</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#java-access-modifiers","title":"Java Access Modifiers","text":""},{"location":"week-1/ce204-week-1/#java-access-modifiers_1","title":"Java Access Modifiers","text":"<ul> <li>In Java, the access specifiers (also known as access modifiers) used to restrict </li> <li>the scope or </li> <li>accessibility of a <ul> <li>class, </li> <li>constructor, </li> <li>variable, </li> <li>method or </li> <li>data member of class and interface. </li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_2","title":"Java Access Modifiers","text":"<p>There are four access specifiers, and their list is below.</p> <ul> <li>default (or) no modifier</li> <li>public</li> <li>protected</li> <li>private</li> </ul>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_3","title":"Java Access Modifiers","text":"<ul> <li>In java, we can not employ all access specifiers on everything. The following table describes where we can apply the access specifiers.</li> </ul>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_4","title":"Java Access Modifiers","text":"<ul> <li>Let's look at the following example java code, </li> <li>which generates an error </li> <li> <p>because a class does not allow private access specifier </p> <ul> <li>unless it is an inner class.</li> </ul> <pre><code>private class Sample{\n...\n}\n</code></pre> </li> </ul>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_5","title":"Java Access Modifiers","text":"<ul> <li>In java, the accessibility of the members of a class or interface depends on its access specifiers. The following table provides information about the visibility of both data members and methods.</li> </ul>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_6","title":"Java Access Modifiers","text":"<ul> <li> <p>The public members can be accessed everywhere.</p> </li> <li> <p>The private members can be accessed only inside the same class.</p> </li> <li> <p>The protected members are accessible to every child class (same package or other packages).</p> </li> <li> <p>The default members are accessible within the same package but not outside the package.</p> </li> </ul>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_7","title":"Java Access Modifiers","text":"<pre><code>class ParentClass{\n    int a = 10;\n    public int b = 20;\n    protected int c = 30;\n    private int d = 40;\n\n    void showData() {\n        System.out.println(\"Inside ParentClass\");\n        System.out.println(\"a = \" + a);\n        System.out.println(\"b = \" + b);\n        System.out.println(\"c = \" + c);\n        System.out.println(\"d = \" + d);\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_8","title":"Java Access Modifiers","text":"<pre><code>class ChildClass extends ParentClass{\n\n    void accessData() {\n        System.out.println(\"Inside ChildClass\");\n        System.out.println(\"a = \" + a);\n        System.out.println(\"b = \" + b);\n        System.out.println(\"c = \" + c);\n        //System.out.println(\"d = \" + d);   // private member can't be accessed\n    }\n\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_9","title":"Java Access Modifiers","text":"<pre><code>public class AccessModifiersExample {\n\n    public static void main(String[] args) {\n\n        ChildClass obj = new ChildClass();\n        obj.showData();\n        obj.accessData();\n\n    }\n\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_10","title":"Java Access Modifiers","text":"<ul> <li>Default Access Modifier</li> <li>Here, the Logger class has the default access modifier</li> </ul> <pre><code>package defaultpackage;\nclass Logger {\n    void message(){\n        System.out.println(\"This is a message\");\n    }\n}\n</code></pre> <ul> <li> <p>the class is visible to all the classes that belong to the defaultPackage package</p> </li> <li> <p>However, if we try to use the Logger class in another class outside of defaultPackage, we will get a compilation error.</p> </li> </ul>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_11","title":"Java Access Modifiers","text":"<ul> <li>Private  Access Modifier</li> <li>When variables and methods are declared private, they cannot be accessed outside of the class</li> </ul> <pre><code>class Data {\n    // private variable\n    private String name;\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_12","title":"Java Access Modifiers","text":"<ul> <li>Private  Access Modifier</li> </ul> <pre><code>public class Main {\n    public static void main(String[] main){\n\n        // create an object of Data\n        Data d = new Data();\n\n        // access private variable and field from another class\n        d.name = \"My App\";\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_13","title":"Java Access Modifiers","text":"<ul> <li>Private  Access Modifier</li> <li>When we run the program, we will get the following error</li> </ul> <pre><code>Main.java:18: error: name has private access in Data\n        d.name = \"My App\";\n         ^\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_14","title":"Java Access Modifiers","text":"<ul> <li>Private  Access Modifier</li> <li>if we need to access those private variables<ul> <li>we can use the getters and setters method</li> </ul> </li> </ul> <pre><code>class Data {\n    private String name;\n\n    // getter method\n    public String getName() {\n        return this.name;\n    }\n    // setter method\n    public void setName(String name) {\n        this.name= name;\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_15","title":"Java Access Modifiers","text":"<ul> <li>Private  Access Modifier</li> </ul> <pre><code>public class Main {\n    public static void main(String[] main){\n        Data d = new Data();\n\n        // access the private variable using the getter and setter\n        d.setName(\"My App\");\n        System.out.println(d.getName());\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_16","title":"Java Access Modifiers","text":"<ul> <li> <p>Private  Access Modifier</p> </li> <li> <p>We cannot declare classes and interfaces private in Java. </p> </li> <li>However, the nested classes can be declared private.</li> </ul>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_17","title":"Java Access Modifiers","text":"<ul> <li>Protected Access Modifier</li> <li>When methods and data members are declared protected, <ul> <li>we can access them within the same package </li> <li>as well as from subclasses.</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_18","title":"Java Access Modifiers","text":"<ul> <li>Protected Access Modifier</li> </ul> <pre><code>class Animal {\n    // protected method\n    protected void display() {\n        System.out.println(\"I am an animal\");\n    }\n}\n</code></pre> <pre><code>class Dog extends Animal {\n    public static void main(String[] args) {\n\n        // create an object of Dog class\n        Dog dog = new Dog();\n         // access protected method\n        dog.display();\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_19","title":"Java Access Modifiers","text":"<ul> <li>Protected Access Modifier (Ex-2)</li> </ul> <pre><code>class Animal {\n  protected String name;\n\n  protected void display() {\n    System.out.println(\"I am an animal.\");\n  }\n}\n</code></pre> <pre><code>class Dog extends Animal {\n\n  public void getInfo() {\n    System.out.println(\"My name is \" + name);\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_20","title":"Java Access Modifiers","text":"<ul> <li>Protected Access Modifier (Ex-2)</li> </ul> <pre><code>class Main {\n  public static void main(String[] args) {\n\n    // create an object of the subclass\n    Dog labrador = new Dog();\n\n    // access protected field and method\n    // using the object of subclass\n    labrador.name = \"Rocky\";\n    labrador.display();\n\n    labrador.getInfo();\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_21","title":"Java Access Modifiers","text":"<ul> <li> <p>Protected Access Modifier</p> </li> <li> <p>We cannot declare classes or interfaces protected in Java.</p> </li> </ul>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_22","title":"Java Access Modifiers","text":"<ul> <li>Public Access Modifier</li> <li>When methods, variables, classes, and so on are declared public, <ul> <li>then we can access them from anywhere.</li> </ul> </li> </ul> <pre><code>// Animal.java file\n// public class\npublic class Animal {\n    // public variable\n    public int legCount;\n\n    // public method\n    public void display() {\n        System.out.println(\"I am an animal.\");\n        System.out.println(\"I have \" + legCount + \" legs.\");\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-access-modifiers_23","title":"Java Access Modifiers","text":"<ul> <li>Public Access Modifier</li> </ul> <pre><code>// Main.java\npublic class Main {\n    public static void main( String[] args ) {\n        // accessing the public class\n        Animal animal = new Animal();\n\n        // accessing the public variable\n        animal.legCount = 4;\n        // accessing the public method\n        animal.display();\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-constructors-in-inheritance","title":"Java Constructors in Inheritance","text":""},{"location":"week-1/ce204-week-1/#java-constructors-in-inheritance_1","title":"Java Constructors in Inheritance","text":"<ul> <li>It is very important to understand how the constructors get executed in the inheritance concept.</li> <li>In the inheritance, the constructors never get inherited to any child class.</li> <li>In java, the default constructor of a parent class called automatically by the constructor of its child class. </li> <li>That means when we create an object of the child class, </li> <li>the parent class constructor executed, followed by the child class constructor executed.</li> </ul>"},{"location":"week-1/ce204-week-1/#java-constructors-in-inheritance-example","title":"Java Constructors in Inheritance - Example","text":"<pre><code>class ParentClass{\n    int a;\n    ParentClass(){\n        System.out.println(\"Inside ParentClass constructor!\");\n    }\n}\n</code></pre> <pre><code>class ChildClass extends ParentClass{\n\n    ChildClass(){\n        System.out.println(\"Inside ChildClass constructor!!\");      \n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-constructors-in-inheritance-example_1","title":"Java Constructors in Inheritance - Example","text":"<pre><code>class ChildChildClass extends ChildClass{\n\n    ChildChildClass(){\n        System.out.println(\"Inside ChildChildClass constructor!!\");     \n    }   \n}\n</code></pre> <pre><code>public class ConstructorInInheritance {\n\n    public static void main(String[] args) {\n\n        ChildChildClass obj = new ChildChildClass();\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-constructors-in-inheritance_2","title":"Java Constructors in Inheritance","text":"<ul> <li>if the parent class contains both default and parameterized constructor, </li> <li>then only the default constructor called automatically <ul> <li>by the child class constructor</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#java-constructors-in-inheritance-example_2","title":"Java Constructors in Inheritance - Example","text":"<pre><code>class ParentClass{\n    int a;\n    ParentClass(int a){\n        System.out.println(\"Inside ParentClass parameterized constructor!\");\n        this.a = a;\n    }\n    ParentClass(){\n        System.out.println(\"Inside ParentClass default constructor!\");\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-constructors-in-inheritance-example_3","title":"Java Constructors in Inheritance - Example","text":"<pre><code>class ChildClass extends ParentClass{\n    ChildClass(){\n        System.out.println(\"Inside ChildClass constructor!!\");      \n    }\n}\n</code></pre> <pre><code>public class ConstructorInInheritance {\n    public static void main(String[] args) {\n        ChildClass obj = new ChildClass();\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-constructors-in-inheritance_3","title":"Java Constructors in Inheritance","text":"<ul> <li>The parameterized constructor of parent class must be called explicitly using the super keyword.</li> </ul>"},{"location":"week-1/ce204-week-1/#method-overriding-in-java-inheritance","title":"Method Overriding in Java Inheritance","text":"<pre><code>class Animal {\n\n  // method in the superclass\n  public void eat() {\n    System.out.println(\"I can eat\");\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#method-overriding-in-java-inheritance_1","title":"Method Overriding in Java Inheritance","text":"<pre><code>// Dog inherits Animal\nclass Dog extends Animal {\n\n  // overriding the eat() method\n  @Override\n  public void eat() {\n    System.out.println(\"I eat dog food\");\n  }\n\n  // new method in subclass\n  public void bark() {\n    System.out.println(\"I can bark\");\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#method-overriding-in-java-inheritance_2","title":"Method Overriding in Java Inheritance","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n\n    // create an object of the subclass\n    Dog labrador = new Dog();\n\n    // call the eat() method\n    labrador.eat();\n    labrador.bark();\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#method-overriding-in-java-inheritance_3","title":"Method Overriding in Java Inheritance","text":"<ul> <li>In the above example, the eat() method is present in both the superclass Animal and the subclass Dog.</li> <li>Here, we have created an object labrador of Dog.</li> <li>Now when we call eat() using the object labrador, the method inside Dog is called. This is because the method inside the derived class overrides the method inside the base class.</li> </ul>"},{"location":"week-1/ce204-week-1/#super-keyword-in-java-inheritance","title":"super Keyword in Java Inheritance","text":""},{"location":"week-1/ce204-week-1/#super-keyword-in-java-inheritance_1","title":"super Keyword in Java Inheritance","text":"<ul> <li> <p>the same method in the subclass overrides the method in superclass.</p> </li> <li> <p>In such a situation, the super keyword is used to call the method of the parent class from the method of the child class.</p> </li> </ul>"},{"location":"week-1/ce204-week-1/#super-keyword-in-java-inheritance_2","title":"super Keyword in Java Inheritance","text":"<pre><code>class Animal {\n\n  // method in the superclass\n  public void eat() {\n    System.out.println(\"I can eat\");\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#super-keyword-in-java-inheritance_3","title":"super Keyword in Java Inheritance","text":"<pre><code>// Dog inherits Animal\nclass Dog extends Animal {\n\n  // overriding the eat() method\n  @Override\n  public void eat() {\n\n    // call method of superclass\n    super.eat();\n    System.out.println(\"I eat dog food\");\n  }\n\n  // new method in subclass\n  public void bark() {\n    System.out.println(\"I can bark\");\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#super-keyword-in-java-inheritance_4","title":"super Keyword in Java Inheritance","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n\n    // create an object of the subclass\n    Dog labrador = new Dog();\n\n    // call the eat() method\n    labrador.eat();\n    labrador.bark();\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-this-keyword","title":"Java this Keyword","text":""},{"location":"week-1/ce204-week-1/#java-this-keyword_1","title":"Java this Keyword","text":"<ul> <li>In Java, this keyword is used to refer to </li> <li>the current object <ul> <li>inside a </li> <li>method or a </li> <li>constructor</li> </ul> </li> </ul>"},{"location":"week-1/ce204-week-1/#java-this-keyword_2","title":"Java this Keyword","text":"<pre><code>class Main {\n    int instVar;\n\n    Main(int instVar){\n        this.instVar = instVar;\n        System.out.println(\"this reference = \" + this);\n    }\n\n    public static void main(String[] args) {\n        Main obj = new Main(8);\n        System.out.println(\"object reference = \" + obj);\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#using-this-for-ambiguity-variable-names","title":"Using this for Ambiguity Variable Names","text":"<ul> <li>In Java, it is not allowed to declare two or more variables having the same name inside a scope (class scope or method scope). </li> <li>However, instance variables and parameters may have the same name.</li> </ul>"},{"location":"week-1/ce204-week-1/#using-this-for-ambiguity-variable-names_1","title":"Using this for Ambiguity Variable Names","text":"<p>WRONG </p> <pre><code>class Main {\n\n    int age;\n    Main(int age){\n        age = age;\n    }\n\n    public static void main(String[] args) {\n        Main obj = new Main(8);\n        System.out.println(\"obj.age = \" + obj.age);\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#using-this-for-ambiguity-variable-names_2","title":"Using this for Ambiguity Variable Names","text":"<p>CORRECT </p> <pre><code>class Main {\n\n    int age;\n    Main(int age){\n        this.age = age;\n    }\n\n    public static void main(String[] args) {\n        Main obj = new Main(8);\n        System.out.println(\"obj.age = \" + obj.age);\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#this-with-getters-and-setters","title":"this with Getters and Setters","text":"<ul> <li>Another common use of this keyword is in setters and getters methods of a class</li> </ul> <pre><code>class Main {\n   String name;\n\n   // setter method\n   void setName( String name ) {\n       this.name = name;\n   }\n\n   // getter method\n   String getName(){\n       return this.name;\n   }\n   ...\n</code></pre>"},{"location":"week-1/ce204-week-1/#this-with-getters-and-setters_1","title":"this with Getters and Setters","text":"<pre><code>...\n   public static void main( String[] args ) {\n       Main obj = new Main();\n\n       // calling the setter and the getter method\n       obj.setName(\"Toshiba\");\n       System.out.println(\"obj.name: \"+obj.getName());\n   }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#using-this-in-constructor-overloading","title":"Using this in Constructor Overloading","text":"<ul> <li>While working with constructor overloading, </li> <li>we might have to invoke one constructor from another constructor. </li> <li>In such a case, </li> <li>we cannot call the constructor explicitly. Instead, </li> <li>we have to use this keyword.</li> </ul>"},{"location":"week-1/ce204-week-1/#using-this-in-constructor-overloading_1","title":"Using this in Constructor Overloading","text":"<pre><code>class Complex {\n\n    private int a, b;\n\n    // constructor with 2 parameters\n    private Complex( int i, int j ){\n        this.a = i;\n        this.b = j;\n    }\n\n    // constructor with single parameter\n    private Complex(int i){\n        // invokes the constructor with 2 parameters\n        this(i, i); \n    }\n\n    // constructor with no parameter\n    private Complex(){\n        // invokes the constructor with single parameter\n        this(0);\n    }\n    ...\n</code></pre>"},{"location":"week-1/ce204-week-1/#using-this-in-constructor-overloading_2","title":"Using this in Constructor Overloading","text":"<pre><code>    @Override\n    public String toString(){\n        return this.a + \" + \" + this.b + \"i\";\n    }\n\n    public static void main( String[] args ) {\n\n        // creating object of Complex class\n        // calls the constructor with 2 parameters\n        Complex c1 = new Complex(2, 3); \n\n        // calls the constructor with a single parameter\n        Complex c2 = new Complex(3);\n\n        // calls the constructor with no parameters\n        Complex c3 = new Complex();\n\n        // print objects\n        System.out.println(c1);\n        System.out.println(c2);\n        System.out.println(c3);\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#using-this-in-constructor-overloading_3","title":"Using this in Constructor Overloading","text":"<ul> <li>In the example, we have used this keyword,</li> <li>to call the constructor <code>Complex(int i, int j)</code> from the constructor <code>Complex(int i)</code></li> <li>to call the constructor <code>Complex(int i)</code> from the constructor <code>Complex()</code></li> <li>the line, <code>System.out.println(c1);</code> process, the toString() is called Since we override the toString() method inside our class, we get the output according to that method. </li> </ul>"},{"location":"week-1/ce204-week-1/#using-this-in-constructor-overloading_4","title":"Using this in Constructor Overloading","text":"<ul> <li> <p>One of the huge advantages of this() is to reduce the amount of duplicate code. However, we should be always careful while using this().</p> </li> <li> <p>This is because calling constructor from another constructor adds overhead and it is a slow process. Another huge advantage of using this() is to reduce the amount of duplicate code.</p> </li> </ul>"},{"location":"week-1/ce204-week-1/#using-this-in-constructor-overloading_5","title":"Using this in Constructor Overloading","text":"<ul> <li>Invoking one constructor from another constructor is called explicit constructor invocation.</li> </ul>"},{"location":"week-1/ce204-week-1/#passing-this-as-an-argument","title":"Passing this as an Argument","text":"<ul> <li>We can use this keyword to pass the current object as an argument to a method</li> </ul> <pre><code>class ThisExample {\n    // declare variables\n    int x;\n    int y;\n\n    ThisExample(int x, int y) {\n       // assign values of variables inside constructor\n        this.x = x;\n        this.y = y;\n\n        // value of x and y before calling add()\n        System.out.println(\"Before passing this to addTwo() method:\");\n        System.out.println(\"x = \" + this.x + \", y = \" + this.y);\n\n        // call the add() method passing this as argument\n        add(this);\n\n        // value of x and y after calling add()\n        System.out.println(\"After passing this to addTwo() method:\");\n        System.out.println(\"x = \" + this.x + \", y = \" + this.y);\n    }\n\n    void add(ThisExample o){\n        o.x += 2;\n        o.y += 2;\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#passing-this-as-an-argument_1","title":"Passing this as an Argument","text":"<pre><code>class Main {\n    public static void main( String[] args ) {\n        ThisExample obj = new ThisExample(1, -2);\n    }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#passing-this-as-an-argument_2","title":"Passing this as an Argument","text":"<ul> <li>In the example, inside the constructor <code>ThisExample()</code>, notice the line, <code>add(this);</code></li> <li>Here, we are calling the <code>add()</code> method by passing this as an argument. </li> <li>Since this keyword contains the reference to the object obj of the class, </li> <li>we can change the value of <code>x</code> and <code>y</code> inside the <code>add()</code> method.</li> </ul>"},{"location":"week-1/ce204-week-1/#java-instanceof-operator","title":"Java instanceof Operator","text":""},{"location":"week-1/ce204-week-1/#java-instanceof-operator_1","title":"Java instanceof Operator","text":"<ul> <li>The instanceof operator in Java is used to </li> <li>check whether an object is an instance of <ul> <li>a particular class or not.</li> </ul> </li> <li>Its syntax is</li> </ul> <pre><code>objectName instanceOf className;\n</code></pre>"},{"location":"week-1/ce204-week-1/#example-java-instanceof","title":"Example: Java instanceof","text":"<pre><code>class Main {\n\n  public static void main(String[] args) {\n\n    // create a variable of string type\n    String name = \"My App\";\n\n    // checks if name is instance of String\n    boolean result1 = name instanceof String;\n    System.out.println(\"name is an instance of String: \" + result1);\n\n    // create an object of Main\n    Main obj = new Main();\n\n    // checks if obj is an instance of Main\n    boolean result2 = obj instanceof Main;\n    System.out.println(\"obj is an instance of Main: \" + result2);\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#example-java-instanceof_1","title":"Example: Java instanceof","text":"<ul> <li> <p>In the example, we have created a variable name of the String type and an object obj of the Main class.</p> </li> <li> <p>Here, we have used the instanceof operator to check whether name and obj are instances of the String and Main class respectively. And, the operator returns true in both cases.</p> </li> </ul>"},{"location":"week-1/ce204-week-1/#java-instanceof-during-inheritance","title":"Java instanceof during Inheritance","text":"<ul> <li>We can use the instanceof operator to check if objects of the subclass is also an instance of the superclass.</li> </ul>"},{"location":"week-1/ce204-week-1/#java-instanceof-during-inheritance_1","title":"Java instanceof during Inheritance","text":"<pre><code>// Java Program to check if an object of the subclass\n// is also an instance of the superclass\n\n// superclass\nclass Animal {\n}\n\n// subclass\nclass Dog extends Animal {\n}\n\nclass Main {\n  public static void main(String[] args) {\n\n    // create an object of the subclass\n    Dog d1 = new Dog();\n\n    // checks if d1 is an instance of the subclass\n    System.out.println(d1 instanceof Dog);        // prints true\n\n    // checks if d1 is an instance of the superclass\n    System.out.println(d1 instanceof Animal);     // prints true\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-instanceof-during-inheritance_2","title":"Java instanceof during Inheritance","text":"<ul> <li> <p>In the above example, we have created a subclass Dog that inherits from the superclass Animal. We have created an object d1 of the Dog class.</p> </li> <li> <p>Inside the print statement, notice the expression,</p> </li> </ul> <pre><code>d1 instanceof Animal\n</code></pre> <ul> <li>Here, we are using the <code>instanceof</code> operator to check whether <code>d1</code> is also an instance of the superclass <code>Animal</code></li> </ul>"},{"location":"week-1/ce204-week-1/#java-instanceof-in-interface","title":"Java instanceof in Interface","text":"<ul> <li>The instanceof operator is also used to check whether an object of a class is </li> <li>also an instance of the interface implemented by the class</li> </ul>"},{"location":"week-1/ce204-week-1/#java-instanceof-in-interface_1","title":"Java instanceof in Interface","text":"<pre><code>// Java program to check if an object of a class is also\n//  an instance of the interface implemented by the class\n\ninterface Animal {\n}\n\nclass Dog implements Animal {\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-instanceof-in-interface_2","title":"Java instanceof in Interface","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n\n    // create an object of the Dog class\n    Dog d1 = new Dog();\n\n    // checks if the object of Dog\n    // is also an instance of Animal\n    System.out.println(d1 instanceof Animal);  // returns true\n  }\n}\n</code></pre>"},{"location":"week-1/ce204-week-1/#java-instanceof-in-interface_3","title":"Java instanceof in Interface","text":"<ul> <li>In the example, the <code>Dog</code> class implements the <code>Animal</code> interface. Inside the print statement, notice the expression,</li> </ul> <pre><code>d1 instanceof Animal\n</code></pre> <ul> <li>Here, <code>d1</code> is an instance of <code>Dog</code> class. The instanceof operator checks </li> <li>if <code>d1</code> is also an instance of the interface <code>Animal</code>.</li> </ul>"},{"location":"week-1/ce204-week-1/#java-instanceof-in-interface_4","title":"Java instanceof in Interface","text":"<p>In Java, all the classes are inherited from the Object class. So, instances of all the classes are also an instance of the Object class.</p> <p>In the previous example, if we check,</p> <pre><code>d1 instanceof Object\n</code></pre> <p>The result will be <code>true</code>.</p>"},{"location":"week-1/ce204-week-1/#references","title":"References","text":"<ul> <li>https://www.site.uottawa.ca/~tcl/seg2105/</li> <li>https://cruise.umple.org/index.shtml</li> <li>https://cruise.umple.org/umple/GettingStarted.html</li> <li>Sanem Sar\u0131el Associate Professor, PhD BT503 Application Development with Java (Kemerburgaz University 2013-2015)</li> <li>How To Define The Project Scope The Foolproof Way</li> </ul>"},{"location":"week-1/ce204-week-1/#references_1","title":"References","text":"<ul> <li>BtechSmartClass Java OOP Concepts</li> <li>BtechSmartClass-Java Buzz Words</li> <li>JavatPoint-Cpp vs Java</li> <li>BtechSmartClass-Java Classes</li> <li>Programiz-Class Objects</li> </ul>"},{"location":"week-1/ce204-week-1/#references_2","title":"References","text":"<ul> <li>BtechSmartClass-Java-Methods-and-Classes</li> <li>Programiz-Methods</li> <li>Programiz-Method Overloading </li> <li>Programiz-Constructors</li> <li>BtechSmartClass-Java inheritance basics</li> </ul>"},{"location":"week-1/ce204-week-1/#references_3","title":"References","text":"<ul> <li>BtechSmartClass-Java access specifiers</li> <li>Programiz-Access Modifiers</li> <li>BtechSmartClass-java constructors in inheritance</li> <li>Programiz-Inheritance</li> <li>Programiz-this Keyword </li> <li>Programiz-instanceof</li> </ul> <p>\\(End-Of-Week-1-Module\\)</p>"},{"location":"week-10/ce204-week-10/","title":"CEN206 Object-Oriented Programming","text":""},{"location":"week-10/ce204-week-10/#cen206-object-oriented-programming","title":"CEN206 Object-Oriented Programming","text":""},{"location":"week-10/ce204-week-10/#week-10-oo-design-patterns-advanced-concepts","title":"Week-10 (OO Design Patterns - Advanced Concepts)","text":""},{"location":"week-10/ce204-week-10/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC-PDF, DOC-DOCX, SLIDE, PPTX</p>"},{"location":"week-10/ce204-week-10/#oo-design-patterns-advanced-concepts","title":"OO Design Patterns - Advanced Concepts","text":""},{"location":"week-10/ce204-week-10/#outline","title":"Outline","text":"<ul> <li>More Creational Patterns</li> <li>More Structural Patterns</li> <li>More Behavioral Patterns</li> <li>Anti-Patterns</li> <li>Design Pattern Selection Criteria</li> </ul>"},{"location":"week-10/ce204-week-10/#creational-design-patterns","title":"Creational Design Patterns","text":""},{"location":"week-10/ce204-week-10/#singleton-pattern","title":"Singleton Pattern","text":"<p>Ensures a class has only one instance and provides a global point of access to it.</p> <pre><code>public class Singleton {\n    // Private static instance\n    private static Singleton instance;\n\n    // Private constructor to prevent instantiation\n    private Singleton() {}\n\n    // Public method to get the instance\n    public static Singleton getInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n\n    // Thread-safe version\n    public static synchronized Singleton getThreadSafeInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n\n    // Double-checked locking\n    public static Singleton getDCLInstance() {\n        if (instance == null) {\n            synchronized (Singleton.class) {\n                if (instance == null) {\n                    instance = new Singleton();\n                }\n            }\n        }\n        return instance;\n    }\n}\n</code></pre>"},{"location":"week-10/ce204-week-10/#builder-pattern","title":"Builder Pattern","text":"<p>Separates the construction of a complex object from its representation, allowing the same construction process to create different representations.</p> <pre><code>// Product\nclass Pizza {\n    private String dough;\n    private String sauce;\n    private String topping;\n\n    public void setDough(String dough) { this.dough = dough; }\n    public void setSauce(String sauce) { this.sauce = sauce; }\n    public void setTopping(String topping) { this.topping = topping; }\n\n    @Override\n    public String toString() {\n        return \"Pizza with \" + dough + \" dough, \" + sauce + \" sauce, and \" + topping + \" topping\";\n    }\n}\n\n// Abstract Builder\nabstract class PizzaBuilder {\n    protected Pizza pizza;\n\n    public Pizza getPizza() { return pizza; }\n    public void createNewPizza() { pizza = new Pizza(); }\n\n    public abstract void buildDough();\n    public abstract void buildSauce();\n    public abstract void buildTopping();\n}\n\n// Concrete Builder\nclass HawaiianPizzaBuilder extends PizzaBuilder {\n    public void buildDough() { pizza.setDough(\"cross\"); }\n    public void buildSauce() { pizza.setSauce(\"mild\"); }\n    public void buildTopping() { pizza.setTopping(\"ham and pineapple\"); }\n}\n\n// Director\nclass Cook {\n    private PizzaBuilder pizzaBuilder;\n\n    public void setPizzaBuilder(PizzaBuilder pizzaBuilder) {\n        this.pizzaBuilder = pizzaBuilder;\n    }\n\n    public Pizza getPizza() { return pizzaBuilder.getPizza(); }\n\n    public void constructPizza() {\n        pizzaBuilder.createNewPizza();\n        pizzaBuilder.buildDough();\n        pizzaBuilder.buildSauce();\n        pizzaBuilder.buildTopping();\n    }\n}\n</code></pre> <p>More about Factory Method: https://refactoring.guru/design-patterns/factory-method</p>"},{"location":"week-10/ce204-week-10/#structural-design-patterns","title":"Structural Design Patterns","text":""},{"location":"week-10/ce204-week-10/#adapter-pattern","title":"Adapter Pattern","text":"<p>Allows incompatible interfaces to work together by wrapping an instance of one class into an adapter that conforms to another class's interface.</p> <pre><code>// Target interface\ninterface MediaPlayer {\n    void play(String audioType, String fileName);\n}\n\n// Adaptee interface\ninterface AdvancedMediaPlayer {\n    void playVlc(String fileName);\n    void playMp4(String fileName);\n}\n\n// Concrete Adaptee\nclass VlcPlayer implements AdvancedMediaPlayer {\n    @Override\n    public void playVlc(String fileName) {\n        System.out.println(\"Playing vlc file: \" + fileName);\n    }\n\n    @Override\n    public void playMp4(String fileName) {\n        // Do nothing\n    }\n}\n\n// Adapter\nclass MediaAdapter implements MediaPlayer {\n    private AdvancedMediaPlayer advancedMusicPlayer;\n\n    public MediaAdapter(String audioType) {\n        if (audioType.equalsIgnoreCase(\"vlc\")) {\n            advancedMusicPlayer = new VlcPlayer();\n        }\n        // Add other players as needed\n    }\n\n    @Override\n    public void play(String audioType, String fileName) {\n        if (audioType.equalsIgnoreCase(\"vlc\")) {\n            advancedMusicPlayer.playVlc(fileName);\n        }\n        // Handle other formats\n    }\n}\n\n// Client\nclass AudioPlayer implements MediaPlayer {\n    private MediaAdapter mediaAdapter;\n\n    @Override\n    public void play(String audioType, String fileName) {\n        // Built-in support for mp3\n        if (audioType.equalsIgnoreCase(\"mp3\")) {\n            System.out.println(\"Playing mp3 file: \" + fileName);\n        } \n        // MediaAdapter provides support for other formats\n        else if (audioType.equalsIgnoreCase(\"vlc\") || audioType.equalsIgnoreCase(\"mp4\")) {\n            mediaAdapter = new MediaAdapter(audioType);\n            mediaAdapter.play(audioType, fileName);\n        } else {\n            System.out.println(\"Invalid media type: \" + audioType);\n        }\n    }\n}\n</code></pre>"},{"location":"week-10/ce204-week-10/#decorator-pattern","title":"Decorator Pattern","text":"<p>Attaches additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.</p> <pre><code>// Component interface\ninterface Coffee {\n    double getCost();\n    String getDescription();\n}\n\n// Concrete Component\nclass SimpleCoffee implements Coffee {\n    @Override\n    public double getCost() {\n        return 1.0;\n    }\n\n    @Override\n    public String getDescription() {\n        return \"Simple coffee\";\n    }\n}\n\n// Abstract Decorator\nabstract class CoffeeDecorator implements Coffee {\n    protected final Coffee decoratedCoffee;\n\n    public CoffeeDecorator(Coffee coffee) {\n        this.decoratedCoffee = coffee;\n    }\n\n    @Override\n    public double getCost() {\n        return decoratedCoffee.getCost();\n    }\n\n    @Override\n    public String getDescription() {\n        return decoratedCoffee.getDescription();\n    }\n}\n\n// Concrete Decorator\nclass MilkDecorator extends CoffeeDecorator {\n    public MilkDecorator(Coffee coffee) {\n        super(coffee);\n    }\n\n    @Override\n    public double getCost() {\n        return super.getCost() + 0.5;\n    }\n\n    @Override\n    public String getDescription() {\n        return super.getDescription() + \", milk\";\n    }\n}\n\n// Usage\n// Coffee myCoffee = new SimpleCoffee();\n// myCoffee = new MilkDecorator(myCoffee);\n// System.out.println(myCoffee.getDescription() + \" $\" + myCoffee.getCost());\n</code></pre>"},{"location":"week-10/ce204-week-10/#behavioral-design-patterns","title":"Behavioral Design Patterns","text":""},{"location":"week-10/ce204-week-10/#observer-pattern","title":"Observer Pattern","text":"<p>Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.</p> <pre><code>import java.util.ArrayList;\nimport java.util.List;\n\n// Observer interface\ninterface Observer {\n    void update(String message);\n}\n\n// Subject\nclass Subject {\n    private final List&lt;Observer&gt; observers = new ArrayList&lt;&gt;();\n    private String state;\n\n    public String getState() {\n        return state;\n    }\n\n    public void setState(String state) {\n        this.state = state;\n        notifyAllObservers();\n    }\n\n    public void attach(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyAllObservers() {\n        for (Observer observer : observers) {\n            observer.update(state);\n        }\n    }\n}\n\n// Concrete Observer\nclass ConcreteObserver implements Observer {\n    private String name;\n\n    public ConcreteObserver(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public void update(String message) {\n        System.out.println(name + \" received: \" + message);\n    }\n}\n\n// Usage\n// Subject subject = new Subject();\n// Observer observer1 = new ConcreteObserver(\"Observer 1\");\n// Observer observer2 = new ConcreteObserver(\"Observer 2\");\n// subject.attach(observer1);\n// subject.attach(observer2);\n// subject.setState(\"New State\");\n</code></pre>"},{"location":"week-10/ce204-week-10/#strategy-pattern","title":"Strategy Pattern","text":"<p>Defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it.</p> <pre><code>// Strategy interface\ninterface PaymentStrategy {\n    void pay(int amount);\n}\n\n// Concrete Strategies\nclass CreditCardStrategy implements PaymentStrategy {\n    private String name;\n    private String cardNumber;\n    private String cvv;\n    private String dateOfExpiry;\n\n    public CreditCardStrategy(String name, String cardNumber, String cvv, String dateOfExpiry) {\n        this.name = name;\n        this.cardNumber = cardNumber;\n        this.cvv = cvv;\n        this.dateOfExpiry = dateOfExpiry;\n    }\n\n    @Override\n    public void pay(int amount) {\n        System.out.println(amount + \" paid with credit card\");\n    }\n}\n\nclass PayPalStrategy implements PaymentStrategy {\n    private String emailId;\n    private String password;\n\n    public PayPalStrategy(String emailId, String password) {\n        this.emailId = emailId;\n        this.password = password;\n    }\n\n    @Override\n    public void pay(int amount) {\n        System.out.println(amount + \" paid using PayPal\");\n    }\n}\n\n// Context\nclass ShoppingCart {\n    private List&lt;Item&gt; items;\n\n    public ShoppingCart() {\n        this.items = new ArrayList&lt;Item&gt;();\n    }\n\n    public void addItem(Item item) {\n        this.items.add(item);\n    }\n\n    public int calculateTotal() {\n        int sum = 0;\n        for (Item item : items) {\n            sum += item.getPrice();\n        }\n        return sum;\n    }\n\n    public void pay(PaymentStrategy paymentStrategy) {\n        int amount = calculateTotal();\n        paymentStrategy.pay(amount);\n    }\n}\n</code></pre>"},{"location":"week-10/ce204-week-10/#anti-patterns","title":"Anti-Patterns","text":"<p>Anti-patterns are common solutions to recurring problems that tend to be ineffective and risky.</p>"},{"location":"week-10/ce204-week-10/#common-anti-patterns","title":"Common Anti-Patterns","text":"<ul> <li>God Object: A class that knows or does too much</li> <li>Spaghetti Code: Unstructured and difficult-to-maintain code</li> <li>Singleton Abuse: Overusing the Singleton pattern</li> <li>Golden Hammer: Using a familiar solution regardless of the problem</li> <li>Reinventing the Wheel: Creating custom solutions when standard ones exist</li> <li>Premature Optimization: Optimizing before identifying bottlenecks</li> <li>Copy-Paste Programming: Duplicating code instead of reusing it</li> </ul>"},{"location":"week-10/ce204-week-10/#design-pattern-selection-criteria","title":"Design Pattern Selection Criteria","text":"<p>When choosing a design pattern, consider:</p> <ol> <li>Problem Context: What specific problem are you trying to solve?</li> <li>Pattern Consequences: What are the trade-offs of using this pattern?</li> <li>Alternative Patterns: Are there other patterns that could address this problem?</li> <li>Implementation Language: Some patterns are more natural in certain languages</li> <li>Team Familiarity: Is your team familiar with the pattern?</li> <li>Maintainability: Will the pattern make the code more maintainable?</li> <li>Performance Concerns: Will the pattern impact performance?</li> </ol>"},{"location":"week-10/ce204-week-10/#applying-patterns-in-real-projects","title":"Applying Patterns in Real Projects","text":""},{"location":"week-10/ce204-week-10/#best-practices","title":"Best Practices","text":"<ul> <li>Don't force design patterns where they don't fit</li> <li>Start simple, refactor to patterns when needed</li> <li>Document why you chose a particular pattern</li> <li>Consider the entire system, not just individual components</li> <li>Pattern combinations can be more powerful than individual patterns</li> <li>Test pattern implementations thoroughly</li> </ul>"},{"location":"week-10/ce204-week-10/#secure-design-patterns","title":"Secure Design Patterns","text":"<p>Security should be a fundamental consideration in software design.</p> <p>Key security design patterns include:</p> <ul> <li>Secure Factory: Centralize object creation with security checks</li> <li>Secure Proxy: Control access to sensitive objects</li> <li>Secure Singleton: Ensure secure access to single instances</li> <li>Intercepting Validator: Validate all input through central validators</li> </ul> <p>More security controls: https://www.cisecurity.org/controls/cis-controls-list</p>"},{"location":"week-10/ce204-week-10/#additional-resources","title":"Additional Resources","text":"<p>First Design Pattern book in architecture: https://www.amazon.com/Pattern-Language-Buildings-Construction-Environmental/dp/0195019199</p> <p>Gang of Four (GoF) Design Patterns Book: https://www.amazon.com/gp/product/0201633612/</p> <p>SOLID Principles Resources: - https://www.monterail.com/blog/solid-principles-cheatsheet-printable - https://www.monterail.com/hubfs/PDF%20content/SOLID_cheatsheet.pdf - https://www.freecodecamp.org/news/solid-principles-explained-in-plain-english/</p> <p>Liskov Substitution Principle Examples: https://code-examples.net/en/q/a476f2</p> <p>Dependency Injection Resources: - http://www.dotnet-stuff.com/tutorials/dependency-%C4%B1njection/understanding-and-implementing-inversion-of-control-container-ioc-container-using-csharp - https://stackify.com/dependency-injection/ - https://www.tutorialsteacher.com/ioc/inversion-of-control - https://www.wikiwand.com/en/Dependency_injection - https://www.baeldung.com/inversion-control-and-dependency-injection-in-spring</p>"},{"location":"week-10/ce204-week-10/#next-week","title":"Next Week","text":"<p>We'll continue with UML and UMPLE, focusing on modeling our designs and generating code from models.</p>"},{"location":"week-11/ce204-week-11-en/","title":"CEN206 Object-Oriented Programming","text":""},{"location":"week-11/ce204-week-11-en/#cen206-object-oriented-programming","title":"CEN206 Object-Oriented Programming","text":""},{"location":"week-11/ce204-week-11-en/#week-11-advanced-design-patterns-practical-applications","title":"Week-11 (Advanced Design Patterns &amp; Practical Applications)","text":""},{"location":"week-11/ce204-week-11-en/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC-PDF, DOC-DOCX, SLIDE, PPTX</p>"},{"location":"week-11/ce204-week-11-en/#advanced-design-patterns-practical-applications","title":"Advanced Design Patterns &amp; Practical Applications","text":""},{"location":"week-11/ce204-week-11-en/#outline","title":"Outline","text":"<ul> <li>Additional Design Patterns</li> <li>Composite Pattern</li> <li>Fa\u00e7ade Pattern</li> <li>Proxy Pattern</li> <li>Command Pattern</li> <li>Template Method Pattern</li> <li>Real-world Applications of Design Patterns</li> <li>Combining Multiple Patterns</li> <li>Java Framework Case Studies</li> </ul>"},{"location":"week-11/ce204-week-11-en/#composite-pattern","title":"Composite Pattern","text":"<p>Allows you to compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.</p> <pre><code>// Component\ninterface Component {\n    void operation();\n}\n\n// Leaf\nclass Leaf implements Component {\n    private String name;\n\n    public Leaf(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public void operation() {\n        System.out.println(\"Leaf \" + name + \" operation\");\n    }\n}\n\n// Composite\nclass Composite implements Component {\n    private List&lt;Component&gt; children = new ArrayList&lt;&gt;();\n    private String name;\n\n    public Composite(String name) {\n        this.name = name;\n    }\n\n    public void add(Component component) {\n        children.add(component);\n    }\n\n    public void remove(Component component) {\n        children.remove(component);\n    }\n\n    @Override\n    public void operation() {\n        System.out.println(\"Composite \" + name + \" operation\");\n        for (Component component : children) {\n            component.operation();\n        }\n    }\n}\n</code></pre>"},{"location":"week-11/ce204-week-11-en/#when-to-use-composite-pattern","title":"When to Use Composite Pattern","text":""},{"location":"week-11/ce204-week-11-en/#application-scenarios","title":"Application Scenarios","text":"<ul> <li>File and folder structures</li> <li>GUI hierarchies and containers</li> <li>Organization hierarchies</li> <li>Menu systems with submenus</li> <li>Any tree-like structure where individual elements and groups need the same interface</li> </ul>"},{"location":"week-11/ce204-week-11-en/#implementation-considerations","title":"Implementation Considerations","text":"<ul> <li>Define a common interface for both leaf and composite elements</li> <li>Consider whether to include parent references</li> <li>Choose between transparency and safety approaches</li> <li>Determine how to handle child management operations </li> </ul>"},{"location":"week-11/ce204-week-11-en/#facade-pattern","title":"Fa\u00e7ade Pattern","text":"<p>Provides a unified interface to a set of interfaces in a subsystem. Fa\u00e7ade defines a higher-level interface that makes the subsystem easier to use.</p> <pre><code>// Complex subsystem classes\nclass CPU {\n    public void freeze() { System.out.println(\"CPU: Freezing\"); }\n    public void jump(long position) { System.out.println(\"CPU: Jumping to \" + position); }\n    public void execute() { System.out.println(\"CPU: Executing\"); }\n}\n\nclass Memory {\n    public void load(long position, byte[] data) {\n        System.out.println(\"Memory: Loading from \" + position);\n    }\n}\n\nclass HardDrive {\n    public byte[] read(long lba, int size) {\n        System.out.println(\"HardDrive: Reading from \" + lba + \" with size \" + size);\n        return new byte[size];\n    }\n}\n\n// Fa\u00e7ade\nclass ComputerFacade {\n    private CPU cpu;\n    private Memory memory;\n    private HardDrive hardDrive;\n\n    public ComputerFacade() {\n        this.cpu = new CPU();\n        this.memory = new Memory();\n        this.hardDrive = new HardDrive();\n    }\n\n    public void start() {\n        cpu.freeze();\n        memory.load(0, hardDrive.read(0, 1024));\n        cpu.jump(0);\n        cpu.execute();\n    }\n}\n</code></pre>"},{"location":"week-11/ce204-week-11-en/#when-to-use-facade-pattern","title":"When to Use Fa\u00e7ade Pattern","text":""},{"location":"week-11/ce204-week-11-en/#application-scenarios_1","title":"Application Scenarios","text":"<ul> <li>Simplifying complex subsystems</li> <li>Creating a cleaner API for client code</li> <li>Decoupling client code from subsystem implementation details</li> <li>When a system is being refactored and APIs need to evolve</li> <li>Creating entry points to different layers of your application</li> </ul>"},{"location":"week-11/ce204-week-11-en/#implementation-considerations_1","title":"Implementation Considerations","text":"<ul> <li>The fa\u00e7ade should be a lightweight wrapper</li> <li>Multiple fa\u00e7ades can be created for the same subsystem</li> <li>Consider making subsystem classes package-private when possible</li> <li>Don't overload the fa\u00e7ade with too many responsibilities</li> </ul>"},{"location":"week-11/ce204-week-11-en/#proxy-pattern","title":"Proxy Pattern","text":"<p>Provides a surrogate or placeholder for another object to control access to it.</p> <pre><code>// Subject interface\ninterface Image {\n    void display();\n}\n\n// Real Subject\nclass RealImage implements Image {\n    private String filename;\n\n    public RealImage(String filename) {\n        this.filename = filename;\n        loadFromDisk();\n    }\n\n    private void loadFromDisk() {\n        System.out.println(\"Loading \" + filename);\n    }\n\n    @Override\n    public void display() {\n        System.out.println(\"Displaying \" + filename);\n    }\n}\n\n// Proxy\nclass ProxyImage implements Image {\n    private String filename;\n    private RealImage realImage;\n\n    public ProxyImage(String filename) {\n        this.filename = filename;\n    }\n\n    @Override\n    public void display() {\n        if (realImage == null) {\n            realImage = new RealImage(filename);\n        }\n        realImage.display();\n    }\n}\n</code></pre>"},{"location":"week-11/ce204-week-11-en/#types-of-proxy-pattern","title":"Types of Proxy Pattern","text":""},{"location":"week-11/ce204-week-11-en/#virtual-proxy","title":"Virtual Proxy","text":"<ul> <li>Creates expensive objects on demand (lazy loading)</li> <li>Example: Image loading in a document</li> </ul>"},{"location":"week-11/ce204-week-11-en/#protection-proxy","title":"Protection Proxy","text":"<ul> <li>Controls access to the original object</li> <li>Example: Access control systems</li> </ul>"},{"location":"week-11/ce204-week-11-en/#remote-proxy","title":"Remote Proxy","text":"<ul> <li>Represents an object located in a different address space</li> <li>Example: RMI (Remote Method Invocation) in Java</li> </ul>"},{"location":"week-11/ce204-week-11-en/#smart-proxy","title":"Smart Proxy","text":"<ul> <li>Performs additional actions when the object is accessed</li> <li>Example: Reference counting, logging</li> </ul>"},{"location":"week-11/ce204-week-11-en/#command-pattern","title":"Command Pattern","text":"<p>Encapsulates a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.</p> <pre><code>// Command interface\ninterface Command {\n    void execute();\n}\n\n// Receiver\nclass Light {\n    public void turnOn() {\n        System.out.println(\"Light is on\");\n    }\n\n    public void turnOff() {\n        System.out.println(\"Light is off\");\n    }\n}\n\n// Concrete Commands\nclass LightOnCommand implements Command {\n    private Light light;\n\n    public LightOnCommand(Light light) {\n        this.light = light;\n    }\n\n    @Override\n    public void execute() {\n        light.turnOn();\n    }\n}\n\nclass LightOffCommand implements Command {\n    private Light light;\n\n    public LightOffCommand(Light light) {\n        this.light = light;\n    }\n\n    @Override\n    public void execute() {\n        light.turnOff();\n    }\n}\n</code></pre> <pre><code>// Invoker\nclass RemoteControl {\n    private Command command;\n\n    public void setCommand(Command command) {\n        this.command = command;\n    }\n\n    public void pressButton() {\n        command.execute();\n    }\n}\n\n// Client code\n// Light light = new Light();\n// Command lightOn = new LightOnCommand(light);\n// Command lightOff = new LightOffCommand(light);\n// RemoteControl remote = new RemoteControl();\n// remote.setCommand(lightOn);\n// remote.pressButton();\n// remote.setCommand(lightOff);\n// remote.pressButton();\n</code></pre>"},{"location":"week-11/ce204-week-11-en/#command-pattern-with-undo-functionality","title":"Command Pattern with Undo Functionality","text":"<pre><code>interface Command {\n    void execute();\n    void undo();\n}\n\nclass LightOnCommand implements Command {\n    private Light light;\n\n    public LightOnCommand(Light light) {\n        this.light = light;\n    }\n\n    @Override\n    public void execute() {\n        light.turnOn();\n    }\n\n    @Override\n    public void undo() {\n        light.turnOff();\n    }\n}\n\nclass RemoteControlWithUndo {\n    private Command command;\n    private Stack&lt;Command&gt; history = new Stack&lt;&gt;();\n\n    public void setCommand(Command command) {\n        this.command = command;\n    }\n\n    public void pressButton() {\n        command.execute();\n        history.push(command);\n    }\n\n    public void pressUndo() {\n        if (!history.isEmpty()) {\n            Command lastCommand = history.pop();\n            lastCommand.undo();\n        }\n    }\n}\n</code></pre>"},{"location":"week-11/ce204-week-11-en/#template-method-pattern","title":"Template Method Pattern","text":"<p>Defines the skeleton of an algorithm in a method, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.</p> <pre><code>// Abstract class with template method\nabstract class DocumentProcessor {\n    // Template method\n    public final void processDocument() {\n        openDocument();\n        content = readContent();\n        processContent(content);\n        saveDocument();\n        closeDocument();\n    }\n\n    // Methods that will be implemented by subclasses\n    protected abstract String readContent();\n    protected abstract void processContent(String content);\n\n    // Common operations with default implementations\n    protected void openDocument() {\n        System.out.println(\"Opening document\");\n    }\n\n    protected void saveDocument() {\n        System.out.println(\"Saving document\");\n    }\n\n    protected void closeDocument() {\n        System.out.println(\"Closing document\");\n    }\n}\n</code></pre> <pre><code>// Concrete implementation\nclass PDFProcessor extends DocumentProcessor {\n    @Override\n    protected String readContent() {\n        return \"PDF content\";\n    }\n\n    @Override\n    protected void processContent(String content) {\n        System.out.println(\"Processing PDF content: \" + content);\n    }\n}\n\nclass WordProcessor extends DocumentProcessor {\n    @Override\n    protected String readContent() {\n        return \"Word document content\";\n    }\n\n    @Override\n    protected void processContent(String content) {\n        System.out.println(\"Processing Word content: \" + content);\n    }\n\n    @Override\n    protected void saveDocument() {\n        System.out.println(\"Saving Word document with special format\");\n    }\n}\n</code></pre>"},{"location":"week-11/ce204-week-11-en/#real-world-applications-of-design-patterns","title":"Real-world Applications of Design Patterns","text":""},{"location":"week-11/ce204-week-11-en/#java-collections-framework","title":"Java Collections Framework","text":"<ul> <li>Iterator Pattern: <code>java.util.Iterator</code></li> <li>Composite Pattern: Component hierarchies in Swing</li> <li>Strategy Pattern: <code>java.util.Comparator</code></li> <li>Adapter Pattern: <code>java.io.InputStreamReader</code>, <code>OutputStreamWriter</code></li> </ul>"},{"location":"week-11/ce204-week-11-en/#spring-framework","title":"Spring Framework","text":"<ul> <li>Factory Pattern: <code>BeanFactory</code></li> <li>Singleton Pattern: Default bean scope</li> <li>Proxy Pattern: AOP implementation</li> <li>Template Method Pattern: <code>JdbcTemplate</code>, <code>HibernateTemplate</code></li> </ul>"},{"location":"week-11/ce204-week-11-en/#android-development","title":"Android Development","text":"<ul> <li>Builder Pattern: <code>AlertDialog.Builder</code></li> <li>Observer Pattern: Event listeners</li> <li>Command Pattern: Click handlers</li> <li>Strategy Pattern: Layout managers</li> </ul>"},{"location":"week-11/ce204-week-11-en/#combining-multiple-patterns","title":"Combining Multiple Patterns","text":""},{"location":"week-11/ce204-week-11-en/#model-view-controller-mvc","title":"Model-View-Controller (MVC)","text":"<ul> <li>Observer Pattern: Views observe the Model</li> <li>Composite Pattern: Views can contain sub-views</li> <li>Strategy Pattern: Different controllers implement different strategies</li> <li>Factory Pattern: Often used to create views or controllers</li> </ul>"},{"location":"week-11/ce204-week-11-en/#example-e-commerce-system","title":"Example: E-commerce System","text":"<ul> <li>Factory/Builder: Create product objects</li> <li>Decorator: Add features to products (warranty, gift wrapping)</li> <li>Observer: Notify users about price changes</li> <li>Strategy: Different payment methods</li> <li>Command: Order processing pipeline</li> <li>Proxy: Lazy loading of product images</li> </ul>"},{"location":"week-11/ce204-week-11-en/#case-study-java-swing-framework","title":"Case Study: Java Swing Framework","text":""},{"location":"week-11/ce204-week-11-en/#pattern-usage-in-swing","title":"Pattern Usage in Swing","text":"<ul> <li>Composite: <code>JComponent</code> hierarchy</li> <li>Decorator: Visual decorations like borders</li> <li>Observer: Event listeners</li> <li>Strategy: Layout managers (BorderLayout, FlowLayout, etc.)</li> <li>Factory Method: UI element creation</li> </ul>"},{"location":"week-11/ce204-week-11-en/#code-example-observer-pattern-in-swing","title":"Code Example: Observer Pattern in Swing","text":"<pre><code>// Using the Observer pattern via ActionListener\nJButton button = new JButton(\"Click Me\");\nbutton.addActionListener(new ActionListener() {\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        System.out.println(\"Button clicked!\");\n    }\n});\n\n// Using the Composite pattern\nJPanel panel = new JPanel();\npanel.add(new JButton(\"Button 1\"));\npanel.add(new JButton(\"Button 2\"));\nJFrame frame = new JFrame();\nframe.add(panel);\n</code></pre>"},{"location":"week-11/ce204-week-11-en/#case-study-java-stream-api","title":"Case Study: Java Stream API","text":""},{"location":"week-11/ce204-week-11-en/#pattern-usage-in-streams","title":"Pattern Usage in Streams","text":"<ul> <li>Builder Pattern: Stream creation and configuration</li> <li>Iterator Pattern: Underlying traversal mechanism</li> <li>Strategy Pattern: Different operations (map, filter, etc.)</li> <li>Decorator Pattern: Chaining operations</li> </ul>"},{"location":"week-11/ce204-week-11-en/#code-example","title":"Code Example","text":"<pre><code>List&lt;String&gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\", \"David\");\n\n// Using multiple patterns together\nnames.stream()\n     .filter(name -&gt; name.length() &gt; 4)  // Strategy pattern\n     .map(String::toUpperCase)          // Another strategy\n     .sorted()                          // Yet another strategy\n     .forEach(System.out::println);     // Terminal operation\n</code></pre>"},{"location":"week-11/ce204-week-11-en/#exercise-implementing-a-mini-document-management-system","title":"Exercise: Implementing a Mini Document Management System","text":""},{"location":"week-11/ce204-week-11-en/#requirements","title":"Requirements","text":"<ol> <li>Create a system that can handle different document types (PDF, Word, Text)</li> <li>Support operations like opening, reading, editing, and saving documents</li> <li>Implement access control for different user types</li> <li>Enable document composition (documents can contain other documents)</li> <li>Support undo/redo functionality for edits</li> </ol>"},{"location":"week-11/ce204-week-11-en/#patterns-to-apply","title":"Patterns to Apply","text":"<ul> <li>Factory: For document creation</li> <li>Strategy: For different document processors</li> <li>Composite: For document composition</li> <li>Command: For operations with undo/redo</li> <li>Proxy: For access control</li> </ul>"},{"location":"week-11/ce204-week-11-en/#exercise-solution-outline","title":"Exercise Solution Outline","text":"<pre><code>// Factory pattern for document creation\nclass DocumentFactory {\n    public Document createDocument(String type, String name) {\n        switch (type.toLowerCase()) {\n            case \"pdf\": return new PDFDocument(name);\n            case \"word\": return new WordDocument(name);\n            case \"text\": return new TextDocument(name);\n            default: throw new IllegalArgumentException(\"Unknown document type\");\n        }\n    }\n}\n\n// Composite pattern for document structure\ninterface Document {\n    void open();\n    void save();\n    String getName();\n}\n\nclass CompositeDocument implements Document {\n    private String name;\n    private List&lt;Document&gt; children = new ArrayList&lt;&gt;();\n\n    // Implementation details...\n}\n</code></pre>"},{"location":"week-11/ce204-week-11-en/#references","title":"References","text":"<ul> <li>Freeman, E., Robson, E., Bates, B., Sierra, K. (2004). Head First Design Patterns. O'Reilly Media.</li> <li>Gamma, E., Helm, R., Johnson, R., Vlissides, J. (1994). Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley.</li> <li>Bloch, J. (2018). Effective Java (3<sup>rd</sup> Edition). Addison-Wesley.</li> <li>Martin, R. C. (2002). Agile Software Development, Principles, Patterns, and Practices. Pearson.</li> <li>Refactoring Guru: https://refactoring.guru/design-patterns</li> <li>Java Design Patterns: https://java-design-patterns.com/</li> <li>Spring Framework Reference: https://docs.spring.io/spring-framework/reference/</li> </ul>"},{"location":"week-11/ce204-week-11-en/#next-week","title":"Next Week","text":"<p>We'll explore UML (Unified Modeling Language) and UMPLE, focusing on modeling object-oriented systems and automatically generating code from these models. </p>"},{"location":"week-11/ce204-week-11-tr/","title":"CEN206 Nesne Y\u00f6nelimli Programlama","text":""},{"location":"week-11/ce204-week-11-tr/#cen206-nesne-yonelimli-programlama","title":"CEN206 Nesne Y\u00f6nelimli Programlama","text":""},{"location":"week-11/ce204-week-11-tr/#hafta-11-gelismis-tasarm-desenleri-pratik-uygulamalar","title":"Hafta-11 (Geli\u015fmi\u015f Tasar\u0131m Desenleri &amp; Pratik Uygulamalar)","text":""},{"location":"week-11/ce204-week-11-tr/#bahar-donemi-2024-2025","title":"Bahar D\u00f6nemi, 2024-2025","text":"<p>\u0130ndir DOC-PDF, DOC-DOCX, SLIDE, PPTX</p>"},{"location":"week-11/ce204-week-11-tr/#gelismis-tasarm-desenleri-pratik-uygulamalar","title":"Geli\u015fmi\u015f Tasar\u0131m Desenleri &amp; Pratik Uygulamalar","text":""},{"location":"week-11/ce204-week-11-tr/#ana-hatlar","title":"Ana Hatlar","text":"<ul> <li>Ek Tasar\u0131m Desenleri</li> <li>Kompozit (Composite) Deseni</li> <li>Fa\u00e7ade (Cephe) Deseni</li> <li>Proxy (Vekil) Deseni</li> <li>Command (Komut) Deseni</li> <li>Template Method (\u015eablon Metot) Deseni</li> <li>Tasar\u0131m Desenlerinin Ger\u00e7ek D\u00fcnya Uygulamalar\u0131</li> <li>Birden Fazla Desenin Birle\u015ftirilmesi</li> <li>Java Framework Vaka \u00c7al\u0131\u015fmalar\u0131</li> </ul>"},{"location":"week-11/ce204-week-11-tr/#kompozit-composite-deseni","title":"Kompozit (Composite) Deseni","text":"<p>Nesneleri a\u011fa\u00e7 yap\u0131lar\u0131nda b\u00fct\u00fcn-par\u00e7a hiyerar\u015filerini temsil edecek \u015fekilde d\u00fczenlemenize olanak tan\u0131r. Kompozit, m\u00fc\u015fterilerin tek tek nesneleri ve nesne kompozisyonlar\u0131n\u0131 ayn\u0131 \u015fekilde ele almas\u0131n\u0131 sa\u011flar.</p> <pre><code>// Bile\u015fen (Component)\ninterface Component {\n    void operation();\n}\n\n// Yaprak (Leaf)\nclass Leaf implements Component {\n    private String name;\n\n    public Leaf(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public void operation() {\n        System.out.println(\"Yaprak \" + name + \" i\u015flemi\");\n    }\n}\n\n// Kompozit (Composite)\nclass Composite implements Component {\n    private List&lt;Component&gt; children = new ArrayList&lt;&gt;();\n    private String name;\n\n    public Composite(String name) {\n        this.name = name;\n    }\n\n    public void add(Component component) {\n        children.add(component);\n    }\n\n    public void remove(Component component) {\n        children.remove(component);\n    }\n\n    @Override\n    public void operation() {\n        System.out.println(\"Kompozit \" + name + \" i\u015flemi\");\n        for (Component component : children) {\n            component.operation();\n        }\n    }\n}\n</code></pre>"},{"location":"week-11/ce204-week-11-tr/#kompozit-deseninin-kullanm-alanlar","title":"Kompozit Deseninin Kullan\u0131m Alanlar\u0131","text":""},{"location":"week-11/ce204-week-11-tr/#uygulama-senaryolar","title":"Uygulama Senaryolar\u0131","text":"<ul> <li>Dosya ve klas\u00f6r yap\u0131lar\u0131</li> <li>GUI hiyerar\u015fileri ve konteynerlar</li> <li>Organizasyon hiyerar\u015fileri</li> <li>Alt men\u00fclerle men\u00fc sistemleri</li> <li>Bireysel \u00f6\u011felerin ve gruplar\u0131n ayn\u0131 aray\u00fcze ihtiya\u00e7 duydu\u011fu herhangi bir a\u011fa\u00e7 benzeri yap\u0131</li> </ul>"},{"location":"week-11/ce204-week-11-tr/#uygulama-hususlar","title":"Uygulama Hususlar\u0131","text":"<ul> <li>Hem yaprak hem de kompozit \u00f6\u011feler i\u00e7in ortak bir aray\u00fcz tan\u0131mlay\u0131n</li> <li>Ebeveyn referanslar\u0131 dahil edilip edilmeyece\u011fini d\u00fc\u015f\u00fcn\u00fcn</li> <li>\u015eeffafl\u0131k ve g\u00fcvenlik yakla\u015f\u0131mlar\u0131 aras\u0131nda se\u00e7im yap\u0131n</li> <li>\u00c7ocuk y\u00f6netimi i\u015flemlerinin nas\u0131l ele al\u0131naca\u011f\u0131n\u0131 belirleyin</li> </ul>"},{"location":"week-11/ce204-week-11-tr/#facade-cephe-deseni","title":"Fa\u00e7ade (Cephe) Deseni","text":"<p>Bir alt sistemdeki aray\u00fczler grubuna birle\u015fik bir aray\u00fcz sa\u011flar. Fa\u00e7ade, alt sistemi kullanmay\u0131 kolayla\u015ft\u0131ran daha \u00fcst d\u00fczey bir aray\u00fcz tan\u0131mlar.</p> <pre><code>// Karma\u015f\u0131k alt sistem s\u0131n\u0131flar\u0131\nclass CPU {\n    public void freeze() { System.out.println(\"CPU: Dondurma\"); }\n    public void jump(long position) { System.out.println(\"CPU: \" + position + \" konumuna atlama\"); }\n    public void execute() { System.out.println(\"CPU: Y\u00fcr\u00fctme\"); }\n}\n\nclass Memory {\n    public void load(long position, byte[] data) {\n        System.out.println(\"Bellek: \" + position + \" konumundan y\u00fckleme\");\n    }\n}\n\nclass HardDrive {\n    public byte[] read(long lba, int size) {\n        System.out.println(\"Sabit Disk: \" + lba + \" LBA'dan \" + size + \" boyutunda okuma\");\n        return new byte[size];\n    }\n}\n\n// Fa\u00e7ade (Cephe)\nclass ComputerFacade {\n    private CPU cpu;\n    private Memory memory;\n    private HardDrive hardDrive;\n\n    public ComputerFacade() {\n        this.cpu = new CPU();\n        this.memory = new Memory();\n        this.hardDrive = new HardDrive();\n    }\n\n    public void start() {\n        cpu.freeze();\n        memory.load(0, hardDrive.read(0, 1024));\n        cpu.jump(0);\n        cpu.execute();\n    }\n}\n</code></pre>"},{"location":"week-11/ce204-week-11-tr/#facade-deseninin-kullanm-alanlar","title":"Fa\u00e7ade Deseninin Kullan\u0131m Alanlar\u0131","text":""},{"location":"week-11/ce204-week-11-tr/#uygulama-senaryolar_1","title":"Uygulama Senaryolar\u0131","text":"<ul> <li>Karma\u015f\u0131k alt sistemleri basitle\u015ftirme</li> <li>\u0130stemci kodu i\u00e7in daha temiz bir API olu\u015fturma</li> <li>\u0130stemci kodunu alt sistem uygulama detaylar\u0131ndan ay\u0131rma</li> <li>Bir sistem yeniden d\u00fczenlendi\u011finde ve API'lerin geli\u015fmesi gerekti\u011finde</li> <li>Uygulaman\u0131z\u0131n farkl\u0131 katmanlar\u0131na giri\u015f noktalar\u0131 olu\u015fturma</li> </ul>"},{"location":"week-11/ce204-week-11-tr/#uygulama-hususlar_1","title":"Uygulama Hususlar\u0131","text":"<ul> <li>Fa\u00e7ade, hafif bir sarmalay\u0131c\u0131 olmal\u0131d\u0131r</li> <li>Ayn\u0131 alt sistem i\u00e7in birden fazla fa\u00e7ade olu\u015fturulabilir</li> <li>M\u00fcmk\u00fcn oldu\u011funda alt sistem s\u0131n\u0131flar\u0131n\u0131 paket-\u00f6zel (package-private) yapmay\u0131 d\u00fc\u015f\u00fcn\u00fcn</li> <li>Fa\u00e7ade'\u0131 \u00e7ok fazla sorumlulukla a\u015f\u0131r\u0131 y\u00fcklemeyin</li> </ul>"},{"location":"week-11/ce204-week-11-tr/#proxy-vekil-deseni","title":"Proxy (Vekil) Deseni","text":"<p>Ba\u015fka bir nesneye eri\u015fimi kontrol etmek i\u00e7in bir vekil veya yer tutucu sa\u011flar.</p> <pre><code>// Konu (Subject) aray\u00fcz\u00fc\ninterface Image {\n    void display();\n}\n\n// Ger\u00e7ek Konu (Real Subject)\nclass RealImage implements Image {\n    private String filename;\n\n    public RealImage(String filename) {\n        this.filename = filename;\n        loadFromDisk();\n    }\n\n    private void loadFromDisk() {\n        System.out.println(filename + \" y\u00fckleniyor\");\n    }\n\n    @Override\n    public void display() {\n        System.out.println(filename + \" g\u00f6r\u00fcnt\u00fcleniyor\");\n    }\n}\n\n// Proxy (Vekil)\nclass ProxyImage implements Image {\n    private String filename;\n    private RealImage realImage;\n\n    public ProxyImage(String filename) {\n        this.filename = filename;\n    }\n\n    @Override\n    public void display() {\n        if (realImage == null) {\n            realImage = new RealImage(filename);\n        }\n        realImage.display();\n    }\n}\n</code></pre>"},{"location":"week-11/ce204-week-11-tr/#proxy-vekil-deseninin-turleri","title":"Proxy (Vekil) Deseninin T\u00fcrleri","text":""},{"location":"week-11/ce204-week-11-tr/#sanal-proxy-virtual-proxy","title":"Sanal Proxy (Virtual Proxy)","text":"<ul> <li>Pahal\u0131 nesneleri talep \u00fczerine olu\u015fturur (tembel y\u00fckleme)</li> <li>\u00d6rnek: Bir belgedeki g\u00f6r\u00fcnt\u00fc y\u00fckleme</li> </ul>"},{"location":"week-11/ce204-week-11-tr/#koruma-proxy-protection-proxy","title":"Koruma Proxy (Protection Proxy)","text":"<ul> <li>Orijinal nesneye eri\u015fimi kontrol eder</li> <li>\u00d6rnek: Eri\u015fim kontrol sistemleri</li> </ul>"},{"location":"week-11/ce204-week-11-tr/#uzak-proxy-remote-proxy","title":"Uzak Proxy (Remote Proxy)","text":"<ul> <li>Farkl\u0131 bir adres alan\u0131nda bulunan bir nesneyi temsil eder</li> <li>\u00d6rnek: Java'da RMI (Uzak Metot \u00c7a\u011fr\u0131s\u0131)</li> </ul>"},{"location":"week-11/ce204-week-11-tr/#akll-proxy-smart-proxy","title":"Ak\u0131ll\u0131 Proxy (Smart Proxy)","text":"<ul> <li>Nesneye eri\u015fildi\u011finde ek i\u015flemler ger\u00e7ekle\u015ftirir</li> <li>\u00d6rnek: Referans say\u0131m\u0131, g\u00fcnl\u00fck kayd\u0131 tutma</li> </ul>"},{"location":"week-11/ce204-week-11-tr/#command-komut-deseni","title":"Command (Komut) Deseni","text":"<p>Bir iste\u011fi nesne olarak kaps\u00fcller, b\u00f6ylece m\u00fc\u015fterileri farkl\u0131 isteklerle parametrele\u015ftirmenize, istekleri s\u0131raya koyman\u0131za veya g\u00fcnl\u00fc\u011fe kaydetmenize ve geri al\u0131nabilir i\u015flemleri desteklemenize olanak tan\u0131r.</p> <pre><code>// Komut aray\u00fcz\u00fc\ninterface Command {\n    void execute();\n}\n\n// Al\u0131c\u0131 (Receiver)\nclass Light {\n    public void turnOn() {\n        System.out.println(\"I\u015f\u0131k a\u00e7\u0131k\");\n    }\n\n    public void turnOff() {\n        System.out.println(\"I\u015f\u0131k kapal\u0131\");\n    }\n}\n\n// Somut Komutlar\nclass LightOnCommand implements Command {\n    private Light light;\n\n    public LightOnCommand(Light light) {\n        this.light = light;\n    }\n\n    @Override\n    public void execute() {\n        light.turnOn();\n    }\n}\n\nclass LightOffCommand implements Command {\n    private Light light;\n\n    public LightOffCommand(Light light) {\n        this.light = light;\n    }\n\n    @Override\n    public void execute() {\n        light.turnOff();\n    }\n}\n</code></pre> <pre><code>// \u00c7a\u011f\u0131r\u0131c\u0131 (Invoker)\nclass RemoteControl {\n    private Command command;\n\n    public void setCommand(Command command) {\n        this.command = command;\n    }\n\n    public void pressButton() {\n        command.execute();\n    }\n}\n\n// \u0130stemci kodu\n// Light light = new Light();\n// Command lightOn = new LightOnCommand(light);\n// Command lightOff = new LightOffCommand(light);\n// RemoteControl remote = new RemoteControl();\n// remote.setCommand(lightOn);\n// remote.pressButton();\n// remote.setCommand(lightOff);\n// remote.pressButton();\n</code></pre>"},{"location":"week-11/ce204-week-11-tr/#geri-alma-islevi-ile-komut-deseni","title":"Geri Alma \u0130\u015flevi ile Komut Deseni","text":"<pre><code>interface Command {\n    void execute();\n    void undo();\n}\n\nclass LightOnCommand implements Command {\n    private Light light;\n\n    public LightOnCommand(Light light) {\n        this.light = light;\n    }\n\n    @Override\n    public void execute() {\n        light.turnOn();\n    }\n\n    @Override\n    public void undo() {\n        light.turnOff();\n    }\n}\n\nclass RemoteControlWithUndo {\n    private Command command;\n    private Stack&lt;Command&gt; history = new Stack&lt;&gt;();\n\n    public void setCommand(Command command) {\n        this.command = command;\n    }\n\n    public void pressButton() {\n        command.execute();\n        history.push(command);\n    }\n\n    public void pressUndo() {\n        if (!history.isEmpty()) {\n            Command lastCommand = history.pop();\n            lastCommand.undo();\n        }\n    }\n}\n</code></pre>"},{"location":"week-11/ce204-week-11-tr/#template-method-sablon-metot-deseni","title":"Template Method (\u015eablon Metot) Deseni","text":"<p>Bir algoritman\u0131n iskeletini bir metotta tan\u0131mlar, baz\u0131 ad\u0131mlar\u0131 alt s\u0131n\u0131flara b\u0131rak\u0131r. \u015eablon Metot, alt s\u0131n\u0131flar\u0131n algoritman\u0131n yap\u0131s\u0131n\u0131 de\u011fi\u015ftirmeden algoritman\u0131n belirli ad\u0131mlar\u0131n\u0131 yeniden tan\u0131mlamas\u0131na olanak tan\u0131r.</p> <pre><code>// \u015eablon metot ile soyut s\u0131n\u0131f\nabstract class DocumentProcessor {\n    // \u015eablon metot\n    public final void processDocument() {\n        openDocument();\n        content = readContent();\n        processContent(content);\n        saveDocument();\n        closeDocument();\n    }\n\n    // Alt s\u0131n\u0131flar taraf\u0131ndan uygulanacak metotlar\n    protected abstract String readContent();\n    protected abstract void processContent(String content);\n\n    // Varsay\u0131lan uygulamalara sahip ortak i\u015flemler\n    protected void openDocument() {\n        System.out.println(\"Belge a\u00e7\u0131l\u0131yor\");\n    }\n\n    protected void saveDocument() {\n        System.out.println(\"Belge kaydediliyor\");\n    }\n\n    protected void closeDocument() {\n        System.out.println(\"Belge kapat\u0131l\u0131yor\");\n    }\n}\n</code></pre> <pre><code>// Somut uygulama\nclass PDFProcessor extends DocumentProcessor {\n    @Override\n    protected String readContent() {\n        return \"PDF i\u00e7eri\u011fi\";\n    }\n\n    @Override\n    protected void processContent(String content) {\n        System.out.println(\"PDF i\u00e7eri\u011fi i\u015fleniyor: \" + content);\n    }\n}\n\nclass WordProcessor extends DocumentProcessor {\n    @Override\n    protected String readContent() {\n        return \"Word belgesi i\u00e7eri\u011fi\";\n    }\n\n    @Override\n    protected void processContent(String content) {\n        System.out.println(\"Word i\u00e7eri\u011fi i\u015fleniyor: \" + content);\n    }\n\n    @Override\n    protected void saveDocument() {\n        System.out.println(\"Word belgesi \u00f6zel formatla kaydediliyor\");\n    }\n}\n</code></pre>"},{"location":"week-11/ce204-week-11-tr/#tasarm-desenlerinin-gercek-dunya-uygulamalar","title":"Tasar\u0131m Desenlerinin Ger\u00e7ek D\u00fcnya Uygulamalar\u0131","text":""},{"location":"week-11/ce204-week-11-tr/#java-collections-framework","title":"Java Collections Framework","text":"<ul> <li>Iterator (Yineleyici) Deseni: <code>java.util.Iterator</code></li> <li>Composite (Kompozit) Deseni: Swing'deki bile\u015fen hiyerar\u015fileri</li> <li>Strategy (Strateji) Deseni: <code>java.util.Comparator</code></li> <li>Adapter (Adapt\u00f6r) Deseni: <code>java.io.InputStreamReader</code>, <code>OutputStreamWriter</code></li> </ul>"},{"location":"week-11/ce204-week-11-tr/#spring-framework","title":"Spring Framework","text":"<ul> <li>Factory (Fabrika) Deseni: <code>BeanFactory</code></li> <li>Singleton (Tekil) Deseni: Varsay\u0131lan bean kapsam\u0131</li> <li>Proxy (Vekil) Deseni: AOP uygulamas\u0131</li> <li>Template Method (\u015eablon Metot) Deseni: <code>JdbcTemplate</code>, <code>HibernateTemplate</code></li> </ul>"},{"location":"week-11/ce204-week-11-tr/#android-gelistirme","title":"Android Geli\u015ftirme","text":"<ul> <li>Builder (\u0130n\u015faat\u00e7\u0131) Deseni: <code>AlertDialog.Builder</code></li> <li>Observer (G\u00f6zlemci) Deseni: Olay dinleyicileri</li> <li>Command (Komut) Deseni: T\u0131klama i\u015fleyicileri</li> <li>Strategy (Strateji) Deseni: D\u00fczen y\u00f6neticileri</li> </ul>"},{"location":"week-11/ce204-week-11-tr/#birden-fazla-desenin-birlestirilmesi","title":"Birden Fazla Desenin Birle\u015ftirilmesi","text":""},{"location":"week-11/ce204-week-11-tr/#model-gorunum-kontrolor-mvc","title":"Model-G\u00f6r\u00fcn\u00fcm-Kontrol\u00f6r (MVC)","text":"<ul> <li>Observer (G\u00f6zlemci) Deseni: G\u00f6r\u00fcn\u00fcmler Modeli g\u00f6zlemler</li> <li>Composite (Kompozit) Deseni: G\u00f6r\u00fcn\u00fcmler alt g\u00f6r\u00fcn\u00fcmler i\u00e7erebilir</li> <li>Strategy (Strateji) Deseni: Farkl\u0131 kontrol\u00f6rler farkl\u0131 stratejiler uygular</li> <li>Factory (Fabrika) Deseni: Genellikle g\u00f6r\u00fcn\u00fcm veya kontrol\u00f6r olu\u015fturmak i\u00e7in kullan\u0131l\u0131r</li> </ul>"},{"location":"week-11/ce204-week-11-tr/#ornek-e-ticaret-sistemi","title":"\u00d6rnek: E-ticaret Sistemi","text":"<ul> <li>Factory/Builder (Fabrika/\u0130n\u015faat\u00e7\u0131): \u00dcr\u00fcn nesneleri olu\u015ftur</li> <li>Decorator (Dekorat\u00f6r): \u00dcr\u00fcnlere \u00f6zellikler ekle (garanti, hediye paketi)</li> <li>Observer (G\u00f6zlemci): Kullan\u0131c\u0131lar\u0131 fiyat de\u011fi\u015fiklikleri hakk\u0131nda bilgilendir</li> <li>Strategy (Strateji): Farkl\u0131 \u00f6deme y\u00f6ntemleri</li> <li>Command (Komut): Sipari\u015f i\u015fleme d\u00fczeni</li> <li>Proxy (Vekil): \u00dcr\u00fcn g\u00f6rsellerinin tembel y\u00fcklenmesi</li> </ul>"},{"location":"week-11/ce204-week-11-tr/#vaka-calsmas-java-swing-framework","title":"Vaka \u00c7al\u0131\u015fmas\u0131: Java Swing Framework","text":""},{"location":"week-11/ce204-week-11-tr/#swingde-desen-kullanm","title":"Swing'de Desen Kullan\u0131m\u0131","text":"<ul> <li>Composite (Kompozit): <code>JComponent</code> hiyerar\u015fisi</li> <li>Decorator (Dekorat\u00f6r): Kenarl\u0131klar gibi g\u00f6rsel dekorasyonlar</li> <li>Observer (G\u00f6zlemci): Olay dinleyicileri</li> <li>Strategy (Strateji): D\u00fczen y\u00f6neticileri (BorderLayout, FlowLayout, vb.)</li> <li>Factory Method (Fabrika Metodu): UI \u00f6\u011fesi olu\u015fturma</li> </ul>"},{"location":"week-11/ce204-week-11-tr/#kod-ornegi-swingde-observer-gozlemci-deseni","title":"Kod \u00d6rne\u011fi: Swing'de Observer (G\u00f6zlemci) Deseni","text":"<pre><code>// ActionListener ile Observer deseni kullan\u0131m\u0131\nJButton button = new JButton(\"T\u0131kla Bana\");\nbutton.addActionListener(new ActionListener() {\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        System.out.println(\"D\u00fc\u011fmeye t\u0131kland\u0131!\");\n    }\n});\n\n// Composite deseni kullan\u0131m\u0131\nJPanel panel = new JPanel();\npanel.add(new JButton(\"D\u00fc\u011fme 1\"));\npanel.add(new JButton(\"D\u00fc\u011fme 2\"));\nJFrame frame = new JFrame();\nframe.add(panel);\n</code></pre>"},{"location":"week-11/ce204-week-11-tr/#vaka-calsmas-java-stream-api","title":"Vaka \u00c7al\u0131\u015fmas\u0131: Java Stream API","text":""},{"location":"week-11/ce204-week-11-tr/#streamlerde-desen-kullanm","title":"Stream'lerde Desen Kullan\u0131m\u0131","text":"<ul> <li>Builder (\u0130n\u015faat\u00e7\u0131) Deseni: Stream olu\u015fturma ve yap\u0131land\u0131rma</li> <li>Iterator (Yineleyici) Deseni: Altta yatan dola\u015fma mekanizmas\u0131</li> <li>Strategy (Strateji) Deseni: Farkl\u0131 i\u015flemler (map, filter, vb.)</li> <li>Decorator (Dekorat\u00f6r) Deseni: \u0130\u015flemleri zincirleme</li> </ul>"},{"location":"week-11/ce204-week-11-tr/#kod-ornegi","title":"Kod \u00d6rne\u011fi","text":"<pre><code>List&lt;String&gt; names = Arrays.asList(\"Ali\", \"Burak\", \"Canan\", \"Deniz\");\n\n// Birden \u00e7ok desenin birlikte kullan\u0131m\u0131\nnames.stream()\n     .filter(name -&gt; name.length() &gt; 4)  // Strateji deseni\n     .map(String::toUpperCase)          // Ba\u015fka bir strateji\n     .sorted()                          // Ba\u015fka bir strateji daha\n     .forEach(System.out::println);     // Terminal i\u015flemi\n</code></pre>"},{"location":"week-11/ce204-week-11-tr/#alstrma-mini-belge-yonetim-sistemi-uygulamas","title":"Al\u0131\u015ft\u0131rma: Mini Belge Y\u00f6netim Sistemi Uygulamas\u0131","text":""},{"location":"week-11/ce204-week-11-tr/#gereksinimler","title":"Gereksinimler","text":"<ol> <li>Farkl\u0131 belge t\u00fcrlerini (PDF, Word, Metin) i\u015fleyebilen bir sistem olu\u015fturun</li> <li>Belgeleri a\u00e7ma, okuma, d\u00fczenleme ve kaydetme gibi i\u015flemleri destekleyin</li> <li>Farkl\u0131 kullan\u0131c\u0131 t\u00fcrleri i\u00e7in eri\u015fim kontrol\u00fc uygulay\u0131n</li> <li>Belge kompozisyonunu etkinle\u015ftirin (belgeler di\u011fer belgeleri i\u00e7erebilir)</li> <li>D\u00fczenlemeler i\u00e7in geri alma/yineleme i\u015flevini destekleyin</li> </ol>"},{"location":"week-11/ce204-week-11-tr/#uygulanacak-desenler","title":"Uygulanacak Desenler","text":"<ul> <li>Factory (Fabrika): Belge olu\u015fturma i\u00e7in</li> <li>Strategy (Strateji): Farkl\u0131 belge i\u015fleyicileri i\u00e7in</li> <li>Composite (Kompozit): Belge kompozisyonu i\u00e7in</li> <li>Command (Komut): Geri alma/yineleme ile i\u015flemler i\u00e7in</li> <li>Proxy (Vekil): Eri\u015fim kontrol\u00fc i\u00e7in</li> </ul>"},{"location":"week-11/ce204-week-11-tr/#alstrma-cozum-taslag","title":"Al\u0131\u015ft\u0131rma \u00c7\u00f6z\u00fcm Tasla\u011f\u0131","text":"<pre><code>// Belge olu\u015fturma i\u00e7in Factory deseni\nclass DocumentFactory {\n    public Document createDocument(String type, String name) {\n        switch (type.toLowerCase()) {\n            case \"pdf\": return new PDFDocument(name);\n            case \"word\": return new WordDocument(name);\n            case \"text\": return new TextDocument(name);\n            default: throw new IllegalArgumentException(\"Bilinmeyen belge t\u00fcr\u00fc\");\n        }\n    }\n}\n\n// Belge yap\u0131s\u0131 i\u00e7in Composite deseni\ninterface Document {\n    void open();\n    void save();\n    String getName();\n}\n\nclass CompositeDocument implements Document {\n    private String name;\n    private List&lt;Document&gt; children = new ArrayList&lt;&gt;();\n\n    // Uygulama detaylar\u0131...\n}\n</code></pre>"},{"location":"week-11/ce204-week-11-tr/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Freeman, E., Robson, E., Bates, B., Sierra, K. (2004). Head First Design Patterns. O'Reilly Media.</li> <li>Gamma, E., Helm, R., Johnson, R., Vlissides, J. (1994). Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley.</li> <li>Bloch, J. (2018). Effective Java (3<sup>rd</sup> Edition). Addison-Wesley.</li> <li>Martin, R. C. (2002). Agile Software Development, Principles, Patterns, and Practices. Pearson.</li> <li>Refactoring Guru: https://refactoring.guru/design-patterns</li> <li>Java Design Patterns: https://java-design-patterns.com/</li> <li>Spring Framework Reference: https://docs.spring.io/spring-framework/reference/</li> </ul>"},{"location":"week-11/ce204-week-11-tr/#gelecek-hafta","title":"Gelecek Hafta","text":"<p>UML (Unified Modeling Language - Birle\u015fik Modelleme Dili) ve UMPLE'\u0131 ke\u015ffedece\u011fiz, nesne y\u00f6nelimli sistemleri modellemeye ve bu modellerden otomatik olarak kod \u00fcretmeye odaklanaca\u011f\u0131z. </p>"},{"location":"week-12/ce204-week-12-en/","title":"CEN206 Object-Oriented Programming","text":""},{"location":"week-12/ce204-week-12-en/#cen206-object-oriented-programming","title":"CEN206 Object-Oriented Programming","text":""},{"location":"week-12/ce204-week-12-en/#week-12-uml-umple-and-java-implementations","title":"Week-12 (UML, UMPLE and Java Implementations)","text":""},{"location":"week-12/ce204-week-12-en/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC-PDF, DOC-DOCX, SLIDE, PPTX</p>"},{"location":"week-12/ce204-week-12-en/#uml-umple-and-java-implementations","title":"UML, UMPLE and Java Implementations","text":""},{"location":"week-12/ce204-week-12-en/#outline","title":"Outline","text":"<ul> <li>Unified Modeling Language (UML)</li> <li>Overview and Purpose</li> <li>Main Diagram Types</li> <li>Class Diagrams in Detail</li> <li>Sequence Diagrams</li> <li>State Diagrams</li> <li>UMPLE</li> <li>Introduction to Model-Driven Development</li> <li>UMPLE Language Features</li> <li>Code Generation with UMPLE</li> <li>Implementing UML Designs in Java</li> <li>From UML to Code</li> <li>Best Practices</li> <li>Case Studies</li> </ul>"},{"location":"week-12/ce204-week-12-en/#what-is-uml","title":"What is UML?","text":"<ul> <li>**U**nified **M**odeling **L**anguage</li> <li>Standard visual modeling language for software systems</li> <li>Provides a common vocabulary for object-oriented modeling</li> <li>Developed by Grady Booch, James Rumbaugh, and Ivar Jacobson (\"Three Amigos\")</li> <li>Maintained by the Object Management Group (OMG)</li> <li>Current version: UML 2.5.1 (December 2017)</li> </ul>"},{"location":"week-12/ce204-week-12-en/#purpose-of-uml","title":"Purpose of UML","text":"<ul> <li>Visualize system architecture and design</li> <li>Specify system structure and behavior</li> <li>Document design decisions</li> <li>Facilitate communication among stakeholders</li> <li>Guide implementation</li> <li>Generate code (with tools like UMPLE)</li> </ul>"},{"location":"week-12/ce204-week-12-en/#types-of-uml-diagrams","title":"Types of UML Diagrams","text":""},{"location":"week-12/ce204-week-12-en/#structural-diagrams","title":"Structural Diagrams","text":"<ul> <li>Class diagram: Shows classes, interfaces, and their relationships</li> <li>Object diagram: Depicts instances of classes at a point in time</li> <li>Component diagram: Shows organization of physical components</li> <li>Deployment diagram: Illustrates hardware topology and software deployment</li> <li>Package diagram: Shows logical grouping of elements</li> <li>Composite structure diagram: Shows internal structure of a class</li> </ul>"},{"location":"week-12/ce204-week-12-en/#behavioral-diagrams","title":"Behavioral Diagrams","text":"<ul> <li>Use case diagram: Shows functionality from user perspective</li> <li>Activity diagram: Depicts workflow or business process</li> <li>State machine diagram: Shows states and transitions</li> <li>Sequence diagram: Shows interactions between objects over time</li> <li>Communication diagram: Shows interactions focusing on links between objects</li> <li>Timing diagram: Shows behavior of objects with time constraints</li> <li>Interaction overview diagram: Combines activity and sequence diagrams</li> </ul>"},{"location":"week-12/ce204-week-12-en/#class-diagrams","title":"Class Diagrams","text":"<p>The most commonly used UML diagram, showing:</p> <ul> <li>Classes and their properties</li> <li>Relationships between classes</li> <li>Interfaces and their implementations</li> <li>Inheritance hierarchies</li> <li>Associations, dependencies, and more</li> </ul> <p></p>"},{"location":"week-12/ce204-week-12-en/#class-notation","title":"Class Notation","text":""},{"location":"week-12/ce204-week-12-en/#class-relationships","title":"Class Relationships","text":""},{"location":"week-12/ce204-week-12-en/#association","title":"Association","text":"<ul> <li>Basic relationship between classes</li> <li>Usually indicated with a solid line</li> <li>Can include multiplicity (e.g., 1..*, 0..1)</li> <li>Can be unidirectional or bidirectional</li> </ul>"},{"location":"week-12/ce204-week-12-en/#aggregation","title":"Aggregation","text":"<ul> <li>\"Has-a\" relationship (weak ownership)</li> <li>Diamond at the owner's end</li> <li>Part can exist independently of the whole</li> </ul>"},{"location":"week-12/ce204-week-12-en/#composition","title":"Composition","text":"<ul> <li>Strong form of aggregation (strong ownership)</li> <li>Filled diamond at the owner's end</li> <li>Part's lifecycle depends on the whole</li> </ul>"},{"location":"week-12/ce204-week-12-en/#generalizationinheritance","title":"Generalization/Inheritance","text":"<ul> <li>\"Is-a\" relationship</li> <li>Triangle pointing to the parent class</li> <li>Child inherits properties and behavior</li> </ul>"},{"location":"week-12/ce204-week-12-en/#dependency","title":"Dependency","text":"<ul> <li>\"Uses\" relationship</li> <li>Dashed line with arrow</li> <li>Change in one class may affect the other</li> </ul>"},{"location":"week-12/ce204-week-12-en/#class-relationships-example","title":"Class Relationships Example","text":""},{"location":"week-12/ce204-week-12-en/#sequence-diagrams","title":"Sequence Diagrams","text":"<p>Show the sequence of interactions between objects over time:</p> <ul> <li>Objects and their lifelines</li> <li>Messages exchanged between objects</li> <li>Time ordering of interactions</li> <li>Creation and destruction of objects</li> <li>Activation and deactivation of objects</li> </ul> <p></p>"},{"location":"week-12/ce204-week-12-en/#sequence-diagram-elements","title":"Sequence Diagram Elements","text":""},{"location":"week-12/ce204-week-12-en/#lifeline","title":"Lifeline","text":"<ul> <li>Represents an object over time</li> <li>Vertical dashed line</li> <li>May include activation bars</li> </ul>"},{"location":"week-12/ce204-week-12-en/#message","title":"Message","text":"<ul> <li>Communication between lifelines</li> <li>Solid arrow for synchronous calls</li> <li>Dashed arrow for asynchronous calls</li> <li>Arrow with a filled arrowhead for message returns</li> </ul>"},{"location":"week-12/ce204-week-12-en/#combined-fragments","title":"Combined Fragments","text":"<ul> <li>Define conditional behavior</li> <li>Include alt (alternatives), opt (optional), loop, etc.</li> <li>Surround a group of messages</li> </ul>"},{"location":"week-12/ce204-week-12-en/#gates","title":"Gates","text":"<ul> <li>Connection points for messages</li> <li>Allow connections to messages outside the diagram</li> </ul>"},{"location":"week-12/ce204-week-12-en/#state-machine-diagrams","title":"State Machine Diagrams","text":"<p>Show how an object responds to events based on its current state:</p> <ul> <li>States</li> <li>Transitions between states</li> <li>Events triggering transitions</li> <li>Actions performed during transitions</li> <li>Entry/exit actions</li> <li>Nested states</li> </ul> <p></p>"},{"location":"week-12/ce204-week-12-en/#introduction-to-umple","title":"Introduction to UMPLE","text":"<ul> <li>Combines UML with programming languages</li> <li>Embeds UML directly in code</li> <li>Generates code from models</li> <li>Supports Java, C++, PHP, and Ruby</li> <li>Open-source and web-based tools available</li> </ul>"},{"location":"week-12/ce204-week-12-en/#umple-philosophy","title":"UMPLE Philosophy","text":"<ul> <li>Model-Code Duality: Models and code are the same artifact</li> <li>Incremental Adoption: Use as much or as little as needed</li> <li>Multiple Views: Generate different views of the same system</li> <li>Executable Models: Models can be directly executed</li> </ul>"},{"location":"week-12/ce204-week-12-en/#umple-tools","title":"UMPLE Tools","text":"<ul> <li>UmpleOnline: Web-based editor and code generator</li> <li>Umple Eclipse Plugin: Integrates with Eclipse IDE</li> <li>Command-line tools: For build automation</li> </ul>"},{"location":"week-12/ce204-week-12-en/#umple-basic-syntax","title":"UMPLE Basic Syntax","text":"<pre><code>class Student {\n  // Attributes with types\n  Integer id;\n  String name;\n\n  // Associations with multiplicities\n  * -- 1 University;\n\n  // State machine\n  status {\n    Active {\n      suspend -&gt; Suspended;\n    }\n    Suspended {\n      reinstate -&gt; Active;\n      expel -&gt; Expelled;\n    }\n    Expelled {}\n  }\n\n  // Methods (in target language)\n  void registerForCourse(Course c) {\n    // Implementation in target language\n  }\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-en/#umple-class-modeling","title":"UMPLE Class Modeling","text":""},{"location":"week-12/ce204-week-12-en/#attributes","title":"Attributes","text":"<pre><code>class Person {\n  String name;\n  Integer age;\n  Date birthDate;\n\n  // With default values\n  const String country = \"Canada\";\n  Boolean isActive = true;\n\n  // With constraints\n  [age &gt; 0]\n  [email ~= /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/]\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-en/#associations","title":"Associations","text":"<pre><code>// One-to-many association\nclass Professor {\n  // Professor can teach many courses\n  1 -- * Course;\n}\n\n// Many-to-many association\nclass Student {\n  // Students enroll in many courses\n  * -- * Course;\n}\n\n// Association with role names\nclass Course {\n  // Course has a main instructor and possibly TAs\n  * -- 1 Professor mainInstructor;\n  * -- * Professor teachingAssistants;\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-en/#umple-state-machines","title":"UMPLE State Machines","text":"<pre><code>class TrafficLight {\n  // State machine definition\n  status {\n    Red {\n      // Entry and exit actions\n      entry / { turnOnRedLight(); }\n      exit / { turnOffRedLight(); }\n\n      // Transition with guard and action\n      timer [timeInState() &gt; 60] -&gt; Green { resetTimer(); }\n    }\n\n    Yellow {\n      entry / { turnOnYellowLight(); }\n      exit / { turnOffYellowLight(); }\n      timer [timeInState() &gt; 5] -&gt; Red;\n    }\n\n    Green {\n      entry / { turnOnGreenLight(); }\n      exit / { turnOffGreenLight(); }\n      timer [timeInState() &gt; 45] -&gt; Yellow;\n    }\n  }\n\n  // Methods needed by the state machine\n  private void turnOnRedLight() { /* implementation */ }\n  private void turnOffRedLight() { /* implementation */ }\n  // Other methods...\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-en/#code-generation-with-umple","title":"Code Generation with UMPLE","text":""},{"location":"week-12/ce204-week-12-en/#java-code-generation","title":"Java Code Generation","text":"<pre><code>class Car {\n  String make;\n  String model;\n  Integer year;\n\n  * -- 1 Manufacturer;\n\n  status {\n    Stopped {\n      startEngine -&gt; Running;\n    }\n    Running {\n      stopEngine -&gt; Stopped;\n      accelerate -&gt; Accelerating;\n    }\n    Accelerating {\n      releaseGas -&gt; Running;\n      brake -&gt; Braking;\n    }\n    Braking {\n      stop -&gt; Stopped;\n      releaseBreak -&gt; Running;\n    }\n  }\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-en/#generated-java-code-partial","title":"Generated Java Code (Partial)","text":"<pre><code>public class Car {\n  //------------------------\n  // MEMBER VARIABLES\n  //------------------------\n  private String make;\n  private String model;\n  private Integer year;\n\n  // State machine variables\n  public enum Status { Stopped, Running, Accelerating, Braking }\n  private Status status;\n\n  //------------------------\n  // CONSTRUCTOR\n  //------------------------\n  public Car(String aMake, String aModel, Integer aYear, Manufacturer aManufacturer) {\n    make = aMake;\n    model = aModel;\n    year = aYear;\n    boolean didAddManufacturer = setManufacturer(aManufacturer);\n    if (!didAddManufacturer) {\n      throw new RuntimeException(\"Unable to create car due to manufacturer\");\n    }\n    setStatus(Status.Stopped);\n  }\n\n  // State machine methods, getters, setters, etc.\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-en/#umple-online-demo","title":"UMPLE Online Demo","text":"<ul> <li>UMPLE provides an online environment for model development</li> <li>Allows real-time visualization and code generation</li> <li>Can be used to demonstrate UML concepts quickly</li> </ul> <p>Visit: http://try.umple.org</p>"},{"location":"week-12/ce204-week-12-en/#from-uml-to-java-implementation","title":"From UML to Java Implementation","text":""},{"location":"week-12/ce204-week-12-en/#implementing-classes","title":"Implementing Classes","text":"UML Feature Java Implementation Class <code>public class ClassName</code> Abstract class <code>public abstract class ClassName</code> Interface <code>public interface InterfaceName</code> Attributes Fields with appropriate access modifiers Operations Methods with appropriate signatures Visibility <code>public</code>, <code>private</code>, <code>protected</code>, or package-private Static members <code>static</code> keyword Abstract methods <code>abstract</code> keyword"},{"location":"week-12/ce204-week-12-en/#implementing-relationships","title":"Implementing Relationships","text":""},{"location":"week-12/ce204-week-12-en/#inheritancegeneralization","title":"Inheritance/Generalization","text":"<pre><code>// UML: Child inherits from Parent\npublic class Parent {\n    // Parent members\n}\n\npublic class Child extends Parent {\n    // Child members\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-en/#implementation-interface","title":"Implementation (Interface)","text":"<pre><code>// UML: Class implements Interface\npublic interface MyInterface {\n    void doSomething();\n}\n\npublic class MyClass implements MyInterface {\n    @Override\n    public void doSomething() {\n        // Implementation\n    }\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-en/#association_1","title":"Association","text":"<pre><code>// UML: Class A has a reference to Class B\npublic class A {\n    private B b; // One-to-one\n\n    public A(B b) {\n        this.b = b;\n    }\n\n    public B getB() {\n        return b;\n    }\n\n    public void setB(B b) {\n        this.b = b;\n    }\n}\n\n// UML: Class C has many references to Class D\npublic class C {\n    private List&lt;D&gt; dList; // One-to-many\n\n    public C() {\n        this.dList = new ArrayList&lt;&gt;();\n    }\n\n    public void addD(D d) {\n        dList.add(d);\n    }\n\n    // Other methods to manage the relationship\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-en/#composition_1","title":"Composition","text":"<pre><code>// UML: Class Whole owns Parts (composition)\npublic class Whole {\n    private final Part part; // The 'final' emphasizes strong ownership\n\n    public Whole() {\n        // Create the part when the whole is created\n        this.part = new Part();\n    }\n\n    // No setter for part - it cannot be changed after creation\n    public Part getPart() {\n        return part;\n    }\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-en/#aggregation_1","title":"Aggregation","text":"<pre><code>// UML: Class Container has Parts (aggregation)\npublic class Container {\n    private Part part; // Not final - can exist independently\n\n    public Container(Part part) {\n        this.part = part;\n    }\n\n    // Part can be changed or set to null\n    public void setPart(Part part) {\n        this.part = part;\n    }\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-en/#implementing-behavioral-elements","title":"Implementing Behavioral Elements","text":""},{"location":"week-12/ce204-week-12-en/#state-machines","title":"State Machines","text":"<pre><code>public class Document {\n    // State enumeration\n    public enum State {\n        DRAFT, REVIEW, APPROVED, PUBLISHED\n    }\n\n    private State currentState;\n\n    public Document() {\n        currentState = State.DRAFT;\n    }\n\n    public void submitForReview() {\n        if (currentState == State.DRAFT) {\n            currentState = State.REVIEW;\n            System.out.println(\"Document submitted for review\");\n        } else {\n            System.out.println(\"Cannot submit - not in DRAFT state\");\n        }\n    }\n\n    public void approve() {\n        if (currentState == State.REVIEW) {\n            currentState = State.APPROVED;\n            System.out.println(\"Document approved\");\n        } else {\n            System.out.println(\"Cannot approve - not in REVIEW state\");\n        }\n    }\n\n    // More state transition methods...\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-en/#case-study-online-shopping-system","title":"Case Study: Online Shopping System","text":""},{"location":"week-12/ce204-week-12-en/#umple-implementation","title":"UMPLE Implementation","text":"<pre><code>class Customer {\n  String name;\n  String email;\n  String address;\n\n  1 -- * Order;\n}\n\nclass Order {\n  Date orderDate;\n  Float totalAmount;\n\n  status {\n    New {\n      processPayment -&gt; PaymentProcessing;\n    }\n    PaymentProcessing {\n      paymentSuccessful -&gt; Confirmed;\n      paymentFailed -&gt; PaymentFailed;\n    }\n    PaymentFailed {\n      retry -&gt; PaymentProcessing;\n      cancel -&gt; Cancelled;\n    }\n    Confirmed {\n      ship -&gt; Shipped;\n    }\n    Shipped {\n      deliver -&gt; Delivered;\n    }\n    Delivered {}\n    Cancelled {}\n  }\n\n  * -- * Product;\n}\n\nclass Product {\n  String name;\n  String description;\n  Float price;\n  Integer stockQuantity;\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-en/#java-implementation-partial","title":"Java Implementation (Partial)","text":"<pre><code>public class Customer {\n    private String name;\n    private String email;\n    private String address;\n    private List&lt;Order&gt; orders;\n\n    public Customer(String name, String email, String address) {\n        this.name = name;\n        this.email = email;\n        this.address = address;\n        this.orders = new ArrayList&lt;&gt;();\n    }\n\n    public void addOrder(Order order) {\n        orders.add(order);\n    }\n\n    // Getters, setters, and other methods\n}\n\npublic class Order {\n    private Date orderDate;\n    private float totalAmount;\n    private List&lt;Product&gt; products;\n    private OrderState state;\n\n    public Order() {\n        this.orderDate = new Date();\n        this.products = new ArrayList&lt;&gt;();\n        this.state = OrderState.NEW;\n    }\n\n    // State transition methods, getters, setters, and other functionality\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-en/#best-practices-for-uml-to-java-implementation","title":"Best Practices for UML-to-Java Implementation","text":"<ol> <li>Follow the Single Responsibility Principle</li> <li> <p>Each class should have only one reason to change</p> </li> <li> <p>Encapsulate field access</p> </li> <li> <p>Use private fields with public getters/setters</p> </li> <li> <p>Prefer composition over inheritance</p> </li> <li> <p>\"Has-a\" is often better than \"is-a\"</p> </li> <li> <p>Implement interfaces for behavior</p> </li> <li> <p>Use interfaces to define contracts</p> </li> <li> <p>Use design patterns appropriately</p> </li> <li> <p>Match patterns to common problems</p> </li> <li> <p>Keep entities immutable when possible</p> </li> <li> <p>Especially for value objects</p> </li> <li> <p>Test against the model</p> </li> <li> <p>Verify the implementation matches the design</p> </li> <li> <p>Document discrepancies</p> </li> <li>Note when implementation differs from model</li> </ol>"},{"location":"week-12/ce204-week-12-en/#umple-vs-other-uml-tools","title":"UMPLE vs. Other UML Tools","text":"Feature UMPLE Traditional UML Tools Code Integration Direct integration in code Separate models from code Learning Curve Moderate (like learning a language extension) Steep (completely different paradigm) Round-tripping Natural (model and code are the same) Often problematic Version Control Standard source control tools May require special tools IDE Support Varies, good Eclipse support Often extensive Model Complexity Focus on core UML elements Comprehensive UML support Executable Models Yes Often requires additional steps"},{"location":"week-12/ce204-week-12-en/#lab-exercise-bank-account-system","title":"Lab Exercise: Bank Account System","text":""},{"location":"week-12/ce204-week-12-en/#requirements","title":"Requirements","text":"<ol> <li>Create a UML class diagram showing:</li> <li><code>BankAccount</code> (abstract class)</li> <li><code>SavingsAccount</code> and <code>CheckingAccount</code> (concrete classes)</li> <li><code>Customer</code> with relationships to accounts</li> <li> <p><code>Transaction</code> class related to accounts</p> </li> <li> <p>Model a state machine for account status</p> </li> <li> <p>Implement in Java using UMPLE</p> </li> <li> <p>Generate code and test the implementation</p> </li> </ol>"},{"location":"week-12/ce204-week-12-en/#learning-outcomes","title":"Learning Outcomes","text":"<ul> <li>Practice UML modeling</li> <li>Gain experience with UMPLE</li> <li>Understand model-to-code transformation</li> <li>Apply OOP principles in a practical context</li> </ul>"},{"location":"week-12/ce204-week-12-en/#references","title":"References","text":"<ul> <li>OMG Unified Modeling Language Specification: https://www.omg.org/spec/UML/</li> <li>UMPLE User Manual: https://cruise.umple.org/umple/</li> <li>Fowler, M. (2003). UML Distilled: A Brief Guide to the Standard Object Modeling Language. Addison-Wesley.</li> <li>Rumbaugh, J., Jacobson, I., &amp; Booch, G. (2004). The Unified Modeling Language Reference Manual. Addison-Wesley.</li> <li>UMPLE GitHub Repository: https://github.com/umple/umple</li> </ul>"},{"location":"week-12/ce204-week-12-en/#next-week","title":"Next Week","text":"<p>Quiz 2 - covering UML, UMPLE, design patterns, and Java implementations. </p>"},{"location":"week-12/ce204-week-12-tr/","title":"CEN206 Nesne Y\u00f6nelimli Programlama","text":""},{"location":"week-12/ce204-week-12-tr/#cen206-nesne-yonelimli-programlama","title":"CEN206 Nesne Y\u00f6nelimli Programlama","text":""},{"location":"week-12/ce204-week-12-tr/#hafta-12-uml-umple-ve-java-uygulamalar","title":"Hafta-12 (UML, UMPLE ve Java Uygulamalar\u0131)","text":""},{"location":"week-12/ce204-week-12-tr/#bahar-donemi-2024-2025","title":"Bahar D\u00f6nemi, 2024-2025","text":"<p>\u0130ndir DOC-PDF, DOC-DOCX, SLIDE, PPTX</p>"},{"location":"week-12/ce204-week-12-tr/#uml-umple-ve-java-uygulamalar","title":"UML, UMPLE ve Java Uygulamalar\u0131","text":""},{"location":"week-12/ce204-week-12-tr/#ana-hatlar","title":"Ana Hatlar","text":"<ul> <li>Birle\u015fik Modelleme Dili (UML)</li> <li>Genel Bak\u0131\u015f ve Ama\u00e7</li> <li>Ana Diyagram T\u00fcrleri</li> <li>S\u0131n\u0131f Diyagramlar\u0131 Detaylar\u0131</li> <li>S\u0131ralama Diyagramlar\u0131</li> <li>Durum Diyagramlar\u0131</li> <li>UMPLE</li> <li>Model G\u00fcd\u00fcml\u00fc Geli\u015ftirmeye Giri\u015f</li> <li>UMPLE Dil \u00d6zellikleri</li> <li>UMPLE ile Kod \u00dcretimi</li> <li>UML Tasar\u0131mlar\u0131n\u0131 Java'da Uygulama</li> <li>UML'den Koda</li> <li>En \u0130yi Uygulamalar</li> <li>Vaka \u00c7al\u0131\u015fmalar\u0131</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#uml-nedir","title":"UML Nedir?","text":"<ul> <li>**U**nified **M**odeling **L**anguage (Birle\u015fik Modelleme Dili)</li> <li>Yaz\u0131l\u0131m sistemleri i\u00e7in standart g\u00f6rsel modelleme dili</li> <li>Nesne y\u00f6nelimli modelleme i\u00e7in ortak bir kelime da\u011farc\u0131\u011f\u0131 sa\u011flar</li> <li>Grady Booch, James Rumbaugh ve Ivar Jacobson (\"\u00dc\u00e7 Amigo\") taraf\u0131ndan geli\u015ftirilmi\u015ftir</li> <li>Object Management Group (OMG) taraf\u0131ndan s\u00fcrd\u00fcr\u00fclmektedir</li> <li>G\u00fcncel s\u00fcr\u00fcm: UML 2.5.1 (Aral\u0131k 2017)</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#umlnin-amac","title":"UML'nin Amac\u0131","text":"<ul> <li>Sistem mimarisini ve tasar\u0131m\u0131n\u0131 g\u00f6rselle\u015ftirmek</li> <li>Sistem yap\u0131s\u0131n\u0131 ve davran\u0131\u015f\u0131n\u0131 belirlemek</li> <li>Tasar\u0131m kararlar\u0131n\u0131 belgelemek</li> <li>Payda\u015flar aras\u0131nda ileti\u015fimi kolayla\u015ft\u0131rmak</li> <li>Uygulamaya rehberlik etmek</li> <li>Kod \u00fcretmek (UMPLE gibi ara\u00e7larla)</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#uml-diyagram-turleri","title":"UML Diyagram T\u00fcrleri","text":""},{"location":"week-12/ce204-week-12-tr/#yapsal-diyagramlar","title":"Yap\u0131sal Diyagramlar","text":"<ul> <li>S\u0131n\u0131f diyagram\u0131: S\u0131n\u0131flar\u0131, aray\u00fczleri ve aralar\u0131ndaki ili\u015fkileri g\u00f6sterir</li> <li>Nesne diyagram\u0131: Belirli bir zaman noktas\u0131nda s\u0131n\u0131flar\u0131n \u00f6rneklerini g\u00f6sterir</li> <li>Bile\u015fen diyagram\u0131: Fiziksel bile\u015fenlerin organizasyonunu g\u00f6sterir</li> <li>Da\u011f\u0131t\u0131m diyagram\u0131: Donan\u0131m topolojisini ve yaz\u0131l\u0131m da\u011f\u0131t\u0131m\u0131n\u0131 g\u00f6sterir</li> <li>Paket diyagram\u0131: \u00d6\u011felerin mant\u0131ksal grupland\u0131rmas\u0131n\u0131 g\u00f6sterir</li> <li>Bile\u015fik yap\u0131 diyagram\u0131: Bir s\u0131n\u0131f\u0131n i\u00e7 yap\u0131s\u0131n\u0131 g\u00f6sterir</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#davranssal-diyagramlar","title":"Davran\u0131\u015fsal Diyagramlar","text":"<ul> <li>Kullan\u0131m durumu diyagram\u0131: \u0130\u015flevselli\u011fi kullan\u0131c\u0131 perspektifinden g\u00f6sterir</li> <li>Aktivite diyagram\u0131: \u0130\u015f ak\u0131\u015f\u0131n\u0131 veya i\u015f s\u00fcrecini g\u00f6sterir</li> <li>Durum makinesi diyagram\u0131: Durumlar\u0131 ve ge\u00e7i\u015fleri g\u00f6sterir</li> <li>S\u0131ralama diyagram\u0131: Nesneler aras\u0131ndaki etkile\u015fimleri zaman i\u00e7inde g\u00f6sterir</li> <li>\u0130leti\u015fim diyagram\u0131: Nesneler aras\u0131ndaki ba\u011flant\u0131lara odaklanan etkile\u015fimleri g\u00f6sterir</li> <li>Zamanlama diyagram\u0131: Zaman k\u0131s\u0131tlar\u0131 olan nesnelerin davran\u0131\u015f\u0131n\u0131 g\u00f6sterir</li> <li>Etkile\u015fim genel bak\u0131\u015f diyagram\u0131: Aktivite ve s\u0131ralama diyagramlar\u0131n\u0131 birle\u015ftirir</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#snf-diyagramlar","title":"S\u0131n\u0131f Diyagramlar\u0131","text":"<p>En yayg\u0131n kullan\u0131lan UML diyagram\u0131, \u015funlar\u0131 g\u00f6sterir:</p> <ul> <li>S\u0131n\u0131flar ve \u00f6zellikleri</li> <li>S\u0131n\u0131flar aras\u0131ndaki ili\u015fkiler</li> <li>Aray\u00fczler ve uygulamalar\u0131</li> <li>Kal\u0131t\u0131m hiyerar\u015fileri</li> <li>\u0130li\u015fkiler, ba\u011f\u0131ml\u0131l\u0131klar ve daha fazlas\u0131</li> </ul> <p></p>"},{"location":"week-12/ce204-week-12-tr/#snf-gosterimi","title":"S\u0131n\u0131f G\u00f6sterimi","text":""},{"location":"week-12/ce204-week-12-tr/#snf-iliskileri","title":"S\u0131n\u0131f \u0130li\u015fkileri","text":""},{"location":"week-12/ce204-week-12-tr/#iliskilendirme-association","title":"\u0130li\u015fkilendirme (Association)","text":"<ul> <li>S\u0131n\u0131flar aras\u0131ndaki temel ili\u015fki</li> <li>Genellikle d\u00fcz bir \u00e7izgi ile g\u00f6sterilir</li> <li>\u00c7okluk i\u00e7erebilir (\u00f6r. 1..*, 0..1)</li> <li>Tek y\u00f6nl\u00fc veya \u00e7ift y\u00f6nl\u00fc olabilir</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#birlestirme-aggregation","title":"Birle\u015ftirme (Aggregation)","text":"<ul> <li>\"Sahip olma\" ili\u015fkisi (zay\u0131f sahiplik)</li> <li>Sahibin ucunda elmas</li> <li>Par\u00e7a b\u00fct\u00fcnden ba\u011f\u0131ms\u0131z olarak var olabilir</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#kompozisyon-composition","title":"Kompozisyon (Composition)","text":"<ul> <li>Birle\u015ftirmenin g\u00fc\u00e7l\u00fc formu (g\u00fc\u00e7l\u00fc sahiplik)</li> <li>Sahibin ucunda dolu elmas</li> <li>Par\u00e7an\u0131n ya\u015fam d\u00f6ng\u00fcs\u00fc b\u00fct\u00fcne ba\u011fl\u0131d\u0131r</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#genellemekaltm-generalizationinheritance","title":"Genelleme/Kal\u0131t\u0131m (Generalization/Inheritance)","text":"<ul> <li>\"Bir t\u00fcr\" ili\u015fkisi</li> <li>\u00dcst s\u0131n\u0131fa do\u011fru i\u015faret eden \u00fc\u00e7gen</li> <li>Alt s\u0131n\u0131f, \u00fcst s\u0131n\u0131f\u0131n \u00f6zelliklerini ve davran\u0131\u015flar\u0131n\u0131 miras al\u0131r</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#bagmllk-dependency","title":"Ba\u011f\u0131ml\u0131l\u0131k (Dependency)","text":"<ul> <li>\"Kullan\u0131r\" ili\u015fkisi</li> <li>Oklu kesikli \u00e7izgi</li> <li>Bir s\u0131n\u0131ftaki de\u011fi\u015fiklik di\u011ferini etkileyebilir</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#snf-iliskileri-ornegi","title":"S\u0131n\u0131f \u0130li\u015fkileri \u00d6rne\u011fi","text":""},{"location":"week-12/ce204-week-12-tr/#sralama-diyagramlar","title":"S\u0131ralama Diyagramlar\u0131","text":"<p>Nesneler aras\u0131ndaki etkile\u015fimlerin zaman i\u00e7indeki s\u0131ras\u0131n\u0131 g\u00f6sterir:</p> <ul> <li>Nesneler ve ya\u015fam \u00e7izgileri</li> <li>Nesneler aras\u0131nda al\u0131\u015fveri\u015fi yap\u0131lan mesajlar</li> <li>Etkile\u015fimlerin zaman s\u0131ralama d\u00fczeni</li> <li>Nesnelerin olu\u015fturulmas\u0131 ve yok edilmesi</li> <li>Nesnelerin aktivasyonu ve deaktivasyonu</li> </ul> <p></p>"},{"location":"week-12/ce204-week-12-tr/#sralama-diyagram-ogeleri","title":"S\u0131ralama Diyagram\u0131 \u00d6\u011feleri","text":""},{"location":"week-12/ce204-week-12-tr/#yasam-cizgisi-lifeline","title":"Ya\u015fam \u00c7izgisi (Lifeline)","text":"<ul> <li>Bir nesneyi zaman i\u00e7inde temsil eder</li> <li>Dikey kesikli \u00e7izgi</li> <li>Aktivasyon \u00e7ubuklar\u0131 i\u00e7erebilir</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#mesaj-message","title":"Mesaj (Message)","text":"<ul> <li>Ya\u015fam \u00e7izgileri aras\u0131ndaki ileti\u015fim</li> <li>Senkron \u00e7a\u011fr\u0131lar i\u00e7in d\u00fcz ok</li> <li>Asenkron \u00e7a\u011fr\u0131lar i\u00e7in kesikli ok</li> <li>Mesaj d\u00f6n\u00fc\u015fleri i\u00e7in dolu ok ucu ile ok</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#birlesik-parcalar-combined-fragments","title":"Birle\u015fik Par\u00e7alar (Combined Fragments)","text":"<ul> <li>Ko\u015fullu davran\u0131\u015f\u0131 tan\u0131mlar</li> <li>Alt (alternatifler), opt (iste\u011fe ba\u011fl\u0131), loop (d\u00f6ng\u00fc) vb. i\u00e7erir</li> <li>Bir grup mesaj\u0131 \u00e7evreler</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#gecitler-gates","title":"Ge\u00e7itler (Gates)","text":"<ul> <li>Mesajlar i\u00e7in ba\u011flant\u0131 noktalar\u0131</li> <li>Diyagram d\u0131\u015f\u0131ndaki mesajlara ba\u011flant\u0131lar\u0131 sa\u011flar</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#durum-makinesi-diyagramlar","title":"Durum Makinesi Diyagramlar\u0131","text":"<p>Bir nesnenin mevcut durumuna g\u00f6re olaylara nas\u0131l tepki verdi\u011fini g\u00f6sterir:</p> <ul> <li>Durumlar</li> <li>Durumlar aras\u0131 ge\u00e7i\u015fler</li> <li>Ge\u00e7i\u015fleri tetikleyen olaylar</li> <li>Ge\u00e7i\u015fler s\u0131ras\u0131nda ger\u00e7ekle\u015ftirilen eylemler</li> <li>Giri\u015f/\u00e7\u0131k\u0131\u015f eylemleri</li> <li>\u0130\u00e7 i\u00e7e durumlar</li> </ul> <p></p>"},{"location":"week-12/ce204-week-12-tr/#umplea-giris","title":"UMPLE'a Giri\u015f","text":"<ul> <li>UML'yi programlama dilleriyle birle\u015ftirir</li> <li>UML'yi do\u011frudan kodun i\u00e7ine g\u00f6mer</li> <li>Modellerden kod \u00fcretir</li> <li>Java, C++, PHP ve Ruby'yi destekler</li> <li>A\u00e7\u0131k kaynakl\u0131 ve web tabanl\u0131 ara\u00e7lar mevcuttur</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#umple-felsefesi","title":"UMPLE Felsefesi","text":"<ul> <li>Model-Kod \u0130kilili\u011fi: Modeller ve kod ayn\u0131 yap\u0131d\u0131r</li> <li>A\u015famal\u0131 Benimseme: \u0130htiya\u00e7 duyuldu\u011fu kadar az veya \u00e7ok kullan\u0131labilir</li> <li>\u00c7oklu G\u00f6r\u00fcn\u00fcmler: Ayn\u0131 sistemin farkl\u0131 g\u00f6r\u00fcn\u00fcmleri \u00fcretilebilir</li> <li>Y\u00fcr\u00fct\u00fclebilir Modeller: Modeller do\u011frudan y\u00fcr\u00fct\u00fclebilir</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#umple-araclar","title":"UMPLE Ara\u00e7lar\u0131","text":"<ul> <li>UmpleOnline: Web tabanl\u0131 d\u00fczenleyici ve kod \u00fcretici</li> <li>Umple Eclipse Eklentisi: Eclipse IDE ile entegre olur</li> <li>Komut sat\u0131r\u0131 ara\u00e7lar\u0131: Build otomasyonu i\u00e7in</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#umple-temel-sozdizimi","title":"UMPLE Temel S\u00f6zdizimi","text":"<pre><code>class Student {\n  // Tiplerle \u00f6znitelikler\n  Integer id;\n  String name;\n\n  // \u00c7okluklu ili\u015fkiler\n  * -- 1 University;\n\n  // Durum makinesi\n  status {\n    Active {\n      suspend -&gt; Suspended;\n    }\n    Suspended {\n      reinstate -&gt; Active;\n      expel -&gt; Expelled;\n    }\n    Expelled {}\n  }\n\n  // Metotlar (hedef dilde)\n  void registerForCourse(Course c) {\n    // Hedef dildeki uygulama\n  }\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-tr/#umple-snf-modellemesi","title":"UMPLE S\u0131n\u0131f Modellemesi","text":""},{"location":"week-12/ce204-week-12-tr/#oznitelikler-attributes","title":"\u00d6znitelikler (Attributes)","text":"<pre><code>class Person {\n  String name;\n  Integer age;\n  Date birthDate;\n\n  // Varsay\u0131lan de\u011ferlerle\n  const String country = \"T\u00fcrkiye\";\n  Boolean isActive = true;\n\n  // K\u0131s\u0131tlamalarla\n  [age &gt; 0]\n  [email ~= /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/]\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-tr/#iliskiler-associations","title":"\u0130li\u015fkiler (Associations)","text":"<pre><code>// Bire-\u00e7ok ili\u015fki\nclass Professor {\n  // Bir profes\u00f6r bir\u00e7ok ders verebilir\n  1 -- * Course;\n}\n\n// \u00c7oka-\u00e7ok ili\u015fki\nclass Student {\n  // \u00d6\u011frenciler bir\u00e7ok derse kay\u0131t olabilir\n  * -- * Course;\n}\n\n// Rol adlar\u0131 ile ili\u015fki\nclass Course {\n  // Dersin bir ana \u00f6\u011fretmeni ve muhtemelen asistanlar\u0131 vard\u0131r\n  * -- 1 Professor mainInstructor;\n  * -- * Professor teachingAssistants;\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-tr/#umple-durum-makineleri","title":"UMPLE Durum Makineleri","text":"<pre><code>class TrafficLight {\n  // Durum makinesi tan\u0131m\u0131\n  status {\n    Red {\n      // Giri\u015f ve \u00e7\u0131k\u0131\u015f eylemleri\n      entry / { turnOnRedLight(); }\n      exit / { turnOffRedLight(); }\n\n      // Koruma ve eylemle ge\u00e7i\u015f\n      timer [timeInState() &gt; 60] -&gt; Green { resetTimer(); }\n    }\n\n    Yellow {\n      entry / { turnOnYellowLight(); }\n      exit / { turnOffYellowLight(); }\n      timer [timeInState() &gt; 5] -&gt; Red;\n    }\n\n    Green {\n      entry / { turnOnGreenLight(); }\n      exit / { turnOffGreenLight(); }\n      timer [timeInState() &gt; 45] -&gt; Yellow;\n    }\n  }\n\n  // Durum makinesi taraf\u0131ndan gerekli olan metotlar\n  private void turnOnRedLight() { /* uygulama */ }\n  private void turnOffRedLight() { /* uygulama */ }\n  // Di\u011fer metotlar...\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-tr/#umple-ile-kod-uretimi","title":"UMPLE ile Kod \u00dcretimi","text":""},{"location":"week-12/ce204-week-12-tr/#java-kod-uretimi","title":"Java Kod \u00dcretimi","text":"<pre><code>class Car {\n  String make;\n  String model;\n  Integer year;\n\n  * -- 1 Manufacturer;\n\n  status {\n    Stopped {\n      startEngine -&gt; Running;\n    }\n    Running {\n      stopEngine -&gt; Stopped;\n      accelerate -&gt; Accelerating;\n    }\n    Accelerating {\n      releaseGas -&gt; Running;\n      brake -&gt; Braking;\n    }\n    Braking {\n      stop -&gt; Stopped;\n      releaseBreak -&gt; Running;\n    }\n  }\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-tr/#uretilen-java-kodu-ksmi","title":"\u00dcretilen Java Kodu (K\u0131smi)","text":"<pre><code>public class Car {\n  //------------------------\n  // \u00dcYE DE\u011e\u0130\u015eKENLER\n  //------------------------\n  private String make;\n  private String model;\n  private Integer year;\n\n  // Durum makinesi de\u011fi\u015fkenleri\n  public enum Status { Stopped, Running, Accelerating, Braking }\n  private Status status;\n\n  //------------------------\n  // CONSTRUCTOR\n  //------------------------\n  public Car(String aMake, String aModel, Integer aYear, Manufacturer aManufacturer) {\n    make = aMake;\n    model = aModel;\n    year = aYear;\n    boolean didAddManufacturer = setManufacturer(aManufacturer);\n    if (!didAddManufacturer) {\n      throw new RuntimeException(\"\u00dcretici nedeniyle araba olu\u015fturulamad\u0131\");\n    }\n    setStatus(Status.Stopped);\n  }\n\n  // Durum makinesi metotlar\u0131, getter'lar, setter'lar, vb.\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-tr/#umple-online-demo","title":"UMPLE Online Demo","text":"<ul> <li>UMPLE, model geli\u015ftirme i\u00e7in \u00e7evrimi\u00e7i bir ortam sa\u011flar</li> <li>Ger\u00e7ek zamanl\u0131 g\u00f6rselle\u015ftirme ve kod \u00fcretimi yapabilir</li> <li>UML kavramlar\u0131n\u0131 h\u0131zl\u0131ca g\u00f6stermek i\u00e7in kullan\u0131labilir</li> </ul> <p>Ziyaret edin: http://try.umple.org</p>"},{"location":"week-12/ce204-week-12-tr/#umlden-java-uygulamasna","title":"UML'den Java Uygulamas\u0131na","text":""},{"location":"week-12/ce204-week-12-tr/#snflar-uygulama","title":"S\u0131n\u0131flar\u0131 Uygulama","text":"UML \u00d6zelli\u011fi Java Uygulamas\u0131 S\u0131n\u0131f <code>public class S\u0131n\u0131fAd\u0131</code> Soyut s\u0131n\u0131f <code>public abstract class S\u0131n\u0131fAd\u0131</code> Aray\u00fcz <code>public interface Aray\u00fczAd\u0131</code> \u00d6znitelikler Uygun eri\u015fim belirleyicileri ile alanlar \u0130\u015flemler Uygun imzalara sahip metotlar G\u00f6r\u00fcn\u00fcrl\u00fck <code>public</code>, <code>private</code>, <code>protected</code> veya paket-\u00f6zel Statik \u00fcyeler <code>static</code> anahtar kelimesi Soyut metotlar <code>abstract</code> anahtar kelimesi"},{"location":"week-12/ce204-week-12-tr/#iliskileri-uygulama","title":"\u0130li\u015fkileri Uygulama","text":""},{"location":"week-12/ce204-week-12-tr/#kaltmgenelleme","title":"Kal\u0131t\u0131m/Genelleme","text":"<pre><code>// UML: Child, Parent'tan miras al\u0131r\npublic class Parent {\n    // Parent \u00fcyeleri\n}\n\npublic class Child extends Parent {\n    // Child \u00fcyeleri\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-tr/#uygulama-arayuz","title":"Uygulama (Aray\u00fcz)","text":"<pre><code>// UML: Class, Interface'i uygular\npublic interface MyInterface {\n    void doSomething();\n}\n\npublic class MyClass implements MyInterface {\n    @Override\n    public void doSomething() {\n        // Uygulama\n    }\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-tr/#iliskilendirme-association_1","title":"\u0130li\u015fkilendirme (Association)","text":"<pre><code>// UML: A s\u0131n\u0131f\u0131n\u0131n B s\u0131n\u0131f\u0131na bir referans\u0131 var\npublic class A {\n    private B b; // Bire-bir\n\n    public A(B b) {\n        this.b = b;\n    }\n\n    public B getB() {\n        return b;\n    }\n\n    public void setB(B b) {\n        this.b = b;\n    }\n}\n\n// UML: C s\u0131n\u0131f\u0131n\u0131n D s\u0131n\u0131f\u0131na bir\u00e7ok referans\u0131 var\npublic class C {\n    private List&lt;D&gt; dList; // Bire-\u00e7ok\n\n    public C() {\n        this.dList = new ArrayList&lt;&gt;();\n    }\n\n    public void addD(D d) {\n        dList.add(d);\n    }\n\n    // \u0130li\u015fkiyi y\u00f6netmek i\u00e7in di\u011fer metotlar\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-tr/#kompozisyon-composition_1","title":"Kompozisyon (Composition)","text":"<pre><code>// UML: Whole s\u0131n\u0131f\u0131 Part'lara sahiptir (kompozisyon)\npublic class Whole {\n    private final Part part; // 'final' g\u00fc\u00e7l\u00fc sahipli\u011fi vurgular\n\n    public Whole() {\n        // B\u00fct\u00fcn olu\u015fturuldu\u011funda par\u00e7a da olu\u015fturulur\n        this.part = new Part();\n    }\n\n    // Part i\u00e7in setter yok - olu\u015fturulduktan sonra de\u011fi\u015ftirilemez\n    public Part getPart() {\n        return part;\n    }\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-tr/#birlestirme-aggregation_1","title":"Birle\u015ftirme (Aggregation)","text":"<pre><code>// UML: Container s\u0131n\u0131f\u0131 Part'lara sahiptir (birle\u015ftirme)\npublic class Container {\n    private Part part; // Final de\u011fil - ba\u011f\u0131ms\u0131z olarak var olabilir\n\n    public Container(Part part) {\n        this.part = part;\n    }\n\n    // Part de\u011fi\u015ftirilebilir veya null olarak ayarlanabilir\n    public void setPart(Part part) {\n        this.part = part;\n    }\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-tr/#davranssal-ogeleri-uygulama","title":"Davran\u0131\u015fsal \u00d6\u011feleri Uygulama","text":""},{"location":"week-12/ce204-week-12-tr/#durum-makineleri","title":"Durum Makineleri","text":"<pre><code>public class Document {\n    // Durum enumeration'\u0131\n    public enum State {\n        DRAFT, REVIEW, APPROVED, PUBLISHED\n    }\n\n    private State currentState;\n\n    public Document() {\n        currentState = State.DRAFT;\n    }\n\n    public void submitForReview() {\n        if (currentState == State.DRAFT) {\n            currentState = State.REVIEW;\n            System.out.println(\"Belge inceleme i\u00e7in g\u00f6nderildi\");\n        } else {\n            System.out.println(\"G\u00f6nderilemiyor - DRAFT durumunda de\u011fil\");\n        }\n    }\n\n    public void approve() {\n        if (currentState == State.REVIEW) {\n            currentState = State.APPROVED;\n            System.out.println(\"Belge onayland\u0131\");\n        } else {\n            System.out.println(\"Onaylanam\u0131yor - REVIEW durumunda de\u011fil\");\n        }\n    }\n\n    // Daha fazla durum ge\u00e7i\u015f metodu...\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-tr/#vaka-calsmas-cevrimici-alsveris-sistemi","title":"Vaka \u00c7al\u0131\u015fmas\u0131: \u00c7evrimi\u00e7i Al\u0131\u015fveri\u015f Sistemi","text":""},{"location":"week-12/ce204-week-12-tr/#umple-uygulamas","title":"UMPLE Uygulamas\u0131","text":"<pre><code>class Customer {\n  String name;\n  String email;\n  String address;\n\n  1 -- * Order;\n}\n\nclass Order {\n  Date orderDate;\n  Float totalAmount;\n\n  status {\n    New {\n      processPayment -&gt; PaymentProcessing;\n    }\n    PaymentProcessing {\n      paymentSuccessful -&gt; Confirmed;\n      paymentFailed -&gt; PaymentFailed;\n    }\n    PaymentFailed {\n      retry -&gt; PaymentProcessing;\n      cancel -&gt; Cancelled;\n    }\n    Confirmed {\n      ship -&gt; Shipped;\n    }\n    Shipped {\n      deliver -&gt; Delivered;\n    }\n    Delivered {}\n    Cancelled {}\n  }\n\n  * -- * Product;\n}\n\nclass Product {\n  String name;\n  String description;\n  Float price;\n  Integer stockQuantity;\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-tr/#java-uygulamas-ksmi","title":"Java Uygulamas\u0131 (K\u0131smi)","text":"<pre><code>public class Customer {\n    private String name;\n    private String email;\n    private String address;\n    private List&lt;Order&gt; orders;\n\n    public Customer(String name, String email, String address) {\n        this.name = name;\n        this.email = email;\n        this.address = address;\n        this.orders = new ArrayList&lt;&gt;();\n    }\n\n    public void addOrder(Order order) {\n        orders.add(order);\n    }\n\n    // Getter'lar, setter'lar ve di\u011fer metotlar\n}\n\npublic class Order {\n    private Date orderDate;\n    private float totalAmount;\n    private List&lt;Product&gt; products;\n    private OrderState state;\n\n    public Order() {\n        this.orderDate = new Date();\n        this.products = new ArrayList&lt;&gt;();\n        this.state = OrderState.NEW;\n    }\n\n    // Durum ge\u00e7i\u015f metotlar\u0131, getter'lar, setter'lar ve di\u011fer i\u015flevler\n}\n</code></pre>"},{"location":"week-12/ce204-week-12-tr/#umlden-java-uygulamasna-en-iyi-pratikler","title":"UML'den Java Uygulamas\u0131na En \u0130yi Pratikler","text":"<ol> <li>Tek Sorumluluk \u0130lkesini Takip Edin</li> <li> <p>Her s\u0131n\u0131f\u0131n de\u011fi\u015fmek i\u00e7in sadece bir nedeni olmal\u0131d\u0131r</p> </li> <li> <p>Alan eri\u015fimini kaps\u00fclleyin</p> </li> <li> <p>Private alanlar\u0131 public getter/setter'larla kullan\u0131n</p> </li> <li> <p>Kal\u0131t\u0131m yerine kompozisyonu tercih edin</p> </li> <li> <p>\"Sahip olma\" genellikle \"bir t\u00fcr olma\"dan daha iyidir</p> </li> <li> <p>Davran\u0131\u015f i\u00e7in aray\u00fczleri uygulay\u0131n</p> </li> <li> <p>Aray\u00fczleri s\u00f6zle\u015fmeleri tan\u0131mlamak i\u00e7in kullan\u0131n</p> </li> <li> <p>Tasar\u0131m desenlerini uygun \u015fekilde kullan\u0131n</p> </li> <li> <p>Desenleri yayg\u0131n problemlerle e\u015fle\u015ftirin</p> </li> <li> <p>Varl\u0131klar\u0131 m\u00fcmk\u00fcn oldu\u011funca de\u011fi\u015fmez tutun</p> </li> <li> <p>\u00d6zellikle de\u011fer nesneleri i\u00e7in</p> </li> <li> <p>Modele kar\u015f\u0131 test edin</p> </li> <li> <p>Uygulaman\u0131n tasar\u0131ma uygun oldu\u011funu do\u011frulay\u0131n</p> </li> <li> <p>Tutars\u0131zl\u0131klar\u0131 belgeleyin</p> </li> <li>Uygulama modelden farkl\u0131la\u015ft\u0131\u011f\u0131nda not edin</li> </ol>"},{"location":"week-12/ce204-week-12-tr/#umple-vs-diger-uml-araclar","title":"UMPLE vs. Di\u011fer UML Ara\u00e7lar\u0131","text":"\u00d6zellik UMPLE Geleneksel UML Ara\u00e7lar\u0131 Kod Entegrasyonu Kodla do\u011frudan entegrasyon Koddan ayr\u0131 modeller \u00d6\u011frenme E\u011frisi Orta (bir dil uzant\u0131s\u0131 \u00f6\u011frenmek gibi) Dik (tamamen farkl\u0131 paradigma) \u00c7ift Y\u00f6nl\u00fc M\u00fchendislik Do\u011fal (model ve kod ayn\u0131d\u0131r) Genellikle problemli S\u00fcr\u00fcm Kontrol\u00fc Standart kaynak kontrol\u00fc ara\u00e7lar\u0131 \u00d6zel ara\u00e7lar gerektirebilir IDE Deste\u011fi De\u011fi\u015fir, iyi Eclipse deste\u011fi Genellikle kapsaml\u0131 Model Karma\u015f\u0131kl\u0131\u011f\u0131 Temel UML \u00f6\u011felerine odaklanma Kapsaml\u0131 UML deste\u011fi Y\u00fcr\u00fct\u00fclebilir Modeller Evet Genellikle ek ad\u0131mlar gerektirir"},{"location":"week-12/ce204-week-12-tr/#laboratuvar-alstrmas-banka-hesap-sistemi","title":"Laboratuvar Al\u0131\u015ft\u0131rmas\u0131: Banka Hesap Sistemi","text":""},{"location":"week-12/ce204-week-12-tr/#gereksinimler","title":"Gereksinimler","text":"<ol> <li>\u015eunlar\u0131 g\u00f6steren bir UML s\u0131n\u0131f diyagram\u0131 olu\u015fturun:</li> <li><code>BankAccount</code> (soyut s\u0131n\u0131f)</li> <li><code>SavingsAccount</code> ve <code>CheckingAccount</code> (somut s\u0131n\u0131flar)</li> <li>Hesaplarla ili\u015fkili <code>Customer</code></li> <li> <p>Hesaplarla ilgili <code>Transaction</code> s\u0131n\u0131f\u0131</p> </li> <li> <p>Hesap durumu i\u00e7in bir durum makinesi modelleyin</p> </li> <li> <p>UMPLE kullanarak Java'da uygulay\u0131n</p> </li> <li> <p>Kod \u00fcretin ve uygulamay\u0131 test edin</p> </li> </ol>"},{"location":"week-12/ce204-week-12-tr/#ogrenme-cktlar","title":"\u00d6\u011frenme \u00c7\u0131kt\u0131lar\u0131","text":"<ul> <li>UML modellemesi prati\u011fi yap\u0131n</li> <li>UMPLE ile deneyim kazan\u0131n</li> <li>Model-kod d\u00f6n\u00fc\u015f\u00fcm\u00fcn\u00fc anlay\u0131n</li> <li>Nesne y\u00f6nelimli programlama ilkelerini pratik bir ba\u011flamda uygulay\u0131n</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>OMG Unified Modeling Language Specification: https://www.omg.org/spec/UML/</li> <li>UMPLE Kullan\u0131m K\u0131lavuzu: https://cruise.umple.org/umple/</li> <li>Fowler, M. (2003). UML Distilled: A Brief Guide to the Standard Object Modeling Language. Addison-Wesley.</li> <li>Rumbaugh, J., Jacobson, I., &amp; Booch, G. (2004). The Unified Modeling Language Reference Manual. Addison-Wesley.</li> <li>UMPLE GitHub Deposu: https://github.com/umple/umple</li> </ul>"},{"location":"week-12/ce204-week-12-tr/#gelecek-hafta","title":"Gelecek Hafta","text":"<p>Quiz 2 - UML, UMPLE, tasar\u0131m desenleri ve Java uygulamalar\u0131n\u0131 kapsayacakt\u0131r. </p>"},{"location":"week-13/ce204-week-13-en/","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-13/ce204-week-13-en/#cen206-object-oriented-programming-formerly-ce204","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-13/ce204-week-13-en/#week-13-tbd","title":"Week-13 (TBD)","text":""},{"location":"week-13/ce204-week-13-en/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC-PDF, DOC-DOCX, SLIDE, PPTX</p>"},{"location":"week-13/ce204-week-13-en/#title","title":"Title","text":""},{"location":"week-13/ce204-week-13-en/#outline","title":"Outline","text":"<p>TBD</p>"},{"location":"week-13/ce204-week-13-en/#references","title":"References","text":"<p>TBD </p>"},{"location":"week-13/ce204-week-13-tr/","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-13/ce204-week-13-tr/#cen206-object-oriented-programming-formerly-ce204","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-13/ce204-week-13-tr/#hafta-13-belirlenmedi","title":"Hafta-13 (Belirlenmedi)","text":""},{"location":"week-13/ce204-week-13-tr/#bahar-donemi-2024-2025","title":"Bahar D\u00f6nemi, 2024-2025","text":"<p>\u0130ndir BELGE, WORD, SLAYT, PPTX</p>"},{"location":"week-13/ce204-week-13-tr/#baslk","title":"Ba\u015fl\u0131k","text":""},{"location":"week-13/ce204-week-13-tr/#taslak","title":"Taslak","text":"<p>Belirlenmedi</p>"},{"location":"week-13/ce204-week-13-tr/#kaynaklar","title":"Kaynaklar","text":"<p>Belirlenmedi </p>"},{"location":"week-14/ce204-week-14-en/","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-14/ce204-week-14-en/#cen206-object-oriented-programming-formerly-ce204","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-14/ce204-week-14-en/#week-14-tbd","title":"Week-14 (TBD)","text":""},{"location":"week-14/ce204-week-14-en/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC-PDF, DOC-DOCX, SLIDE, PPTX</p>"},{"location":"week-14/ce204-week-14-en/#title","title":"Title","text":""},{"location":"week-14/ce204-week-14-en/#outline","title":"Outline","text":"<p>TBD</p>"},{"location":"week-14/ce204-week-14-en/#references","title":"References","text":"<p>TBD </p>"},{"location":"week-14/ce204-week-14-tr/","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-14/ce204-week-14-tr/#cen206-object-oriented-programming-formerly-ce204","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-14/ce204-week-14-tr/#hafta-14-belirlenmedi","title":"Hafta-14 (Belirlenmedi)","text":""},{"location":"week-14/ce204-week-14-tr/#bahar-donemi-2024-2025","title":"Bahar D\u00f6nemi, 2024-2025","text":"<p>\u0130ndir BELGE, WORD, SLAYT, PPTX</p>"},{"location":"week-14/ce204-week-14-tr/#baslk","title":"Ba\u015fl\u0131k","text":""},{"location":"week-14/ce204-week-14-tr/#taslak","title":"Taslak","text":"<p>Belirlenmedi</p>"},{"location":"week-14/ce204-week-14-tr/#kaynaklar","title":"Kaynaklar","text":"<p>Belirlenmedi </p>"},{"location":"week-15/ce204-week-15-en/","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-15/ce204-week-15-en/#cen206-object-oriented-programming-formerly-ce204","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-15/ce204-week-15-en/#week-15-tbd","title":"Week-15 (TBD)","text":""},{"location":"week-15/ce204-week-15-en/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC-PDF, DOC-DOCX, SLIDE, PPTX</p>"},{"location":"week-15/ce204-week-15-en/#title","title":"Title","text":""},{"location":"week-15/ce204-week-15-en/#outline","title":"Outline","text":"<p>TBD</p>"},{"location":"week-15/ce204-week-15-en/#references","title":"References","text":"<p>TBD </p>"},{"location":"week-15/ce204-week-15-tr/","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-15/ce204-week-15-tr/#cen206-object-oriented-programming-formerly-ce204","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-15/ce204-week-15-tr/#hafta-15-belirlenmedi","title":"Hafta-15 (Belirlenmedi)","text":""},{"location":"week-15/ce204-week-15-tr/#bahar-donemi-2024-2025","title":"Bahar D\u00f6nemi, 2024-2025","text":"<p>\u0130ndir BELGE, WORD, SLAYT, PPTX</p>"},{"location":"week-15/ce204-week-15-tr/#baslk","title":"Ba\u015fl\u0131k","text":""},{"location":"week-15/ce204-week-15-tr/#taslak","title":"Taslak","text":"<p>Belirlenmedi</p>"},{"location":"week-15/ce204-week-15-tr/#kaynaklar","title":"Kaynaklar","text":"<p>Belirlenmedi </p>"},{"location":"week-16/ce204-week-16-final-en/","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-16/ce204-week-16-final-en/#cen206-object-oriented-programming-formerly-ce204","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-16/ce204-week-16-final-en/#week-16-final","title":"Week-16 (Final)","text":""},{"location":"week-16/ce204-week-16-final-en/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC-PDF, DOC-DOCX, SLIDE, PPTX</p>"},{"location":"week-16/ce204-week-16-final-en/#title","title":"Title","text":""},{"location":"week-16/ce204-week-16-final-en/#outline","title":"Outline","text":"<p>TBD</p>"},{"location":"week-16/ce204-week-16-final-en/#references","title":"References","text":"<p>TBD </p>"},{"location":"week-16/ce204-week-16-final-tr/","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-16/ce204-week-16-final-tr/#cen206-object-oriented-programming-formerly-ce204","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-16/ce204-week-16-final-tr/#hafta-16-final","title":"Hafta-16 (Final)","text":""},{"location":"week-16/ce204-week-16-final-tr/#bahar-donemi-2024-2025","title":"Bahar D\u00f6nemi, 2024-2025","text":"<p>\u0130ndir BELGE, WORD, SLAYT, PPTX</p>"},{"location":"week-16/ce204-week-16-final-tr/#baslk","title":"Ba\u015fl\u0131k","text":""},{"location":"week-16/ce204-week-16-final-tr/#taslak","title":"Taslak","text":"<p>Belirlenmedi</p>"},{"location":"week-16/ce204-week-16-final-tr/#kaynaklar","title":"Kaynaklar","text":"<p>Belirlenmedi </p>"},{"location":"week-2/ce204-week-2/","title":"CEN206 Object-Oriented Programming","text":""},{"location":"week-2/ce204-week-2/#cen206-object-oriented-programming","title":"CEN206 Object-Oriented Programming","text":""},{"location":"week-2/ce204-week-2/#week-2-oop-with-java-part-ii","title":"Week-2 (OOP with Java Part-II)","text":""},{"location":"week-2/ce204-week-2/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC-PDF, DOC-DOCX, SLIDE, PPTX</p>"},{"location":"week-2/ce204-week-2/#oop-with-java-ii","title":"OOP with Java-II","text":""},{"location":"week-2/ce204-week-2/#outline-1","title":"Outline (1)","text":"<ul> <li>Java super Keyword</li> <li>Java final Keyword</li> <li>Java Polymorphism / Encapsulation</li> <li>Java Method Overriding</li> <li>Java Nested Inner Class</li> <li>Java Static Class</li> <li>Java Anonymous Class</li> </ul>"},{"location":"week-2/ce204-week-2/#outline-2","title":"Outline (2)","text":"<ul> <li>Java Enums / Enum-Constructor / Enum-String</li> <li>Java Abstract Class</li> <li>Java Object Class</li> <li>Java Forms of Inheritance</li> <li>Java Benefits and Costs of Inheritance</li> <li>Java Packages</li> <li>Java Access Protection in Packages</li> </ul>"},{"location":"week-2/ce204-week-2/#java-super-keyword","title":"Java super keyword","text":""},{"location":"week-2/ce204-week-2/#java-super-keyword_1","title":"Java super keyword","text":"<ul> <li>In java, <code>super</code> is a keyword used to refers to the parent class object. </li> <li>The <code>super</code> keyword came into existence to solve the naming conflicts in the inheritance. </li> <li>When both parent class and child class have members with the same name, </li> <li>then the super keyword is used to refer to the parent class version.</li> </ul>"},{"location":"week-2/ce204-week-2/#java-super-keyword_2","title":"Java super keyword","text":"<ul> <li>In another word, The super keyword in Java is used in subclasses to access superclass members (attributes, constructors and methods).</li> </ul>"},{"location":"week-2/ce204-week-2/#java-super-keyword_3","title":"Java super keyword","text":"<ul> <li>In java, the super keyword is used for the following purposes.</li> <li>To refer parent class data members</li> <li>To refer parent class methods</li> <li>To call parent class constructor</li> </ul>"},{"location":"week-2/ce204-week-2/#java-super-keyword_4","title":"Java super keyword","text":"<ul> <li>To call methods of the superclass that is overridden in the subclass.</li> <li>To access attributes (fields) of the superclass if both superclass and subclass have attributes with the same name.</li> <li>To explicitly call superclass no-arg (default) or parameterized constructor from the subclass constructor.</li> </ul>"},{"location":"week-2/ce204-week-2/#java-super-keyword_5","title":"Java super keyword","text":"<ul> <li>The super keyword is used inside the child class only.</li> </ul>"},{"location":"week-2/ce204-week-2/#super-to-refer-parent-class-data-members","title":"super to refer parent class data members","text":"<ul> <li>When both parent class and child class have data members with the same name, </li> <li>then the super keyword is used to refer to the parent class data member from child class.</li> </ul>"},{"location":"week-2/ce204-week-2/#super-to-refer-parent-class-data-members_1","title":"super to refer parent class data members","text":"<pre><code>class ParentClass{\n\n    int num = 10;\n\n}\n</code></pre> <pre><code>class ChildClass extends ParentClass{\n\n    int num = 20;\n\n    void showData() {\n        System.out.println(\"Inside the ChildClass\");\n        System.out.println(\"ChildClass num = \" + num);\n        System.out.println(\"ParentClass num = \" + super.num);       \n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#super-to-refer-parent-class-data-members_2","title":"super to refer parent class data members","text":"<pre><code>public class SuperKeywordExample {\n\n    public static void main(String[] args) {\n        ChildClass obj = new ChildClass();\n\n        obj.showData();\n\n        System.out.println(\"\\nInside the non-child class\");\n        System.out.println(\"ChildClass num = \" + obj.num);\n        //System.out.println(\"ParentClass num = \" + super.num); //super can't be used here\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#super-to-refer-parent-class-method","title":"super to refer parent class method","text":"<ul> <li>When both parent class and child class have method with the same name, </li> <li>then the super keyword is used to refer to the parent class method from child class.</li> </ul>"},{"location":"week-2/ce204-week-2/#super-to-refer-parent-class-method_1","title":"super to refer parent class method","text":"<pre><code>class ParentClass{\n\n    int num1 = 10;\n\n    void showData() {\n        System.out.println(\"\\nInside the ParentClass showData method\");\n        System.out.println(\"ChildClass num = \" + num1);     \n    }   \n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#super-to-refer-parent-class-method_2","title":"super to refer parent class method","text":"<pre><code>class ChildClass extends ParentClass{\n\n    int num2 = 20;\n\n    void showData() {\n        System.out.println(\"\\nInside the ChildClass showData method\");\n        System.out.println(\"ChildClass num = \" + num2); \n\n        super.showData();\n\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#super-to-refer-parent-class-method_3","title":"super to refer parent class method","text":"<pre><code>public class SuperKeywordExample {\n\n    public static void main(String[] args) {\n        ChildClass obj = new ChildClass();\n\n        obj.showData();\n        //super.showData(); // super can't be used here\n\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#super-to-call-parent-class-constructor","title":"super to call parent class constructor","text":"<ul> <li>When an object of child class is created, it automatically calls the parent class default-constructor before it's own. </li> <li>But, the parameterized constructor of parent class must be called explicitly using the super keyword inside the child class constructor.</li> </ul>"},{"location":"week-2/ce204-week-2/#super-to-call-parent-class-constructor_1","title":"super to call parent class constructor","text":"<pre><code>class ParentClass{\n\n    int num1;\n\n    ParentClass(){\n        System.out.println(\"\\nInside the ParentClass default constructor\");\n        num1 = 10;\n    }\n\n    ParentClass(int value){\n        System.out.println(\"\\nInside the ParentClass parameterized constructor\");\n        num1 = value;\n    }   \n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#super-to-call-parent-class-constructor_2","title":"super to call parent class constructor","text":"<pre><code>class ChildClass extends ParentClass{\n\n    int num2;\n\n    ChildClass(){\n        super(100);\n        System.out.println(\"\\nInside the ChildClass constructor\");\n        num2 = 200;     \n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#super-to-call-parent-class-constructor_3","title":"super to call parent class constructor","text":"<pre><code>public class SuperKeywordExample {\n\n    public static void main(String[] args) {\n\n        ChildClass obj = new ChildClass();\n\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#super-to-call-parent-class-constructor_4","title":"super to call parent class constructor","text":"<ul> <li>To call the parameterized constructor of the parent class, </li> <li>the super keyword must be the first statement inside the child class constructor, </li> <li>and we must pass the parameter values.</li> </ul>"},{"location":"week-2/ce204-week-2/#access-overridden-methods-of-the-superclass","title":"Access Overridden Methods of the superclass","text":"<ul> <li>If methods with the same name are defined in both superclass and subclass, the method in the subclass overrides the method in the superclass. This is called method overriding.</li> </ul>"},{"location":"week-2/ce204-week-2/#example-1-method-overriding","title":"Example 1: Method overriding","text":"<pre><code>class Animal {\n\n  // overridden method\n  public void display(){\n    System.out.println(\"I am an animal\");\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#example-1-method-overriding_1","title":"Example 1: Method overriding","text":"<pre><code>class Dog extends Animal {\n\n  // overriding method\n  @Override\n  public void display(){\n    System.out.println(\"I am a dog\");\n  }\n\n  public void printMessage(){\n    display();\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#example-1-method-overriding_2","title":"Example 1: Method overriding","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n    Dog dog1 = new Dog();\n    dog1.printMessage();\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#example-1-method-overriding_3","title":"Example 1: Method overriding","text":"<p>In this example, by making an object dog1 of Dog class, we can call its method printMessage() which then executes the display() statement.</p> <p>Since display() is defined in both the classes, the method of subclass Dog overrides the method of superclass Animal. Hence, the display() of the subclass is called.</p>"},{"location":"week-2/ce204-week-2/#example-1-method-overriding_4","title":"Example 1: Method overriding","text":""},{"location":"week-2/ce204-week-2/#what-if-the-overridden-method-of-the-superclass-has-to-be-called","title":"What if the overridden method of the superclass has to be called?","text":"<ul> <li>We use super.display() if the overridden method display() of superclass Animal needs to be called.</li> </ul>"},{"location":"week-2/ce204-week-2/#example-2-super-to-call-superclass-method","title":"Example 2: super to Call Superclass Method","text":"<pre><code>class Animal {\n\n  // overridden method\n  public void display(){\n    System.out.println(\"I am an animal\");\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#example-2-super-to-call-superclass-method_1","title":"Example 2: super to Call Superclass Method","text":"<pre><code>class Dog extends Animal {\n\n  // overriding method\n  @Override\n  public void display(){\n    System.out.println(\"I am a dog\");\n  }\n\n  public void printMessage(){\n\n    // this calls overriding method\n    display();\n\n    // this calls overridden method\n    super.display();\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#example-2-super-to-call-superclass-method_2","title":"Example 2: super to Call Superclass Method","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n    Dog dog1 = new Dog();\n    dog1.printMessage();\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#example-2-super-to-call-superclass-method_3","title":"Example 2: super to Call Superclass Method","text":""},{"location":"week-2/ce204-week-2/#access-attributes-of-the-superclass","title":"Access Attributes of the Superclass","text":"<ul> <li>The superclass and subclass can have attributes with the same name. </li> <li>We use the super keyword to access the attribute of the superclass.</li> </ul>"},{"location":"week-2/ce204-week-2/#example-3-access-superclass-attribute","title":"Example 3: Access superclass attribute","text":"<pre><code>class Animal {\n  protected String type=\"animal\";\n}\n</code></pre> <pre><code>class Dog extends Animal {\n  public String type=\"mammal\";\n\n  public void printType() {\n    System.out.println(\"I am a \" + type);\n    System.out.println(\"I am an \" + super.type);\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#example-3-access-superclass-attribute_1","title":"Example 3: Access superclass attribute","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n    Dog dog1 = new Dog();\n    dog1.printType();\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#example-3-access-superclass-attribute_2","title":"Example 3: Access superclass attribute","text":"<ul> <li>In this example, we have defined the same instance field <code>type</code> in both the superclass <code>Animal</code> and the subclass <code>Dog</code>.</li> <li>We then created an object <code>dog1</code> of the Dog class. Then, the <code>printType()</code> method is called using this object.</li> <li>Inside the <code>printType()</code> function,<ul> <li><code>type</code> refers to the attribute of the subclass <code>Dog</code>.</li> <li><code>super.type</code> refers to the attribute of the superclass Animal.</li> </ul> </li> </ul>"},{"location":"week-2/ce204-week-2/#use-of-super-to-access-superclass-constructor","title":"Use of super() to access superclass constructor","text":"<ul> <li>As we know, when an object of a class is created, its default constructor is automatically called.</li> <li>To explicitly call the superclass constructor from the subclass constructor, we use <code>super()</code>. It's a special form of the super keyword.</li> <li><code>super()</code> can be used only inside the subclass constructor and must be the first statement.</li> </ul>"},{"location":"week-2/ce204-week-2/#example-4-use-of-super","title":"Example 4: Use of super()","text":"<pre><code>class Animal {\n\n  // default or no-arg constructor of class Animal\n  Animal() {\n    System.out.println(\"I am an animal\");\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#example-4-use-of-super_1","title":"Example 4: Use of super()","text":"<pre><code>class Dog extends Animal {\n\n  // default or no-arg constructor of class Dog\n  Dog() {\n\n    // calling default constructor of the superclass\n    super();\n\n    System.out.println(\"I am a dog\");\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#example-4-use-of-super_2","title":"Example 4: Use of super()","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n    Dog dog1 = new Dog();\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#example-4-use-of-super_3","title":"Example 4: Use of super()","text":"<ul> <li> <p>when an object dog1 of Dog class is created, it automatically calls the default or no-arg constructor of that class.</p> </li> <li> <p>Inside the subclass constructor, the super() statement calls the constructor of the superclass and executes the statements inside it. Hence, we get the output I am an animal.</p> </li> </ul>"},{"location":"week-2/ce204-week-2/#example-4-use-of-super_4","title":"Example 4: Use of super()","text":"<p>The flow of the program then returns back to the subclass constructor and executes the remaining statements. Thus, I am a dog will be printed.</p> <p>However, using super() is not compulsory. Even if super() is not used in the subclass constructor, the compiler implicitly calls the default constructor of the superclass.</p>"},{"location":"week-2/ce204-week-2/#example-4-use-of-super_5","title":"Example 4: Use of super()","text":"<ul> <li>So, why use redundant code if the compiler automatically invokes super()?</li> <li> <p>It is required if the parameterized constructor (a constructor that takes arguments) of the superclass has to be called from the subclass constructor.</p> </li> <li> <p>The parameterized super() must always be the first statement</p> </li> <li>in the body of the constructor of the subclass, </li> <li>otherwise, we get a compilation error.</li> </ul>"},{"location":"week-2/ce204-week-2/#example-5-call-parameterized-constructor-using-super","title":"Example 5: Call Parameterized Constructor Using super()","text":"<pre><code>class Animal {\n\n  // default or no-arg constructor\n  Animal() {\n    System.out.println(\"I am an animal\");\n  }\n\n  // parameterized constructor\n  Animal(String type) {\n    System.out.println(\"Type: \"+type);\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#example-5-call-parameterized-constructor-using-super_1","title":"Example 5: Call Parameterized Constructor Using super()","text":"<pre><code>class Dog extends Animal {\n\n  // default constructor\n  Dog() {\n\n    // calling parameterized constructor of the superclass\n    super(\"Animal\");\n\n    System.out.println(\"I am a dog\");\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#example-5-call-parameterized-constructor-using-super_2","title":"Example 5: Call Parameterized Constructor Using super()","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n    Dog dog1 = new Dog();\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#example-5-call-parameterized-constructor-using-super_3","title":"Example 5: Call Parameterized Constructor Using super()","text":"<p>If a parameterized constructor has to be called, we need to explicitly define it in the subclass constructor.</p> <p></p>"},{"location":"week-2/ce204-week-2/#example-5-call-parameterized-constructor-using-super_4","title":"Example 5: Call Parameterized Constructor Using super()","text":"<p>Note that in the above example, we explicitly called the parameterized constructor super(\"Animal\"). The compiler does not call the default constructor of the superclass in this case.</p>"},{"location":"week-2/ce204-week-2/#java-final-keyword","title":"Java final keyword","text":""},{"location":"week-2/ce204-week-2/#java-final-keyword_1","title":"Java final keyword","text":"<ul> <li>In java, the final is a keyword and it is used with the following things.</li> <li>With variable (to create constant)</li> <li>With method (to avoid method overriding)</li> <li>With class (to avoid inheritance)</li> </ul>"},{"location":"week-2/ce204-week-2/#java-final-restrictions","title":"Java final restrictions","text":"<ul> <li>the final variable cannot be reinitialized with another value</li> <li>the final method cannot be overridden</li> <li>the final class cannot be extended</li> </ul>"},{"location":"week-2/ce204-week-2/#final-with-variables","title":"final with variables","text":"<ul> <li>When a variable defined with the final keyword, </li> <li>it becomes a constant, and </li> <li>it does not allow us to modify the value. </li> <li>The variable defined with the final keyword allows only a one-time assignment, </li> <li>once a value assigned to it, <ul> <li>never allows us to change it again.</li> </ul> </li> </ul>"},{"location":"week-2/ce204-week-2/#final-with-variables-example-1","title":"final with variables example-1","text":"<pre><code>public class FinalVariableExample {\n    public static void main(String[] args) {\n        final int a = 10;\n        System.out.println(\"a = \" + a);\n        a = 100;    // Can't be modified\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#final-with-variables-example-2","title":"final with variables example-2","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n\n    // create a final variable\n    final int AGE = 32;\n\n    // try to change the final variable\n    AGE = 45;\n    System.out.println(\"Age: \" + AGE);\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#final-with-variables-recommendation","title":"final with variables recommendation","text":"<ul> <li>It is recommended to use uppercase to declare final variables in Java.</li> </ul>"},{"location":"week-2/ce204-week-2/#final-with-methods","title":"final with methods","text":"<ul> <li>When a method defined with the final keyword, </li> <li>it does not allow it to override. </li> <li>The final method extends to the child class, </li> <li>but the child class can not override or re-define it. </li> <li>It must be used as it has implemented in the parent class.</li> </ul>"},{"location":"week-2/ce204-week-2/#final-with-methods-example-1","title":"final with methods example-1","text":"<pre><code>class ParentClass{\n\n    int num = 10;\n\n    final void showData() {\n        System.out.println(\"Inside ParentClass showData() method\");\n        System.out.println(\"num = \" + num);\n    }\n\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#final-with-methods-example-1_1","title":"final with methods example-1","text":"<pre><code>class ChildClass extends ParentClass{\n\n    void showData() {\n        System.out.println(\"Inside ChildClass showData() method\");\n        System.out.println(\"num = \" + num);\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#final-with-methods-example-1_2","title":"final with methods example-1","text":"<pre><code>public class FinalKeywordExample {\n\n    public static void main(String[] args) {\n\n        ChildClass obj = new ChildClass();\n        obj.showData();\n\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#final-with-methods-example-2","title":"final with methods example-2","text":"<pre><code>class FinalDemo {\n    // create a final method\n    public final void display() {\n      System.out.println(\"This is a final method.\");\n    }\n}\n\nclass Main extends FinalDemo {\n  // try to override final method\n  public final void display() {\n    System.out.println(\"The final method is overridden.\");\n  }\n\n  public static void main(String[] args) {\n    Main obj = new Main();\n    obj.display();\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#final-with-class","title":"final with class","text":"<ul> <li>When a class defined with final keyword, it can not be extended by any other class.</li> </ul>"},{"location":"week-2/ce204-week-2/#final-with-class-example-1","title":"final with class example-1","text":"<pre><code>final class ParentClass{\n\n    int num = 10;\n\n    void showData() {\n        System.out.println(\"Inside ParentClass showData() method\");\n        System.out.println(\"num = \" + num);\n    }\n\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#final-with-class-example-1_1","title":"final with class example-1","text":"<pre><code>class ChildClass extends ParentClass{\n\n\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#final-with-class-example-1_2","title":"final with class example-1","text":"<pre><code>public class FinalKeywordExample {\n\n    public static void main(String[] args) {\n\n        ChildClass obj = new ChildClass();\n\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#final-with-class-example-2","title":"final with class example-2","text":"<pre><code>// create a final class\nfinal class FinalClass {\n  public void display() {\n    System.out.println(\"This is a final method.\");\n  }\n}\n\n// try to extend the final class\nclass Main extends FinalClass {\n  public  void display() {\n    System.out.println(\"The final method is overridden.\");\n  }\n\n  public static void main(String[] args) {\n    Main obj = new Main();\n    obj.display();\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-polymorphism","title":"Java Polymorphism","text":""},{"location":"week-2/ce204-week-2/#java-polymorphism_1","title":"Java Polymorphism","text":"<ul> <li>The polymorphism is the process of defining same method with different implementation. That means creating multiple methods with different behaviors.</li> <li>In java, polymorphism implemented using </li> <li>method overloading and </li> <li>method overriding.</li> </ul>"},{"location":"week-2/ce204-week-2/#ad-hoc-polymorphism","title":"Ad hoc polymorphism","text":"<ul> <li>The ad hoc polymorphism is a technique used to define </li> <li>the same method with different implementations and </li> <li>different arguments. </li> <li>In a java programming language, ad hoc polymorphism carried out with </li> <li>a method overloading concept.</li> </ul>"},{"location":"week-2/ce204-week-2/#ad-hoc-polymorphism_1","title":"Ad hoc polymorphism","text":"<ul> <li>In ad hoc polymorphism the method binding happens at the time of compilation. </li> <li>Ad hoc polymorphism is also known as compile-time polymorphism. </li> <li>Every function call binded with the respective overloaded method based on the arguments.</li> </ul>"},{"location":"week-2/ce204-week-2/#ad-hoc-polymorphism_2","title":"Ad hoc polymorphism","text":"<ul> <li>The ad hoc polymorphism implemented within the class only.</li> </ul>"},{"location":"week-2/ce204-week-2/#ad-hoc-polymorphism-example-1","title":"Ad hoc polymorphism example-1","text":"<pre><code>import java.util.Arrays;\n\npublic class AdHocPolymorphismExample {\n\n    void sorting(int[] list) {\n        Arrays.parallelSort(list);\n        System.out.println(\"Integers after sort: \" + Arrays.toString(list) );\n    }\n    void sorting(String[] names) {\n        Arrays.parallelSort(names);\n        System.out.println(\"Names after sort: \" + Arrays.toString(names) );     \n    }\n...\n</code></pre>"},{"location":"week-2/ce204-week-2/#ad-hoc-polymorphism-example-1_1","title":"Ad hoc polymorphism example-1","text":"<pre><code>...\n    public static void main(String[] args) {\n\n        AdHocPolymorphismExample obj = new AdHocPolymorphismExample();\n        int list[] = {2, 3, 1, 5, 4};\n        obj.sorting(list);  // Calling with integer array\n\n        String[] names = {\"rama\", \"raja\", \"shyam\", \"seeta\"};\n        obj.sorting(names); // Calling with String array\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#pure-polymorphism","title":"Pure polymorphism","text":"<ul> <li>The pure polymorphism is a technique used to define the same method with the same arguments but different implementations. </li> <li>In a java programming language, pure polymorphism carried out with </li> <li>a method overriding concept.</li> </ul>"},{"location":"week-2/ce204-week-2/#pure-polymorphism_1","title":"Pure polymorphism","text":"<ul> <li>In pure polymorphism, the method binding happens at run time. </li> <li>Pure polymorphism is also known as run-time polymorphism. </li> <li> <p>Every function call binding with the respective overridden method based on the object reference.</p> </li> <li> <p>When a child class has a definition for a member function of the parent class, </p> </li> <li>the parent class function is said to be overridden.</li> </ul>"},{"location":"week-2/ce204-week-2/#pure-polymorphism_2","title":"Pure polymorphism","text":"<ul> <li>The pure polymorphism implemented in the inheritance concept only.</li> </ul>"},{"location":"week-2/ce204-week-2/#pure-polymorphism-example-1","title":"Pure polymorphism example-1","text":"<pre><code>class ParentClass{\n\n    int num = 10;\n\n    void showData() {\n        System.out.println(\"Inside ParentClass showData() method\");\n        System.out.println(\"num = \" + num);\n    }\n\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#pure-polymorphism-example-1_1","title":"Pure polymorphism example-1","text":"<pre><code>class ChildClass extends ParentClass{\n\n    void showData() {\n        System.out.println(\"Inside ChildClass showData() method\");\n        System.out.println(\"num = \" + num);\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#pure-polymorphism-example-1_2","title":"Pure polymorphism example-1","text":"<pre><code>public class PurePolymorphism {\n\n    public static void main(String[] args) {\n\n        ParentClass obj = new ParentClass();\n        obj.showData();\n\n        obj = new ChildClass();\n        obj.showData();\n\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-method-overriding","title":"Java Method Overriding","text":"<ul> <li>During inheritance in Java, if the same method is present in both the superclass and the subclass. </li> <li>Then, the method in the subclass overrides the same method in the superclass. This is called method overriding.</li> </ul>"},{"location":"week-2/ce204-week-2/#polymorphism-using-method-overriding-example-2","title":"Polymorphism using method overriding example-2","text":""},{"location":"week-2/ce204-week-2/#1-2-3-4-5-6-7-8-9-10-11-12class-language-public-void-displayinfo-systemoutprintlncommon-english-language-class-java-extends-language-override-public-void-displayinfo-systemoutprintlnjava-programming-language","title":"<pre><code>class Language {\n  public void displayInfo() {\n    System.out.println(\"Common English Language\");\n  }\n}\n\nclass Java extends Language {\n  @Override\n  public void displayInfo() {\n    System.out.println(\"Java Programming Language\");\n  }\n}\n</code></pre>","text":""},{"location":"week-2/ce204-week-2/#polymorphism-using-method-overriding-example-2_1","title":"Polymorphism using method overriding example-2","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n\n    // create an object of Java class\n    Java j1 = new Java();\n    j1.displayInfo();\n\n    // create an object of Language class\n    Language l1 = new Language();\n    l1.displayInfo();\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#polymorphism-using-method-overriding-example-2_2","title":"Polymorphism using method overriding example-2","text":""},{"location":"week-2/ce204-week-2/#java-method-overloading","title":"Java Method Overloading","text":"<p>In a Java class, we can create methods with the same name if they differ in parameters. For example</p> <pre><code>void func() { ... }\nvoid func(int a) { ... }\nfloat func(double a) { ... }\nfloat func(int a, float b) { ... }\n</code></pre> <p>This is known as method overloading in Java. Here, the same method will perform different operations based on the parameter.</p>"},{"location":"week-2/ce204-week-2/#polymorphism-using-method-overloading-example-3","title":"Polymorphism using method overloading example-3","text":"<pre><code>class Pattern {\n\n  // method without parameter\n  public void display() {\n    for (int i = 0; i &lt; 10; i++) {\n      System.out.print(\"*\");\n    }\n  }\n\n  // method with single parameter\n  public void display(char symbol) {\n    for (int i = 0; i &lt; 10; i++) {\n      System.out.print(symbol);\n    }\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#polymorphism-using-method-overloading-example-3_1","title":"Polymorphism using method overloading example-3","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n    Pattern d1 = new Pattern();\n\n    // call method without any argument\n    d1.display();\n    System.out.println(\"\\n\");\n\n    // call method with a single argument\n    d1.display('#');\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#polymorphic-variables","title":"Polymorphic Variables","text":"<ul> <li>A variable is called polymorphic if it refers to different values under different conditions.</li> <li>Object variables (instance variables) represent the behavior of polymorphic variables in Java. </li> <li>It is because object variables of a class can refer to objects of its class as well as objects of its subclasses.</li> </ul>"},{"location":"week-2/ce204-week-2/#polymorphic-variables-example-1","title":"Polymorphic Variables Example-1","text":"<pre><code>class ProgrammingLanguage {\n  public void display() {\n    System.out.println(\"I am Programming Language.\");\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#polymorphic-variables-example-1_1","title":"Polymorphic Variables Example-1","text":"<pre><code>class Java extends ProgrammingLanguage {\n  @Override\n  public void display() {\n    System.out.println(\"I am Object-Oriented Programming Language.\");\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#polymorphic-variables-example-1_2","title":"Polymorphic Variables Example-1","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n\n    // declare an object variable\n    ProgrammingLanguage pl;\n\n    // create object of ProgrammingLanguage\n    pl = new ProgrammingLanguage();\n    pl.display();\n\n    // create object of Java class\n    pl = new Java();\n    pl.display();\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-encapsulation","title":"Java Encapsulation","text":""},{"location":"week-2/ce204-week-2/#java-encapsulation_1","title":"Java Encapsulation","text":"<ul> <li>It prevents outer classes from accessing and changing fields and methods of a class. This also helps to achieve data hiding</li> </ul>"},{"location":"week-2/ce204-week-2/#java-encapsulation-example","title":"Java Encapsulation Example","text":"<pre><code>class Area {\n\n  // fields to calculate area\n  int length;\n  int breadth;\n\n  // constructor to initialize values\n  Area(int length, int breadth) {\n    this.length = length;\n    this.breadth = breadth;\n  }\n\n  // method to calculate area\n  public void getArea() {\n    int area = length * breadth;\n    System.out.println(\"Area: \" + area);\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-encapsulation-example_1","title":"Java Encapsulation Example","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n\n    // create object of Area\n    // pass value of length and breadth\n    Area rectangle = new Area(5, 6);\n    rectangle.getArea();\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#why-encapsulation","title":"Why Encapsulation?","text":"<ul> <li>In Java, encapsulation helps us to keep </li> <li>related <ul> <li>fields and </li> <li>methods together, </li> </ul> </li> <li>which makes our code cleaner and easy to read.</li> </ul>"},{"location":"week-2/ce204-week-2/#why-encapsulation_1","title":"Why Encapsulation?","text":"<ul> <li>It helps to control the values of our data fields</li> </ul> <pre><code>class Person {\n  private int age;\n\n  public void setAge(int age) {\n    if (age &gt;= 0) {\n      this.age = age;\n    }\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#why-encapsulation_2","title":"Why Encapsulation?","text":"<ul> <li>The getter and setter methods provide </li> <li>read-only or </li> <li>write-only </li> <li>access to our class fields</li> </ul>"},{"location":"week-2/ce204-week-2/#1-2getname-provides-read-only-access-setname-provides-write-only-access","title":"<pre><code>getName()  // provides read-only access\nsetName() // provides write-only access\n</code></pre>","text":""},{"location":"week-2/ce204-week-2/#why-encapsulation_3","title":"Why Encapsulation?","text":"<ul> <li>It helps to decouple components of a system. </li> <li>For example, <ul> <li>we can encapsulate code into multiple bundles.</li> </ul> </li> <li>These decoupled components (bundle) </li> <li>can be developed, </li> <li>tested, and </li> <li>debugged independently and concurrently. </li> <li>And, any changes in a particular component </li> <li>do not have any effect on other components.</li> </ul>"},{"location":"week-2/ce204-week-2/#why-encapsulation_4","title":"Why Encapsulation?","text":"<ul> <li>We can also achieve data hiding using encapsulation. </li> <li>In the next example, </li> <li>if we change the length and breadth variable into private, </li> <li>then the access to these fields is restricted.</li> <li>And, they are kept hidden from outer classes. </li> <li>This is called data hiding.</li> </ul>"},{"location":"week-2/ce204-week-2/#why-encapsulation_5","title":"Why Encapsulation?","text":"<pre><code>class Area {\n\n  // fields to calculate area\n  int length;\n  int breadth;\n\n  // constructor to initialize values\n  Area(int length, int breadth) {\n    this.length = length;\n    this.breadth = breadth;\n  }\n\n  // method to calculate area\n  public void getArea() {\n    int area = length * breadth;\n    System.out.println(\"Area: \" + area);\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#why-encapsulation_6","title":"Why Encapsulation?","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n\n    // create object of Area\n    // pass value of length and breadth\n    Area rectangle = new Area(5, 6);\n    rectangle.getArea();\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#data-hiding","title":"Data Hiding","text":"<ul> <li> <p>Data hiding is a way of restricting the access of our data members by hiding the implementation details. </p> </li> <li> <p>Encapsulation also provides a way for data hiding.</p> </li> <li> <p>We can use access modifiers to achieve data hiding</p> </li> </ul>"},{"location":"week-2/ce204-week-2/#data-hiding-using-the-private-specifier-example","title":"Data hiding using the private specifier example","text":"<ul> <li>Making <code>age</code> private allowed us to restrict unauthorized access from outside the class. This is data hiding.</li> </ul>"},{"location":"week-2/ce204-week-2/#data-hiding-using-the-private-specifier-example_1","title":"Data hiding using the private specifier example","text":"<pre><code>class Person {\n\n  // private field\n  private int age;\n\n  // getter method\n  public int getAge() {\n    return age;\n  }\n\n  // setter method\n  public void setAge(int age) {\n    this.age = age;\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#data-hiding-using-the-private-specifier-example_2","title":"Data hiding using the private specifier example","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n\n    // create an object of Person\n    Person p1 = new Person();\n\n    // change age using setter\n    p1.setAge(24);\n\n    // access age using getter\n    System.out.println(\"My age is \" + p1.getAge());\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-method-overriding_1","title":"Java Method Overriding","text":""},{"location":"week-2/ce204-week-2/#java-method-overriding_2","title":"Java Method Overriding","text":"<ul> <li>The method overriding is the process of re-defining a method in a child class that is already defined in the parent class. </li> <li>When both parent and child classes have the same method, then that method is said to be the overriding method.</li> <li>The method overriding enables the child class to change the implementation of the method which aquired from parent class according to its requirement.</li> </ul>"},{"location":"week-2/ce204-week-2/#java-method-overriding_3","title":"Java Method Overriding","text":"<p>The method overriding is also known as  - dynamic method dispatch or  - run time polymorphism or  - pure polymorphism.</p>"},{"location":"week-2/ce204-week-2/#java-method-overriding-example","title":"Java Method Overriding Example","text":"<pre><code>class ParentClass{\n\n    int num = 10;\n\n    void showData() {\n        System.out.println(\"Inside ParentClass showData() method\");\n        System.out.println(\"num = \" + num);\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-method-overriding-example_1","title":"Java Method Overriding Example","text":"<pre><code>class ChildClass extends ParentClass{\n\n    void showData() {\n        System.out.println(\"Inside ChildClass showData() method\");\n        System.out.println(\"num = \" + num);\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-method-overriding-example_2","title":"Java Method Overriding Example","text":"<pre><code>public class PurePolymorphism {\n\n    public static void main(String[] args) {\n\n        ParentClass obj = new ParentClass();\n        obj.showData();\n\n        obj = new ChildClass();\n        obj.showData();\n\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#rules-for-method-overriding","title":"Rules for method overriding","text":"<p>While overriding a method, we must follow the below list of rules.</p> <ul> <li>Static methods can not be overridden.</li> <li>Final methods can not be overridden.</li> <li>Private methods can not be overridden.</li> <li>Constructor can not be overridden.</li> <li>An abstract method must be overridden.</li> <li>Use super keyword to invoke overridden method from child class.</li> </ul>"},{"location":"week-2/ce204-week-2/#rules-for-method-overriding_1","title":"Rules for method overriding","text":"<ul> <li>The return type of the overriding method must be same as the parent has it.</li> <li>The access specifier of the overriding method can be changed, but the visibility must increase but not decrease. For example, a protected method in the parent class can be made public, but not private, in the child class.</li> </ul>"},{"location":"week-2/ce204-week-2/#rules-for-method-overriding_2","title":"Rules for method overriding","text":"<ul> <li>If the overridden method does not throw an exception in the parent class, then the child class overriding method can only throw the unchecked exception, throwing a checked exception is not allowed.</li> <li>If the parent class overridden method does throw an exception, then the child class overriding method can only throw the same, or subclass exception, or it may not throw any exception.</li> </ul>"},{"location":"week-2/ce204-week-2/#method-overriding-example","title":"Method Overriding Example","text":"<pre><code>class Animal {\n   public void displayInfo() {\n      System.out.println(\"I am an animal.\");\n   }\n}\n\nclass Dog extends Animal {\n   @Override\n   public void displayInfo() {\n      System.out.println(\"I am a dog.\");\n   }\n}\n\nclass Main {\n   public static void main(String[] args) {\n      Dog d1 = new Dog();\n      d1.displayInfo();\n   }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#method-overriding-example_1","title":"Method Overriding Example","text":"<ul> <li> <p>annotations are the metadata that we used to provide information to the compiler</p> </li> <li> <p>It is not mandatory to use @Override. However, when we use this, the method should follow all the rules of overriding. Otherwise, the compiler will generate an error.</p> </li> </ul>"},{"location":"week-2/ce204-week-2/#method-overriding-example_2","title":"Method Overriding Example","text":""},{"location":"week-2/ce204-week-2/#super-keyword-in-java-overriding","title":"super Keyword in Java Overriding","text":"<ul> <li>Can we access the method of the superclass after overriding?</li> <li>The answer is Yes. To access the method of the superclass from the subclass, we use the super keyword</li> </ul>"},{"location":"week-2/ce204-week-2/#use-of-super-keyword-example","title":"Use of super Keyword Example","text":"<pre><code>class Animal {\n   public void displayInfo() {\n      System.out.println(\"I am an animal.\");\n   }\n}\n\nclass Dog extends Animal {\n   public void displayInfo() {\n      super.displayInfo();\n      System.out.println(\"I am a dog.\");\n   }\n}\n\nclass Main {\n   public static void main(String[] args) {\n      Dog d1 = new Dog();\n      d1.displayInfo();\n   }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#use-of-super-keyword-example_1","title":"Use of super Keyword Example","text":"<ul> <li> <p>In the above example, the subclass Dog overrides the method displayInfo() of the superclass Animal.</p> </li> <li> <p>When we call the method displayInfo() using the d1 object of the Dog subclass, the method inside the Dog subclass is called; the method inside the superclass is not called</p> </li> <li> <p>Inside displayInfo() of the Dog subclass, we have used super.displayInfo() to call displayInfo() of the superclass.</p> </li> </ul>"},{"location":"week-2/ce204-week-2/#use-of-super-keyword-example_2","title":"Use of super Keyword Example","text":"<ul> <li> <p>note that constructors in Java are not inherited. Hence, there is no such thing as constructor overriding in Java.</p> </li> <li> <p>However, we can call the constructor of the superclass from its subclasses. For that, we use super()</p> </li> </ul>"},{"location":"week-2/ce204-week-2/#access-specifiers-in-method-overriding","title":"Access Specifiers in Method Overriding","text":"<ul> <li> <p>The same method declared in the superclass and its subclasses can have different access specifiers. However, there is a restriction.</p> </li> <li> <p>We can only use those access specifiers in subclasses that provide larger access than the access specifier of the superclass. For example,</p> </li> <li> <p>Suppose, a method myClass() in the superclass is declared protected. Then, the same method myClass() in the subclass can be either public or protected, but not private.</p> </li> </ul>"},{"location":"week-2/ce204-week-2/#access-specifier-in-overriding-example","title":"Access Specifier in Overriding Example","text":"<pre><code>class Animal {\n   protected void displayInfo() {\n      System.out.println(\"I am an animal.\");\n   }\n}\n\nclass Dog extends Animal {\n   public void displayInfo() {\n      System.out.println(\"I am a dog.\");\n   }\n}\n\nclass Main {\n   public static void main(String[] args) {\n      Dog d1 = new Dog();\n      d1.displayInfo();\n   }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#access-specifier-in-overriding-example_1","title":"Access Specifier in Overriding Example","text":"<ul> <li> <p>In the above example, the subclass Dog overrides the method displayInfo() of the superclass Animal.</p> </li> <li> <p>Whenever we call displayInfo() using the d1 (object of the subclass), the method inside the subclass is called.</p> </li> <li> <p>Notice that, the displayInfo() is declared protected in the Animal superclass. The same method has the public access specifier in the Dog subclass. </p> </li> <li>This is possible because the public provides larger access than the protected.</li> </ul>"},{"location":"week-2/ce204-week-2/#overriding-abstract-methods","title":"Overriding Abstract Methods","text":"<ul> <li>In Java, abstract classes are created to be the superclass of other classes. </li> <li>And, if a class contains an abstract method, </li> <li>it is mandatory to override it.</li> </ul>"},{"location":"week-2/ce204-week-2/#java-nested-and-inner-class","title":"Java Nested and Inner Class","text":""},{"location":"week-2/ce204-week-2/#java-nested-and-inner-class_1","title":"Java Nested and Inner Class","text":"<ul> <li>In Java, you can define a class within another class. </li> <li>Such class is known as nested class</li> </ul> <pre><code>class OuterClass {\n  // ...\n  class NestedClass {\n      // ...\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-nested-and-inner-class_2","title":"Java Nested and Inner Class","text":"<ul> <li>There are two types of nested classes you can create in Java.</li> <li>Non-static nested class (inner class)</li> <li>Static nested class</li> </ul>"},{"location":"week-2/ce204-week-2/#non-static-nested-class-inner-class","title":"Non-Static Nested Class (Inner Class)","text":"<ul> <li>A non-static nested class is a class within another class. </li> <li> <p>It has access to members of the enclosing class (outer class). </p> <ul> <li>It is commonly known as inner class.</li> </ul> </li> <li> <p>Since the inner class exists within the outer class, </p> </li> <li>you must instantiate the outer class first, <ul> <li>in order to instantiate the inner class.</li> </ul> </li> </ul>"},{"location":"week-2/ce204-week-2/#non-static-nested-class-inner-class-example","title":"Non-Static Nested Class (Inner Class) Example","text":"<pre><code>class CPU {\n    double price;\n    // nested class\n    class Processor{\n\n        // members of nested class\n        double cores;\n        String manufacturer;\n\n        double getCache(){\n            return 4.3;\n        }\n    }\n\n    // nested protected class\n    protected class RAM{\n\n        // members of protected nested class\n        double memory;\n        String manufacturer;\n\n        double getClockSpeed(){\n            return 5.5;\n        }\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#non-static-nested-class-inner-class-example_1","title":"Non-Static Nested Class (Inner Class) Example","text":"<pre><code>public class Main {\n    public static void main(String[] args) {\n\n        // create object of Outer class CPU\n        CPU cpu = new CPU();\n\n       // create an object of inner class Processor using outer class\n        CPU.Processor processor = cpu.new Processor();\n\n        // create an object of inner class RAM using outer class CPU\n        CPU.RAM ram = cpu.new RAM();\n        System.out.println(\"Processor Cache = \" + processor.getCache());\n        System.out.println(\"Ram Clock speed = \" + ram.getClockSpeed());\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#non-static-nested-class-inner-class-example_2","title":"Non-Static Nested Class (Inner Class) Example","text":"<ul> <li>In the example program, there are two nested classes: </li> <li>Processor and RAM inside the outer class: <ul> <li>CPU. </li> </ul> </li> <li>We can declare the inner class as protected. </li> <li> <p>Hence, we have declared the RAM class as protected.</p> </li> <li> <p>Inside the Main class,</p> </li> <li>we first created an instance of an outer class CPU named cpu.</li> <li>Using the instance of the outer class, we then created objects of inner classes</li> </ul> <p></p><pre><code>CPU.Processor processor = cpu.new Processor;\nCPU.RAM ram = cpu.new RAM();\n</code></pre> - We use the dot (.) operator to create an instance of the inner class using the outer class."},{"location":"week-2/ce204-week-2/#accessing-members-of-outer-class-within-inner-class","title":"Accessing Members of Outer Class within Inner Class","text":"<ul> <li>We can access the members of the outer class by using this keyword</li> </ul>"},{"location":"week-2/ce204-week-2/#accessing-members-of-outer-class-within-inner-class-example","title":"Accessing Members of Outer Class within Inner Class Example","text":"<pre><code>class Car {\n    String carName;\n    String carType;\n\n    // assign values using constructor\n    public Car(String name, String type) {\n        this.carName = name;\n        this.carType = type;\n    }\n\n    // private method\n    private String getCarName() {\n        return this.carName;\n    }\n...\n</code></pre>"},{"location":"week-2/ce204-week-2/#accessing-members-of-outer-class-within-inner-class-example_1","title":"Accessing Members of Outer Class within Inner Class Example","text":"<pre><code>...\n// inner class\n    class Engine {\n        String engineType;\n        void setEngine() {\n\n           // Accessing the carType property of Car\n            if(Car.this.carType.equals(\"4WD\")){\n\n                // Invoking method getCarName() of Car\n                if(Car.this.getCarName().equals(\"Crysler\")) {\n                    this.engineType = \"Smaller\";\n                } else {\n                    this.engineType = \"Bigger\";\n                }\n\n            }else{\n                this.engineType = \"Bigger\";\n            }\n        }\n        String getEngineType(){\n            return this.engineType;\n        }\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#accessing-members-of-outer-class-within-inner-class-example_2","title":"Accessing Members of Outer Class within Inner Class Example","text":"<pre><code>public class Main {\n    public static void main(String[] args) {\n\n// create an object of the outer class Car\n        Car car1 = new Car(\"Mazda\", \"8WD\");\n\n        // create an object of inner class using the outer class\n        Car.Engine engine = car1.new Engine();\n        engine.setEngine();\n        System.out.println(\"Engine Type for 8WD= \" + engine.getEngineType());\n\n        Car car2 = new Car(\"Crysler\", \"4WD\");\n        Car.Engine c2engine = car2.new Engine();\n        c2engine.setEngine();\n        System.out.println(\"Engine Type for 4WD = \" + c2engine.getEngineType());\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#accessing-members-of-outer-class-within-inner-class-example_3","title":"Accessing Members of Outer Class within Inner Class Example","text":"<ul> <li>In the example program, we have the inner class named </li> <li>Engine inside the outer class Car. Here, notice the line,</li> </ul> <pre><code>if(Car.this.carType.equals(\"4WD\")) {...}\n</code></pre> <ul> <li>We are using <code>this</code> keyword to access the <code>carType</code> variable of the outer class. </li> <li>You may have noticed that instead of using <code>this.carType</code> we have used <code>Car.this.carType</code></li> </ul>"},{"location":"week-2/ce204-week-2/#accessing-members-of-outer-class-within-inner-class-example_4","title":"Accessing Members of Outer Class within Inner Class Example","text":"<ul> <li>It is because if we had not mentioned the name of the outer class Car, </li> <li> <p>then this keyword will represent the member inside the inner class.</p> </li> <li> <p>Similarly, we are also accessing the method of the outer class from the inner class.</p> </li> </ul> <pre><code>if (Car.this.getCarName().equals(\"Crysler\") {...}\n</code></pre> <ul> <li>It is important to note that, although the <code>getCarName()</code> is a <code>private</code> method, we are able to access it from the inner class.</li> </ul>"},{"location":"week-2/ce204-week-2/#static-nested-class","title":"Static Nested Class","text":"<ul> <li>In Java, we can also define a static class inside another class. </li> <li>Such class is known as static nested class. </li> <li> <p>Static nested classes are not called static inner classes.</p> </li> <li> <p>Unlike inner class, a static nested class cannot access the member variables of the outer class. </p> </li> <li>It is because the static nested class doesn't require you to create an instance of the outer class.</li> </ul> <pre><code>OuterClass.NestedClass obj = new OuterClass.NestedClass();\n</code></pre> <ul> <li>Here, we are creating an object of the static nested class by simply using the class name of the outer class. </li> <li>Hence, the outer class cannot be referenced using <code>OuterClass.this</code>.</li> </ul>"},{"location":"week-2/ce204-week-2/#static-inner-class-example","title":"Static Inner Class Example","text":"<pre><code>class MotherBoard {\n\n   // static nested class\n   static class USB{\n       int usb2 = 2;\n       int usb3 = 1;\n       int getTotalPorts(){\n           return usb2 + usb3;\n       }\n   }\n\n}\n</code></pre> <pre><code>public class Main {\n   public static void main(String[] args) {\n\n       // create an object of the static nested class\n       // using the name of the outer class\n       MotherBoard.USB usb = new MotherBoard.USB();\n       System.out.println(\"Total Ports = \" + usb.getTotalPorts());\n   }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#static-inner-class-example_1","title":"Static Inner Class Example","text":"<ul> <li>In the above program, we have created a static class named USB inside the class MotherBoard. Notice the line,</li> </ul> <pre><code>MotherBoard.USB usb = new MotherBoard.USB();\n</code></pre> <ul> <li> <p>Here, we are creating an object of USB using the name of the outer class.</p> </li> <li> <p>Now, let's see what would happen if you try to access the members of the outer class:</p> </li> </ul>"},{"location":"week-2/ce204-week-2/#accessing-members-of-outer-class-inside-static-inner-class-example","title":"Accessing members of Outer class inside Static Inner Class Example","text":"<pre><code>class MotherBoard {\n   String model;\n   public MotherBoard(String model) {\n       this.model = model;\n   }\n\n   // static nested class\n   static class USB{\n       int usb2 = 2;\n       int usb3 = 1;\n       int getTotalPorts(){\n           // accessing the variable model of the outer classs\n           if(MotherBoard.this.model.equals(\"MSI\")) {\n               return 4;\n           }\n           else {\n               return usb2 + usb3;\n           }\n       }\n   }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#accessing-members-of-outer-class-inside-static-inner-class-example_1","title":"Accessing members of Outer class inside Static Inner Class Example","text":"<pre><code>public class Main {\n   public static void main(String[] args) {\n\n       // create an object of the static nested class\n       MotherBoard.USB usb = new MotherBoard.USB();\n       System.out.println(\"Total Ports = \" + usb.getTotalPorts());\n   }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#accessing-members-of-outer-class-inside-static-inner-class-example_2","title":"Accessing members of Outer class inside Static Inner Class Example","text":"<ul> <li>When we try to run the program, we will get an error:</li> </ul> <pre><code>error: non-static variable this cannot be referenced from a static context\n</code></pre> - This is because we are not using the object of the outer class to create an object of the inner class.  - Hence, there is no reference to the outer class <code>Motherboard</code> stored in <code>Motherboard.this</code>."},{"location":"week-2/ce204-week-2/#key-points-to-remember","title":"Key Points to Remember","text":"<ul> <li>Java treats the inner class as a regular member of a class. They are just like methods and variables declared inside a class.</li> <li>Since inner classes are members of the outer class, you can apply any access modifiers like private, protected to your inner class which is not possible in normal classes.</li> <li>Since the nested class is a member of its enclosing outer class, you can use the dot (.) notation to access the nested class and its members.</li> <li>Using the nested class will make your code more readable and provide better encapsulation.</li> <li>Non-static nested classes (inner classes) have access to other members of the outer/enclosing class, even if they are declared private.</li> </ul>"},{"location":"week-2/ce204-week-2/#java-nested-static-class","title":"Java Nested Static Class","text":""},{"location":"week-2/ce204-week-2/#java-nested-static-class_1","title":"Java Nested Static Class","text":"<ul> <li>we can have a class inside another class in Java. Such classes are known as nested classes. In Java, nested classes are of two types:</li> <li>Nested non-static class (Inner class)</li> <li>Nested static class.</li> </ul>"},{"location":"week-2/ce204-week-2/#java-nested-static-class_2","title":"Java Nested Static Class","text":"<ul> <li>We use the keyword static to make our nested class static.</li> <li>Note: In Java, only nested classes are allowed to be static.</li> <li>Like regular classes, static nested classes can include both static and non-static fields and methods. For example,</li> </ul> <pre><code>Class Animal {\n   static class Mammal {\n      // static and non-static members of Mammal\n   }\n   // members of Animal\n} \n</code></pre> - Static nested classes are associated with the outer class.   - To access the static nested class, we don\u2019t need objects of the outer class."},{"location":"week-2/ce204-week-2/#static-nested-class-example","title":"Static Nested Class Example","text":"<pre><code>class Animal {\n\n// inner class\n   class Reptile {\n      public void displayInfo() {\n        System.out.println(\"I am a reptile.\");\n      }\n   }\n\n// static class\n   static class Mammal {\n      public void displayInfo() {\n        System.out.println(\"I am a mammal.\");\n      }\n   }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#static-nested-class-example_1","title":"Static Nested Class Example","text":"<pre><code>class Main {\n   public static void main(String[] args) {\n      // object creation of the outer class\n      Animal animal = new Animal();\n\n      // object creation of the non-static class\n      Animal.Reptile reptile = animal.new Reptile();\n      reptile.displayInfo();\n\n      // object creation of the static nested class\n      Animal.Mammal mammal = new Animal.Mammal();\n      mammal.displayInfo();\n\n   }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#static-nested-class-example_2","title":"Static Nested Class Example","text":"<ul> <li>In the example program, we have two nested class <code>Mammal</code> and <code>Reptile</code> inside a class <code>Animal</code>.</li> <li>To create an object of the non-static class Reptile, we have used</li> </ul> <pre><code>Animal.Reptile reptile = animal.new Reptile()\n</code></pre> <ul> <li>To create an object of the static class Mammal, we have used</li> </ul> <pre><code>Animal.Mammal mammal = new Animal.Mammal()\n</code></pre>"},{"location":"week-2/ce204-week-2/#accessing-members-of-outer-class","title":"Accessing Members of Outer Class","text":"<ul> <li>In Java, static nested classes are associated with the outer class. </li> <li>This is why static nested classes can only access the class members (static fields and methods) of the outer class.</li> </ul>"},{"location":"week-2/ce204-week-2/#accessing-non-static-members-example","title":"Accessing Non-static members Example","text":"<pre><code>class Animal {\n  static class Mammal {\n   public void displayInfo() {\n     System.out.println(\"I am a mammal.\");\n   }\n }\n\n class Reptile {\n   public void displayInfo() {\n     System.out.println(\"I am a reptile.\");\n   }\n }\n\n public void eat() {\n   System.out.println(\"I eat food.\");\n }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#accessing-non-static-members-example_1","title":"Accessing Non-static members Example","text":"<pre><code>class Main {\n public static void main(String[] args) {\n   Animal animal = new Animal();\n   Animal.Reptile reptile = animal.new Reptile();\n   reptile.displayInfo();\n\n   Animal.Mammal mammal = new Animal.Mammal();\n   mammal.displayInfo();\n   mammal.eat();\n }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#accessing-non-static-members-example_2","title":"Accessing Non-static members Example","text":"<ul> <li> <p>In the example, we have created a non-static method <code>eat()</code> inside the class Animal.</p> </li> <li> <p>Now, if we try to access <code>eat()</code> using the object <code>mammal</code>, the compiler shows an error.</p> </li> <li> <p>It is because <code>mammal</code> is an object of a static class and we cannot access non-static methods from static classes.</p> </li> </ul>"},{"location":"week-2/ce204-week-2/#static-top-level-class","title":"Static Top-level Class","text":"<ul> <li>only nested classes can be static. </li> <li>We cannot have static top-level classes.</li> </ul>"},{"location":"week-2/ce204-week-2/#static-top-level-class_1","title":"Static Top-level Class","text":"<ul> <li>if we try to make a top-level class static.</li> </ul> <pre><code>static class Animal {\n public static void displayInfo() {\n   System.out.println(\"I am an animal\");\n }\n}\n</code></pre> <pre><code>class Main {\n public static void main(String[] args) {\n   Animal.displayInfo();\n }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#static-top-level-class_2","title":"Static Top-level Class","text":"<pre><code>Main.java:1: error: modifier static not allowed here\nstatic class Animal {\n       ^\n1 error\ncompiler exit status 1\n</code></pre> <ul> <li>In the example, we have tried to create a static class Animal. </li> <li>Since Java doesn\u2019t allow static top-level class, </li> <li>we will get an error.</li> </ul>"},{"location":"week-2/ce204-week-2/#java-anonymous-class","title":"Java Anonymous Class","text":""},{"location":"week-2/ce204-week-2/#java-anonymous-class_1","title":"Java Anonymous Class","text":"<ul> <li>In Java, a class can contain another class known as nested class. It's possible to create a nested class without giving any name.</li> <li>A nested class that doesn't have any name is known as an anonymous class.</li> <li>An anonymous class must be defined inside another class. Hence, it is also known as an anonymous inner class. Its syntax is:</li> </ul> <pre><code>class outerClass {\n\n    // defining anonymous class\n    object1 = new Type(parameterList) {\n         // body of the anonymous class\n    };\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-anonymous-class_2","title":"Java Anonymous Class","text":"<ul> <li>Anonymous classes usually extend subclasses or implement interfaces.</li> <li>Here, Type can be</li> <li>a superclass that an anonymous class extends</li> <li>an interface that an anonymous class implements</li> <li>The above code creates an object, object1, of an anonymous class at runtime.</li> <li>Note: Anonymous classes are defined inside an expression. So, the semicolon is used at the end of anonymous classes to indicate the end of the expression.</li> </ul>"},{"location":"week-2/ce204-week-2/#anonymous-class-extending-a-class-example","title":"Anonymous Class Extending a Class Example","text":"<pre><code>class Polygon {\n   public void display() {\n      System.out.println(\"Inside the Polygon class\");\n   }\n}\n</code></pre> <pre><code>class AnonymousDemo {\n   public void createClass() {\n\n      // creation of anonymous class extending class Polygon\n      Polygon p1 = new Polygon() {\n         public void display() {\n            System.out.println(\"Inside an anonymous class.\");\n         }\n      };\n      p1.display();\n   }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#anonymous-class-extending-a-class-example_1","title":"Anonymous Class Extending a Class Example","text":"<pre><code>class Main {\n   public static void main(String[] args) {\n       AnonymousDemo an = new AnonymousDemo();\n       an.createClass();\n   }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#anonymous-class-extending-a-class-example_2","title":"Anonymous Class Extending a Class Example","text":"<ul> <li>In the example, we have created a class <code>Polygon</code>. It has a single method <code>display()</code>.</li> <li>We then created an anonymous class that extends the class Polygon and overrides the <code>display()</code> method.</li> <li>When we run the program, an object <code>p1</code> of the anonymous class is created. </li> <li>The object then calls the <code>display()</code> method of the anonymous class.</li> </ul>"},{"location":"week-2/ce204-week-2/#anonymous-class-implementing-an-interface-example","title":"Anonymous Class Implementing an Interface Example","text":"<pre><code>interface Polygon {\n   public void display();\n}\n</code></pre> <pre><code>class AnonymousDemo {\n   public void createClass() {\n\n      // anonymous class implementing interface\n      Polygon p1 = new Polygon() {\n         public void display() {\n            System.out.println(\"Inside an anonymous class.\");\n         }\n      };\n      p1.display();\n   }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#anonymous-class-implementing-an-interface-example_1","title":"Anonymous Class Implementing an Interface Example","text":"<pre><code>class Main {\n   public static void main(String[] args) {\n      AnonymousDemo an = new AnonymousDemo();\n      an.createClass();\n   }\n}\n</code></pre> <ul> <li>In the example, we have created an anonymous class that implements the Polygon interface.</li> </ul>"},{"location":"week-2/ce204-week-2/#advantages-of-anonymous-classes","title":"Advantages of Anonymous Classes","text":"<ul> <li>In anonymous classes, objects are created whenever they are required. </li> <li>That is, objects are created to perform some specific tasks. For example,</li> </ul> <pre><code>Object = new Example() {\n   public void display() {\n      System.out.println(\"Anonymous class overrides the method display().\");\n   }\n};\n</code></pre> <ul> <li>Here, an object of the anonymous class is created dynamically when we need to override the display() method.</li> <li>Anonymous classes also help us to make our code concise.</li> </ul>"},{"location":"week-2/ce204-week-2/#java-enums","title":"Java enums","text":""},{"location":"week-2/ce204-week-2/#java-enums_1","title":"Java enums","text":"<ul> <li>In Java, an enum (short for enumeration) is a type that has a fixed set of constant values. We use the <code>enum</code> keyword to declare enums. For example,</li> </ul> <pre><code>enum Size { \n   SMALL, MEDIUM, LARGE, EXTRALARGE \n}\n</code></pre> - Here, we have created an enum named Size. It contains fixed values <code>SMALL</code>, <code>MEDIUM</code>, <code>LARGE</code>, and <code>EXTRALARGE</code>. - These values inside the braces are called enum constants (values).   - Note: The enum constants are usually represented in uppercase."},{"location":"week-2/ce204-week-2/#java-enum-example","title":"Java Enum Example","text":"<pre><code>enum Size {\n   SMALL, MEDIUM, LARGE, EXTRALARGE\n}\n\nclass Main {\n   public static void main(String[] args) {\n      System.out.println(Size.SMALL);\n      System.out.println(Size.MEDIUM);\n   }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-enum-example_1","title":"Java Enum Example","text":"<p>we use the enum name to access the constant values.</p> <p>Also, we can create variables of enum types. For example</p> <pre><code>Size pizzaSize;\n</code></pre> <ul> <li>Here, pizzaSize is a variable of the Size type. It can only be assigned with 4 values.</li> </ul> <pre><code>pizzaSize = Size.SMALL;\npizzaSize = Size.MEDIUM;\npizzaSize = Size.LARGE;\npizzaSize = Size.EXTRALARGE;\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-enum-with-the-switch-statement-example","title":"Java Enum with the switch statement example","text":"<pre><code>enum Size {\n SMALL, MEDIUM, LARGE, EXTRALARGE\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-enum-with-the-switch-statement-example_1","title":"Java Enum with the switch statement example","text":"<pre><code>class Test {\n Size pizzaSize;\n public Test(Size pizzaSize) {\n   this.pizzaSize = pizzaSize;\n }\n public void orderPizza() {\n   switch(pizzaSize) {\n     case SMALL:\n       System.out.println(\"I ordered a small size pizza.\");\n       break;\n     case MEDIUM:\n       System.out.println(\"I ordered a medium size pizza.\");\n       break;\n     default:\n       System.out.println(\"I don't know which one to order.\");\n       break;\n   }\n }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-enum-with-the-switch-statement-example_2","title":"Java Enum with the switch statement example","text":"<pre><code>class Main {\n public static void main(String[] args) {\n   Test t1 = new Test(Size.MEDIUM);\n   t1.orderPizza();\n }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-enum-with-the-switch-statement-example_3","title":"Java Enum with the switch statement example","text":"<ul> <li>In the example, we have created an enum type <code>Size</code>. - We then declared a variable <code>pizzaSize</code> of the <code>Size</code> type.</li> <li>Here, the variable <code>pizzaSize</code> can only be assigned with 4 values (<code>SMALL, MEDIUM, LARGE, EXTRALARGE</code>).</li> <li>Notice the statement, <pre><code>Test t1 = new Test(Size.MEDIUM);\n</code></pre></li> <li>It will call the <code>Test()</code> constructor inside the <code>Test</code> class. Now, the variable pizzaSize is assigned with the <code>MEDIUM</code> constant.</li> <li>Based on the value, one of the cases of the switch case statement is executed.</li> </ul>"},{"location":"week-2/ce204-week-2/#enum-class-in-java","title":"Enum Class in Java","text":"<ul> <li>In Java, enum types are considered to be a special type of class. </li> <li>It was introduced with the release of Java 5.</li> <li>An enum class can include methods and fields just like regular classes. <pre><code>enum Size {\n    constant1, constant2, \u2026, constantN;\n\n    // methods and fields   \n}\n</code></pre></li> <li>When we create an enum class, the compiler will create instances (objects) of each enum constants. </li> <li>Also, all enum constant is always public static final by default.</li> </ul>"},{"location":"week-2/ce204-week-2/#java-enum-class-example","title":"Java Enum Class Example","text":"<pre><code>enum Size{\n  SMALL, MEDIUM, LARGE, EXTRALARGE;\n\n  public String getSize() {\n\n    // this will refer to the object SMALL\n    switch(this) {\n      case SMALL:\n        return \"small\";\n\n      case MEDIUM:\n        return \"medium\";\n\n      case LARGE:\n        return \"large\";\n\n      case EXTRALARGE:\n        return \"extra large\";\n\n      default:\n        return null;\n      }\n   }\n...\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-enum-class-example_1","title":"Java Enum Class Example","text":"<pre><code>...\n  public static void main(String[] args) {\n\n    // call getSize()\n    // using the object SMALL\n    System.out.println(\"The size of the pizza is \" + Size.SMALL.getSize());\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-enum-class-example_2","title":"Java Enum Class Example","text":"<ul> <li>In the example, we have created an enum class Size. It has four constants SMALL, MEDIUM, LARGE and EXTRALARGE.</li> <li>Since Size is an enum class, the compiler automatically creates instances for each enum constants.</li> <li>Here inside the main() method, we have used the instance SMALL to call the getSize() method.</li> <li>Note: Like regular classes, an enum class also may include constructors</li> </ul>"},{"location":"week-2/ce204-week-2/#methods-of-java-enum-class","title":"Methods of Java Enum Class","text":"<ul> <li>There are some predefined methods in enum classes that are readily available for use.</li> </ul>"},{"location":"week-2/ce204-week-2/#methods-of-java-enum-class_1","title":"Methods of Java Enum Class","text":""},{"location":"week-2/ce204-week-2/#java-enum-ordinal","title":"Java Enum ordinal()","text":"<ul> <li>The ordinal() method returns the position of an enum constant. For example,</li> </ul> <pre><code>ordinal(SMALL) \n// returns 0\n</code></pre>"},{"location":"week-2/ce204-week-2/#methods-of-java-enum-class_2","title":"Methods of Java Enum Class","text":""},{"location":"week-2/ce204-week-2/#enum-compareto","title":"Enum compareTo()","text":"<ul> <li>The compareTo() method compares the enum constants based on their ordinal value. For example,</li> </ul> <pre><code>Size.SMALL.compareTo(Size.MEDIUM)\n // returns ordinal(SMALL) - ordinal(MEDIUM)\n</code></pre>"},{"location":"week-2/ce204-week-2/#methods-of-java-enum-class_3","title":"Methods of Java Enum Class","text":""},{"location":"week-2/ce204-week-2/#enum-tostring","title":"Enum toString()","text":"<ul> <li>The toString() method returns the string representation of the enum constants. For example,</li> </ul> <pre><code>SMALL.toString()\n// returns \"SMALL\"\n</code></pre>"},{"location":"week-2/ce204-week-2/#methods-of-java-enum-class_4","title":"Methods of Java Enum Class","text":""},{"location":"week-2/ce204-week-2/#enum-name","title":"Enum name()","text":"<ul> <li>The name() method returns the defined name of an enum constant in string form. The returned value from the name() method is final. For example,</li> </ul> <pre><code>name(SMALL)\n// returns \"SMALL\"\n</code></pre>"},{"location":"week-2/ce204-week-2/#methods-of-java-enum-class_5","title":"Methods of Java Enum Class","text":""},{"location":"week-2/ce204-week-2/#java-enum-valueof","title":"Java Enum valueOf()","text":"<ul> <li>The <code>valueOf()</code> method takes a string and returns an enum constant having the same string name. For example,</li> </ul> <pre><code>Size.valueOf(\"SMALL\")\n// returns constant SMALL.\n</code></pre>"},{"location":"week-2/ce204-week-2/#methods-of-java-enum-class_6","title":"Methods of Java Enum Class","text":""},{"location":"week-2/ce204-week-2/#enum-values","title":"Enum values()","text":"<ul> <li>The <code>values()</code> method returns an array of enum type containing all the enum constants. For example,</li> </ul> <pre><code>Size[] enumArray = Size.value();\n</code></pre>"},{"location":"week-2/ce204-week-2/#why-java-enums","title":"Why Java Enums?","text":"<ul> <li> <p>In Java, enum was introduced to replace the use of int constants.</p> </li> <li> <p>Suppose we have used a collection of int constants.</p> </li> </ul> <pre><code>class Size {\n   public final static int SMALL = 1;\n   public final static int MEDIUM = 2;\n   public final static int LARGE = 3;\n   public final static int EXTRALARGE = 4;\n}\n</code></pre> <ul> <li>Here, the problem arises if we print the constants.   </li> <li>It is because only the number is printed which might not be helpful.</li> </ul>"},{"location":"week-2/ce204-week-2/#why-java-enums_1","title":"Why Java Enums?","text":"<ul> <li>So, instead of using int constants, we can simply use enums. For example,</li> </ul> <pre><code>enum Size {\n   SMALL, MEDIUM, LARGE, EXTRALARGE\n}\n</code></pre> <ul> <li>This makes our code more intuitive.</li> </ul>"},{"location":"week-2/ce204-week-2/#why-java-enums_2","title":"Why Java Enums?","text":"<ul> <li>Also, enum provides compile-time type safety.</li> <li>If we declare a variable of the Size type. For example,</li> </ul> <pre><code>Size size;\n</code></pre> <ul> <li>Here, it is guaranteed that the variable will hold one of the four values. </li> <li>Now, If we try to pass values other than those four values, </li> <li>the compiler will generate an error.</li> </ul>"},{"location":"week-2/ce204-week-2/#java-enum-constructor","title":"Java enum Constructor","text":"<ul> <li>In Java, an enum class may include a constructor like a regular class. These enum constructors are either</li> <li>private - accessible within the class or</li> <li>package-private - accessible within the package</li> </ul>"},{"location":"week-2/ce204-week-2/#enum-constructor-example","title":"enum Constructor Example","text":"<pre><code>enum Size {\n\n   // enum constants calling the enum constructors \n   SMALL(\"The size is small.\"),\n   MEDIUM(\"The size is medium.\"),\n   LARGE(\"The size is large.\"),\n   EXTRALARGE(\"The size is extra large.\");\n\n   private final String pizzaSize;\n\n   // private enum constructor\n   private Size(String pizzaSize) {\n      this.pizzaSize = pizzaSize;\n   }\n\n   public String getSize() {\n      return pizzaSize;\n   }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#enum-constructor-example_1","title":"enum Constructor Example","text":"<pre><code>class Main {\n   public static void main(String[] args) {\n      Size size = Size.SMALL;\n      System.out.println(size.getSize());\n   }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#enum-constructor-example_2","title":"enum Constructor Example","text":"<ul> <li>In the example, we have created an enum Size. </li> <li>It includes a private enum constructor. </li> <li>The constructor takes a string value as a parameter and assigns value to the variable pizzaSize.</li> <li>Since the constructor is private, </li> <li>we cannot access it from outside the class. However, </li> <li>we can use enum constants to call the constructor.</li> <li>In the Main class, we assigned SMALL to an enum variable size. </li> <li>The constant SMALL then calls the constructor Size with string as an argument.</li> <li>Finally, we called getSize() using size.</li> </ul>"},{"location":"week-2/ce204-week-2/#java-enum-strings","title":"Java enum Strings","text":""},{"location":"week-2/ce204-week-2/#java-enum-strings_1","title":"Java enum Strings","text":"<p>In Java, we can get the string representation of enum constants using the toString() method or the name() method. For example,</p> <p></p><pre><code>enum Size {\n   SMALL, MEDIUM, LARGE, EXTRALARGE\n}\n\nclass Main {\n   public static void main(String[] args) {\n\n      System.out.println(\"string value of SMALL is \" + Size.SMALL.toString());\n      System.out.println(\"string value of MEDIUM is \" + Size.MEDIUM.name());\n\n   }\n}\n</code></pre> - we have seen the default string representation of an enum constant is the name of the same constant."},{"location":"week-2/ce204-week-2/#change-default-string-value-of-enums","title":"Change Default String Value of enums","text":"<ul> <li>We can change the default string representation of enum constants by overriding the toString() method. For example,</li> </ul> <pre><code>enum Size {\n   SMALL {\n\n      // overriding toString() for SMALL\n      public String toString() {\n        return \"The size is small.\";\n      }\n   },\n\n   MEDIUM {\n\n     // overriding toString() for MEDIUM\n      public String toString() {\n        return \"The size is medium.\";\n      }\n   };\n}\n...\n</code></pre>"},{"location":"week-2/ce204-week-2/#change-default-string-value-of-enums_1","title":"Change Default String Value of enums","text":"<pre><code>...\nclass Main {\n   public static void main(String[] args) {\n      System.out.println(Size.MEDIUM.toString());\n   }\n}\n</code></pre> <ul> <li>In the above program, we have created an enum Size. And we have overridden the <code>toString()</code> method for enum constants <code>SMALL</code> and <code>MEDIUM</code>.</li> <li>Note: We cannot override the <code>name()</code> method. It is because the <code>name()</code> method is <code>final</code>.</li> </ul>"},{"location":"week-2/ce204-week-2/#java-abstract-class","title":"Java Abstract Class","text":""},{"location":"week-2/ce204-week-2/#java-abstract-class_1","title":"Java Abstract Class","text":"<ul> <li> <p>An abstract class is a class that created using abstract keyword. In other words, a class prefixed with abstract keyword is known as an abstract class.</p> </li> <li> <p>In java, an abstract class may contain abstract methods (methods without implementation) and also non-abstract methods (methods with implementation).</p> </li> <li> <p>We use the following syntax to create an abstract class.</p> </li> </ul> <pre><code>abstract class &lt;ClassName&gt;{\n    ...\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-abstract-class-example-1","title":"Java Abstract Class Example-1","text":"<pre><code>import java.util.*;\n\nabstract class Shape {\n    int length, breadth, radius;\n    Scanner input = new Scanner(System.in);\n\n    abstract void printArea();\n\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-abstract-class-example-1_1","title":"Java Abstract Class Example-1","text":"<pre><code>class Rectangle extends Shape {\n    void printArea() {\n        System.out.println(\"*** Finding the Area of Rectangle ***\");\n        System.out.print(\"Enter length and breadth: \");\n        length = input.nextInt();\n        breadth = input.nextInt();\n        System.out.println(\"The area of Rectangle is: \" + length * breadth);\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-abstract-class-example-1_2","title":"Java Abstract Class Example-1","text":"<pre><code>class Triangle extends Shape {\n    void printArea() {\n        System.out.println(\"\\n*** Finding the Area of Triangle ***\");\n        System.out.print(\"Enter Base And Height: \");\n        length = input.nextInt();\n        breadth = input.nextInt();\n        System.out.println(\"The area of Triangle is: \" + (length * breadth) / 2);\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-abstract-class-example-1_3","title":"Java Abstract Class Example-1","text":"<pre><code>class Cricle extends Shape {\n    void printArea() {\n        System.out.println(\"\\n*** Finding the Area of Cricle ***\");\n        System.out.print(\"Enter Radius: \");\n        radius = input.nextInt();\n        System.out.println(\"The area of Cricle is: \" + 3.14f * radius * radius);\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-abstract-class-example-1_4","title":"Java Abstract Class Example-1","text":"<pre><code>public class AbstractClassExample {\n    public static void main(String[] args) {\n        Rectangle rec = new Rectangle();\n        rec.printArea();\n\n        Triangle tri = new Triangle();\n        tri.printArea();\n\n        Cricle cri = new Cricle();\n        cri.printArea();\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-abstract-class-example-1_5","title":"Java Abstract Class Example-1","text":"<ul> <li>An abstract class can not be instantiated but can be referenced. </li> <li>That means we can not create an object of an abstract class, </li> <li>but base reference can be created.</li> </ul>"},{"location":"week-2/ce204-week-2/#java-abstract-class-example-1_6","title":"Java Abstract Class Example-1","text":"<ul> <li>In the example program, the child class objects are created to invoke the overridden abstract method. </li> <li>But we may also create base class reference and assign it with child class instance to invoke the same. </li> <li>The main method of the above program can be written as follows that produce the same output.</li> </ul>"},{"location":"week-2/ce204-week-2/#java-abstract-class-example-1_7","title":"Java Abstract Class Example-1","text":"<pre><code>public static void main(String[] args) {\n        Shape obj = new Rectangle();  //Base class reference to Child class instance\n        obj.printArea();\n\n        obj = new Triangle();\n        obj.printArea();\n\n        obj = new Cricle();\n        obj.printArea();\n    }\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-abstract-class-example-2","title":"Java Abstract Class Example-2","text":"<pre><code>abstract class Animal {\n  abstract void makeSound();\n\n  public void eat() {\n    System.out.println(\"I can eat.\");\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-abstract-class-example-2_1","title":"Java Abstract Class Example-2","text":"<pre><code>class Dog extends Animal {\n\n  // provide implementation of abstract method\n  public void makeSound() {\n    System.out.println(\"Bark bark\");\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-abstract-class-example-2_2","title":"Java Abstract Class Example-2","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n\n    // create an object of Dog class\n    Dog d1 = new Dog();\n\n    d1.makeSound();\n    d1.eat();\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-abstract-class-example-3","title":"Java Abstract Class Example-3","text":"<pre><code>abstract class MotorBike {\n  abstract void brake();\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-abstract-class-example-3_1","title":"Java Abstract Class Example-3","text":"<pre><code>class SportsBike extends MotorBike {\n\n  // implementation of abstract method\n  public void brake() {\n    System.out.println(\"SportsBike Brake\");\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-abstract-class-example-3_2","title":"Java Abstract Class Example-3","text":"<pre><code>class MountainBike extends MotorBike {\n\n  // implementation of abstract method\n  public void brake() {\n    System.out.println(\"MountainBike Brake\");\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-abstract-class-example-3_3","title":"Java Abstract Class Example-3","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n    MountainBike m1 = new MountainBike();\n    m1.brake();\n    SportsBike s1 = new SportsBike();\n    s1.brake();\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#accesses-constructor-of-abstract-classes","title":"Accesses Constructor of Abstract Classes","text":"<ul> <li>An abstract class can have constructors like the regular class. And, we can access the constructor of an abstract class from the subclass using the super keyword. For example,</li> </ul> <pre><code>abstract class Animal {\n   Animal() {\n      \u2026.\n   }\n}\n\nclass Dog extends Animal {\n   Dog() {\n      super();\n      ...\n   }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#accesses-constructor-of-abstract-classes_1","title":"Accesses Constructor of Abstract Classes","text":"<ul> <li>Note that the <code>super</code> should always be the first statement of the subclass constructor</li> </ul>"},{"location":"week-2/ce204-week-2/#java-abstract-class_2","title":"Java Abstract Class","text":""},{"location":"week-2/ce204-week-2/#rules-for-method-overriding_3","title":"Rules for method overriding","text":"<p>An abstract class must follow the below list of rules.</p> <ul> <li>An abstract class must be created with abstract keyword.</li> <li>An abstract class can be created without any abstract method.</li> <li>An abstract class may contain abstract methods and non-abstract methods.</li> <li>An abstract class may contain final methods that can not be overridden.</li> </ul>"},{"location":"week-2/ce204-week-2/#java-abstract-class_3","title":"Java Abstract Class","text":""},{"location":"week-2/ce204-week-2/#rules-for-method-overriding_4","title":"Rules for method overriding","text":"<ul> <li>An abstract class may contain static methods, but the abstract method can not be static.</li> <li>An abstract class may have a constructor that gets executed when the child class object created.</li> <li>An abstract method must be overridden by the child class, otherwise, it must be defined as an abstract class.</li> <li>An abstract class can not be instantiated but can be referenced.</li> </ul>"},{"location":"week-2/ce204-week-2/#java-abstract-class-review","title":"Java Abstract Class Review","text":""},{"location":"week-2/ce204-week-2/#java-abstract-class-review_1","title":"Java Abstract Class Review","text":"<p>The abstract class in Java cannot be instantiated (we cannot create objects of abstract classes). We use the abstract keyword to declare an abstract class. For example,</p> <pre><code>// create an abstract class\nabstract class Language {\n  // fields and methods\n}\n...\n\n// try to create an object Language\n// throws an error\nLanguage obj = new Language(); \n</code></pre>"},{"location":"week-2/ce204-week-2/#java-abstract-class-review_2","title":"Java Abstract Class Review","text":"<ul> <li>An abstract class can have both the regular methods and abstract methods. For example,</li> </ul> <pre><code>abstract class Language {\n\n  // abstract method\n  abstract void method1();\n\n  // regular method\n  void method2() {\n    System.out.println(\"This is regular method\");\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-abstract-method-review","title":"Java Abstract Method Review","text":"<ul> <li>A method that doesn't have its body is known as an abstract method. We use the same abstract keyword to create abstract methods. For example,</li> </ul> <pre><code>abstract void display();\n</code></pre> <p>Here, display() is an abstract method. The body of display() is replaced by ;.</p> <p>If a class contains an abstract method, then the class should be declared abstract. Otherwise, it will generate an error. For example,</p> <pre><code>// error\n// class should be abstract\nclass Language {\n\n  // abstract method\n  abstract void method1();\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-abstract-class-and-method-example","title":"Java Abstract Class and Method Example","text":"<ul> <li>Though abstract classes cannot be instantiated, we can create subclasses from it. We can then access members of the abstract class using the object of the subclass.</li> </ul>"},{"location":"week-2/ce204-week-2/#java-abstract-class-and-method-example_1","title":"Java Abstract Class and Method Example","text":"<pre><code>abstract class Language {\n\n  // method of abstract class\n  public void display() {\n    System.out.println(\"This is Java Programming\");\n  }\n}\n\nclass Main extends Language {\n\n  public static void main(String[] args) {\n\n    // create an object of Main\n    Main obj = new Main();\n\n    // access method of abstract class\n    // using object of Main class\n    obj.display();\n  }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#java-abstract-class-and-method-example_2","title":"Java Abstract Class and Method Example","text":"<ul> <li>In the  example, we have created an abstract class named Language. The class contains a regular method display().</li> <li>We have created the Main class that inherits the abstract class. Notice the statement, <pre><code>obj.display();\n</code></pre></li> <li>Here, obj is the object of the child class Main. We are calling the method of the abstract class using the object obj.</li> </ul>"},{"location":"week-2/ce204-week-2/#java-abstract-method-review-keypoints","title":"Java Abstract Method Review Keypoints","text":"<ul> <li>We use the abstract keyword to create abstract classes and methods.</li> <li>An abstract method doesn't have any implementation (method body).</li> <li>A class containing abstract methods should also be abstract.</li> <li>We cannot create objects of an abstract class.</li> <li>To implement features of an abstract class, we inherit subclasses from it and create objects of the subclass.</li> <li>A subclass must override all abstract methods of an abstract class. However, if the subclass is declared abstract, it's not mandatory to override abstract methods.</li> <li>We can access the static attributes and methods of an abstract class using the reference of the abstract class. For example, <pre><code>Animal.staticMethod();\n</code></pre></li> </ul>"},{"location":"week-2/ce204-week-2/#java-object-class","title":"Java Object Class","text":""},{"location":"week-2/ce204-week-2/#java-object-class_1","title":"Java Object Class","text":"<ul> <li>In java, the Object class is the super most class of any class hierarchy. </li> <li>The Object class in the java programming language is present inside the java.lang package.</li> <li>Every class in the java programming language is a subclass of Object class by default.</li> <li>The Object class is useful when you want to refer to any object whose type you don't know. </li> <li>Because it is the superclass of all other classes in java, <ul> <li>it can refer to any type of object.</li> </ul> </li> </ul>"},{"location":"week-2/ce204-week-2/#methods-of-object-class","title":"Methods of Object class","text":"<ul> <li>object getClass() </li> <li>Returns Class class object  </li> <li>int hashCode() </li> <li> <p>returns the hashcode number for object being used.</p> </li> <li> <p>boolean equals(Object obj) </p> </li> <li>compares the argument object to calling object.</li> <li>int clone() </li> <li>Compares two strings, ignoring case</li> </ul>"},{"location":"week-2/ce204-week-2/#methods-of-object-class_1","title":"Methods of Object class","text":"<ul> <li>object concat(String)</li> <li>Creates copy of invoking object </li> <li>String toString() </li> <li>Returns the string representation of invoking object.</li> <li>void notify()</li> <li>Wakes up a thread, waiting on invoking object's monitor.</li> <li>void notifyAll() </li> <li>wakes up all the threads, waiting on invoking object's - monitor.   </li> </ul>"},{"location":"week-2/ce204-week-2/#methods-of-object-class_2","title":"Methods of Object class","text":"<ul> <li>void wait()</li> <li> <p>causes the current thread to wait, until another thread - notifies</p> </li> <li> <p>void wait(long,int)</p> </li> <li>causes the current thread to wait for the specified - milliseconds and nanoseconds, until another thread notifies.  </li> <li>void finalize()</li> <li>It is invoked by the garbage collector before an object is being garbage collected. </li> </ul>"},{"location":"week-2/ce204-week-2/#java-forms-of-inheritance","title":"Java Forms of Inheritance","text":"<ul> <li>The inheritance concept used for the number of purposes in the java programming language. </li> <li>One of the main purposes is substitutability. </li> <li>The substitutability means that when a child class acquires properties from its parent class, the object of the parent class may be substituted with the child class object. </li> <li> <p>For example, if B is a child class of A, anywhere we expect an instance of A we can use an instance of B.</p> </li> <li> <p>The substitutability can achieve using inheritance, whether using extends or implements keywords.</p> </li> </ul>"},{"location":"week-2/ce204-week-2/#java-forms-of-inheritance_1","title":"Java Forms of Inheritance","text":"<ul> <li>The following are the differnt forms of inheritance in java.</li> <li>Specialization</li> <li>Specification</li> <li>Construction</li> <li>Extension</li> <li>Limitation</li> <li>Combination</li> </ul>"},{"location":"week-2/ce204-week-2/#java-forms-of-inheritance_2","title":"Java Forms of Inheritance","text":""},{"location":"week-2/ce204-week-2/#specialization","title":"Specialization","text":"<p>It is the most ideal form of inheritance. The subclass is a special case of the parent class. It holds the principle of substitutability.</p>"},{"location":"week-2/ce204-week-2/#java-forms-of-inheritance_3","title":"Java Forms of Inheritance","text":""},{"location":"week-2/ce204-week-2/#specification","title":"Specification","text":"<p>This is another commonly used form of inheritance. In this form of inheritance, the parent class just specifies which methods should be available to the child class but doesn't implement them. The java provides concepts like abstract and interfaces to support this form of inheritance. It holds the principle of substitutability.</p>"},{"location":"week-2/ce204-week-2/#java-forms-of-inheritance_4","title":"Java Forms of Inheritance","text":""},{"location":"week-2/ce204-week-2/#construction","title":"Construction","text":"<p>This is another form of inheritance where the child class may change the behavior defined by the parent class (overriding). It does not hold the principle of substitutability.</p>"},{"location":"week-2/ce204-week-2/#java-forms-of-inheritance_5","title":"Java Forms of Inheritance","text":""},{"location":"week-2/ce204-week-2/#extension","title":"Extension","text":"<p>This is another form of inheritance where the child class may add its new properties. It holds the principle of substitutability.</p>"},{"location":"week-2/ce204-week-2/#java-forms-of-inheritance_6","title":"Java Forms of Inheritance","text":""},{"location":"week-2/ce204-week-2/#limitation","title":"Limitation","text":"<p>This is another form of inheritance where the subclass restricts the inherited behavior. It does not hold the principle of substitutability.</p>"},{"location":"week-2/ce204-week-2/#java-forms-of-inheritance_7","title":"Java Forms of Inheritance","text":""},{"location":"week-2/ce204-week-2/#combination","title":"Combination","text":"<p>This is another form of inheritance where the subclass inherits properties from multiple parent classes. Java does not support multiple inheritance type.</p>"},{"location":"week-2/ce204-week-2/#benefits-and-costs-of-inheritance-in-java","title":"Benefits and Costs of Inheritance in java","text":"<ul> <li>Inheritance is the core and more useful concept of Object-Oriented Programming. </li> <li>It proWith inheritance, we will be able to override the methods of the base class so that the meaningful implementation of the base class method can be designed in the derived class. </li> <li>An inheritance leads to less development and maintenance costs. Vides many benefits, and a few of them are listed below.</li> </ul>"},{"location":"week-2/ce204-week-2/#benefits-of-inheritance","title":"Benefits of Inheritance","text":"<ul> <li>Inheritance helps in code reuse. The child class may use the code defined in the parent class without re-writing it.</li> <li>Inheritance can save time and effort as the main code need not be written again.</li> <li>Inheritance provides a clear model structure which is easy to understand.</li> <li>An inheritance leads to less development and maintenance costs.</li> <li>With inheritance, we will be able to override the methods of the base class so that the meaningful implementation of the base class method can be designed in the derived class. An inheritance leads to less development and maintenance costs.</li> <li>In inheritance base class can decide to keep some data private so that it cannot be altered by the derived class.</li> </ul>"},{"location":"week-2/ce204-week-2/#costs-of-inheritance","title":"Costs of Inheritance","text":"<ul> <li>Inheritance decreases the execution speed due to the increased time and effort it takes, the program to jump through all the levels of overloaded classes.</li> <li>Inheritance makes the two classes (base and inherited class) get tightly coupled. This means one cannot be used independently of each other.</li> <li>The changes made in the parent class will affect the behavior of child class too.</li> <li>The overuse of inheritance makes the program more complex.</li> </ul>"},{"location":"week-2/ce204-week-2/#defining-packages-in-java","title":"Defining Packages in java","text":""},{"location":"week-2/ce204-week-2/#defining-packages-in-java_1","title":"Defining Packages in java","text":"<ul> <li>In java, a package is a container of classes, </li> <li>interfaces, and </li> <li>sub-packages. </li> <li>We may think of it as a folder in a file directory.</li> <li>We use the packages to </li> <li>avoid naming conflicts and </li> <li>to organize <ul> <li>project-related </li> <li>classes, </li> <li>interfaces, and </li> <li>sub-packages into a bundle.</li> </ul> </li> </ul>"},{"location":"week-2/ce204-week-2/#defining-packages-in-java_2","title":"Defining Packages in java","text":"<ul> <li>In java, the packages have divided into two types.</li> <li>Built-in Packages</li> <li>User-defined Packages</li> </ul>"},{"location":"week-2/ce204-week-2/#built-in-packages","title":"Built-in Packages","text":"<ul> <li>The built-in packages are the packages from java API. The Java API is a library of pre-defined classes, interfaces, and sub-packages. </li> <li> <p>The built-in packages were included in the JDK.</p> </li> <li> <p>There are many built-in packages in java, few of them are as <code>java, lang, io, util, awt, javax, swing, net, sql</code>, etc.</p> </li> <li> <p>We need to import the built-in packages to use them in our program. </p> </li> <li>To import a package, we use the <code>import</code> statement.</li> </ul>"},{"location":"week-2/ce204-week-2/#user-defined-packages","title":"User-defined Packages","text":"<ul> <li>The user-defined packages are the packages created by the user. </li> <li>User is free to create their own packages.</li> </ul>"},{"location":"week-2/ce204-week-2/#definig-a-package-in-java","title":"Definig a Package in java","text":"<ul> <li>We use the package keyword to create or define a package in java programming language.</li> </ul> <pre><code>package packageName;\n</code></pre>"},{"location":"week-2/ce204-week-2/#definig-a-package-in-java_1","title":"Definig a Package in java","text":"<ul> <li> <p>The package statement must be the first statement in the program.</p> </li> <li> <p>The package name must be a single word.</p> </li> <li> <p>The package name must use Camel case notation.</p> </li> </ul>"},{"location":"week-2/ce204-week-2/#definig-a-package-in-java_2","title":"Definig a Package in java","text":"<ul> <li>create a user-defined package myPackage</li> </ul> <pre><code>package myPackage;\n\npublic class DefiningPackage {\n\n    public static void main(String[] args) {\n\n        System.out.println(\"This class belongs to myPackage.\");\n\n    }\n\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#definig-a-package-in-java_3","title":"Definig a Package in java","text":"<ul> <li>Now, save the example code in a file <code>DefiningPackage.java</code>, and compile it using the following command.</li> </ul> <pre><code>javac -d . DefiningPackage.java\n</code></pre> <ul> <li> <p>The above command creates a directory with the package name myPackage, and the <code>DefiningPackage.class</code> is saved into it.</p> </li> <li> <p>Run the program use the following command.</p> </li> </ul> <pre><code>java myPackage.DefiningPackage\n</code></pre> <ul> <li>When we use IDE like Eclipse, Netbeans, etc. the package structure is created automatically.</li> </ul>"},{"location":"week-2/ce204-week-2/#access-protection-in-java-packages","title":"Access protection in java packages","text":"<ul> <li>In java, the access modifiers define the accessibility of the class and its members. </li> <li> <p>For example, private members are accessible within the same class members only. Java has four access modifiers, and they are default, private, protected, and public.</p> </li> <li> <p>In java, the package is a container of classes, sub-classes, interfaces, and sub-packages. The class acts as a container of data and methods. So, the access modifier decides the accessibility of class members across the different packages.</p> </li> <li> <p>In java, the accessibility of the members of a class or interface depends on its access specifiers. </p> </li> </ul>"},{"location":"week-2/ce204-week-2/#access-protection-in-java-packages_1","title":"Access protection in java packages","text":""},{"location":"week-2/ce204-week-2/#access-protection-in-java-packages_2","title":"Access protection in java packages","text":"<ul> <li> <p>The public members can be accessed everywhere.</p> </li> <li> <p>The private members can be accessed only inside the same class.</p> </li> <li> <p>The protected members are accessible to every child class (same package or other packages).</p> </li> <li> <p>The default members are accessible within the same package but not outside the package.</p> </li> </ul>"},{"location":"week-2/ce204-week-2/#access-protection-in-java-packages-example","title":"Access protection in java packages example","text":"<pre><code>class ParentClass{\n    int a = 10;\n    public int b = 20;\n    protected int c = 30;\n    private int d = 40;\n\n    void showData() {\n        System.out.println(\"Inside ParentClass\");\n        System.out.println(\"a = \" + a);\n        System.out.println(\"b = \" + b);\n        System.out.println(\"c = \" + c);\n        System.out.println(\"d = \" + d);\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#access-protection-in-java-packages-example_1","title":"Access protection in java packages example","text":"<pre><code>class ChildClass extends ParentClass {\n\n    void accessData() {\n        System.out.println(\"Inside ChildClass\");\n        System.out.println(\"a = \" + a);\n        System.out.println(\"b = \" + b);\n        System.out.println(\"c = \" + c);\n        //System.out.println(\"d = \" + d);   // private member can't be accessed\n    }\n\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#access-protection-in-java-packages-example_2","title":"Access protection in java packages example","text":"<pre><code>public class AccessModifiersExample {\n\n    public static void main(String[] args) {\n\n        ChildClass obj = new ChildClass();\n        obj.showData();\n        obj.accessData();\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#importing-packages-in-java","title":"Importing Packages in java","text":"<ul> <li> <p>In java, the import keyword used to import built-in and user-defined packages. When a package has imported, we can refer to all the classes of that package using their name directly.</p> </li> <li> <p>The import statement must be after the package statement, and before any other statement.</p> </li> <li> <p>Using an import statement, we may import a specific class or all the classes from a package.</p> </li> </ul>"},{"location":"week-2/ce204-week-2/#importing-packages-in-java_1","title":"Importing Packages in java","text":"<ul> <li> <p>Using one import statement, we may import only one package or a class.</p> </li> <li> <p>Using an import statement, we can not import a class directly, but it must be a part of a package.</p> </li> <li> <p>A program may contain any number of import statements.</p> </li> </ul>"},{"location":"week-2/ce204-week-2/#importing-specific-class","title":"Importing specific class","text":"<pre><code>import packageName.ClassName;\n</code></pre>"},{"location":"week-2/ce204-week-2/#importing-specific-class_1","title":"Importing specific class","text":"<ul> <li>import a built-in package and Scanner class.</li> </ul> <pre><code>package myPackage;\n\nimport java.util.Scanner;\n\npublic class ImportingExample {\n\n    public static void main(String[] args) {\n\n        Scanner read = new Scanner(System.in);\n\n        int i = read.nextInt();\n\n        System.out.println(\"You have entered a number \" + i);\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#importing-all-the-classes","title":"Importing all the classes","text":"<ul> <li>Using an importing statement, we can import all the classes of a package. To import all the classes of the package, we use * symbol. </li> <li>The following syntax is employed to import all the classes of a package.</li> </ul> <pre><code>import packageName.*;\n</code></pre>"},{"location":"week-2/ce204-week-2/#importing-all-the-classes_1","title":"Importing all the classes","text":"<ul> <li>import a built-in package.</li> </ul> <pre><code>package myPackage;\n\nimport java.util.*;\n\npublic class ImportingExample {\n\n    public static void main(String[] args) {\n\n        Scanner read = new Scanner(System.in);\n\n        int i = read.nextInt();\n\n        System.out.println(\"You have entered a number \" + i);\n\n        Random rand = new Random();\n\n        int num = rand.nextInt(100);\n\n        System.out.println(\"Randomly generated number \" + num);\n    }\n}\n</code></pre>"},{"location":"week-2/ce204-week-2/#importing-all-the-classes_2","title":"Importing all the classes","text":"<ul> <li> <p>The import statement imports only classes of the package, but not sub-packages and its classes.</p> </li> <li> <p>We may also import sub-packages by using a symbol '.' (dot) to separate parent package and sub-package.</p> </li> </ul>"},{"location":"week-2/ce204-week-2/#references","title":"References","text":"<ul> <li>BtechSmartClass-super Keyword</li> <li>Programiz-super Keyword</li> <li>BtechSmartClass-Java final Keyword</li> <li>Programiz-final Keyword</li> <li>BtechSmartClass-java Polymorphism</li> <li>Programiz-Polymorphism</li> <li>Programiz-Encapsulation</li> <li>BtechSmartClass-Java Method Overriding</li> </ul>"},{"location":"week-2/ce204-week-2/#references_1","title":"References","text":"<ul> <li>Programiz-Method Overriding</li> <li>Programiz-Nested Inner Class</li> <li>Programiz-Static Class</li> <li>Programiz-Anonymous Class</li> <li>Programiz-enums</li> <li>Programiz-enum constructor</li> <li>Programiz-enum string</li> <li>BtechSmartClass-Java Abstract Class</li> <li>Programiz-Abstract Classes Methods</li> </ul>"},{"location":"week-2/ce204-week-2/#references_2","title":"References","text":"<ul> <li>BtechSmartClass-Java Object class</li> <li>BtechSmartClass-Java Forms of Inheritance</li> <li>Programiz-Interfaces</li> <li>BtechSmartClass-Java Benefits and Costs of Inheritance</li> <li>BtechSmartClass-Java Defining Packages</li> <li>BtechSmartClass-Java Access Protection in Packages</li> <li>BtechSmartClass-Java Importing Packages</li> </ul> <p>\\(End-Of-Week-2-Module\\)</p>"},{"location":"week-3/ce204-week-3/","title":"CEN206 Object-Oriented Programming","text":""},{"location":"week-3/ce204-week-3/#cen206-object-oriented-programming-formerly-ce204","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-3/ce204-week-3/#week-3-oop-with-java-iii","title":"Week-3 (OOP with Java-III)","text":""},{"location":"week-3/ce204-week-3/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC-PDF, DOC-DOCX, SLIDE, PPTX,</p>"},{"location":"week-3/ce204-week-3/#oop-with-java-iii","title":"OOP with Java-III","text":""},{"location":"week-3/ce204-week-3/#outline-1","title":"Outline (1)","text":"<ul> <li>Defining an Interface in Java</li> <li>Implementing an Interface in Java</li> <li>Nested Interfaces in Java</li> <li>Variables in Java Interfaces</li> <li>Extending an Interface in java</li> </ul>"},{"location":"week-3/ce204-week-3/#outline-2","title":"Outline (2)","text":"<ul> <li>Advantages of Interface in Java</li> <li>default methods in Java Interfaces</li> <li>private and static Methods in Interface</li> <li>Java Reflection</li> <li>Java Wrapper Classes</li> <li>Java Lambda Expressions</li> </ul>"},{"location":"week-3/ce204-week-3/#defining-an-interface-in-java","title":"Defining an Interface in Java","text":""},{"location":"week-3/ce204-week-3/#defining-an-interface-in-java_1","title":"Defining an Interface in Java","text":"<ul> <li>In java, an interface is similar to a class, </li> <li>but it contains abstract methods and static final variables only. </li> <li>The interface in Java is another mechanism to achieve abstraction.</li> <li>We may think of an interface as a completely abstract class. </li> <li>None of the methods in the interface has an implementation, </li> <li>and all the variables in the interface are constants.</li> <li>All the methods of an interface, </li> <li>implemented by the class that implements it.</li> <li>The interface in java enables java to support multiple-inheritance. </li> <li>An interface may extend only one interface, </li> <li>but a class may implement any number of interfaces.</li> </ul>"},{"location":"week-3/ce204-week-3/#defining-an-interface-in-java_2","title":"Defining an Interface in Java","text":"<ul> <li> <p>An interface is a container of abstract methods and static final variables.</p> </li> <li> <p>An interface, implemented by a class. (class implements interface).</p> </li> <li> <p>An interface may extend another interface. (Interface extends Interface).</p> </li> <li> <p>An interface never implements another interface, or class.</p> </li> <li> <p>A class may implement any number of interfaces.</p> </li> <li> <p>We can not instantiate an interface.</p> </li> <li> <p>Specifying the keyword abstract for interface methods is optional, it automatically added.</p> </li> <li> <p>All the members of an interface are public by default.</p> </li> </ul>"},{"location":"week-3/ce204-week-3/#defining-an-interface-in-java_3","title":"Defining an Interface in Java","text":"<ul> <li>Defining an interface is similar to that of a class. We use the keyword interface to define an interface. </li> <li>All the members of an interface are public by default. The following is the syntax for defining an interface.</li> </ul> <pre><code>interface InterfaceName{\n    ...\n    members declaration;\n    ...\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#defining-an-interface-in-java_4","title":"Defining an Interface in Java","text":"<ul> <li>In the example we defined an interface HumanInterfaceExample that contains two abstract methods learn(), work() and one constant duration.</li> </ul> <pre><code>interface HumanInterfaceExample {\n\n    void learn(String str);\n    void work();\n\n    int duration = 10;\n\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#defining-an-interface-in-java-example-1","title":"Defining an Interface in Java Example-1","text":"<ul> <li>Every interface in Java is auto-completed by the compiler. For example, in the above example code, </li> <li>no member is defined as public, but all are public automatically.</li> <li>The above code automatically converted as follows.</li> </ul> <pre><code>interface HumanInterfaceExample {\n\n    public abstract void learn(String str);\n    public abstract void work();\n\n    public static final int duration = 10;\n\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#implementing-an-interface-in-java","title":"Implementing an Interface in Java","text":""},{"location":"week-3/ce204-week-3/#implementing-an-interface-in-java_1","title":"Implementing an Interface in Java","text":"<ul> <li>In java, an interface is implemented by a class. </li> <li>The class that implements an interface must provide code for all the methods defined in the interface, otherwise, </li> <li>it must be defined as an abstract class.</li> <li>The class uses a keyword <code>implements</code> to implement an interface. </li> <li>A class can implement any number of interfaces. </li> <li>When a class wants to implement more than one interface, </li> <li>we use the implements keyword is followed by a comma-separated list of the interfaces implemented by the class.</li> </ul>"},{"location":"week-3/ce204-week-3/#implementing-an-interface-in-java_2","title":"Implementing an Interface in Java","text":"<ul> <li>The following is the syntax for defineing a class that implements an interface.</li> </ul> <pre><code>class className implements InterfaceName{\n    ...\n    boby-of-the-class\n    ...\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#implementing-an-interface-in-java-example-1","title":"Implementing an Interface in Java Example-1","text":"<pre><code>interface Human {\n\n    void learn(String str);\n    void work();\n\n    int duration = 10;\n\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#implementing-an-interface-in-java-example-1_1","title":"Implementing an Interface in Java Example-1","text":"<pre><code>class Programmer implements Human{\n    public void learn(String str) {\n        System.out.println(\"Learn using \" + str);\n    }\n    public void work() {\n        System.out.println(\"Develop applications\");\n    }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#implementing-an-interface-in-java-example-1_2","title":"Implementing an Interface in Java Example-1","text":"<pre><code>public class HumanTest {\n\n    public static void main(String[] args) {\n        Programmer trainee = new Programmer();\n        trainee.learn(\"coding\");\n        trainee.work();\n    }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#implementing-an-interface-in-java-example-1_3","title":"Implementing an Interface in Java Example-1","text":"<ul> <li>In the example we defined an interface </li> <li>Human that contains two abstract methods <ul> <li>learn(), </li> <li>work() and one constant duration. </li> </ul> </li> <li>The class Programmer implements the interface. </li> <li>As it implementing the Human interface it must provide the body of all the methods those defined in the Human interface.</li> </ul>"},{"location":"week-3/ce204-week-3/#implementing-an-interface-in-java-example-2","title":"Implementing an Interface in Java Example-2","text":"<pre><code>interface Polygon {\n  void getArea(int length, int breadth);\n}\n</code></pre> <pre><code>// implement the Polygon interface\nclass Rectangle implements Polygon {\n\n  // implementation of abstract method\n  public void getArea(int length, int breadth) {\n    System.out.println(\"The area of the rectangle is \" + (length * breadth));\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#implementing-an-interface-in-java-example-2_1","title":"Implementing an Interface in Java Example-2","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n    Rectangle r1 = new Rectangle();\n    r1.getArea(5, 6);\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#implementing-an-interface-in-java-example-3","title":"Implementing an Interface in Java Example-3","text":"<pre><code>// create an interface\ninterface Language {\n  void getName(String name);\n}\n</code></pre> <pre><code>// class implements interface\nclass ProgrammingLanguage implements Language {\n\n  // implementation of abstract method\n  public void getName(String name) {\n    System.out.println(\"Programming Language: \" + name);\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#implementing-an-interface-in-java-example-3_1","title":"Implementing an Interface in Java Example-3","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n    ProgrammingLanguage language = new ProgrammingLanguage();\n    language.getName(\"Java\");\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#implementing-multiple-interfaces","title":"Implementing multiple Interfaces","text":"<ul> <li>When a class wants to implement more than one interface, </li> <li>we use the implements keyword is followed by a comma-separated list of the interfaces implemented by the class.</li> </ul>"},{"location":"week-3/ce204-week-3/#implementing-multiple-interfaces_1","title":"Implementing multiple Interfaces","text":"<ul> <li>The following is the syntax for defineing a class that implements multiple interfaces.</li> </ul> <pre><code>class className implements InterfaceName1, InterfaceName2, ...{\n    ...\n    boby-of-the-class\n    ...\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#implementing-multiple-interfaces-example-1","title":"Implementing multiple Interfaces Example-1","text":"<ul> <li>In the example  we defined a class that implements multiple interfaces.</li> </ul> <pre><code>interface Human {   \n    void learn(String str);\n    void work();\n}\n</code></pre> <pre><code>interface Recruitment {\n    boolean screening(int score);\n    boolean interview(boolean selected);\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#implementing-multiple-interfaces-example-1_1","title":"Implementing multiple Interfaces Example-1","text":"<pre><code>class Programmer implements Human, Recruitment {\n    public void learn(String str) {\n        System.out.println(\"Learn using \" + str);\n    }\n    public boolean screening(int score) {\n        System.out.println(\"Attend screening test\");\n        int thresold = 20;\n        if(score &gt; thresold)\n            return true;\n        return false;\n    }\n    public boolean interview(boolean selected) {\n        System.out.println(\"Attend interview\");\n        if(selected)\n            return true;\n        return false;\n    } \n    public void work() {\n        System.out.println(\"Develop applications\");\n    }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#implementing-multiple-interfaces-example-1_2","title":"Implementing multiple Interfaces Example-1","text":"<pre><code>public class HumanTest {\n    public static void main(String[] args) {\n        Programmer trainee = new Programmer();\n        trainee.learn(\"Coding\");\n        trainee.screening(30);\n        trainee.interview(true);\n        trainee.work();\n    }\n}\n</code></pre> <ul> <li>In the example, two interfaces <code>Human</code> and <code>Recruitment</code>, and a class <code>Programmer</code> implements both the interfaces.</li> </ul>"},{"location":"week-3/ce204-week-3/#implementing-multiple-interfaces-example-2","title":"Implementing multiple Interfaces Example-2","text":"<pre><code>interface A {\n  // members of A\n}\n</code></pre> <pre><code>interface B {\n  // members of B\n}\n</code></pre> <pre><code>class C implements A, B {\n  // abstract members of A\n  // abstract members of B\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#nested-interfaces-in-java","title":"Nested Interfaces in Java","text":""},{"location":"week-3/ce204-week-3/#nested-interfaces-in-java_1","title":"Nested Interfaces in Java","text":"<ul> <li>In java, an interface may be defined inside another interface, </li> <li>and also inside a class. </li> <li>The interface that defined inside another interface or a class is konwn as nested interface. </li> <li>The nested interface is also refered as inner interface.</li> </ul>"},{"location":"week-3/ce204-week-3/#nested-interfaces-in-java_2","title":"Nested Interfaces in Java","text":"<ul> <li> <p>The nested interface declared within an interface is public by default.</p> </li> <li> <p>The nested interface declared within a class can be with any access modifier.</p> </li> <li> <p>Every nested interface is static by default.</p> </li> </ul>"},{"location":"week-3/ce204-week-3/#nested-interfaces-in-java_3","title":"Nested Interfaces in Java","text":"<ul> <li>The nested interface cannot be accessed directly. </li> <li>We can only access the nested interface by using outer interface or outer class name followed by dot( . ), followed by the nested interface name.</li> </ul>"},{"location":"week-3/ce204-week-3/#nested-interface-inside-another-interface-example","title":"Nested interface inside another interface Example","text":"<ul> <li>The nested interface that defined inside another interface must be accessed as <code>OuterInterface.InnerInterface</code>.</li> </ul> <pre><code>interface OuterInterface{\n    void outerMethod();\n\n    interface InnerInterface{\n        void innerMethod();\n    }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#nested-interface-inside-another-interface-example_1","title":"Nested interface inside another interface Example","text":"<pre><code>class OnlyOuter implements OuterInterface{\n    public void outerMethod() {\n        System.out.println(\"This is OuterInterface method\");\n    }\n}\n</code></pre> <pre><code>class OnlyInner implements OuterInterface.InnerInterface{\n    public void innerMethod() {\n        System.out.println(\"This is InnerInterface method\");\n    }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#nested-interface-inside-another-interface-example_2","title":"Nested interface inside another interface Example","text":"<pre><code>public class NestedInterfaceExample {\n\n    public static void main(String[] args) {\n        OnlyOuter obj_1 = new OnlyOuter();\n        OnlyInner obj_2 = new OnlyInner();\n\n        obj_1.outerMethod();\n        obj_2.innerMethod();\n    }\n\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#nested-interface-inside-a-class-example","title":"Nested interface inside a class Example","text":"<ul> <li>The nested interface that defined inside a class must be accessed as <code>ClassName.InnerInterface</code></li> </ul> <pre><code>class OuterClass{\n\n    interface InnerInterface{\n        void innerMethod();\n    }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#nested-interface-inside-a-class-example_1","title":"Nested interface inside a class Example","text":"<pre><code>class ImplementingClass implements OuterClass.InnerInterface{\n    public void innerMethod() {\n        System.out.println(\"This is InnerInterface method\");\n    }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#nested-interface-inside-a-class-example_2","title":"Nested interface inside a class Example","text":"<pre><code>public class NestedInterfaceExample {\n\n    public static void main(String[] args) {\n        ImplementingClass obj = new ImplementingClass();\n\n        obj.innerMethod();\n    }\n\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#variables-in-java-interfaces","title":"Variables in Java Interfaces","text":""},{"location":"week-3/ce204-week-3/#variables-in-java-interfaces_1","title":"Variables in Java Interfaces","text":"<ul> <li>In java, an interface is a completely abstract class. </li> <li>An interface is a container of abstract methods and static final variables. </li> <li>The interface contains the static final variables. </li> <li>The variables defined in an interface can not be modified by the class that implements the interface,</li> <li>but it may use as it defined in the interface.</li> </ul>"},{"location":"week-3/ce204-week-3/#variables-in-java-interfaces_2","title":"Variables in Java Interfaces","text":"<ul> <li> <p>The variable in an interface is public, static, and final by default.</p> </li> <li> <p>If any variable in an interface is defined without public, static, and final keywords then, the compiler automatically adds the same.</p> </li> <li> <p>No access modifier is allowed except the public for interface variables.</p> </li> <li> <p>Every variable of an interface must be initialized in the interface itself.</p> </li> <li> <p>The class that implements an interface can not modify the interface variable, but it may use as it defined in the interface.</p> </li> </ul>"},{"location":"week-3/ce204-week-3/#variables-in-java-interfaces-example-1","title":"Variables in Java Interfaces Example-1","text":"<pre><code>interface SampleInterface{\n\n    int UPPER_LIMIT = 100;\n\n    //int LOWER_LIMIT; // Error - must be initialised\n\n}\n</code></pre> <pre><code>public class InterfaceVariablesExample implements SampleInterface{\n\n    public static void main(String[] args) {\n\n        System.out.println(\"UPPER LIMIT = \" + UPPER_LIMIT);\n\n        // UPPER_LIMIT = 150; // Can not be modified\n    }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#extending-an-interface-in-java","title":"Extending an Interface in java","text":""},{"location":"week-3/ce204-week-3/#extending-an-interface-in-java_1","title":"Extending an Interface in java","text":"<ul> <li>In java, an interface can extend another interface.   </li> <li>When an interface wants to extend another interface, <ul> <li>it uses the keyword extends. </li> </ul> </li> <li>The interface that extends another interface has its own members and all the members defined in its parent interface too. </li> <li>The class which implements a child interface needs to provide code for the methods defined in both child and parent interfaces, </li> <li>otherwise, it needs to be defined as abstract class.</li> </ul>"},{"location":"week-3/ce204-week-3/#extending-an-interface-in-java_2","title":"Extending an Interface in Java","text":"<ul> <li> <p>An interface can extend another interface.</p> </li> <li> <p>An interface can not extend multiple interfaces.</p> </li> <li> <p>An interface can implement neither an interface nor a class.</p> </li> <li> <p>The class that implements child interface needs to provide code for all the methods defined in both child and parent interfaces.</p> </li> </ul>"},{"location":"week-3/ce204-week-3/#extending-an-interface-in-java-example-1","title":"Extending an Interface in Java Example-1","text":"<pre><code>interface ParentInterface{\n    void parentMethod();\n}\n</code></pre> <pre><code>interface ChildInterface extends ParentInterface{\n    void childMethod();\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#extending-an-interface-in-java-example-1_1","title":"Extending an Interface in Java Example-1","text":"<pre><code>class ImplementingClass implements ChildInterface{\n\n    public void childMethod() {\n        System.out.println(\"Child Interface method!!\");\n    }\n\n    public void parentMethod() {\n        System.out.println(\"Parent Interface mehtod!\");\n    }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#extending-an-interface-in-java-example-1_2","title":"Extending an Interface in Java Example-1","text":"<pre><code>public class ExtendingAnInterface {\n\n    public static void main(String[] args) {\n\n        ImplementingClass obj = new ImplementingClass();\n\n        obj.childMethod();\n        obj.parentMethod();\n\n    }\n\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#extending-an-interface-in-java-example-2","title":"Extending an Interface in Java Example-2","text":"<ul> <li>Here, the Polygon interface extends the Line interface. Now, if any class implements Polygon, it should provide implementations for all the abstract methods of both Line and Polygon</li> </ul> <pre><code>interface Line {\n  // members of Line interface\n}\n\n// extending interface\ninterface Polygon extends Line {\n  // members of Polygon interface\n  // members of Line interface\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#extending-multiple-interfaces-in-java-example","title":"Extending Multiple Interfaces in Java Example","text":"<pre><code>interface A {\n   ...\n}\n</code></pre> <pre><code>interface B {\n   ... \n}\n</code></pre> <pre><code>interface C extends A, B {\n   ...\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#advantages-of-interface-in-java","title":"Advantages of Interface in Java","text":""},{"location":"week-3/ce204-week-3/#advantages-of-interface-in-java_1","title":"Advantages of Interface in Java","text":"<ul> <li>Similar to abstract classes, interfaces help us to achieve abstraction in Java</li> <li>Here, we know getArea() calculates the area of polygons but the way area is calculated is different for different polygons. Hence, the implementation of getArea() is independent of one another.</li> </ul>"},{"location":"week-3/ce204-week-3/#advantages-of-interface-in-java_2","title":"Advantages of Interface in Java","text":"<ul> <li>Interfaces provide specifications that a class (which implements it) must follow.</li> <li>In our previous example, we have used getArea() as a specification inside the interface Polygon. This is like setting a rule that we should be able to get the area of every polygon.</li> <li>Now any class that implements the Polygon interface must provide an implementation for the getArea() method.</li> </ul>"},{"location":"week-3/ce204-week-3/#advantages-of-interface-in-java_3","title":"Advantages of Interface in Java","text":"<ul> <li>Interfaces are also used to achieve multiple inheritance in Java</li> <li>In the example, the class Rectangle is implementing two different interfaces. This is how we achieve multiple inheritance in Java.</li> </ul> <pre><code>interface Line {\n\u2026\n}\n\ninterface Polygon {\n\u2026\n}\n\nclass Rectangle implements Line, Polygon {\n\u2026\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#advantages-of-interface-in-java_4","title":"Advantages of Interface in Java","text":"<ul> <li>All the methods inside an interface are implicitly public and all fields are implicitly public static final. For example,</li> </ul> <pre><code>interface Language {\n\n  // by default public static final\n  String type = \"programming language\";\n\n  // by default public\n  void getName();\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#default-methods-in-java-interfaces","title":"default methods in Java Interfaces","text":""},{"location":"week-3/ce204-week-3/#default-methods-in-java-interfaces_1","title":"default methods in Java Interfaces","text":"<ul> <li>With the release of Java 8, we can now add methods with implementation inside an interface. </li> <li>These methods are called default methods.</li> <li>To declare default methods inside interfaces, we use the default keyword. For example,</li> </ul> <pre><code>public default void getSides() {\n   // body of getSides()\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#why-default-methods-in-java-interfaces","title":"why default methods in Java Interfaces","text":"<ul> <li>Let's take a scenario to understand why default methods are introduced in Java.</li> <li>Suppose, we need to add a new method in an interface.</li> <li>We can add the method in our interface easily without implementation. However, that's not the end of the story. All our classes that implement that interface must provide an implementation for the method.</li> <li>If a large number of classes were implementing this interface, we need to track all these classes and make changes to them. This is not only tedious but error-prone as well.</li> <li>To resolve this, Java introduced default methods. Default methods are inherited like ordinary methods.</li> </ul>"},{"location":"week-3/ce204-week-3/#default-method-in-java-interface-example","title":"Default Method in Java Interface Example","text":"<pre><code>interface Polygon {\n  void getArea();\n\n  // default method \n  default void getSides() {\n    System.out.println(\"I can get sides of a polygon.\");\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#default-method-in-java-interface-example_1","title":"Default Method in Java Interface Example","text":"<pre><code>// implements the interface\nclass Rectangle implements Polygon {\n  public void getArea() {\n    int length = 6;\n    int breadth = 5;\n    int area = length * breadth;\n    System.out.println(\"The area of the rectangle is \" + area);\n  }\n\n  // overrides the getSides()\n  public void getSides() {\n    System.out.println(\"I have 4 sides.\");\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#default-method-in-java-interface-example_2","title":"Default Method in Java Interface Example","text":"<pre><code>// implements the interface\nclass Square implements Polygon {\n  public void getArea() {\n    int length = 5;\n    int area = length * length;\n    System.out.println(\"The area of the square is \" + area);\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#default-method-in-java-interface-example_3","title":"Default Method in Java Interface Example","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n\n    // create an object of Rectangle\n    Rectangle r1 = new Rectangle();\n    r1.getArea();\n    r1.getSides();\n\n    // create an object of Square\n    Square s1 = new Square();\n    s1.getArea();\n    s1.getSides();\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#default-method-in-java-interface-example_4","title":"Default Method in Java Interface Example","text":"<ul> <li>In the example, we have created an interface named Polygon. It has a default method getSides() and an abstract method getArea().</li> <li>Here, we have created two classes Rectangle and Square that implement Polygon.</li> <li>The Rectangle class provides the implementation of the getArea() method and overrides the getSides() method. However, the Square class only provides the implementation of the getArea() method.</li> <li>Now, while calling the getSides() method using the Rectangle object, the overridden method is called. However, in the case of the Square object, the default method is called.</li> </ul>"},{"location":"week-3/ce204-week-3/#private-and-static-methods-in-interface","title":"private and static Methods in Interface","text":""},{"location":"week-3/ce204-week-3/#private-and-static-methods-in-interface_1","title":"private and static Methods in Interface","text":"<ul> <li>The Java 8 also added another feature to include static methods inside an interface.</li> <li>Similar to a class, we can access static methods of an interface using its references. For example,</li> </ul> <pre><code>// create an interface\ninterface Polygon {\n  staticMethod(){..}\n}\n\n// access static method\nPolygon.staticMethod();\n</code></pre>"},{"location":"week-3/ce204-week-3/#private-and-static-methods-in-interface_2","title":"private and static Methods in Interface","text":"<ul> <li>Note: With the release of Java 9, private methods are also supported in interfaces.</li> <li>We cannot create objects of an interface. </li> <li>Hence, private methods are used as helper methods that provide support to other methods in interfaces.</li> </ul>"},{"location":"week-3/ce204-week-3/#java-interface-practical-example","title":"Java Interface Practical Example","text":"<pre><code>// To use the sqrt function\nimport java.lang.Math;\n\ninterface  Polygon {\n   void getArea();\n\n // calculate the perimeter of a Polygon\n   default void getPerimeter(int... sides) {\n      int perimeter = 0;\n      for (int side: sides) {\n         perimeter += side;\n      }\n\n   System.out.println(\"Perimeter: \" + perimeter);\n   }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#java-interface-practical-example_1","title":"Java Interface Practical Example","text":"<pre><code>class Triangle implements Polygon {\n   private int a, b, c;\n   private double s, area;\n\n// initializing sides of a triangle\n   Triangle(int a, int b, int c) {\n      this.a = a;\n      this.b = b;\n      this.c = c;\n      s = 0;\n   }\n\n// calculate the area of a triangle\n   public void getArea() {\n      s = (double) (a + b + c)/2;\n      area = Math.sqrt(s*(s-a)*(s-b)*(s-c));\n      System.out.println(\"Area: \" + area);\n   }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#java-interface-practical-example_2","title":"Java Interface Practical Example","text":"<pre><code>class Main {\n   public static void main(String[] args) {\n      Triangle t1 = new Triangle(2, 3, 4);\n\n// calls the method of the Triangle class\n      t1.getArea();\n\n// calls the method of Polygon\n      t1.getPerimeter(2, 3, 4);\n   }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#java-interface-practical-example_3","title":"Java Interface Practical Example","text":"<ul> <li>In the example, we have created an interface named Polygon. </li> <li>It includes a default method getPerimeter() and an abstract method getArea().</li> <li>We can calculate the perimeter of all polygons in the same manner so we implemented the body of getPerimeter() in Polygon.</li> <li>Now, all polygons that implement Polygon can use getPerimeter() to calculate perimeter.</li> <li>However, the rule for calculating the area is different for different polygons. </li> <li>Hence, getArea() is included without implementation.</li> <li>Any class that implements Polygon must provide an implementation of getArea().</li> </ul>"},{"location":"week-3/ce204-week-3/#java-reflection","title":"Java Reflection","text":""},{"location":"week-3/ce204-week-3/#java-reflection_1","title":"Java Reflection","text":"<ul> <li>In Java, reflection allows us to inspect and manipulate classes, interfaces, constructors, methods, and fields at run time.</li> <li>There is a class in Java named <code>Class</code> that keeps all the information about objects and classes at runtime. The object of <code>Class</code> can be used to perform reflection.</li> </ul>"},{"location":"week-3/ce204-week-3/#reflection-of-java-classes","title":"Reflection of Java Classes","text":"<ul> <li>In order to reflect a Java class, we first need to create an object of Class.</li> <li>And, using the object we can call various methods to get information about methods, fields, and constructors present in a class.</li> <li>There exists three ways to create objects of Class:</li> </ul>"},{"location":"week-3/ce204-week-3/#reflection-of-java-classes_1","title":"Reflection of Java Classes","text":"<ul> <li>Using forName() method</li> </ul> <pre><code>class Dog {...}\n\n// create object of Class\n// to reflect the Dog class\nClass a = Class.forName(\"Dog\");\n</code></pre> - Here, the forName() method takes the name of the class to be reflected as its argument."},{"location":"week-3/ce204-week-3/#reflection-of-java-classes_2","title":"Reflection of Java Classes","text":"<ul> <li>Using getClass() method</li> </ul> <pre><code>// create an object of Dog class\nDog d1 = new Dog();\n\n// create an object of Class\n// to reflect Dog\nClass b = d1.getClass();\n</code></pre> - Here, we are using the object of the Dog class to create an object of Class."},{"location":"week-3/ce204-week-3/#reflection-of-java-classes_3","title":"Reflection of Java Classes","text":"<ul> <li>Using .class extension</li> </ul> <pre><code>// create an object of Class\n// to reflect the Dog class\nClass c = Dog.class;\n</code></pre> <ul> <li>Now that we know how we can create objects of the Class. </li> <li>We can use this object to get information about the corresponding class at runtime.</li> </ul>"},{"location":"week-3/ce204-week-3/#java-class-reflection-example","title":"Java Class Reflection Example","text":"<pre><code>import java.lang.Class;\nimport java.lang.reflect.*;\n\nclass Animal {\n}\n\n// put this class in different Dog.java file\npublic class Dog extends Animal {\n  public void display() {\n    System.out.println(\"I am a dog.\");\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#java-class-reflection-example_1","title":"Java Class Reflection Example","text":"<pre><code>// put this in Main.java file\nclass Main {\n  public static void main(String[] args) {\n    try {\n      // create an object of Dog\n      Dog d1 = new Dog();\n      // create an object of Class\n      // using getClass()\n      Class obj = d1.getClass();\n      // get name of the class\n      String name = obj.getName();\n      System.out.println(\"Name: \" + name);\n      // get the access modifier of the class\n      int modifier = obj.getModifiers();\n      // convert the access modifier to string\n      String mod = Modifier.toString(modifier);\n      System.out.println(\"Modifier: \" + mod);\n      // get the superclass of Dog\n      Class superClass = obj.getSuperclass();\n      System.out.println(\"Superclass: \" + superClass.getName());\n    }catch (Exception e) { e.printStackTrace();}\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#java-class-reflection-example_2","title":"Java Class Reflection Example","text":"<ul> <li>In the example, we have created a superclass: Animal and a subclass: Dog. Here, we are trying to inspect the class Dog. </li> <li>Notice the statement,</li> </ul> <pre><code>Class obj = d1.getClass();\n</code></pre> <ul> <li>Here, we are creating an object obj of Class using the getClass() method. Using the object, we are calling different methods of Class.</li> <li>obj.getName() - returns the name of the class</li> <li>obj.getModifiers() - returns the access modifier of the class</li> <li>obj.getSuperclass() - returns the super class of the class</li> <li>Note: We are using the Modifier class to convert the integer access modifier to a string.</li> </ul>"},{"location":"week-3/ce204-week-3/#reflecting-fields-methods-and-constructors","title":"Reflecting Fields, Methods, and Constructors","text":"<ul> <li>The package java.lang.reflect provides classes that can be used for manipulating class members. For example,</li> <li>Method class - provides information about methods in a class</li> <li>Field class - provides information about fields in a class</li> <li>Constructor class - provides information about constructors in a class</li> </ul>"},{"location":"week-3/ce204-week-3/#reflection-of-java-methods","title":"Reflection of Java Methods","text":"<ul> <li>The Method class provides various methods that can be used to get information about the methods present in a class. </li> </ul>"},{"location":"week-3/ce204-week-3/#reflection-of-java-methods-example","title":"Reflection of Java Methods Example","text":"<pre><code>import java.lang.Class;\nimport java.lang.reflect.*;\n\nclass Dog {\n\n  // methods of the class\n  public void display() {\n    System.out.println(\"I am a dog.\");\n  }\n\n  private void makeSound() {\n    System.out.println(\"Bark Bark\");\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#reflection-of-java-methods-example_1","title":"Reflection of Java Methods Example","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n    try {\n\n      // create an object of Dog\n      Dog d1 = new Dog();\n\n      // create an object of Class\n      // using getClass()\n      Class obj = d1.getClass();\n\n      // using object of Class to\n      // get all the declared methods of Dog\n      Method[] methods = obj.getDeclaredMethods();\n...\n</code></pre>"},{"location":"week-3/ce204-week-3/#reflection-of-java-methods-example_2","title":"Reflection of Java Methods Example","text":"<pre><code>...\n      // create an object of the Method class\n      for (Method m : methods) {\n\n        // get names of methods\n        System.out.println(\"Method Name: \" + m.getName());\n\n        // get the access modifier of methods\n        int modifier = m.getModifiers();\n        System.out.println(\"Modifier: \" + Modifier.toString(modifier));\n\n        // get the return types of method\n        System.out.println(\"Return Types: \" + m.getReturnType());\n        System.out.println(\" \");\n      }\n    }\n    catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#reflection-of-java-methods-example_3","title":"Reflection of Java Methods Example","text":"<ul> <li>In the example, we are trying to get information about the methods present in the Dog class. </li> <li>As mentioned earlier, we have first created an object obj of Class using the getClass() method.</li> <li>Notice the expression,</li> </ul> <pre><code>Method[] methods = obj.getDeclaredMethod();\n</code></pre> <ul> <li>Here, the getDeclaredMethod() returns all the methods present inside the class.</li> </ul>"},{"location":"week-3/ce204-week-3/#reflection-of-java-methods-example_4","title":"Reflection of Java Methods Example","text":"<ul> <li>Also, we have created an object m of the Method class. Here,</li> <li><code>m.getName()</code> - returns the name of a method</li> <li><code>m.getModifiers()</code> - returns the access modifier of methods in integer form</li> <li><code>m.getReturnType()</code> - returns the return type of methods</li> <li>The Method class also provides various other methods that can be used to inspect methods at run time.</li> </ul>"},{"location":"week-3/ce204-week-3/#reflection-of-java-fields","title":"Reflection of Java Fields","text":"<ul> <li>Like methods, we can also inspect and modify different fields of a class using the methods of the Field class.</li> </ul>"},{"location":"week-3/ce204-week-3/#reflection-of-java-public-fields-example","title":"Reflection of Java Public Fields Example","text":"<pre><code>import java.lang.Class;\nimport java.lang.reflect.*;\n\nclass Dog {\n  public String type;\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#reflection-of-java-public-fields-example_1","title":"Reflection of Java Public Fields Example","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n    try {\n      // create an object of Dog\n      Dog d1 = new Dog();\n\n      // create an object of Class\n      // using getClass()\n      Class obj = d1.getClass();\n\n      // access and set the type field\n      Field field1 = obj.getField(\"type\");\n      field1.set(d1, \"labrador\");\n...\n</code></pre>"},{"location":"week-3/ce204-week-3/#reflection-of-java-public-fields-example_2","title":"Reflection of Java Public Fields Example","text":"<pre><code>...\n      // get the value of the field type\n      String typeValue = (String) field1.get(d1);\n      System.out.println(\"Value: \" + typeValue);\n\n      // get the access modifier of the field type\n      int mod = field1.getModifiers();\n\n      // convert the modifier to String form\n      String modifier1 = Modifier.toString(mod);\n      System.out.println(\"Modifier: \" + modifier1);\n      System.out.println(\" \");\n    }\n\n    catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#reflection-of-java-public-fields-example_3","title":"Reflection of Java Public Fields Example","text":"<ul> <li>In the example, we have created a class named Dog.    </li> <li>It includes a public field named type. Notice the statement,</li> </ul> <pre><code>Field field1 = obj.getField(\"type\");\n</code></pre> <ul> <li>Here, we are accessing the public field of the Dog class and assigning it to the object field1 of the Field class.</li> <li>We then used various methods of the Field class:</li> <li><code>field1.set()</code> - sets the value of the field</li> <li><code>field1.get()</code> - returns the value of field</li> <li><code>field1.getModifiers()</code> - returns the value of the field in integer form</li> </ul>"},{"location":"week-3/ce204-week-3/#reflection-of-java-private-fields-example","title":"Reflection of Java Private Fields Example","text":"<ul> <li>Similarly, we can also access and modify private fields as well. However, the reflection of private field is little bit different than the public field</li> </ul>"},{"location":"week-3/ce204-week-3/#reflection-of-java-private-fields-example_1","title":"Reflection of Java Private Fields Example","text":"<pre><code>import java.lang.Class;\nimport java.lang.reflect.*;\n\nclass Dog {\n  private String color;\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#reflection-of-java-private-fields-example_2","title":"Reflection of Java Private Fields Example","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n    try {\n      // create an object of Dog\n      Dog d1 = new Dog();\n\n      // create an object of Class\n      // using getClass()\n      Class obj = d1.getClass();\n\n      // access the private field color\n      Field field1 = obj.getDeclaredField(\"color\");\n\n      // allow modification of the private field\n      field1.setAccessible(true);\n...\n</code></pre>"},{"location":"week-3/ce204-week-3/#reflection-of-java-private-fields-example_3","title":"Reflection of Java Private Fields Example","text":"<pre><code>...\n      // set the value of color\n      field1.set(d1, \"brown\");\n\n      // get the value of field color\n      String colorValue = (String) field1.get(d1);\n      System.out.println(\"Value: \" + colorValue);\n\n      // get the access modifier of color\n      int mod2 = field1.getModifiers();\n\n      // convert the access modifier to string\n      String modifier2 = Modifier.toString(mod2);\n      System.out.println(\"Modifier: \" + modifier2);\n    }\n\n    catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#reflection-of-java-private-fields-example_4","title":"Reflection of Java Private Fields Example","text":"<ul> <li>In the example, we have created a class named <code>Dog</code>. </li> <li>The class contains a private field named <code>color</code>. Notice the statement.</li> </ul> <pre><code>Field field1 = obj.getDeclaredField(\"color\");\nfield1.setAccessible(true);\n</code></pre> <ul> <li>Here, we are accessing color and assigning it to the object <code>field1</code> of the Field class. </li> <li>We then used <code>field1</code> to modify the accessibility of color and allows us to make changes to it.</li> <li>We then used <code>field1</code> to perform various operations on the private field color.</li> </ul>"},{"location":"week-3/ce204-week-3/#reflection-of-java-constructor","title":"Reflection of Java Constructor","text":"<ul> <li>We can also inspect different constructors of a class using various methods provided by the Constructor class</li> </ul>"},{"location":"week-3/ce204-week-3/#reflection-of-java-constructor-example","title":"Reflection of Java Constructor Example","text":"<pre><code>import java.lang.Class;\nimport java.lang.reflect.*;\n\nclass Dog {\n\n  // public constructor without parameter\n  public Dog() {\n\n  }\n\n  // private constructor with a single parameter\n  private Dog(int age) {\n\n  }\n\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#reflection-of-java-constructor-example_1","title":"Reflection of Java Constructor Example","text":"<pre><code>class Main {\n  public static void main(String[] args) {\n    try {\n      // create an object of Dog\n      Dog d1 = new Dog();\n\n      // create an object of Class\n      // using getClass()\n      Class obj = d1.getClass();\n\n      // get all constructors of Dog\n      Constructor[] constructors = obj.getDeclaredConstructors();\n... \n</code></pre>"},{"location":"week-3/ce204-week-3/#reflection-of-java-constructor-example_2","title":"Reflection of Java Constructor Example","text":"<pre><code>...\n      for (Constructor c : constructors) {\n\n        // get the name of constructors\n        System.out.println(\"Constructor Name: \" + c.getName());\n\n        // get the access modifier of constructors\n        // convert it into string form\n        int modifier = c.getModifiers();\n        String mod = Modifier.toString(modifier);\n        System.out.println(\"Modifier: \" + mod);\n\n        // get the number of parameters in constructors\n        System.out.println(\"Parameters: \" + c.getParameterCount());\n        System.out.println(\"\");\n      }\n    }\n\n    catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#reflection-of-java-constructor-example_3","title":"Reflection of Java Constructor Example","text":"<ul> <li> <p>In the example, we have created a class named Dog. The class includes two constructors.</p> </li> <li> <p>We are using reflection to find the information about the constructors of the class. Notice the statement,</p> </li> </ul> <pre><code>Constructor[] constructors = obj.getDeclaredConstructor();\n</code></pre> <ul> <li>Here, the we are accessing all the constructors present in Dog and assigning them to an array constructors of the Constructor type.</li> </ul>"},{"location":"week-3/ce204-week-3/#reflection-of-java-constructor-example_4","title":"Reflection of Java Constructor Example","text":"<ul> <li>We then used object c to get different informations about the constructor.</li> <li><code>c.getName()</code> - returns the name of the constructor</li> <li><code>c.getModifiers()</code> - returns the access modifiers of the constructor in integer form</li> <li><code>c.getParameterCount()</code> - returns the number of parameters present in each constructor</li> </ul>"},{"location":"week-3/ce204-week-3/#java-wrapper-classes","title":"Java Wrapper Classes","text":""},{"location":"week-3/ce204-week-3/#java-wrapper-classes_1","title":"Java Wrapper Classes","text":"<ul> <li>Wrapper classes provide a way to use primitive data types (int, boolean, etc..) as objects</li> </ul> <p>Primitive Data Type \\(\\Longrightarrow\\)   Wrapper Class byte    \\(\\Longrightarrow\\) Byte short   \\(\\Longrightarrow\\) Short int \\(\\Longrightarrow\\) Integer long \\(\\Longrightarrow\\) Long float   \\(\\Longrightarrow\\) Float double  \\(\\Longrightarrow\\) Double boolean \\(\\Longrightarrow\\) Boolean char    \\(\\Longrightarrow\\) Character</p>"},{"location":"week-3/ce204-week-3/#java-wrapper-classes_2","title":"Java Wrapper Classes","text":"<ul> <li>Sometimes you must use wrapper classes, for example when working with Collection objects, such as ArrayList, where primitive types cannot be used (the list can only store objects)</li> </ul> <pre><code>ArrayList&lt;int&gt; myNumbers = new ArrayList&lt;int&gt;(); // Invalid\n</code></pre> <pre><code>ArrayList&lt;Integer&gt; myNumbers = new ArrayList&lt;Integer&gt;(); // Valid\n</code></pre>"},{"location":"week-3/ce204-week-3/#creating-wrapper-objects","title":"Creating Wrapper Objects","text":"<ul> <li>To create a wrapper object, use the wrapper class instead of the primitive type. To get the value, you can just print the object</li> </ul> <pre><code>public class Main {\n  public static void main(String[] args) {\n    Integer myInt = 5;\n    Double myDouble = 5.99;\n    Character myChar = 'A';\n    System.out.println(myInt);\n    System.out.println(myDouble);\n    System.out.println(myChar);\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#creating-wrapper-objects_1","title":"Creating Wrapper Objects","text":"<ul> <li>Since you're now working with objects, you can use certain methods to get information about the specific object.</li> <li>For example, the following methods are used to get the value associated with the corresponding wrapper object: <code>intValue()</code>, <code>byteValue()</code>, <code>shortValue()</code>, <code>longValue()</code>, <code>floatValue()</code>, <code>doubleValue()</code>, <code>charValue()</code>, <code>booleanValue()</code>.</li> </ul>"},{"location":"week-3/ce204-week-3/#creating-wrapper-objects_2","title":"Creating Wrapper Objects","text":"<pre><code>public class Main {\n  public static void main(String[] args) {\n    Integer myInt = 5;\n    Double myDouble = 5.99;\n    Character myChar = 'A';\n    System.out.println(myInt.intValue());\n    System.out.println(myDouble.doubleValue());\n    System.out.println(myChar.charValue());\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#creating-wrapper-objects_3","title":"Creating Wrapper Objects","text":"<ul> <li>Another useful method is the toString() method, which is used to convert wrapper objects to strings.</li> <li>In the following example, we convert an Integer to a String, and use the length() method of the String class to output the length of the \"string\":</li> </ul> <pre><code>public class Main {\n  public static void main(String[] args) {\n    Integer myInt = 100;\n    String myString = myInt.toString();\n    System.out.println(myString.length());\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#java-lambda-expressions","title":"Java Lambda Expressions","text":""},{"location":"week-3/ce204-week-3/#java-lambda-expressions_1","title":"Java Lambda Expressions","text":"<ul> <li> <p>Lambda Expressions were added in Java 8.</p> </li> <li> <p>A lambda expression is a short block of code which takes in parameters and returns a value. Lambda expressions are similar to methods, but they do not need a name and they can be implemented right in the body of a method.</p> </li> </ul>"},{"location":"week-3/ce204-week-3/#java-lambda-expressions-syntax","title":"Java Lambda Expressions Syntax","text":"<ul> <li>The simplest lambda expression contains a single parameter and an expression:</li> </ul> <pre><code>parameter -&gt; expression\n</code></pre> <ul> <li>To use more than one parameter, wrap them in parentheses:</li> </ul> <pre><code>(parameter1, parameter2) -&gt; expression\n</code></pre>"},{"location":"week-3/ce204-week-3/#java-lambda-expressions-syntax_1","title":"Java Lambda Expressions Syntax","text":"<ul> <li>Expressions are limited. They have to immediately return a value, and they cannot contain variables, assignments or statements such as if or for. In order to do more complex operations, a code block can be used with curly braces. If the lambda expression needs to return a value, then the code block should have a return statement.</li> </ul> <pre><code>(parameter1, parameter2) -&gt; { code block }\n</code></pre> <p>Lambda expressions are usually passed as parameters to a function</p>"},{"location":"week-3/ce204-week-3/#using-lambda-expressions","title":"Using Lambda Expressions","text":"<ul> <li>Use a lamba expression in the ArrayList's forEach() method to print every item in the list</li> </ul> <pre><code>import java.util.ArrayList;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;();\n    numbers.add(5);\n    numbers.add(9);\n    numbers.add(8);\n    numbers.add(1);\n    numbers.forEach( (n) -&gt; { System.out.println(n); } );\n  }\n}\n</code></pre> <ul> <li>Lambda expressions can be stored in variables if the variable's type is an interface which has only one method. </li> <li>The lambda expression should have the same number of parameters and the same return type as that method. </li> <li>Java has many of these kinds of interfaces built in, such as the Consumer interface (found in the java.util package) used by lists.</li> </ul>"},{"location":"week-3/ce204-week-3/#using-lambda-expressions_1","title":"Using Lambda Expressions","text":"<ul> <li>Use Java's Consumer interface to store a lambda expression in a variable:</li> </ul> <pre><code>import java.util.ArrayList;\nimport java.util.function.Consumer;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;();\n    numbers.add(5);\n    numbers.add(9);\n    numbers.add(8);\n    numbers.add(1);\n    Consumer&lt;Integer&gt; method = (n) -&gt; { System.out.println(n); };\n    numbers.forEach( method );\n  }\n}\n</code></pre> <ul> <li>To use a lambda expression in a method, the method should have a parameter with a single-method interface as its type. </li> <li>Calling the interface's method will run the lambda expression:</li> </ul>"},{"location":"week-3/ce204-week-3/#using-lambda-expressions_2","title":"Using Lambda Expressions","text":"<ul> <li>Create a method which takes a lambda expression as a parameter:</li> </ul> <pre><code>interface StringFunction {\n  String run(String str);\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    StringFunction exclaim = (s) -&gt; s + \"!\";\n    StringFunction ask = (s) -&gt; s + \"?\";\n    printFormatted(\"Hello\", exclaim);\n    printFormatted(\"Hello\", ask);\n  }\n  public static void printFormatted(String str, StringFunction format) {\n    String result = format.run(str);\n    System.out.println(result);\n  }\n}\n</code></pre>"},{"location":"week-3/ce204-week-3/#references","title":"References","text":"<ul> <li>BTechSmartClass-Defining an Interface in Java</li> <li>BTechSmartClass-Implementing an Interface in Java</li> <li>BTechSmartClass-Nested Interfaces in java</li> <li>BTechSmartClass-Variables in Java Interfaces</li> <li>BTechSmartClass-Extending an Interface in java</li> <li>Programiz-Java Interface</li> <li>Programiz-Java Reflection</li> <li>W3schools-Java Wrapper Classes</li> <li>W3schools-Java Lambda Expressions</li> </ul> <p>\\(End-Of-Week-3-Module\\)</p>"},{"location":"week-4/ce204-week-4/","title":"CEN206 Object-Oriented Programming","text":""},{"location":"week-4/ce204-week-4/#cen206-object-oriented-programming-formerly-ce204","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-4/ce204-week-4/#week-4-uml-unified-modelling-language","title":"Week-4 (UML-Unified Modelling Language)","text":""},{"location":"week-4/ce204-week-4/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC-PDF, DOC-DOCX, SLIDE, PPTX,</p>"},{"location":"week-4/ce204-week-4/#uml-unified-modelling-language","title":"UML-Unified Modelling Language","text":""},{"location":"week-4/ce204-week-4/#outline","title":"Outline","text":"<ul> <li>UML Overview</li> <li>UML Tools</li> <li>UML Building Blocks</li> <li>UML Architecture</li> <li>UML Diagrams Overview</li> <li>UML Relationship</li> <li>UML Association vs. Aggregation vs. Composition</li> </ul>"},{"location":"week-4/ce204-week-4/#outline_1","title":"Outline","text":"<ul> <li>UML- Association</li> <li>UML-Dependency</li> <li>UML-Generalization</li> <li>UML-Realization</li> <li>UML Class Diagram</li> <li>UML Object Diagram</li> <li>UML Component Diagram</li> </ul>"},{"location":"week-4/ce204-week-4/#outline_2","title":"Outline","text":"<ul> <li>UML Deployment Diagram</li> <li>UML Interaction Diagram</li> <li>UML Use Case Diagram</li> <li>UML Sequence Diagram</li> <li>UML Collaboration Diagram</li> <li>UML State Machine Diagram</li> <li>UML Activity Diagram</li> <li>UML Timing Diagram</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-overview","title":"UML Overview","text":""},{"location":"week-4/ce204-week-4/#uml-overview_1","title":"UML Overview","text":"<ul> <li>UML (Unified Modeling Language) is a general-purpose, graphical modeling language in the field of Software Engineering. </li> <li>UML is used to specify, visualize, construct, and document the artifacts (major elements) of the software system. </li> <li>It was initially developed by Grady Booch, Ivar Jacobson, and James Rumbaugh in 1994-95 at Rational software, </li> <li>and its further development was carried out through 1996. </li> <li>In 1997, it got adopted as a standard by the Object Management Group.</li> </ul>"},{"location":"week-4/ce204-week-4/#what-is-uml","title":"What is UML","text":"<ul> <li>The UML stands for Unified modeling language, is a standardized general-purpose visual modeling language in the field of Software Engineering. </li> <li>It is used for specifying, visualizing, constructing, and documenting the primary artifacts of the software system. </li> <li>It helps in designing and characterizing, especially those software systems that incorporate the concept of Object orientation. </li> <li>It describes the working of both the software and hardware systems.</li> </ul>"},{"location":"week-4/ce204-week-4/#goals-of-uml","title":"Goals of UML","text":"<ul> <li>Since it is a general-purpose modeling language, it can be utilized by all the modelers.</li> <li>UML came into existence after the introduction of object-oriented concepts to systemize and consolidate the object-oriented development, due to the absence of standard methods at that time.</li> <li>The UML diagrams are made for business users, developers, ordinary people, or anyone who is looking forward to understand the system, such that the system can be software or non-software.</li> <li>Thus it can be concluded that the UML is a simple modeling approach that is used to model all the practical systems.</li> </ul>"},{"location":"week-4/ce204-week-4/#characteristics-of-uml","title":"Characteristics of UML","text":"<ul> <li>The UML has the following features:</li> <li>It is a generalized modeling language.</li> <li>It is distinct from other programming languages like C++, Python, etc.</li> <li>It is interrelated to object-oriented analysis and design.</li> <li>It is used to visualize the workflow of the system.</li> <li>It is a pictorial language, used to generate powerful modeling artifacts.</li> </ul>"},{"location":"week-4/ce204-week-4/#conceptual-modeling","title":"Conceptual Modeling","text":"<ul> <li>Before moving ahead with the concept of UML, we should first understand the basics of the conceptual model.</li> <li>A conceptual model is composed of several interrelated concepts. It makes it easy to understand the objects and how they interact with each other. This is the first step before drawing UML diagrams.</li> </ul>"},{"location":"week-4/ce204-week-4/#conceptual-modeling_1","title":"Conceptual Modeling","text":"<ul> <li>Following are some object-oriented concepts that are needed to begin with UML:</li> <li>Object: An object is a real world entity. There are many objects present within a single system. It is a fundamental building block of UML.</li> <li>Class: A class is a software blueprint for objects, which means that it defines the variables and methods common to all the objects of a particular type.</li> </ul>"},{"location":"week-4/ce204-week-4/#conceptual-modeling_2","title":"Conceptual Modeling","text":"<ul> <li>Abstraction: Abstraction is the process of portraying the essential characteristics of an object to the users while hiding the irrelevant information. Basically, it is used to envision the functioning of an object.</li> <li>Inheritance: Inheritance is the process of deriving a new class from the existing ones.</li> <li>Polymorphism: It is a mechanism of representing objects having multiple forms used for different purposes.</li> <li>Encapsulation: It binds the data and the object together as a single unit, enabling tight coupling between them.</li> </ul>"},{"location":"week-4/ce204-week-4/#oo-analysis-and-design","title":"OO Analysis and Design","text":"<ul> <li>OO is an analysis of objects, and design means combining those identified objects. </li> <li>So, the main purpose of OO analysis is identifying the objects for designing a system. </li> <li>The analysis can also be done for an existing system. </li> <li>The analysis can be more efficient if we can identify the objects. Once we have identified the objects, their relationships are then identified, and the design is also produced.</li> </ul>"},{"location":"week-4/ce204-week-4/#oo-analysis-and-design_1","title":"OO Analysis and Design","text":"<ul> <li>The purpose of OO is:</li> <li>To identify the objects of a system.</li> <li>To identify their relationships.</li> <li>To make a design that is executable when the concepts of OO are employed.</li> </ul>"},{"location":"week-4/ce204-week-4/#oo-analysis-and-design_2","title":"OO Analysis and Design","text":""},{"location":"week-4/ce204-week-4/#step-1-oo-analysis","title":"Step 1: OO Analysis","text":"<ul> <li>The main purpose of OO analysis is identifying the objects and describing them correctly. </li> <li>After the objects are identified, the designing step is easily carried out. It is a must to identify the objects with responsibilities. </li> <li>Here the responsibility refers to the functions performed by the objects. </li> <li>Each individual object has its own functions to perform. </li> <li>The purpose of the system is fulfilled by collaborating these responsibilities.</li> </ul>"},{"location":"week-4/ce204-week-4/#oo-analysis-and-design_3","title":"OO Analysis and Design","text":""},{"location":"week-4/ce204-week-4/#step-2-oo-design","title":"Step 2: OO Design","text":"<ul> <li>This phase mainly emphasizes on meeting the requirements. </li> <li>In this phase, the objects are joined together as per the intended associations. </li> <li>After the association is completed, the designing phase also gets complete.</li> </ul>"},{"location":"week-4/ce204-week-4/#oo-analysis-and-design_4","title":"OO Analysis and Design","text":""},{"location":"week-4/ce204-week-4/#step-3-oo-implementation","title":"Step 3: OO Implementation","text":"<ul> <li>This is the last phase that comes after the designing is done. </li> <li>It implements the design using any OO languages like C++, Java, etc.</li> </ul>"},{"location":"week-4/ce204-week-4/#role-of-uml-in-oo-design","title":"Role of UML in OO design","text":"<ul> <li>As the UML is a modeling language used to model software as well as non-software systems, </li> <li>but here it focuses on modeling OO software applications. </li> <li>It is essential to understand the relation between the OO design and UML. </li> <li>The OO design can be converted into the UML as and when required. </li> <li>The OO languages influence the programming world as they model real world objects.</li> </ul>"},{"location":"week-4/ce204-week-4/#role-of-uml-in-oo-design_1","title":"Role of UML in OO design","text":"<ul> <li>The UML itself is an amalgamation of object-oriented notations like </li> <li>Object-Oriented Design (OOD), </li> <li>Object Modeling Technique (OMT), and </li> <li>Object-Oriented Software Engineering (OOSE). </li> <li>The strength of these three approaches is utilized by the UML to represent more consistency.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#uml-tools_1","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#plantuml","title":"Plantuml","text":"<ul> <li> <p>Plantuml is an open-source online and offline modeling tool with textual inputs to  create flowcharts, process diagrams, UML, ER, and network diagrams.</p> </li> <li> <p>PlantUML diagrams are \u201cDiagrams as Code\u201d in PlantUML syntax.</p> </li> <li> <p>https://crashedmind.github.io/PlantUMLHitchhikersGuide/C4/C4Stdlib.html</p> </li> <li> <p>https://en.wikipedia.org/wiki/4%2B1_architectural_view_model</p> </li> <li> <p>https://c4model.com/img/c4-overview.png</p> </li> <li> <p>https://plantuml.com/</p> </li> <li> <p>https://crashedmind.github.io/PlantUMLHitchhikersGuide/about/AboutPlantUML.html</p> </li> <li> <p>https://github.com/jupe/puml2code</p> </li> <li> <p>http://static.codingthearchitecture.com/visualising-software-architecture.pdf</p> </li> <li> <p>http://static.codingthearchitecture.com/documenting-software-architecture.pdf</p> </li> <li> <p>https://en.wikipedia.org/wiki/C4_model</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_2","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#drawio","title":"Draw.IO","text":"<ul> <li>Draw.io is an open-source modeling tool to create flowcharts, process diagrams, UML, ER, and network diagrams.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_3","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#drawio_1","title":"Draw.IO","text":"<ul> <li> <p>Features:</p> </li> <li> <p>Since it is very easy to use, it provides an intuitive interface, drag&amp; drop functionality, a huge amount of templates, and also, it does not need to install.</p> </li> <li>It offers security and reliability.</li> <li>It can be used anywhere, both online and offline.</li> <li> <p>It is compatible with every browser.</p> </li> <li> <p>Download link: https://www.draw.io</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_4","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#umple","title":"Umple","text":"<ul> <li>Umple is an object-oriented and modeling language that textually supports state diagrams and class diagrams. It adapts JAVA, C++, and PHP, which results in more readable and short lines of code.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_5","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#umple_1","title":"Umple","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It includes Singleton pattern, keys, immutability, mixins, and aspect-oriented code injection, which makes UML more understandable to the users.</p> </li> <li> <p>It enforces referential integrity by supporting UML multiplicity.</p> </li> <li> <p>Download link: https://cruise.eecs.uottawa.ca/umple/</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_6","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#visual-paradigm","title":"Visual Paradigm","text":"<ul> <li>A visual Paradigm is a tool that supports SysML, UML2, and Business Process Modeling Notation from Object Management Group. It involves report generation as well as code generation.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_7","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#visual-paradigm_1","title":"Visual Paradigm","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It supports all of the 14 UML2 diagrams.</p> </li> <li> <p>It supports BPMN 2.0, ERD, ORMD, SysML.</p> </li> <li> <p>Download link: https://www.visual-paradigm.com</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_8","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#staruml","title":"StarUML","text":"<ul> <li>StarUML is an open-source software modeling tool, which is provided by MKLab. It has come up with eleven different types of modeling diagrams. It also supports UML2.0 specified diagrams.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_9","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#staruml_1","title":"StarUML","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It let you create Object, Use case, Deployment, Sequence, Collaboration, Activity, and Profile diagrams.</p> </li> <li>It is a UML 2.x standard compliant.</li> <li> <p>It offers multiplatform support (MacOS, Windows, and Linux).</p> </li> <li> <p>Download link: http://staruml.io</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_10","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#umbrello","title":"Umbrello","text":"<ul> <li>Umbrello is a Unified Modeling language tool, which is based on KDE technology. It supports both reverse engineering and code generation for C++ and Java.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_11","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#umbrello_1","title":"Umbrello","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It implements both structural and behavioral diagrams.</p> </li> <li> <p>It imports C++ and can export up to a wider range of languages.</p> </li> <li> <p>Download link: https://umbrello.kde.org</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_12","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#uml-designer-tool","title":"UML designer tool","text":"<ul> <li>The UML designer tool helps in modifying and envisioning UML2.5 models. It allows you to create all of the UML diagrams.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_13","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#uml-designer-tool_1","title":"UML designer tool","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It provides transparency to work on DSL as well as UML models.</p> </li> <li>With the UML designer tool, the user can reuse the provided presentations.</li> <li>It implements Component, Class, and Composite structure diagrams.</li> <li> <p>To start working with DSL, you can use UML legacy models.</p> </li> <li> <p>Download link: http://www.umldesigner.org/download/</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_14","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#altova","title":"Altova","text":"<ul> <li> <p>Altova has provided UModel, which is another UML software modeling tool. It supports all types of 14 UML2 diagrams as well as SysML for the embedded systems. </p> </li> <li> <p>It also holds up for business process modeling for enterprise analysts. </p> </li> <li> <p>It generates visually designed software models by incorporating Java, C++, and C #or Visual Basic .NET.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_15","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#altova_1","title":"Altova","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It provides a dedicated toolbar for an individual diagram.</p> </li> <li>It offers unlimited undo/redo, which inspires to discover new ideas.</li> <li>In UML diagrams, you can easily add a hyperlink to any element.</li> <li> <p>It also provides an intuitive color-coding, icons, customized alignment grid, and cascading styles for colors, fonts line size.</p> </li> <li> <p>Download link: https://www.altova.com/umodel</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_16","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#whitestaruml","title":"WhitestarUML","text":"<ul> <li>Whitestar UML is a division of StarUML 5.0 that offers bug fixes and has improved its compatibility with the latest operating systems, i.e., support of Unicode strings or simply being developed and tested on Windows 7 and 8.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_17","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#whitestaruml_1","title":"WhitestarUML","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It offers a refreshed user interface.</p> </li> <li>It completely handles the functioning of Unicode strings.</li> <li>It provides support on Windows 7, 8, and 10.</li> <li>On-demand upload and download of units.</li> <li> <p>It directly integrates the ERD profile and extends to generate and parse the SQL tables.</p> </li> <li> <p>Download link: http://whitestaruml.sourceforge.net</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_18","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#genmymodel","title":"GenMyModel","text":"<ul> <li>GenMyModel is an online modeling platform that offers Business (Archimate, BPMN, flowcharts support) as well as IT modeling (RDS, UML2.5 class diagrams).</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_19","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#genmymodel_1","title":"GenMyModel","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It provides an online platform.</p> </li> <li>It generates online code.</li> <li>It provides a centralized repository for easy and simultaneous model collaboration.</li> <li> <p>You can import or export as a PDF.</p> </li> <li> <p>Download link: https://www.genmymodel.com</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_20","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#umletino","title":"Umletino","text":"<ul> <li>It is an online platform that offers UML tools for faster development of UML diagrams. It is based on UMLet, which is an eclipse plugin or work as a standalone tool.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_21","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#umletino_1","title":"Umletino","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It allows you to export the diagram as XML or any other image file such as Gif, JPEG, or SVG format.</p> </li> <li> <p>It is an installation free web application.</p> </li> <li> <p>Download link: http://www.umlet.com/umletino/umletino.html</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_22","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#diagramo","title":"Diagramo","text":"<ul> <li>Diagramo is an online open-source HTML5 software that allows you to build flowcharts. It allows easy download and installation on the servers.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_23","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#diagramo_1","title":"Diagramo","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It saves diagrams as images.</p> </li> <li>It is a kind of UML diagram as it offers a flowchart focused software.</li> <li> <p>It offers lifetime support and storage.</p> </li> <li> <p>Download link: http://diagramo.com</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_24","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#astah","title":"Astah","text":"<ul> <li>Astah, which was previously known as JUDE (Java and UML Developer's Environment) is a UML modeling tool.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_25","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#astah_1","title":"Astah","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It import XML file and export HTML, RTF, and image files.</p> </li> <li> <p>It intuitively works with Windows, Mac, and Linux operating systems.</p> </li> <li> <p>Download link: http://astah.net</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_26","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#bouml","title":"BOUML","text":"<ul> <li>BOUML is a UML diagram designer which is programmed in Qt and C++. It permits you to specify and generate code in C++, Java, Idl, Php, Python, and MySQL.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_27","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#bouml_1","title":"BOUML","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It supports code generation, reverse engineering, and it is multilingual.</p> </li> <li>It runs on Windows, Linux, and MacOS X.</li> <li> <p>Since it is very fast, it does not necessitate much memory to handle thousands of classes.</p> </li> <li> <p>Download link: https://www.bouml.fr</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_28","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#conceptdraw","title":"ConceptDraw","text":"<ul> <li>ConceptDraw is a software, which is used in diagraming for creating business graphics that include diagrams, flowcharts, Infographics, data envisioning, data presentation, and project management documentation.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_29","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#conceptdraw_1","title":"ConceptDraw","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It is used for creating UML diagrams, DFD, ERD, computer network topology, etc.</p> </li> <li>It improves the interaction by empowering technical representation techniques.</li> <li> <p>It provides a powerful and inclusive drawing tool.</p> </li> <li> <p>Download link: https://www.conceptdraw.com/products/drawing-tool</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_30","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#dia","title":"Dia","text":"<ul> <li>Dia is an open-source general-purpose drawing tool, which is licensed under GPL. It let you create flow charts, UML diagrams, network diagrams, circuit diagrams, and many more. It allows you to incorporate a subset of Scalable Vector Graphics (SVG) while writing a simple XML file for drawing new shapes.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_31","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#dia_1","title":"Dia","text":"<ul> <li> <p>Features:</p> </li> <li> <p>Dia can export diagrams to several formats, which include EPS (Encapsulated PostScript), SVG (Scalable Vector Graphics), DXF (AutoCAD's Drawing Interchange Format), CGM (Computer Graphics Metafile defined by ISO standards), WMF (Windows Meta File), PNG (Portable Network Graphics), JPEG (Joint Photographic Experts Group), and VDX (Microsoft's XML for Visio drawing).</p> </li> <li> <p>It let you create many different types of diagrams as it incorporates special objects that help you in drawing ER diagrams, UML diagrams, network diagrams, flowcharts, etc.</p> </li> <li> <p>Download link: http://dia-installer.de</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_32","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#sparxsystems","title":"Sparxsystems","text":"<ul> <li>Sparxsystems is a diagram designing tool that helps in visualizing, analyzing, modeling, testing, and maintain software, system, processes, and architectures. It builds a robust and maintainable software.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_33","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#sparxsystems_1","title":"Sparxsystems","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It integrates and connects a wide range of structural and behavioral information in a visual format to create a logical and justified model.</p> </li> <li>It builds strategic and business level models.</li> <li>It provides domain-specific profiles and reusable model patterns.</li> <li> <p>It also provides role-based security.</p> </li> <li> <p>Download link: https://sparxsystems.com</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_34","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#gliffy","title":"Gliffy","text":"<ul> <li>Gliffy is an open-source software that designs UML diagrams, floor plans, Venn diagrams, flowcharts, and much more. It allows the user to share and edit Gliffy diagrams dynamically.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_35","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#gliffy_1","title":"Gliffy","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It constitutes a drag and drop interface.</p> </li> <li>It exports diagrams in various formats that are; PDF, JPEG, PNG, and SVG.</li> <li> <p>It is supported by all web browsers such as Google Chrome, Firefox, Safari, and Internet Explorer 9+.</p> </li> <li> <p>Download link: https://www.gliffy.com</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_36","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#lucidchart","title":"Lucidchart","text":"<ul> <li>Lucidchart is an HTML-5 based UML tool that allows user interaction while drawing, editing, and sharing diagrams and charts. With Lucidchart, you can create simple flowcharts as well as complex technical diagrams.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_37","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#lucidchart_1","title":"Lucidchart","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It works faster with keyboard shortcuts.</p> </li> <li>It constitutes the concept of containerization as the complex diagram involves several steps and people.</li> <li>It manages user account by increasing security.</li> <li> <p>It is platform-independent.</p> </li> <li> <p>Download link: https://www.lucidchart.com/pages/</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_38","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#magic-draw","title":"Magic Draw","text":"<ul> <li>Magic Draw is used to model UML diagrams, SysML, BPMN, and UPDM that supports the dynamic collaboration of the team. This tool is meant for business analysts, software analysts, programmers, and QA engineers. It facilitates analyzing and designing object-oriented systems and databases.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_39","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#magic-draw_1","title":"Magic Draw","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It provides round-trip support for programming languages (J2EE, C#, C++, COBRA IDL), .NET, XML Schema, DDL generation, and database schema.</p> </li> <li>It incorporates the concept of reverse engineering.</li> <li>It is a domain-specific language.</li> <li>It constitutes model decomposition that categorizes the main project into several distinct independents parts.</li> <li> <p>It encompasses model refactoring to improve the existing model.</p> </li> <li> <p>Download link: https://www.nomagic.com/products/magicdraw</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_40","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#visio","title":"Visio","text":"<ul> <li>Visio is a part of the Microsoft family, which is a diagramming software. It is helpful in drawing building plans, floor charts, data flow diagrams, process flow diagrams, business process modeling, swimlane diagrams, and many more.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_41","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#visio_1","title":"Visio","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It connects the diagrams and the flowcharts to real-time data.</p> </li> <li> <p>Since it is a platform-independent, it can be accessed from anywhere.</p> </li> <li> <p>Download link: https://products.office.com/en-in/visio/flowchart-software</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_42","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#modelio","title":"Modelio","text":"<ul> <li>Modelio is an open-source UML tool that amalgamates UML2 and BPMN standards to support an inclusive range of models and diagrams.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_43","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#modelio_1","title":"Modelio","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It provides support to Jython, which is a scripting language.</p> </li> <li>It provides a BPMN integrated support with UML.</li> <li> <p>It offers XMI import/export.</p> </li> <li> <p>Download link: https://www.modelio.org</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_44","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#nclass","title":"Nclass","text":"<ul> <li>Nclass is an open-source tool, used to create class diagrams that support #C and Java. It requires a framework of .NET 4.0. It has designed a simple and user-friendly user interface for fast and easy development.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_45","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#nclass_1","title":"Nclass","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It provides a simple and easy user interface.</p> </li> <li>It offers a multilingual user interface.</li> <li>It provides mono support for the non-windows user.</li> <li>It has come up with inline class editors for fast and easy editing.</li> <li> <p>It incorporates source code generation and reverse engineering from .Net assemblies.</p> </li> <li> <p>Download link: http://nclass.sourceforge.net</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_46","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#open-modelsphere","title":"Open ModelSphere","text":"<ul> <li>Open ModelSphere, which is written in Java, is an open-source data, process, and UML modeling tool. It supports forward and reverse engineering.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_47","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#open-modelsphere_1","title":"Open ModelSphere","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It provides support to the user interface written in English and French language.</p> </li> <li>It provides an in-built interface to connect to the SQL database via JDBC/ODBC drivers.</li> <li>It has come up with a bi-directional plug-in database interface.</li> <li> <p>It supports physical, logical, and database modeling.</p> </li> <li> <p>Download link: http://www.modelsphere.com/org/</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_48","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#systems-design-rhapsody","title":"Systems design rhapsody","text":"<ul> <li>System design rhapsody provides a collaborative design and modeling environment, which is based on UML for creating real-time, embedded systems. It helps in managing complex issues such as product system development.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_49","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#systems-design-rhapsody_1","title":"Systems design rhapsody","text":"<ul> <li> <p>Features:</p> </li> <li> <p>For the system and software engineers, it has come up with a collaborative design, development, and a test environment based on UML, SysML, and AUTOSAR.</p> </li> <li>It helps in analyzing and elaborating project requirements.</li> <li>It outperforms in the real-time, embedded, agile engineering environment.</li> <li> <p>It generates documentation after automating design reviews.</p> </li> <li> <p>Download link: https://www.ibm.com/in-en/marketplace/systems-design-rhapsody</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_50","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#reactive-blocks","title":"Reactive Blocks","text":"<ul> <li>A visual model-driven environment is based on the activity diagram that is supported by reactive blocks. Since it is a UML tool, it incorporates code generation, hierarchical modeling, and an extensive library of ready-to-use components for the Java platform.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_51","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#reactive-blocks_1","title":"Reactive Blocks","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It helps in creating complex graphical applications by amalgamating reusable blocks.</p> </li> <li> <p>It provides support to Java, Open Services Gateway Initiative, Eclipse Kura, and ESF.</p> </li> <li> <p>Download link: http://www.bitreactive.com/reactive-blocks/</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_52","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#software-ideas-modeler","title":"Software Ideas Modeler","text":"<ul> <li>Software Ideas Modeler is the CASE and designing tool written in C# that supports all of the 14 diagrams specified by UML2.5, SysML, ERD, Archimate, flowcharts, DFD, wire frames, user stories, and much more.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-tools_53","title":"UML Tools","text":""},{"location":"week-4/ce204-week-4/#software-ideas-modeler_1","title":"Software Ideas Modeler","text":"<ul> <li> <p>Features:</p> </li> <li> <p>It can be used for creating infographics, which is used for data visualization.</p> </li> <li>It involves automatic scrolling, drag and drop, undo/ redo facilities.</li> <li>It offers simple task management.</li> <li>It supports reverse engineering.</li> <li> <p>It also supports SVN.</p> </li> <li> <p>Download link: https://www.softwareideas.net</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-building-blocks","title":"UML Building Blocks","text":""},{"location":"week-4/ce204-week-4/#uml-building-blocks_1","title":"UML Building Blocks","text":"<ul> <li> <p>UML is composed of three main building blocks, i.e., </p> </li> <li> <p>Things, </p> </li> <li>Relationships, and </li> <li> <p>Diagrams. </p> </li> <li> <p>Building blocks generate one complete UML model diagram by rotating around several different blocks. </p> </li> </ul>"},{"location":"week-4/ce204-week-4/#things","title":"Things","text":"<ul> <li>Anything that is a real world entity or object is termed as things. It can be divided into several different categories:</li> <li>Structural things</li> <li>Behavioral things</li> <li>Grouping things</li> <li>Annotational things</li> </ul>"},{"location":"week-4/ce204-week-4/#structural-things","title":"Structural things","text":"<ul> <li>Nouns that depicts the static behavior of a model is termed as structural things. </li> <li>They display the physical and conceptual components. </li> <li>They include class, object, interface, node, collaboration, component, and a use case.</li> </ul>"},{"location":"week-4/ce204-week-4/#structural-things_1","title":"Structural things","text":"<ul> <li> <p>Class: </p> </li> <li> <p>A Class is a set of identical things that outlines the functionality and properties of an object. </p> </li> <li>It also represents the abstract class whose functionalities are not defined. Its notation is as follows</li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#structural-things_2","title":"Structural things","text":"<ul> <li> <p>Object: </p> </li> <li> <p>An individual that describes the behavior and the functions of a system. </p> </li> <li>The notation of the object is similar to that of the class; the only difference is that the object name is always underlined and its notation is given follow;</li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#structural-things_3","title":"Structural things","text":"<ul> <li> <p>Interface: </p> </li> <li> <p>A set of operations that describes the functionality of a class, which is implemented whenever an interface is implemented.</p> </li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#structural-things_4","title":"Structural things","text":"<ul> <li> <p>Collaboration: </p> </li> <li> <p>It represents the interaction between things that is done to meet the goal. </p> </li> <li>It is symbolized as a dotted ellipse with its name written inside it.</li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#structural-things_5","title":"Structural things","text":"<ul> <li> <p>Use case: </p> </li> <li> <p>Use case is the core concept of object-oriented modeling. </p> </li> <li>It portrays a set of actions executed by a system to achieve the goal.</li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#structural-things_6","title":"Structural things","text":"<ul> <li> <p>Actor: </p> </li> <li> <p>It comes under the use case diagrams. </p> </li> <li>It is an object that interacts with the system, for example, a user.</li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#structural-things_7","title":"Structural things","text":"<ul> <li>Component: </li> <li>It represents the physical part of the system.</li> </ul>"},{"location":"week-4/ce204-week-4/#structural-things_8","title":"Structural things","text":"<ul> <li>Node: </li> <li>A physical element that exists at run time.</li> </ul>"},{"location":"week-4/ce204-week-4/#behavioral-things","title":"Behavioral Things","text":"<ul> <li>They are the verbs that encompass the dynamic parts of a model. </li> <li>It depicts the behavior of a system. </li> <li>They involve </li> <li>state machine, </li> <li>activity diagram, </li> <li>interaction diagram, </li> <li>grouping things, </li> <li>annotation things</li> </ul>"},{"location":"week-4/ce204-week-4/#behavioral-things_1","title":"Behavioral Things","text":"<ul> <li>State Machine: </li> <li>It defines a sequence of states that an entity goes through in the software development lifecycle. </li> <li>It keeps a record of several distinct states of a system component.</li> </ul>"},{"location":"week-4/ce204-week-4/#behavioral-things_2","title":"Behavioral Things","text":"<ul> <li>Activity Diagram: </li> <li>It portrays all the activities accomplished by different entities of a system. </li> <li>It is represented the same as that of a state machine diagram. It consists of an initial state, final state, a decision box, and an action notation.</li> </ul>"},{"location":"week-4/ce204-week-4/#behavioral-things_3","title":"Behavioral Things","text":"<ul> <li>Interaction Diagram: </li> <li>It is used to envision the flow of messages between several components in a system.</li> </ul>"},{"location":"week-4/ce204-week-4/#grouping-things","title":"Grouping Things","text":"<ul> <li>It is a method that together binds the elements of the UML model. </li> <li>In UML, the package is the only thing, which is used for grouping.</li> </ul>"},{"location":"week-4/ce204-week-4/#grouping-things_1","title":"Grouping Things","text":"<ul> <li>Package: Package is the only thing that is available for grouping behavioral and structural things.</li> </ul>"},{"location":"week-4/ce204-week-4/#annotation-things","title":"Annotation Things","text":"<ul> <li>It is a mechanism that captures the remarks, descriptions, and comments of UML model elements. </li> <li>In UML, a note is the only Annotational thing.</li> </ul>"},{"location":"week-4/ce204-week-4/#annotation-things_1","title":"Annotation Things","text":"<ul> <li>Note: </li> <li>It is used to attach the constraints, comments, and rules to the elements of the model. </li> <li>It is a kind of yellow sticky note.</li> </ul>"},{"location":"week-4/ce204-week-4/#relationships","title":"Relationships","text":"<ul> <li>It illustrates the meaningful connections between things. It shows the association between the entities and defines the functionality of an application. There are four types of relationships </li> <li>Dependency</li> <li>Association</li> <li>Generalization</li> <li>Realization</li> </ul>"},{"location":"week-4/ce204-week-4/#relationships_1","title":"Relationships","text":"<ul> <li> <p>Dependency: </p> </li> <li> <p>Dependency is a kind of relationship in which a change in target element affects the source element, or simply we can say the source element is dependent on the target element. </p> </li> <li>It is one of the most important notations in UML. It depicts the dependency from one entity to another.</li> <li>It is denoted by a dotted line followed by an arrow at one side as shown below,</li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#relationships_2","title":"Relationships","text":"<ul> <li> <p>Association: </p> </li> <li> <p>A set of links that associates the entities to the UML model. </p> </li> <li>It tells how many elements are actually taking part in forming that relationship.</li> <li>It is denoted by a dotted line with arrowheads on both sides to describe the relationship with the element on both sides.</li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#relationships_3","title":"Relationships","text":"<ul> <li> <p>Generalization: </p> </li> <li> <p>It portrays the relationship between a general thing (a parent class or superclass) and a specific kind of that thing (a child class or subclass). </p> </li> <li>It is used to describe the concept of inheritance.</li> <li>It is denoted by a straight line followed by an empty arrowhead at one side.</li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#relationships_4","title":"Relationships","text":"<ul> <li> <p>Realization: </p> </li> <li> <p>It is a semantic kind of relationship between two things, where one defines the behavior to be carried out, and the other one implements the mentioned behavior. </p> </li> <li>It exists in interfaces.</li> <li>It is denoted by a dotted line with an empty arrowhead at one side.</li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#diagrams","title":"Diagrams","text":"<ul> <li>The diagrams are the graphical implementation of the models that incorporate symbols and text. </li> <li>Each symbol has a different meaning in the context of the UML diagram. </li> <li>There are thirteen different types of UML diagrams that are available in UML 2.0, such that each diagram has its own set of a symbol. </li> <li>And each diagram manifests a different dimension, perspective, and view of the system.</li> </ul>"},{"location":"week-4/ce204-week-4/#diagrams_1","title":"Diagrams","text":"<ul> <li>UML diagrams are classified into three categories that are given below:</li> <li>Structural Diagram</li> <li>Behavioral Diagram</li> <li>Interaction Diagram</li> </ul>"},{"location":"week-4/ce204-week-4/#diagrams_2","title":"Diagrams","text":"<ul> <li>Structural Diagram: </li> <li>It represents the static view of a system by portraying the structure of a system. </li> <li>It shows several objects residing in the system. Following are the structural diagrams given below:<ul> <li>Class diagram</li> <li>Object diagram</li> <li>Package diagram</li> <li>Component diagram</li> <li>Deployment diagram</li> </ul> </li> </ul>"},{"location":"week-4/ce204-week-4/#diagrams_3","title":"Diagrams","text":"<ul> <li>Behavioral Diagram: </li> <li>It depicts the behavioral features of a system. </li> <li>It deals with dynamic parts of the system. </li> <li>It encompasses the following diagrams:<ul> <li>Activity diagram</li> <li>State machine diagram</li> <li>Use case diagram</li> </ul> </li> </ul>"},{"location":"week-4/ce204-week-4/#diagrams_4","title":"Diagrams","text":"<ul> <li>Interaction diagram: </li> <li>It is a subset of behavioral diagrams. </li> <li>It depicts the interaction between two objects and the data flow between them. </li> <li>Following are the several interaction diagrams in UML:<ul> <li>Timing diagram</li> <li>Sequence diagram</li> <li>Collaboration diagram</li> </ul> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-architecture","title":"UML Architecture","text":""},{"location":"week-4/ce204-week-4/#uml-architecture_1","title":"UML Architecture","text":"<ul> <li>Software architecture is all about how a software system is built at its highest level. </li> <li>It is needed to think big from multiple perspectives with quality and design in mind. The software team is tied to many practical concerns, such as:</li> <li>The structure of the development team.</li> <li>The needs of the business.</li> <li>Development cycle.</li> <li>The intent of the structure itself.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-architecture_2","title":"UML Architecture","text":"<ul> <li>Software architecture provides a basic design of a complete software system. </li> <li>It defines the elements included in the system, the functions each element has, and how each element relates to one another. </li> <li>In short, it is a big picture or overall structure of the whole system, <ul> <li>how everything works together</li> </ul> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-architecture_3","title":"UML Architecture","text":"<ul> <li>To form an architecture, the software architect will take several factors into consideration:</li> <li>What will the system be used for?</li> <li>Who will be using the system?</li> <li>What quality matters to them?</li> <li>Where will the system run?</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-architecture_4","title":"UML Architecture","text":"<ul> <li>The architect plans the structure of the system to meet the needs like these. </li> <li>It is essential to have proper software architecture, mainly for a large software system. </li> <li>Having a clear design of a complete system as a starting point provides a solid basis for developers to follow</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-architecture_5","title":"UML Architecture","text":"<ul> <li>Each developer will know what needs to be implemented and how things relate to meet the desired needs efficiently. </li> <li>One of the main advantages of software architecture is that it provides high productivity to the software team. The software development becomes more effective as it comes up with an explained structure in place to coordinate work, implement individual features, or ground discussions on potential issues. </li> <li>With a lucid architecture, it is easier to know where the key responsibilities are residing in the system and where to make changes to add new requirements or simply fixing the failures.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-architecture_6","title":"UML Architecture","text":"<ul> <li>a clear architecture will help to achieve quality in the software with a well-designed structure using principles like separation of concerns; </li> <li>the system becomes easier to maintain, reuse, and adapt. The software architecture is useful to people such as software developers, the project manager, the client, and the end-user. </li> <li>Each one will have different perspectives to view the system and will bring different agendas to a project. Also, it provides a collection of several views</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-architecture_7","title":"UML Architecture","text":"<ul> <li>It can be best understood as a collection of five views:</li> <li>Use case view</li> <li>Design view</li> <li>Implementation view</li> <li>Process view</li> <li>Development view</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-architecture_8","title":"UML Architecture","text":""},{"location":"week-4/ce204-week-4/#uml-architecture_9","title":"UML Architecture","text":""},{"location":"week-4/ce204-week-4/#use-case-view","title":"Use case view","text":"<ul> <li>It is a view that shows the functionality of the system as perceived by external actors.</li> <li>It reveals the requirements of the system.</li> <li>With UML, it is easy to capture the static aspects of this view in the use case diagrams, whereas it?s dynamic aspects are captured in interaction diagrams, state chart diagrams, and activity diagrams.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-architecture_10","title":"UML Architecture","text":""},{"location":"week-4/ce204-week-4/#design-view","title":"Design View","text":"<ul> <li>It is a view that shows how the functionality is designed inside the system in terms of static structure and dynamic behavior.</li> <li>It captures the vocabulary of the problem space and solution space.</li> <li>With UML, it represents the static aspects of this view in class and object diagrams, whereas its dynamic aspects are captured in interaction diagrams, state chart diagrams, and activity diagrams.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-architecture_11","title":"UML Architecture","text":""},{"location":"week-4/ce204-week-4/#implementation-view","title":"Implementation View","text":"<ul> <li>It is the view that represents the organization of the core components and files.</li> <li>It primarily addresses the configuration management of the system?s releases.</li> <li>With UML, its static aspects are expressed in component diagrams, and the dynamic aspects are captured in interaction diagrams, state chart diagrams, and activity diagrams.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-architecture_12","title":"UML Architecture","text":""},{"location":"week-4/ce204-week-4/#process-view","title":"Process View","text":"<ul> <li>It is the view that demonstrates the concurrency of the system.</li> <li>It incorporates the threads and processes that make concurrent system and synchronized mechanisms.</li> <li>It primarily addresses the system's scalability, throughput, and performance.</li> <li>Its static and dynamic aspects are expressed the same way as the design view but focus more on the active classes that represent these threads and processes.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-architecture_13","title":"UML Architecture","text":""},{"location":"week-4/ce204-week-4/#deployment-view","title":"Deployment View","text":"<ul> <li>It is the view that shows the deployment of the system in terms of physical architecture.</li> <li>It includes the nodes, which form the system hardware topology where the system will be executed.</li> <li>It primarily addresses the distribution, delivery, and installation of the parts that build the physical system.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-diagrams-overview","title":"UML Diagrams Overview","text":""},{"location":"week-4/ce204-week-4/#uml-diagrams-overview_1","title":"UML Diagrams Overview","text":"<ul> <li>The UML diagrams are categorized into </li> <li>structural diagrams, </li> <li>behavioral diagrams, and also </li> <li>interaction overview diagrams. </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-diagrams-overview_2","title":"UML Diagrams Overview","text":""},{"location":"week-4/ce204-week-4/#structural-diagrams","title":"Structural Diagrams","text":"<p>Structural diagrams depict a static view or structure of a system. It is widely used in the documentation of software architecture. It embraces class diagrams, composite structure diagrams, component diagrams, deployment diagrams, object diagrams, and package diagrams. It presents an outline for the system. It stresses the elements to be present that are to be modeled.</p>"},{"location":"week-4/ce204-week-4/#structural-diagrams_1","title":"Structural Diagrams","text":"<p>Class Diagram: </p> <ul> <li>Class diagrams are one of the most widely used diagrams. It is the backbone of all the object-oriented software systems. </li> <li>It depicts the static structure of the system. </li> <li>It displays the system's class, attributes, and methods. </li> <li>It is helpful in recognizing the relation between different objects as well as classes.</li> </ul>"},{"location":"week-4/ce204-week-4/#structural-diagrams_2","title":"Structural Diagrams","text":"<p>Composite Structure Diagram: </p> <ul> <li>The composite structure diagrams show parts within the class. </li> <li>It displays the relationship between the parts and their configuration that ascertain the behavior of the class. </li> <li>It makes full use of ports, parts, and connectors to portray the internal structure of a structured classifier. </li> <li>It is similar to class diagrams, just the fact it represents individual parts in a detailed manner when compared with class diagrams.</li> </ul>"},{"location":"week-4/ce204-week-4/#structural-diagrams_3","title":"Structural Diagrams","text":"<p>Object Diagram: </p> <ul> <li>It describes the static structure of a system at a particular point in time. </li> <li>It can be used to test the accuracy of class diagrams. </li> <li>It represents distinct instances of classes and the relationship between them at a time.</li> </ul>"},{"location":"week-4/ce204-week-4/#structural-diagrams_4","title":"Structural Diagrams","text":"<p>Component Diagram: </p> <ul> <li>It portrays the organization of the physical components within the system. </li> <li>It is used for modeling execution details. </li> <li>It determines whether the desired functional requirements have been considered by the planned development or not, as it depicts the structural relationships between the elements of a software system.</li> </ul>"},{"location":"week-4/ce204-week-4/#structural-diagrams_5","title":"Structural Diagrams","text":"<p>Deployment Diagram: </p> <ul> <li>It presents the system's software and its hardware by telling what the existing physical components are and what software components are running on them. </li> <li>It produces information about system software. </li> <li>It is incorporated whenever software is used, distributed, or deployed across multiple machines with dissimilar configurations.</li> </ul>"},{"location":"week-4/ce204-week-4/#structural-diagrams_6","title":"Structural Diagrams","text":"<p>Package Diagram: </p> <ul> <li>It is used to illustrate how the packages and their elements are organized. </li> <li>It shows the dependencies between distinct packages. </li> <li>It manages UML diagrams by making it easily understandable. </li> <li>It is used for organizing the class and use case diagrams.</li> </ul>"},{"location":"week-4/ce204-week-4/#behavioral-diagrams","title":"Behavioral Diagrams","text":"<ul> <li>Behavioral diagrams portray a dynamic view of a system or the behavior of a system, which describes the functioning of the system. </li> <li>It includes use case diagrams, state diagrams, and activity diagrams. </li> <li>It defines the interaction within the system.</li> </ul>"},{"location":"week-4/ce204-week-4/#behavioral-diagrams_1","title":"Behavioral Diagrams","text":"<p>State Machine Diagram: </p> <ul> <li>It is a behavioral diagram. </li> <li>it portrays the system's behavior utilizing finite state transitions. </li> <li>It is also known as the State-charts diagram. </li> <li>It models the dynamic behavior of a class in response to external stimuli.</li> </ul>"},{"location":"week-4/ce204-week-4/#behavioral-diagrams_2","title":"Behavioral Diagrams","text":"<p>Activity Diagram: </p> <ul> <li>It models the flow of control from one activity to the other. </li> <li>With the help of an activity diagram, we can model sequential and concurrent activities. </li> <li>It visually depicts the workflow as well as what causes an event to occur.</li> </ul>"},{"location":"week-4/ce204-week-4/#behavioral-diagrams_3","title":"Behavioral Diagrams","text":"<p>Use Case Diagram: </p> <ul> <li>It represents the functionality of a system by utilizing actors and use cases. </li> <li>It encapsulates the functional requirement of a system and its association with actors. </li> <li>It portrays the use case view of a system.</li> </ul>"},{"location":"week-4/ce204-week-4/#interaction-diagrams","title":"Interaction Diagrams","text":"<ul> <li>Interaction diagrams are a subclass of behavioral diagrams that give emphasis to object interactions and also depicts the flow between various use case elements of a system. </li> <li>In simple words, it shows how objects interact with each other and how the data flows within them. </li> <li>It consists of communication, interaction overview, sequence, and timing diagrams</li> </ul>"},{"location":"week-4/ce204-week-4/#interaction-diagrams_1","title":"Interaction Diagrams","text":"<p>Sequence Diagram: </p> <ul> <li>It shows the interactions between the objects in terms of messages exchanged over time. </li> <li>It delineates in what order and how the object functions are in a system.</li> </ul>"},{"location":"week-4/ce204-week-4/#interaction-diagrams_2","title":"Interaction Diagrams","text":"<p>Communication Diagram: </p> <ul> <li>It shows the interchange of sequence messages between the objects. </li> <li>It focuses on objects and their relations. </li> <li>It describes the static and dynamic behavior of a system.</li> </ul>"},{"location":"week-4/ce204-week-4/#interaction-diagrams_3","title":"Interaction Diagrams","text":"<p>Timing Diagram: </p> <ul> <li>It is a special kind of sequence diagram used to depict the object's behavior over a specific period of time. </li> <li>It governs the change in state and object behavior by showing the time and duration constraints.</li> </ul>"},{"location":"week-4/ce204-week-4/#interaction-diagrams_4","title":"Interaction Diagrams","text":"<p>Interaction Overview diagram: </p> <ul> <li>It is a mixture of activity and sequence diagram that depicts a sequence of actions to simplify the complex interactions into simple interactions.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-relationship","title":"UML Relationship","text":""},{"location":"week-4/ce204-week-4/#uml-relationship_1","title":"UML Relationship","text":"<ul> <li>Relationships depict a connection between several things, such as structural, behavioral, or grouping things in the unified modeling language. </li> <li>Since it is termed as a link, it demonstrates how things are interrelated to each other at the time of system execution. </li> <li>It constitutes four types of relationships, i.e., </li> <li>dependency, </li> <li>association, </li> <li>generalization, and </li> <li>realization.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-relationship_2","title":"UML Relationship","text":""},{"location":"week-4/ce204-week-4/#dependency","title":"Dependency","text":"<ul> <li>Whenever there is a change in either the structure or the behavior of the class that affects the other class, such a relationship is termed as a dependency. </li> <li>Or, simply, we can say a class contained in other class is known as dependency. </li> <li>It is a unidirectional relationship.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-relationship_3","title":"UML Relationship","text":""},{"location":"week-4/ce204-week-4/#association","title":"Association","text":"<ul> <li>Association is a structural relationship that represents how two entities are linked or connected to each other within a system. </li> <li>It can form several types of associations, such as</li> <li>one-to-one, </li> <li>one-to-many, </li> <li>many-to-one, and </li> <li>many-to-many. </li> <li>A ternary association is one that constitutes three links. </li> <li>It portrays the static relationship between the entities of two classes.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-relationship_4","title":"UML Relationship","text":""},{"location":"week-4/ce204-week-4/#association_1","title":"Association","text":"<ul> <li>An association can be categorized into four types of associations, i.e., </li> <li>bi-directional, </li> <li>unidirectional, </li> <li>aggregation (composition aggregation), and </li> <li>reflexive, </li> <li>such that an aggregation is a special form of association and </li> <li>composition is a special form of aggregation. </li> <li>The mostly used associations are unidirectional and bi-directional.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-relationship_5","title":"UML Relationship","text":""},{"location":"week-4/ce204-week-4/#aggregation","title":"Aggregation","text":"<ul> <li>An aggregation is a special form of association. </li> <li>It portrays a part-of relationship. </li> <li>It forms a binary relationship, which means it cannot include more than two classes. </li> <li>It is also known as Has-a relationship. </li> <li>It specifies the direction of an object contained in another object. </li> <li>In aggregation, a child can exist independent of the parent.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-relationship_6","title":"UML Relationship","text":""},{"location":"week-4/ce204-week-4/#composition","title":"Composition","text":"<ul> <li>In a composition relationship, the child depends on the parent. </li> <li>It forms a two-way relationship. </li> <li>It is a special case of aggregation. </li> <li>It is known as Part-of relationship.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-relationship_7","title":"UML Relationship","text":""},{"location":"week-4/ce204-week-4/#aggregation-vs-composition-relationship","title":"Aggregation vs Composition Relationship","text":"Features Aggregation Relationship Composition Relationship Dependency In an aggregation relationship, a child can exist independent of a parent. In a composition relationship, the child cannot exist independent of the parent. Type of Relationship It constitutes a Has-a relationship. It constitutes Part-of relationship. Type of Association It forms a weak association. It forms a strong association. Examples A doctor has patients when the doctor gets transfer to another hospital, the patients do not accompany to a new workplace. A hospital and its wards. If the hospital is destroyed, the wards also get destroyed."},{"location":"week-4/ce204-week-4/#uml-relationship_8","title":"UML Relationship","text":""},{"location":"week-4/ce204-week-4/#generalization","title":"Generalization","text":"<ul> <li>The generalization relationship implements the object-oriented concept called inheritance or is-a relationship. </li> <li>It exists between two objects (things or entities), such that one entity is a parent (superclass or base class), and the other one is a child (subclass or derived class</li> <li>These are represented in terms of inheritance. </li> <li>Any child can access, update, or inherit the functionality, structure, and behavior of the parent.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-relationship_9","title":"UML Relationship","text":""},{"location":"week-4/ce204-week-4/#realization","title":"Realization","text":"<ul> <li>It is a kind of relationship in which one thing specifies the behavior or a responsibility to be carried out, and the other thing carries out that behavior. </li> <li>It can be represented on a class diagram or component diagrams. </li> <li>The realization relationship is constituted between interfaces, classes, packages, and components to link a client element to the supplier element.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-association-vs-aggregation-vs-composition","title":"UML Association vs. Aggregation vs. Composition","text":""},{"location":"week-4/ce204-week-4/#uml-association-vs-aggregation-vs-composition_1","title":"UML Association vs. Aggregation vs. Composition","text":"<ul> <li>In UML diagrams, relationships are used to link several things. It is a connection between structural, behavioral, or grouping things. Following are the standard UML relationships enlisted below:</li> <li>Association</li> <li>Dependency</li> <li>Generalization</li> <li>Realization</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-association-vs-aggregation-vs-composition_2","title":"UML Association vs. Aggregation vs. Composition","text":""},{"location":"week-4/ce204-week-4/#association_2","title":"Association","text":"<ul> <li> <p>Association relationship is a structural relationship in which different objects are linked within the system. It exhibits a binary relationship between the objects representing an activity. It depicts the relationship between objects, such as a teacher, can be associated with multiple teachers.</p> </li> <li> <p>It is represented by a line between the classes followed by an arrow that navigates the direction, and when the arrow is on both sides, it is then called a bidirectional association. We can specify the multiplicity of an association by adding the adornments on the line that will denote the association.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-association-vs-aggregation-vs-composition_3","title":"UML Association vs. Aggregation vs. Composition","text":""},{"location":"week-4/ce204-week-4/#association_3","title":"Association","text":"<p>A single teacher has multiple students.</p> <p></p>"},{"location":"week-4/ce204-week-4/#uml-association-vs-aggregation-vs-composition_4","title":"UML Association vs. Aggregation vs. Composition","text":""},{"location":"week-4/ce204-week-4/#association_4","title":"Association","text":"<p>A single student can associate with many teachers.</p> <p></p>"},{"location":"week-4/ce204-week-4/#uml-association-vs-aggregation-vs-composition_5","title":"UML Association vs. Aggregation vs. Composition","text":"<ul> <li>The composition and aggregation are two subsets of association. </li> <li>In both of the cases, the object of one class is owned by the object of another class; </li> <li>the only difference is that in composition, </li> <li>the child does not exist independently of its parent, whereas in aggregation, </li> <li>the child is not dependent on its parent i.e., standalone. </li> <li>An aggregation is a special form of association, and </li> <li>composition is the special form of aggregation.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-association-vs-aggregation-vs-composition_6","title":"UML Association vs. Aggregation vs. Composition","text":""},{"location":"week-4/ce204-week-4/#uml-association-vs-aggregation-vs-composition_7","title":"UML Association vs. Aggregation vs. Composition","text":""},{"location":"week-4/ce204-week-4/#aggregation_1","title":"Aggregation","text":"<ul> <li>Aggregation is a subset of association, is a collection of different things. </li> <li>It represents has a relationship. </li> <li>It is more specific than an association. </li> <li>It describes a part-whole or part-of relationship. </li> <li>It is a binary association, </li> <li>i.e., it only involves two classes. </li> <li>It is a kind of relationship in which the child is independent of its parent.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-association-vs-aggregation-vs-composition_8","title":"UML Association vs. Aggregation vs. Composition","text":""},{"location":"week-4/ce204-week-4/#aggregation_2","title":"Aggregation","text":"<ul> <li>Here we are considering a car and a wheel example. </li> <li>A car cannot move without a wheel. </li> <li>But the wheel can be independently used with the bike, scooter, cycle, or any other vehicle. </li> <li>The wheel object can exist without the car object, which proves to be an aggregation relationship.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-association-vs-aggregation-vs-composition_9","title":"UML Association vs. Aggregation vs. Composition","text":""},{"location":"week-4/ce204-week-4/#composition_1","title":"Composition","text":"<ul> <li>The composition is a part of aggregation, and it portrays the whole-part relationship. </li> <li>It depicts dependency between a composite (parent) and its parts (children), </li> <li>which means that if the composite is discarded, so will its parts get deleted. It exists between similar objects.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-association-vs-aggregation-vs-composition_10","title":"UML Association vs. Aggregation vs. Composition","text":""},{"location":"week-4/ce204-week-4/#composition_2","title":"Composition","text":"<ul> <li>the composition association relationship connects the Person class with Brain class, Heart class, and Legs class. </li> <li>If the person is destroyed, the brain, heart, and legs will also get discarded.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-association-vs-aggregation-vs-composition_11","title":"UML Association vs. Aggregation vs. Composition","text":"Association Aggregation Composition Association relationship is represented using an arrow. Aggregation relationship is represented by a straight line with an empty diamond at one end. The composition relationship is represented by a straight line with a black diamond at one end. In UML, it can exist between two or more classes. It is a part of the association relationship. It is a part of the aggregation relationship."},{"location":"week-4/ce204-week-4/#uml-association-vs-aggregation-vs-composition_12","title":"UML Association vs. Aggregation vs. Composition","text":"Association Aggregation Composition It incorporates one-to-one, one-to-many, many-to-one, and many-to-many association between the classes. It exhibits a kind of weak relationship. It exhibits a strong type of relationship. It can associate one more objects together. In an aggregation relationship, the associated objects exist independently within the scope of the system. In a composition relationship, the associated objects cannot exist independently within the scope of the system."},{"location":"week-4/ce204-week-4/#uml-association-vs-aggregation-vs-composition_13","title":"UML Association vs. Aggregation vs. Composition","text":"Association Aggregation Composition In this, objects are linked together. In this, the linked objects are independent of each other. Here the linked objects are dependent on each other. It may or may not affect the other associated element if one element is deleted. Deleting one element in the aggregation relationship does not affect other associated elements. It affects the other element if one of its associated element is deleted."},{"location":"week-4/ce204-week-4/#uml-association-vs-aggregation-vs-composition_14","title":"UML Association vs. Aggregation vs. Composition","text":"Association Aggregation Composition Example: A tutor can associate with multiple students, or one student can associate with multiple teachers. Example: A car needs a wheel for its proper functioning, but it may not require the same wheel. It may function with another wheel as well."},{"location":"week-4/ce204-week-4/#uml-association","title":"UML- Association","text":""},{"location":"week-4/ce204-week-4/#uml-association_1","title":"UML- Association","text":"<ul> <li>Association is the semantic relationship between classes that shows how one instance is connected or merged with others in a system. </li> <li>The objects are combined either logically or physically. </li> <li>Since it connects the object of one class to the object of another class, it is categorized as a structural relationship</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-association_2","title":"UML- Association","text":"<ul> <li>Following are the constraints applied to the association relationship</li> <li>{implicit}: As the name suggests, the implicit constraints define that the relationship is not visible, but it is based on a concept.</li> <li>{ordered}: It describes that the set of entities is in a particular way at one end in an association.</li> <li>{changeable}: The changeable constraint ensures that the connections between several objects within a system are added, improved, and detached, as and when required.</li> <li>{addOnly}: It specifies that any new connection can be added from an object located at the other end in an association.</li> <li>{frozen}: The frozen constraint specifies that whenever a link is added between objects, it cannot be altered by the time it is activated over the connection or given link</li> </ul>"},{"location":"week-4/ce204-week-4/#reflexive-association","title":"Reflexive Association","text":"<ul> <li>In the reflexive associations, the links are between the objects of the same classes. </li> <li>In other words, it can be said that the reflexive association consists of the same class at both ends.</li> <li>An object can also be termed as an instance.</li> </ul>"},{"location":"week-4/ce204-week-4/#reflexive-association_1","title":"Reflexive Association","text":"<ul> <li>The vegetable class has two objects, i.e., onion and eggplant. According to the reflexive association's definition, the link between the onion and eggplant exist, as they belong to the same class, i.e., vegetable.</li> </ul>"},{"location":"week-4/ce204-week-4/#directed-association","title":"Directed Association","text":"<ul> <li>The directed association is concerned with the direction of flow inside association classes. </li> <li>The flow of association can be shown by employing a directed association. </li> <li>The directed association between two classes is represented by a line with an arrowhead, which indicates the navigation direction. </li> <li>The flow of association from one class to another is always in one direction</li> </ul>"},{"location":"week-4/ce204-week-4/#directed-association_1","title":"Directed Association","text":"<ul> <li>It can be said that there is an association between a person and the company. </li> <li>The person works for the company. </li> <li>Here the person works for the company, and not the company works for a person</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-dependency","title":"UML-Dependency","text":""},{"location":"week-4/ce204-week-4/#uml-dependency_1","title":"UML-Dependency","text":"<ul> <li>Dependency depicts how various things within a system are dependent on each other. </li> <li>In UML, a dependency relationship is the kind of relationship in which a client (one element) is dependent on the supplier (another element). </li> <li>It is used in class diagrams, component diagrams, deployment diagrams, and use-case diagrams, which indicates that a change to the supplier necessitates a change to the client. </li> </ul>"},{"location":"week-4/ce204-week-4/#types-of-dependency-relationship-1-of-6","title":"Types of Dependency Relationship (1 of 6)","text":"<p>Following are the type of dependency relationships, keywords, or stereotypes given below:</p> <ul> <li> <p><code>&lt;&lt;derive&gt;&gt;</code> -It is a constraint that specifies the template can be initialized by the source at the target location utilizing given parameters.</p> </li> <li> <p><code>&lt;&lt;derive&gt;&gt;</code> -It represents that the source object's location can be evaluated from the target object.</p> </li> <li> <p><code>&lt;&lt;friend&gt;&gt;</code> -It states the uniqueness of the source in the target object.</p> </li> <li> <p><code>&lt;&lt;instanceOf&gt;&gt;</code> -It states that an instance of a target classifier is the source object.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#types-of-dependency-relationship-2-of-6","title":"Types of Dependency Relationship (2 of 6)","text":"<p>Following are the type of dependency relationships, keywords, or stereotypes given below:</p> <ul> <li> <p><code>&lt;&lt;instantiate&gt;&gt;</code> -It defines the capability of the source object, creating instances of a target object.</p> </li> <li> <p><code>&lt;&lt;refine&gt;&gt;</code> -It states that the source object comprises of exceptional abstraction than that of the target object.</p> </li> <li> <p><code>&lt;&lt;use&gt;&gt;</code> -When the packages are created in UML, the use of stereotype is used as it describes that the elements of the source package can also exist in the target package. It specifies that the source package uses some of the elements of the target package.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#types-of-dependency-relationship-3-of-6","title":"Types of Dependency Relationship (3 of 6)","text":"<p>Following are the type of dependency relationships, keywords, or stereotypes given below:</p> <ul> <li> <p><code>&lt;&lt;substitute&gt;&gt;</code> -The substitute stereotype state that the client can be substituted at the runtime for the supplier.</p> </li> <li> <p><code>&lt;&lt;access&gt;&gt;</code> -It is also called as private merging in which the source package accesses the element of the target package.</p> </li> <li> <p><code>&lt;&lt;import&gt;&gt;</code> -It specifies that target imports the source package's element as they are defined within the target. It is also known as public merging.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#types-of-dependency-relationship-4-of-6","title":"Types of Dependency Relationship (4 of 6)","text":"<p>Following are the type of dependency relationships, keywords, or stereotypes given below:</p> <ul> <li> <p><code>&lt;&lt;permit&gt;&gt;</code> -It describes that the source element can access the supplier element or whatever visibility is provided by the supplier.</p> </li> <li> <p><code>&lt;&lt;extend&gt;&gt;</code> -It states that the behavior of the source element can be extended by the target.</p> </li> <li> <p><code>&lt;&lt;include&gt;&gt;</code> -It describes the source element, which can include the behavior of another element at a specific location, just like a function call in C/C++.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#types-of-dependency-relationship-5-of-6","title":"Types of Dependency Relationship (5 of 6)","text":"<p>Following are the type of dependency relationships, keywords, or stereotypes given below:</p> <ul> <li> <p><code>&lt;&lt;become&gt;&gt;</code> -It states that target is similar to the source with distinct roles and values.</p> </li> <li> <p><code>&lt;&lt;call&gt;&gt;</code> -It specifies that the target object can be invoked by the source.</p> </li> <li> <p><code>&lt;&lt;copy&gt;&gt;</code> -It states that the target is an independent replica of a source object.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#types-of-dependency-relationship-6-of-6","title":"Types of Dependency Relationship (6 of 6)","text":"<p>Following are the type of dependency relationships, keywords, or stereotypes given below:</p> <ul> <li> <p><code>&lt;&lt;parameter&gt;&gt;</code> -It describes that the supplier is a parameter of the client's actions.</p> </li> <li> <p><code>&lt;&lt;send&gt;&gt;</code> -The client act as an operation, which sends some unspecified targets to the supplier.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-generalization","title":"UML-Generalization","text":""},{"location":"week-4/ce204-week-4/#uml-generalization_1","title":"UML-Generalization","text":""},{"location":"week-4/ce204-week-4/#uml-generalization_2","title":"UML-Generalization","text":"<ul> <li> <p>In UML modeling, a generalization relationship is a relationship that implements the concept of object orientation called inheritance. </p> </li> <li> <p>The generalization relationship occurs between two entities or objects, such that one entity is the parent, and the other one is the child. </p> </li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#uml-generalization_3","title":"UML-Generalization","text":"<ul> <li> <p>The child inherits the functionality of its parent and can access as well as update it.</p> </li> <li> <p>Generalization relationship is utilized in class, component, deployment, and use case diagrams to specify that the child inherits actions, characteristics, and relationships from its parent.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-generalization_4","title":"UML-Generalization","text":"<ul> <li> <p>To meet UML's standard, it necessitates usage of the same types of model elements in the generalization relationship, i.e., generalization relation can either be used between actors or between use cases, but not between an actor and a use case.</p> </li> <li> <p>The generalization relationship is incorporated to record attributes, operations, and relationships in a parent model element so that it can be inherited in one or more child model elements.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-generalization_5","title":"UML-Generalization","text":"<ul> <li> <p>The parent model element can have as many children, and also, the child can have one or more parents. But most commonly, </p> </li> <li> <p>it can be seen that there is one parent model element and multiple child model elements. </p> </li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#uml-generalization_6","title":"UML-Generalization","text":"<ul> <li>The generalization relationship does not consist of names. </li> <li>The generalization relationship is represented by a solid line with a hollow arrowhead pointing towards the parent model element from the child model element.</li> </ul>"},{"location":"week-4/ce204-week-4/#stereotypes-and-their-constraints","title":"Stereotypes and their constraints","text":""},{"location":"week-4/ce204-week-4/#stereotypes-and-their-constraints_1","title":"Stereotypes and their constraints","text":"<ul> <li><code>&lt;&lt;implementation&gt;&gt;</code> - It is used to show that the child is implemented by its parent, such that the child object inherits the structure and behavior of its parent object without disobeying the rules. </li> <li>The implementation of stereotype is mostly used in single inheritance.</li> </ul>"},{"location":"week-4/ce204-week-4/#stereotypes-and-their-constraints_2","title":"Stereotypes and their constraints","text":"<ul> <li>In the generalization stereotype, there are two types of constraints that are complete and incomplete to check if all the child objects are involved or not in the relationship.</li> </ul>"},{"location":"week-4/ce204-week-4/#stereotypes-and-their-constraints_3","title":"Stereotypes and their constraints","text":"<ul> <li>As we know, the bank account can be of two types; </li> <li>Savings Account and </li> <li>Credit Card Account. </li> <li>Both the savings and the credit card account inherits the generalized properties from the Bank Account, which is Account Number, Account Balance, etc.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-realization","title":"UML-Realization","text":""},{"location":"week-4/ce204-week-4/#uml-realization_1","title":"UML-Realization","text":"<ul> <li>In UML modeling, the realization is a relationship between two objects, where the client (one model element) implements the responsibility specified by the supplier (another model element). </li> <li>The realization relationship can be employed in class diagrams and components diagrams.</li> <li>The realization relationship does not have names. </li> <li>It is mostly found in the interfaces. </li> <li>It is represented by a dashed line with a hollow arrowhead at one end that points from the client to the server.</li> </ul>"},{"location":"week-4/ce204-week-4/#interface-realization","title":"Interface Realization","text":"<ul> <li> <p>Interface realization is a kind of specialized relation between the classifier and the interface. </p> </li> <li> <p>In interface realization relationship, realizing classifiers conforms to the contract defined by the interface.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#interface-realization_1","title":"Interface Realization","text":"<ul> <li> <p>A classifier implementing an interface identifies the objects that conform to the interface and any of its ancestors. </p> </li> <li> <p>A classifier can execute one or more interfaces. The set of interfaces that are implemented by the classifier are its given interfaces. </p> </li> </ul>"},{"location":"week-4/ce204-week-4/#interface-realization_2","title":"Interface Realization","text":"<ul> <li> <p>The given interfaces are the set of services offered by the classifiers to its clients.</p> </li> <li> <p>The interface realization relationship does not contain names, and if you name it, then the name will appear beside the connector in the diagram.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#interface-realization_3","title":"Interface Realization","text":"<ul> <li>The interface realization relationship is represented by a dashed line with a hollow arrowhead, which points from the classifier to the given interface.</li> </ul>"},{"location":"week-4/ce204-week-4/#types-of-realization","title":"Types of realization","text":"<ul> <li>Canonical form</li> <li>Elided form</li> </ul>"},{"location":"week-4/ce204-week-4/#canonical-form","title":"Canonical form","text":"<ul> <li>In UML, the canonical form realizes the interfaces across the system. </li> <li>An interface stereotype is used for creating an interface, and a realization relationship is employed to realize (implement) a specific interface. </li> <li>In this, the realization relationship is represented by a dashed line with a hollow arrowhead, and the interface is implemented using an object.</li> </ul>"},{"location":"week-4/ce204-week-4/#canonical-form_1","title":"Canonical form","text":"<ul> <li>From the diagram given below, it can be seen that the object Account Business Rules realizes the interface Iruleagent.</li> </ul>"},{"location":"week-4/ce204-week-4/#elided-form","title":"Elided form","text":""},{"location":"week-4/ce204-week-4/#elided-form_1","title":"Elided form","text":"<ul> <li>It is that kind of realization relationship in which the interface is represented by a circle, also known as a lollipop notation. </li> <li>When an interface is realized employing anything present in the system, then an elided structure is created.</li> <li>Here the interface Iruleagent is denoted by an elided form, which is realized by acctrule.dll.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-class-diagram","title":"UML Class Diagram","text":""},{"location":"week-4/ce204-week-4/#uml-class-diagram_1","title":"UML Class Diagram","text":"<p>The class diagram depicts a static view of an application. It represents the types of objects residing in the system and the relationships between them. A class consists of its objects, and also it may inherit from other classes. A class diagram is used to visualize, describe, document various different aspects of the system, and also construct executable software code.</p> <p>It shows the attributes, classes, functions, and relationships to give an overview of the software system. It constitutes class names, attributes, and functions in a separate compartment that helps in software development. Since it is a collection of classes, interfaces, associations, collaborations, and constraints, it is termed as a structural diagram.</p>"},{"location":"week-4/ce204-week-4/#purpose-of-class-diagrams","title":"Purpose of Class Diagrams","text":"<p>The main purpose of class diagrams is to build a static view of an application. It is the only diagram that is widely used for construction, and it can be mapped with object-oriented languages. It is one of the most popular UML diagrams. Following are the purpose of class diagrams given below:</p> <ul> <li>It analyses and designs a static view of an application.</li> <li>It describes the major responsibilities of a system.</li> <li>It is a base for component and deployment diagrams.</li> <li>It incorporates forward and reverse engineering.</li> </ul>"},{"location":"week-4/ce204-week-4/#benefits-of-class-diagrams","title":"Benefits of Class Diagrams","text":"<ul> <li>It can represent the object model for complex systems.</li> <li>It reduces the maintenance time by providing an overview of - how an application is structured before coding.</li> <li>It provides a general schematic of an application for - better understanding.</li> <li>It represents a detailed chart by highlighting the desired - code, which is to be programmed.</li> <li>It is helpful for the stakeholders and the developers.</li> </ul>"},{"location":"week-4/ce204-week-4/#vital-components-of-a-class-diagram","title":"Vital components of a Class Diagram","text":"<ul> <li>Upper Section</li> <li>Middle Section</li> <li>Lower Section   </li> </ul>"},{"location":"week-4/ce204-week-4/#upper-section-the-name-of-the-class","title":"Upper Section: (the name of the class)","text":"<ul> <li> <p>The upper section encompasses the name of the class. A class is a representation of similar objects that shares the same relationships, attributes, operations, and semantics. Some of the following rules that should be taken into account while representing a class are given below:</p> </li> <li> <p>Capitalize the initial letter of the class name.</p> </li> <li>Place the class name in the center of the upper section.</li> <li>A class name must be written in bold format.</li> <li>The name of the abstract class should be written in italics format.</li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#middle-section-attributes","title":"Middle Section: (attributes)","text":"<ul> <li>The middle section constitutes the attributes, which describe the quality of the class. The attributes have the following characteristics:</li> <li>The attributes are written along with its visibility - factors, which are <code>public (+)</code>, <code>private (-)</code>, <code>protected (#)</code>, - and <code>package (~)</code>.</li> <li>The accessibility of an attribute class is illustrated by - the visibility factors.</li> <li>A meaningful name should be assigned to the attribute, which will explain its usage inside the class.</li> </ul>"},{"location":"week-4/ce204-week-4/#lower-section-methods","title":"Lower Section: (methods)","text":"<ul> <li>The lower section contain methods or operations. </li> <li>The methods are represented in the form of a list, where each method is written in a single line. </li> <li>It demonstrates how a class interacts with data.</li> </ul>"},{"location":"week-4/ce204-week-4/#relationships_5","title":"Relationships","text":"<p>In UML, relationships are of three types:</p> <ul> <li>Dependency</li> <li>Generalization</li> <li>Association</li> </ul>"},{"location":"week-4/ce204-week-4/#dependency_1","title":"Dependency:","text":"<ul> <li>A dependency is a semantic relationship between two or more classes where a change in one class cause changes in another class. </li> <li>It forms a weaker relationship.</li> <li>In the following example, Student_Name is dependent on the Student_Id.</li> </ul>"},{"location":"week-4/ce204-week-4/#generalization_1","title":"Generalization:","text":"<ul> <li>A generalization is a relationship between a parent class (superclass) and a child class (subclass). </li> <li>In this, the child class is inherited from the parent class.</li> <li>For example, The Current Account, Saving Account, and Credit Account are the generalized form of Bank Account.</li> </ul>"},{"location":"week-4/ce204-week-4/#association_5","title":"Association:","text":"<ul> <li>It describes a static or physical connection between two or more objects. </li> <li>It depicts how many objects are there in the relationship.</li> <li>For example, a department is associated with the college.</li> </ul> <p>\\(Also...\\)</p>"},{"location":"week-4/ce204-week-4/#multiplicity","title":"Multiplicity:","text":"<ul> <li> <p>It defines a specific range of allowable instances of attributes. In case if a range is not specified, one is considered as a default multiplicity.</p> </li> <li> <p>For example, multiple patients are admitted to one hospital.</p> </li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#aggregation_3","title":"Aggregation:","text":"<ul> <li> <p>An aggregation is a subset of association, which represents has a relationship. It is more specific then association. It defines a part-whole or part-of relationship. In this kind of relationship, the child class can exist independently of its parent class.</p> </li> <li> <p>The company encompasses a number of employees, and even if one employee resigns, the company still exists.</p> </li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#composition_3","title":"Composition:","text":"<ul> <li> <p>The composition is a subset of aggregation. It portrays the dependency between the parent and its child, which means if one part is deleted, then the other part also gets discarded. It represents a whole-part relationship.</p> </li> <li> <p>A contact book consists of multiple contacts, and if you delete the contact book, all the contacts will be lost.</p> </li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#abstract-classes","title":"Abstract Classes","text":"<ul> <li> <p>In the abstract class, no objects can be a direct entity of the abstract class. The abstract class can neither be declared nor be instantiated. It is used to find the functionalities across the classes. The notation of the abstract class is similar to that of class; </p> </li> <li> <p>the only difference is that the name of the class is written in italics. Since it does not involve any implementation for a given function, it is best to use the abstract class with multiple objects.</p> </li> <li> <p>Let us assume that we have an abstract class named displacement with a method declared inside it, and that method will be called as a drive (). Now, this abstract class method can be implemented by any object, for example, car, bike, scooter, cycle, etc.</p> </li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#how-to-draw-a-class-diagram","title":"How to draw a Class Diagram?","text":"<p>The class diagram is used most widely to construct software applications. It not only represents a static view of the system but also all the major aspects of an application. A collection of class diagrams as a whole represents a system.</p>"},{"location":"week-4/ce204-week-4/#how-to-draw-a-class-diagram_1","title":"How to draw a Class Diagram?","text":"<p>Some key points that are needed to keep in mind while drawing a class diagram are given below:</p> <ul> <li>To describe a complete aspect of the system, it is - suggested to give a meaningful name to the class diagram.</li> <li>The objects and their relationships should be acknowledged - in advance.</li> <li>The attributes and methods (responsibilities) of each class - must be known.</li> <li>A minimum number of desired properties should be specified - as more number of the unwanted property will lead to a - complex diagram.</li> <li>Notes can be used as and when required by the developer to - describe the aspects of a diagram.</li> <li>The diagrams should be redrawn and reworked as many times - to make it correct before producing its final version.</li> </ul>"},{"location":"week-4/ce204-week-4/#class-diagram-example","title":"Class Diagram Example","text":"<p>A class diagram describing the sales order system is given below.</p> <p></p>"},{"location":"week-4/ce204-week-4/#usage-of-class-diagrams","title":"Usage of Class diagrams","text":"<p>The class diagram is used to represent a static view of the system. It plays an essential role in the establishment of the component and deployment diagrams. It helps to construct an executable code to perform forward and backward engineering for any system, or we can say it is mainly used for construction. It represents the mapping with object-oriented languages that are C++, Java, etc. Class diagrams can be used for the following purposes:</p>"},{"location":"week-4/ce204-week-4/#usage-of-class-diagrams_1","title":"Usage of Class diagrams","text":"<ul> <li>To describe the static view of a system.</li> <li>To show the collaboration among every instance in the static view.</li> <li>To describe the functionalities performed by the system.</li> <li>To construct the software application using object-oriented languages.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-object-diagram","title":"UML Object Diagram","text":""},{"location":"week-4/ce204-week-4/#uml-object-diagram_1","title":"UML Object Diagram","text":"<ul> <li> <p>Object diagrams are dependent on the class diagram as they are derived from the class diagram. It represents an instance of a class diagram. The objects help in portraying a static view of an object-oriented system at a specific instant.</p> </li> <li> <p>Both the object and class diagram are similar to some extent; the only difference is that the class diagram provides an abstract view of a system. It helps in visualizing a particular functionality of a system.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#notation-of-an-object-diagram","title":"Notation of an Object Diagram","text":""},{"location":"week-4/ce204-week-4/#purpose-of-object-diagram","title":"Purpose of Object Diagram","text":"<p>The object diagram holds the same purpose as that of a class diagram. The class diagram provides an abstract view which comprises of classes and their relationships, whereas the object diagram represents an instance at a particular point of time.</p>"},{"location":"week-4/ce204-week-4/#purpose-of-object-diagram_1","title":"Purpose of Object Diagram","text":"<p>The object diagram is actually similar to the concrete (actual) system behavior. The main purpose is to depict a static view of a system.</p>"},{"location":"week-4/ce204-week-4/#purpose-of-object-diagram_2","title":"Purpose of Object Diagram","text":"<p>Following are the purposes enlisted below:</p> <ul> <li>It is used to perform forward and reverse engineering.</li> <li>It is used to understand object behavior and their - relationships practically.</li> <li>It is used to get a static view of a system.</li> <li>It is used to represent an instance of a system.</li> </ul>"},{"location":"week-4/ce204-week-4/#example-of-object-diagram","title":"Example of Object Diagram","text":""},{"location":"week-4/ce204-week-4/#how-to-draw-an-object-diagram","title":"How to draw an Object Diagram?","text":"<ul> <li>All the objects present in the system should be examined - before start drawing the object diagram.</li> <li>Before creating the object diagram, the relation between - the objects must be acknowledged.</li> <li>The association relationship among the entities must be - cleared already.</li> <li>To represent the functionality of an object, a proper - meaningful name should be assigned.</li> <li>The objects are to be examined to understand its functionality.</li> </ul>"},{"location":"week-4/ce204-week-4/#applications-of-object-diagrams","title":"Applications of Object diagrams","text":"<p>The following are the application areas where the object diagrams can be used.</p> <ul> <li>To build a prototype of a system.</li> <li>To model complex data structures.</li> <li>To perceive the system from a practical perspective.</li> <li>Reverse engineering.</li> </ul>"},{"location":"week-4/ce204-week-4/#class-vs-object-diagram","title":"Class vs. Object diagram","text":"Class Diagram Object Diagram It depicts the static view of a system. It portrays the real-time behavior of a system. Dynamic changes are not included in the class diagram. Dynamic changes are captured in the object diagram. The data values and attributes of an instance are not involved here. It incorporates data values and attributes of an entity. The object behavior is manipulated in the class diagram."},{"location":"week-4/ce204-week-4/#uml-component-diagram","title":"UML Component Diagram","text":""},{"location":"week-4/ce204-week-4/#uml-component-diagram_1","title":"UML Component Diagram","text":"<p>A component diagram is used to break down a large object-oriented system into the smaller components, so as to make them more manageable. It models the physical view of a system such as executables, files, libraries, etc. that resides within the node.</p> <p>It visualizes the relationships as well as the organization between the components present in the system. It helps in forming an executable system. A component is a single unit of the system, which is replaceable and executable. The implementation details of a component are hidden, and it necessitates an interface to execute a function. It is like a black box whose behavior is explained by the provided and required interfaces.</p>"},{"location":"week-4/ce204-week-4/#notation-of-a-component-diagram","title":"Notation of a Component Diagram","text":"<ul> <li>Component</li> </ul> <ul> <li>Node</li> </ul>"},{"location":"week-4/ce204-week-4/#purpose-of-a-component-diagram","title":"Purpose of a Component Diagram","text":"<p>Since it is a special kind of a UML diagram, it holds distinct purposes. It describes all the individual components that are used to make the functionalities, but not the functionalities of the system. It visualizes the physical components inside the system. The components can be a library, packages, files, etc.</p> <p>The component diagram also describes the static view of a system, which includes the organization of components at a particular instant. The collection of component diagrams represents a whole system.</p>"},{"location":"week-4/ce204-week-4/#purpose-of-a-component-diagram_1","title":"Purpose of a Component Diagram","text":"<p>The main purpose of the component diagram are enlisted below:</p> <ul> <li>It envisions each component of a system.</li> <li>It constructs the executable by incorporating forward and reverse engineering.</li> <li>It depicts the relationships and organization of components.</li> </ul>"},{"location":"week-4/ce204-week-4/#why-use-component-diagram","title":"Why use Component Diagram?","text":"<p>The component diagrams have remarkable importance. It is used to depict the functionality and behavior of all the components present in the system, unlike other diagrams that are used to represent the architecture of the system, working of a system, or simply the system itself.</p> <p>In UML, the component diagram portrays the behavior and organization of components at any instant of time. The system cannot be visualized by any individual component, but it can be by the collection of components.</p>"},{"location":"week-4/ce204-week-4/#why-use-component-diagram_1","title":"Why use Component Diagram?","text":"<p>Following are some reasons for the requirement of the component diagram:</p> <ul> <li>It portrays the components of a system at the runtime.</li> <li>It is helpful in testing a system.</li> <li>It envisions the links between several connections.</li> </ul>"},{"location":"week-4/ce204-week-4/#when-to-use-a-component-diagram","title":"When to use a Component Diagram?","text":"<p>It represents various physical components of a system at runtime. It is helpful in visualizing the structure and the organization of a system. It describes how individual components can together form a single system. </p>"},{"location":"week-4/ce204-week-4/#when-to-use-a-component-diagram_1","title":"When to use a Component Diagram?","text":"<p>Following are some reasons, which tells when to use component diagram:</p> <ul> <li>To divide a single system into multiple components according to the functionality.</li> <li>To represent the component organization of the system.</li> </ul>"},{"location":"week-4/ce204-week-4/#how-to-draw-a-component-diagram","title":"How to Draw a Component Diagram?","text":"<p>The component diagram is helpful in representing the physical aspects of a system, which are files, executables, libraries, etc. The main purpose of a component diagram is different from that of other diagrams. It is utilized in the implementation phase of any application.</p> <p>Once the system is designed employing different UML diagrams, and the artifacts are prepared, the component diagram is used to get an idea of implementation. It plays an essential role in implementing applications efficiently.</p>"},{"location":"week-4/ce204-week-4/#how-to-draw-a-component-diagram_1","title":"How to Draw a Component Diagram?","text":"<p>Following are some artifacts that are needed to be identified before drawing a component diagram:</p> <ul> <li>What files are used inside the system?</li> <li>What is the application of relevant libraries and artifacts?</li> <li>What is the relationship between the artifacts?</li> </ul>"},{"location":"week-4/ce204-week-4/#how-to-draw-a-component-diagram_2","title":"How to Draw a Component Diagram?","text":"<p>Following are some points that are needed to be kept in - mind after the artifacts are identified:</p> <ul> <li>Using a meaningful name to ascertain the component for - which the diagram is about to be drawn.</li> <li>Before producing the required tools, a mental layout is to be made.</li> <li>To clarify the important points, notes can be incorporated.</li> </ul>"},{"location":"week-4/ce204-week-4/#example-of-a-component-diagram","title":"Example of a Component Diagram","text":"<p>A component diagram for an online shopping system is given below:</p> <p></p>"},{"location":"week-4/ce204-week-4/#where-to-use-component-diagrams","title":"Where to use Component Diagrams?","text":"<p>The component diagram is a special purpose diagram, which is used to visualize the static implementation view of a system. It represents the physical components of a system, or we can say it portrays the organization of the components inside a system. The components, such as libraries, files, executables, etc. are first needed to be organized before the implementation.</p>"},{"location":"week-4/ce204-week-4/#where-to-use-component-diagrams_1","title":"Where to use Component Diagrams?","text":"<p>The component diagram can be used for the followings:</p> <ul> <li>To model the components of the system.</li> <li>To model the schemas of a database.</li> <li>To model the applications of an application.</li> <li>To model the system's source code.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-deployment-diagram","title":"UML Deployment Diagram","text":""},{"location":"week-4/ce204-week-4/#uml-deployment-diagram_1","title":"UML Deployment Diagram","text":"<p>The deployment diagram visualizes the physical hardware on which the software will be deployed. It portrays the static deployment view of a system. It involves the nodes and their relationships.</p> <p>It ascertains how software is deployed on the hardware. It maps the software architecture created in design to the physical system architecture, where the software will be executed as a node. Since it involves many nodes, the relationship is shown by utilizing communication paths.</p>"},{"location":"week-4/ce204-week-4/#purpose-of-deployment-diagram","title":"Purpose of Deployment Diagram","text":"<p>The main purpose of the deployment diagram is to represent how software is installed on the hardware component. It depicts in what manner a software interacts with hardware to perform its execution.</p> <p>Both the deployment diagram and the component diagram are closely interrelated to each other as they focus on software and hardware components. The component diagram represents the components of a system, whereas the deployment diagram describes how they are actually deployed on the hardware.</p> <p>The deployment diagram does not focus on the logical components of the system, but it put its attention on the hardware topology.</p>"},{"location":"week-4/ce204-week-4/#purpose-of-deployment-diagram_1","title":"Purpose of Deployment Diagram","text":"<p>Following are the purposes of deployment diagram enlisted below:</p> <ul> <li>To envision the hardware topology of the system.</li> <li>To represent the hardware components on which the software - components are installed.</li> <li>To describe the processing of nodes at the runtime.</li> </ul>"},{"location":"week-4/ce204-week-4/#symbol-and-notation-of-deployment-diagram","title":"Symbol and notation of Deployment diagram","text":"<p>The deployment diagram consist of the following notations:</p> <ul> <li>A component</li> <li>An artifact</li> <li>An interface</li> <li>A node</li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#how-to-draw-a-deployment-diagram","title":"How to draw a Deployment Diagram?","text":"<p>The deployment diagram portrays the deployment view of the system. It helps in visualizing the topological view of a system. It incorporates nodes, which are physical hardware. The nodes are used to execute the artifacts. The instances of artifacts can be deployed on the instances of nodes.</p>"},{"location":"week-4/ce204-week-4/#how-to-draw-a-deployment-diagram_1","title":"How to draw a Deployment Diagram?","text":"<p>Since it plays a critical role during the administrative process, it involves the following parameters:</p> <ul> <li>High performance</li> <li>Scalability</li> <li>Maintainability</li> <li>Portability</li> <li>Easily understandable</li> </ul>"},{"location":"week-4/ce204-week-4/#how-to-draw-a-deployment-diagram_2","title":"How to draw a Deployment Diagram?","text":"<ul> <li>One of the essential elements of the deployment diagram is the nodes and artifacts. </li> <li>So it is necessary to identify all of the nodes and the relationship between them. </li> <li>It becomes easier to develop a deployment diagram if all of the nodes, artifacts, and their relationship is already known.</li> </ul>"},{"location":"week-4/ce204-week-4/#example-of-a-deployment-diagram","title":"Example of a Deployment diagram","text":"<ul> <li>A deployment diagram for the Apple iTunes application is given below.</li> </ul>"},{"location":"week-4/ce204-week-4/#example-of-a-deployment-diagram_1","title":"Example of a Deployment diagram","text":"<ul> <li>The iTunes setup can be downloaded from the iTunes website, and also it can be installed on the home computer. Once the installation and the registration are done, iTunes application can easily interconnect with the Apple iTunes store. Users can purchase and download music, video, TV serials, etc. and cache it in the media library.</li> </ul>"},{"location":"week-4/ce204-week-4/#example-of-a-deployment-diagram_2","title":"Example of a Deployment diagram","text":"<ul> <li>Devices like Apple iPod Touch and Apple iPhone can update its own media library from the computer with iTunes with the help of USB or simply by downloading media directly from the Apple iTunes store using wireless protocols, for example; Wi-Fi, 3G, or EDGE.</li> </ul>"},{"location":"week-4/ce204-week-4/#when-to-use-a-deployment-diagram","title":"When to use a Deployment Diagram?","text":"<p>The deployment diagram is mostly employed by network engineers, system administrators, etc. with the purpose of representing the deployment of software on the hardware system. It envisions the interaction of the software with the hardware to accomplish the execution. The selected hardware must be of good quality so that the software can work more efficiently at a faster rate by producing accurate results in no time.</p>"},{"location":"week-4/ce204-week-4/#when-to-use-a-deployment-diagram_1","title":"When to use a Deployment Diagram?","text":"<p>The software applications are quite complex these days, as they are standalone, distributed, web-based, etc. So, it is very necessary to design efficient software.</p>"},{"location":"week-4/ce204-week-4/#when-to-use-a-deployment-diagram_2","title":"When to use a Deployment Diagram?","text":"<p>Deployment diagrams can be used for the followings:</p> <ul> <li>To model the network and hardware topology of a system.</li> <li>To model the distributed networks and systems.</li> <li>Implement forwarding and reverse engineering processes.</li> <li>To model the hardware details for a client/server system.</li> <li>For modeling the embedded system.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-interaction-diagram","title":"UML Interaction Diagram","text":""},{"location":"week-4/ce204-week-4/#uml-interaction-diagram_1","title":"UML Interaction Diagram","text":"<p>UML Interaction Diagram As the name suggests, the interaction diagram portrays the interactions between distinct entities present in the model. It amalgamates both the activity and sequence diagrams. The communication is nothing but units of the behavior of a classifier that provides context for interactions.</p>"},{"location":"week-4/ce204-week-4/#uml-interaction-diagram_2","title":"UML Interaction Diagram","text":"<p>A set of messages that are interchanged between the entities to achieve certain specified tasks in the system is termed as interaction. It may incorporate any feature of the classifier of which it has access. In the interaction diagram, the critical component is the messages and the lifeline.</p>"},{"location":"week-4/ce204-week-4/#uml-interaction-diagram_3","title":"UML Interaction Diagram","text":"<p>In UML, the interaction overview diagram initiates the interaction between the objects utilizing message passing. While drawing an interaction diagram, the entire focus is to represent the relationship among different objects which are available within the system boundary and the message exchanged by them to communicate with each other.</p>"},{"location":"week-4/ce204-week-4/#uml-interaction-diagram_4","title":"UML Interaction Diagram","text":"<p>The message exchanged among objects is either to pass some information or to request some information. And based on the information, the interaction diagram is categorized into the sequence diagram, collaboration diagram, and timing diagram.</p>"},{"location":"week-4/ce204-week-4/#uml-interaction-diagram_5","title":"UML Interaction Diagram","text":"<p>The sequence diagram envisions the order of the flow of messages inside the system by depicting the communication between two lifelines, just like a time-ordered sequence of events.</p>"},{"location":"week-4/ce204-week-4/#uml-interaction-diagram_6","title":"UML Interaction Diagram","text":"<p>The collaboration diagram, which is also known as the communication diagram, represents how lifelines connect within the system, whereas the timing diagram focuses on that instant when a message is passed from one element to the other.</p>"},{"location":"week-4/ce204-week-4/#notation-of-an-interaction-diagram","title":"Notation of an Interaction Diagram","text":""},{"location":"week-4/ce204-week-4/#purpose-of-an-interaction-diagram","title":"Purpose of an Interaction Diagram","text":"<ul> <li>The interaction diagram helps to envision the interactive (dynamic) behavior of any system. It portrays how objects residing in the system communicates and connects to each other. It also provides us with a context of communication between the lifelines inside the system.</li> </ul>"},{"location":"week-4/ce204-week-4/#purpose-of-an-interaction-diagram_1","title":"Purpose of an Interaction Diagram","text":"<ul> <li>Following are the purpose of an interaction diagram given below:</li> <li>To visualize the dynamic behavior of the system.</li> <li>To envision the interaction and the message flow in the system.</li> <li>To portray the structural aspects of the entities within the system.</li> <li>To represent the order of the sequenced interaction in the system.</li> <li>To visualize the real-time data and represent the architecture of an object-oriented system.</li> </ul>"},{"location":"week-4/ce204-week-4/#how-to-draw-an-interaction-diagram","title":"How to draw an Interaction Diagram?","text":"<ul> <li>Since the main purpose of an interaction diagram is to visualize the dynamic behavior of the system, it is important to understand what a dynamic aspect really is and how we can visualize it. The dynamic aspect is nothing but a screenshot of the system at the run time.</li> </ul>"},{"location":"week-4/ce204-week-4/#how-to-draw-an-interaction-diagram_1","title":"How to draw an Interaction Diagram?","text":"<ul> <li>Before drawing an interaction diagram, the first step is to discover the scenario for which the diagram will be made. Next, we will identify various lifelines that will be invoked in the communication, and then we will classify each lifeline. After that, the connections are investigated and how the lifelines are interrelated to each other.</li> </ul>"},{"location":"week-4/ce204-week-4/#how-to-draw-an-interaction-diagram_2","title":"How to draw an Interaction Diagram?","text":"<ul> <li>Following are some things that are needed:</li> <li>A total no of lifeline which will take part in the communication.</li> <li>The sequence of the message flow among several entities within the system.</li> <li>No operators used to ease out the functionality of the diagram.</li> <li>Several distinct messages that depict the interactions in a precise and clear way.</li> <li>The organization and structure of a system.</li> <li>The order of the sequence of the flow of messages.</li> <li>Total no of time constructs of an object.</li> </ul>"},{"location":"week-4/ce204-week-4/#use-of-an-interaction-diagram","title":"Use of an Interaction Diagram","text":"<ul> <li>The interaction diagram can be used for:</li> <li>The sequence diagram is employed to investigate a new application.</li> <li>The interaction diagram explores and compares the use of the collaboration diagram sequence diagram and the timing  diagram.</li> <li>The interaction diagram represents the interactive (dynamic) behavior of the system.</li> <li>The sequence diagram portrays the order of control flow from one element to the other elements inside the system, whereas the collaboration diagrams are employed to get an overview of the object architecture of the system.</li> <li>The interaction diagram models the system as a time-ordered sequence of a system.</li> <li>The interaction diagram models the system as a time-ordered sequence of a system.</li> <li>The interaction diagram systemizes the structure of the interactive elements.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-use-case-diagram","title":"UML Use Case Diagram","text":""},{"location":"week-4/ce204-week-4/#uml-use-case-diagram_1","title":"UML Use Case Diagram","text":"<ul> <li>A use case diagram is used to represent the dynamic behavior of a system. It encapsulates the system's functionality by incorporating use cases, actors, and their relationships. It models the tasks, services, and functions required by a system/subsystem of an application. It depicts the high-level functionality of a system and also tells how the user handles a system.</li> </ul>"},{"location":"week-4/ce204-week-4/#purpose-of-use-case-diagrams","title":"Purpose of Use Case Diagrams","text":"<ul> <li>The main purpose of a use case diagram is to portray the dynamic aspect of a system. It accumulates the system's requirement, which includes both internal as well as external influences. It invokes persons, use cases, and several things that invoke the actors and elements accountable for the implementation of use case diagrams. It represents how an entity from the external environment can interact with a part of the system.</li> </ul>"},{"location":"week-4/ce204-week-4/#purpose-of-use-case-diagrams_1","title":"Purpose of Use Case Diagrams","text":"<p>Following are the purposes of a use case diagram given below:</p> <ul> <li>It gathers the system's needs.</li> <li>It depicts the external view of the system.</li> <li>It recognizes the internal as well as external factors that influence the system.</li> <li>It represents the interaction between the actors.</li> </ul>"},{"location":"week-4/ce204-week-4/#how-to-draw-a-use-case-diagram","title":"How to draw a Use Case diagram?","text":"<p>It is essential to analyze the whole system before starting with drawing a use case diagram, and then the system's functionalities are found. And once every single functionality is identified, they are then transformed into the use cases to be used in the use case diagram.</p>"},{"location":"week-4/ce204-week-4/#how-to-draw-a-use-case-diagram_1","title":"How to draw a Use Case diagram?","text":"<p>After that, we will enlist the actors that will interact with the system. The actors are the person or a thing that invokes the functionality of a system. It may be a system or a private entity, such that it requires an entity to be pertinent to the functionalities of the system to which it is going to interact.</p>"},{"location":"week-4/ce204-week-4/#how-to-draw-a-use-case-diagram_2","title":"How to draw a Use Case diagram?","text":"<p>Once both the actors and use cases are enlisted, the relation between the actor and use case/ system is inspected. It identifies the no of times an actor communicates with the system. Basically, an actor can interact multiple times with a use case or system at a particular instance of time.</p>"},{"location":"week-4/ce204-week-4/#how-to-draw-a-use-case-diagram_3","title":"How to draw a Use Case diagram?","text":"<ul> <li>Following are some rules that must be followed while drawing a use case diagram:</li> <li>A pertinent and meaningful name should be assigned to the actor or a use case of a system.</li> <li>The communication of an actor with a use case must be defined in an understandable way.</li> <li>Specified notations to be used as and when required.</li> <li>The most significant interactions should be represented among the multiple no of interactions between the use case and actors.</li> </ul>"},{"location":"week-4/ce204-week-4/#example-of-a-use-case-diagram","title":"Example of a Use Case Diagram","text":""},{"location":"week-4/ce204-week-4/#example-of-a-use-case-diagram_1","title":"Example of a Use Case Diagram","text":"<ul> <li> <p>A use case diagram depicting the Online Shopping website is given below.</p> </li> <li> <p>Here the Web Customer actor makes use of any online shopping website to purchase online. The top-level uses are as follows; View Items, Make Purchase, Checkout, Client Register. The View Items use case is utilized by the customer who searches and view products. The Client Register use case allows the customer to register itself with the website for availing gift vouchers, coupons, or getting a private sale invitation. It is to be noted that the Checkout is an included use case, which is part of Making Purchase, and it is not available by itself.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#example-of-a-use-case-diagram_2","title":"Example of a Use Case Diagram","text":""},{"location":"week-4/ce204-week-4/#example-of-a-use-case-diagram_3","title":"Example of a Use Case Diagram","text":"<ul> <li> <p>The View Items is further extended by several use cases such as; Search Items, Browse Items, View Recommended Items, Add to Shopping Cart, Add to Wish list. All of these extended use cases provide some functions to customers, which allows them to search for an item. The View Items is further extended by several use cases such as; Search Items, Browse Items, View Recommended Items, Add to Shopping Cart, Add to Wish list. All of these extended use cases provide some functions to customers, which allows them to search for an item.</p> </li> <li> <p>Both View Recommended Item and Add to Wish List include the Customer Authentication use case, as they necessitate authenticated customers, and simultaneously item can be added to the shopping cart without any user authentication.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#example-of-a-use-case-diagram_4","title":"Example of a Use Case Diagram","text":""},{"location":"week-4/ce204-week-4/#example-of-a-use-case-diagram_5","title":"Example of a Use Case Diagram","text":"<ul> <li> <p>Similarly, the Checkout use case also includes the following use cases, as shown below. It requires an authenticated Web Customer, which can be done by login page, user authentication cookie (\"Remember me\"), or Single Sign-On (SSO). SSO needs an external identity provider's participation, while Web site authentication service is utilized in all these use cases.</p> </li> <li> <p>The Checkout use case involves Payment use case that can be done either by the credit card and external credit payment services or with PayPal.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#important-tips-for-drawing-a-use-case-diagram","title":"Important tips for drawing a Use Case diagram","text":"<ul> <li>Following are some important tips that are to be kept in mind while drawing a use case diagram:</li> <li>A simple and complete use case diagram should be articulated.</li> <li>A use case diagram should represent the most significant interaction among the multiple interactions.</li> <li>At least one module of a system should be represented by the use case diagram.</li> <li>If the use case diagram is large and more complex, then it should be drawn more generalized.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-sequence-diagram","title":"UML Sequence Diagram","text":""},{"location":"week-4/ce204-week-4/#uml-sequence-diagram_1","title":"UML Sequence Diagram","text":"<ul> <li>The sequence diagram represents the flow of messages in the system and is also termed as an event diagram. It helps in envisioning several dynamic scenarios. It portrays the communication between any two lifelines as a time-ordered sequence of events, such that these lifelines took part at the run time. In UML, the lifeline is represented by a vertical bar, whereas the message flow is represented by a vertical dotted line that extends across the bottom of the page. It incorporates the iterations as well as branching.</li> </ul>"},{"location":"week-4/ce204-week-4/#purpose-of-a-sequence-diagram","title":"Purpose of a Sequence Diagram","text":"<ul> <li>To model high-level interaction among active objects within a system.</li> <li>To model interaction among objects inside a collaboration realizing a use case.</li> <li>It either models generic interactions or some certain instances of interaction.</li> </ul>"},{"location":"week-4/ce204-week-4/#notations-of-a-sequence-diagram","title":"Notations of a Sequence Diagram","text":""},{"location":"week-4/ce204-week-4/#lifeline","title":"Lifeline","text":"<ul> <li>An individual participant in the sequence diagram is represented by a lifeline. It is positioned at the top of the diagram.</li> </ul>"},{"location":"week-4/ce204-week-4/#actor","title":"Actor","text":"<ul> <li>A role played by an entity that interacts with the subject is called as an actor. It is out of the scope of the system. It represents the role, which involves human users and external hardware or subjects. An actor may or may not represent a physical entity, but it purely depicts the role of an entity. Several distinct roles can be played by an actor or vice versa.</li> </ul>"},{"location":"week-4/ce204-week-4/#activation","title":"Activation","text":"<ul> <li>It is represented by a thin rectangle on the lifeline. It describes that time period in which an operation is performed by an element, such that the top and the bottom of the rectangle is associated with the initiation and the completion time, each respectively.</li> </ul>"},{"location":"week-4/ce204-week-4/#messages","title":"Messages","text":"<p>The messages depict the interaction between the objects and are represented by arrows. They are in the sequential order on the lifeline. The core of the sequence diagram is formed by messages and lifelines.</p> <p>Following are types of messages enlisted below:</p>"},{"location":"week-4/ce204-week-4/#call-message","title":"Call Message:","text":"<ul> <li>It defines a particular communication between the lifelines of an interaction, which represents that the target lifeline has invoked an operation.</li> </ul>"},{"location":"week-4/ce204-week-4/#return-message","title":"Return Message:","text":"<ul> <li>It defines a particular communication between the lifelines of interaction that represent the flow of information from the receiver of the corresponding caller message.</li> </ul>"},{"location":"week-4/ce204-week-4/#self-message","title":"Self Message:","text":"<ul> <li>It describes a communication, particularly between the lifelines of an interaction that represents a message of the same lifeline, has been invoked.</li> </ul>"},{"location":"week-4/ce204-week-4/#recursive-message","title":"Recursive Message:","text":"<ul> <li>A self message sent for recursive purpose is called a recursive message. In other words, it can be said that the recursive message is a special case of the self message as it represents the recursive calls.</li> </ul>"},{"location":"week-4/ce204-week-4/#create-message","title":"Create Message:","text":"<ul> <li>It describes a communication, particularly between the lifelines of an interaction describing that the target (lifeline) has been instantiated.</li> </ul>"},{"location":"week-4/ce204-week-4/#destroy-message","title":"Destroy Message:","text":"<ul> <li>It describes a communication, particularly between the lifelines of an interaction that depicts a request to destroy the lifecycle of the target.</li> </ul>"},{"location":"week-4/ce204-week-4/#duration-message","title":"Duration Message:","text":"<ul> <li>It describes a communication particularly between the lifelines of an interaction, which portrays the time passage of the message while modeling a system.</li> </ul>"},{"location":"week-4/ce204-week-4/#note","title":"Note","text":"<ul> <li>A note is the capability of attaching several remarks to the element. It basically carries useful information for the modelers.</li> </ul>"},{"location":"week-4/ce204-week-4/#sequence-fragments","title":"Sequence Fragments","text":"<ul> <li> <p>Sequence fragments have been introduced by UML 2.0, which makes it quite easy for the creation and maintenance of an accurate sequence diagram.</p> </li> <li> <p>It is represented by a box called a combined fragment, encloses a part of interaction inside a sequence diagram.</p> </li> <li> <p>The type of fragment is shown by a fragment operator.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#sequence-fragments_1","title":"Sequence Fragments","text":""},{"location":"week-4/ce204-week-4/#types-of-fragments","title":"Types of fragments","text":"<ul> <li>Following are the types of fragments enlisted below;</li> <li>alt <ul> <li>Alternative multiple fragments: The only fragment for which the condition is true, will execute.</li> </ul> </li> <li>opt Optional: <ul> <li>If the supplied condition is true, only then the fragments will execute. It is similar to alt with only one trace.</li> </ul> </li> <li>par Parallel: <ul> <li>Parallel executes fragments.</li> </ul> </li> </ul>"},{"location":"week-4/ce204-week-4/#types-of-fragments_1","title":"Types of fragments","text":"<ul> <li>loop    Loop: <ul> <li>Fragments are run multiple times, and the basis of interaction is shown by the guard.</li> </ul> </li> <li>region  Critical region: <ul> <li>Only one thread can execute a fragment at once.</li> </ul> </li> <li>neg Negative: <ul> <li>A worthless communication is shown by the fragment.</li> </ul> </li> </ul>"},{"location":"week-4/ce204-week-4/#types-of-fragments_2","title":"Types of fragments","text":"<ul> <li>ref Reference: <ul> <li>An interaction portrayed in another diagram. In this, a frame is drawn so as to cover the lifelines involved in the communication. The parameter and return value can be explained.</li> </ul> </li> <li>sd  Sequence Diagram: <ul> <li>It is used to surround the whole sequence diagram.</li> </ul> </li> </ul>"},{"location":"week-4/ce204-week-4/#example-of-a-sequence-diagram","title":"Example of a Sequence Diagram","text":"<ul> <li> <p>An example of a high-level sequence diagram for online bookshop is given below.</p> </li> <li> <p>Any online customer can search for a book catalog, view a description of a particular book, add a book to its shopping cart, and do checkout.</p> </li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#benefits-of-a-sequence-diagram","title":"Benefits of a Sequence Diagram","text":"<ul> <li>It explores the real-time application.</li> <li>It depicts the message flow between the different objects.</li> <li>It has easy maintenance.</li> <li>It is easy to generate.</li> <li>Implement both forward and reverse engineering.</li> <li>It can easily update as per the new change in the system.</li> </ul>"},{"location":"week-4/ce204-week-4/#the-drawback-of-a-sequence-diagram","title":"The drawback of a Sequence Diagram","text":"<ul> <li>In the case of too many lifelines, the sequence diagram can get more complex.</li> <li>The incorrect result may be produced, if the order of the flow of messages changes.</li> <li>Since each sequence needs distinct notations for its representation, it may make the diagram more complex.</li> <li>The type of sequence is decided by the type of message.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-collaboration-diagram","title":"UML Collaboration Diagram","text":""},{"location":"week-4/ce204-week-4/#uml-collaboration-diagram_1","title":"UML Collaboration Diagram","text":"<ul> <li>The collaboration diagram is used to show the relationship between the objects in a system. Both the sequence and the collaboration diagrams represent the same information but differently. Instead of showing the flow of messages, it depicts the architecture of the object residing in the system as it is based on object-oriented programming. An object consists of several features. Multiple objects present in the system are connected to each other. The collaboration diagram, which is also known as a communication diagram, is used to portray the object's architecture in the system.</li> </ul>"},{"location":"week-4/ce204-week-4/#notations-of-a-collaboration-diagram","title":"Notations of a Collaboration Diagram","text":"<ul> <li>Following are the components of a component diagram that are enlisted below:</li> </ul>"},{"location":"week-4/ce204-week-4/#objects","title":"Objects:","text":"<ul> <li>The representation of an object is done by an object symbol with its name and class underlined, separated by a colon.</li> <li>In the collaboration diagram, objects are utilized in the following ways:</li> <li>The object is represented by specifying their name and class.</li> <li>It is not mandatory for every class to appear. A class may constitute more than one object. In the collaboration diagram, firstly, the object is created, and then its class is specified.</li> <li>To differentiate one object from another object, it is necessary to name them.</li> </ul>"},{"location":"week-4/ce204-week-4/#actors","title":"Actors:","text":"<ul> <li>In the collaboration diagram, the actor plays the main role as it invokes the interaction. Each actor has its respective role and name. In this, one actor initiates the use case.</li> </ul>"},{"location":"week-4/ce204-week-4/#links","title":"Links:","text":"<ul> <li>The link is an instance of association, which associates the objects and actors. It portrays a relationship between the objects through which the messages are sent. It is represented by a solid line. The link helps an object to connect with or navigate to another object, such that the message flows are attached to links.</li> </ul>"},{"location":"week-4/ce204-week-4/#messages_1","title":"Messages:","text":"<ul> <li>It is a communication between objects which carries information and includes a sequence number, so that the activity may take place. It is represented by a labeled arrow, which is placed near a link. The messages are sent from the sender to the receiver, and the direction must be navigable in that particular direction. The receiver must understand the message.</li> </ul>"},{"location":"week-4/ce204-week-4/#when-to-use-a-collaboration-diagram","title":"When to use a Collaboration Diagram?","text":"<ul> <li>The collaborations are used when it is essential to depict the relationship between the object. Both the sequence and collaboration diagrams represent the same information, but the way of portraying it quite different. The collaboration diagrams are best suited for analyzing use cases.</li> </ul>"},{"location":"week-4/ce204-week-4/#when-to-use-a-collaboration-diagram_1","title":"When to use a Collaboration Diagram?","text":"<ul> <li>Following are some of the use cases enlisted below for which the collaboration diagram is implemented:</li> <li>To model collaboration among the objects or roles that carry the functionalities of use cases and operations.</li> <li>To model the mechanism inside the architectural design of the system.</li> <li>To capture the interactions that represent the flow of messages between the objects and the roles inside the collaboration. ...</li> </ul>"},{"location":"week-4/ce204-week-4/#when-to-use-a-collaboration-diagram_2","title":"When to use a Collaboration Diagram?","text":"<ul> <li>...</li> <li>To model different scenarios within the use case or operation, involving a collaboration of several objects and interactions.</li> <li>To support the identification of objects participating in the use case.</li> <li>In the collaboration diagram, each message constitutes a sequence number, such that the top-level message is marked as one and so on. The messages sent during the same call are denoted with the same decimal prefix, but with different suffixes of 1, 2, etc. as per their occurrence.</li> </ul>"},{"location":"week-4/ce204-week-4/#steps-for-creating-a-collaboration-diagram","title":"Steps for creating a Collaboration Diagram","text":"<ul> <li>Determine the behavior for which the realization and implementation are specified.</li> <li>Discover the structural elements that are class roles, objects, and subsystems for performing the functionality of collaboration.</li> <li>Choose the context of an interaction: system, subsystem, use case, and operation.</li> <li>Think through alternative situations that may be involved.</li> <li>Implementation of a collaboration diagram at an instance level, if needed.</li> <li>A specification level diagram may be made in the instance level sequence diagram for summarizing alternative situations.</li> </ul>"},{"location":"week-4/ce204-week-4/#example-of-a-collaboration-diagram","title":"Example of a Collaboration Diagram","text":""},{"location":"week-4/ce204-week-4/#benefits-of-a-collaboration-diagram","title":"Benefits of a Collaboration Diagram","text":"<ul> <li>The collaboration diagram is also known as Communication Diagram.</li> <li>It mainly puts emphasis on the structural aspect of an interaction diagram, i.e., how lifelines are connected.</li> <li>The syntax of a collaboration diagram is similar to the sequence diagram; just the difference is that the lifeline does not consist of tails.</li> <li>The messages transmitted over sequencing is represented by numbering each individual message.</li> <li>The collaboration diagram is semantically weak in comparison to the sequence diagram.</li> </ul>"},{"location":"week-4/ce204-week-4/#benefits-of-a-collaboration-diagram_1","title":"Benefits of a Collaboration Diagram","text":"<ul> <li>The special case of a collaboration diagram is the object diagram.</li> <li>It focuses on the elements and not the message flow, like sequence diagrams.</li> <li>Since the collaboration diagrams are not that expensive, the sequence diagram can be directly converted to the collaboration diagram.</li> <li>There may be a chance of losing some amount of information while implementing a collaboration diagram with respect to the sequence diagram.</li> </ul>"},{"location":"week-4/ce204-week-4/#the-drawback-of-a-collaboration-diagram","title":"The drawback of a Collaboration Diagram","text":"<ul> <li>Multiple objects residing in the system can make a complex collaboration diagram, as it becomes quite hard to explore the objects.</li> <li>It is a time-consuming diagram.</li> <li>After the program terminates, the object is destroyed.</li> <li>As the object state changes momentarily, it becomes difficult to keep an eye on every single that has occurred inside the object of a system.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-state-machine-diagram","title":"UML State Machine Diagram","text":""},{"location":"week-4/ce204-week-4/#uml-state-machine-diagram_1","title":"UML State Machine Diagram","text":"<ul> <li> <p>The state machine diagram is also called the Statechart or State Transition diagram, which shows the order of states underwent by an object within the system. It captures the software system's behavior. It models the behavior of a class, a subsystem, a package, and a complete system.</p> </li> <li> <p>It tends out to be an efficient way of modeling the interactions and collaborations in the external entities and the system. It models event-based systems to handle the state of an object. It also defines several distinct states of a component within the system. Each object/component has a specific state.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-state-machine-diagram_2","title":"UML State Machine Diagram","text":"<ul> <li>Following are the types of a state machine diagram that are given below:</li> <li>Behavioral state machine<ul> <li>The behavioral state machine diagram records the behavior of an object within the system. It depicts an implementation of a particular entity. It models the behavior of the system.</li> </ul> </li> <li>Protocol state machine<ul> <li>It captures the behavior of the protocol. The protocol state machine depicts the change in the state of the protocol and parallel changes within the system. But it does not portray the implementation of a particular component.</li> </ul> </li> </ul>"},{"location":"week-4/ce204-week-4/#why-state-machine-diagram","title":"Why State Machine Diagram?","text":"<ul> <li>Since it records the dynamic view of a system, it portrays the behavior of a software application. During a lifespan, an object underwent several states, such that the lifespan exist until the program is executing. Each state depicts some useful information about the object.</li> </ul>"},{"location":"week-4/ce204-week-4/#why-state-machine-diagram_1","title":"Why State Machine Diagram?","text":"<ul> <li>It blueprints an interactive system that response back to either the internal events or the external ones. The execution flow from one state to another is represented by a state machine diagram. It visualizes an object state from its creation to its termination.</li> </ul>"},{"location":"week-4/ce204-week-4/#why-state-machine-diagram_2","title":"Why State Machine Diagram?","text":"<ul> <li>The main purpose is to depict each state of an individual object. It represents an interactive system and the entities inside the system. It records the dynamic behavior of the system.</li> </ul>"},{"location":"week-4/ce204-week-4/#notation-of-a-state-machine-diagram","title":"Notation of a State Machine Diagram","text":"<p>Following are the notations of a state machine diagram enlisted below:</p> <p></p>"},{"location":"week-4/ce204-week-4/#notation-of-a-state-machine-diagram_1","title":"Notation of a State Machine Diagram","text":"<ul> <li>Initial state: </li> <li>It defines the initial state (beginning) of a system, and it is represented by a black filled circle. Final state: It represents the final state (end) of a system. It is denoted by a filled circle present within a circle.</li> <li>Decision box: </li> <li>It is of diamond shape that represents the decisions to be made on the basis of an evaluated guard. Transition: A change of control from one state to another due to the occurrence of some event is termed as a transition. It is represented by an arrow labeled with an event due to which the change has ensued.</li> <li>State box: </li> <li>It depicts the conditions or circumstances of a particular object of a class at a specific point of time. A rectangle with round corners is used to represent the state box.</li> </ul>"},{"location":"week-4/ce204-week-4/#types-of-state","title":"Types of State","text":"<ul> <li>The UML consist of three states:</li> <li>Simple state: <ul> <li>It does not constitute any substructure.</li> </ul> </li> <li>Composite state: <ul> <li>It consists of nested states (substates), such that it does not contain more than one initial state and one final state. It can be nested to any level.</li> </ul> </li> <li>Submachine state: <ul> <li>The submachine state is semantically identical to the composite state, but it can be reused.</li> </ul> </li> </ul>"},{"location":"week-4/ce204-week-4/#how-to-draw-a-state-machine-diagram","title":"How to Draw a State Machine Diagram?","text":"<ul> <li>The state machine diagram is used to portray various states underwent by an object. The change in one state to another is due to the occurrence of some event. All of the possible states of a particular component must be identified before drawing a state machine diagram.</li> </ul>"},{"location":"week-4/ce204-week-4/#how-to-draw-a-state-machine-diagram_1","title":"How to Draw a State Machine Diagram?","text":"<ul> <li>The primary focus of the state machine diagram is to depict the states of a system. These states are essential while drawing a state transition diagram. The objects, states, and events due to which the state transition occurs must be acknowledged before the implementation of a state machine diagram.</li> </ul>"},{"location":"week-4/ce204-week-4/#how-to-draw-a-state-machine-diagram_2","title":"How to Draw a State Machine Diagram?","text":"<ul> <li>Following are the steps that are to be incorporated while drawing a state machine diagram:</li> <li>A unique and understandable name should be assigned to the state transition that describes the behavior of the system.</li> <li>Out of multiple objects, only the essential objects are implemented.</li> <li>A proper name should be given to the events and the transitions.</li> </ul>"},{"location":"week-4/ce204-week-4/#when-to-use-a-state-machine-diagram","title":"When to use a State Machine Diagram?","text":"<ul> <li> <p>The state machine diagram implements the real-world models as well as the object-oriented systems. It records the dynamic behavior of the system, which is used to differentiate between the dynamic and static behavior of a system.</p> </li> <li> <p>It portrays the changes underwent by an object from the start to the end. It basically envisions how triggering an event can cause a change within the system.</p> </li> <li> <p>State machine diagram is used for:</p> </li> <li>For modeling the object states of a system.</li> <li>For modeling the reactive system as it consists of reactive objects.</li> <li>For pinpointing the events responsible for state transitions.</li> <li>For implementing forward and reverse engineering.</li> </ul>"},{"location":"week-4/ce204-week-4/#example-of-a-state-machine-diagram","title":"Example of a State Machine Diagram","text":""},{"location":"week-4/ce204-week-4/#example-of-a-state-machine-diagram_1","title":"Example of a State Machine Diagram","text":"<p>An example of a top-level state machine diagram showing Bank Automated Teller Machine (ATM) is given below.</p> <p>Initially, the ATM is turned off. After the power supply is turned on, the ATM starts performing the startup action and enters into the Self Test state. If the test fails, the ATM will enter into the Out Of Service state, or it will undergo a triggerless transition to the Idle state. This is the state where the customer waits for the interaction. </p>"},{"location":"week-4/ce204-week-4/#example-of-a-state-machine-diagram_2","title":"Example of a State Machine Diagram","text":"<p>Whenever the customer inserts the bank or credit card in the ATM's card reader, the ATM state changes from Idle to Serving Customer, the entry action readCard is performed after entering into Serving Customer state. Since the customer can cancel the transaction at any instant, so the transition from Serving Customer state back to the Idle state could be triggered by cancel event.</p>"},{"location":"week-4/ce204-week-4/#example-of-a-state-machine-diagram_3","title":"Example of a State Machine Diagram","text":"<p>Here the Serving Customer is a composite state with sequential substates that are Customer Authentication, Selecting Transaction, and Transaction.</p>"},{"location":"week-4/ce204-week-4/#example-of-a-state-machine-diagram_4","title":"Example of a State Machine Diagram","text":"<p>Customer Authentication and Transaction are the composite states itself is displayed by a hidden decomposition indication icon. After the transaction is finished, the Serving Customer encompasses a triggerless transition back to the Idle state. On leaving the state, it undergoes the exit action ejectCard that discharges the customer card.</p>"},{"location":"week-4/ce204-week-4/#example-of-a-state-machine-diagram_5","title":"Example of a State Machine Diagram","text":""},{"location":"week-4/ce204-week-4/#state-machine-vs-flowchart","title":"State Machine vs. Flowchart","text":"<p>State Machine   \\(\\Longleftrightarrow\\) Flowchart It portrays several states of a system. \\(\\Longleftrightarrow\\) It demonstrates the execution flow of a program. It encompasses the concept of WAIT, i.e., wait for an event or an action.    \\(\\Longleftrightarrow\\) It does not constitute the concept of WAIT. It is for real-world modeling systems. \\(\\Longleftrightarrow\\)    It envisions the branching sequence of a system. It is a modeling diagram.   \\(\\Longleftrightarrow\\) It is a data flow diagram (DFD) It is concerned with several states of a system.    \\(\\Longleftrightarrow\\) It focuses on control flow and path.</p>"},{"location":"week-4/ce204-week-4/#uml-activity-diagram","title":"UML Activity Diagram","text":""},{"location":"week-4/ce204-week-4/#uml-activity-diagram_1","title":"UML Activity Diagram","text":"<ul> <li> <p>In UML, the activity diagram is used to demonstrate the flow of control within the system rather than the implementation. It models the concurrent and sequential activities.</p> </li> <li> <p>The activity diagram helps in envisioning the workflow from one activity to another. It put emphasis on the condition of flow and the order in which it occurs. The flow can be sequential, branched, or concurrent, and to deal with such kinds of flows, the activity diagram has come up with a fork, join, etc.</p> </li> <li> <p>It is also termed as an object-oriented flowchart. It encompasses activities composed of a set of actions or operations that are applied to model the behavioral diagram.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#components-of-an-activity-diagram","title":"Components of an Activity Diagram","text":"<ul> <li>Following are the component of an activity diagram:</li> <li>Activities</li> <li>Activity partition /swimlane</li> <li>Forks</li> <li>Join Nodes</li> <li>Pins</li> </ul>"},{"location":"week-4/ce204-week-4/#activities","title":"Activities","text":"<ul> <li> <p>The categorization of behavior into one or more actions is termed as an activity. In other words, it can be said that an activity is a network of nodes that are connected by edges. The edges depict the flow of execution. It may contain action nodes, control nodes, or object nodes.</p> </li> <li> <p>The control flow of activity is represented by control nodes and object nodes that illustrates the objects used within an activity. The activities are initiated at the initial node and are terminated at the final node.</p> </li> </ul> <p></p>"},{"location":"week-4/ce204-week-4/#activity-partition-swimlane","title":"Activity partition /swimlane","text":"<ul> <li>The swimlane is used to cluster all the related activities in one column or one row. It can be either vertical or horizontal. It used to add modularity to the activity diagram. It is not necessary to incorporate swimlane in the activity diagram. But it is used to add more transparency to the activity diagram.</li> </ul>"},{"location":"week-4/ce204-week-4/#forks","title":"Forks","text":"<ul> <li>Forks and join nodes generate the concurrent flow inside the activity. A fork node consists of one inward edge and several outward edges. It is the same as that of various decision parameters. Whenever a data is received at an inward edge, it gets copied and split crossways various outward edges. It split a single inward flow into multiple parallel flows.</li> </ul>"},{"location":"week-4/ce204-week-4/#join-nodes","title":"Join Nodes","text":"<p>Join nodes are the opposite of fork nodes. A Logical AND operation is performed on all of the inward edges as it synchronizes the flow of input across one single output (outward) edge.</p> <p></p>"},{"location":"week-4/ce204-week-4/#pins","title":"Pins","text":"<ul> <li>It is a small rectangle, which is attached to the action rectangle. It clears out all the messy and complicated thing to manage the execution flow of activities. It is an object node that precisely represents one input to or output from the action.</li> </ul>"},{"location":"week-4/ce204-week-4/#notation-of-an-activity-diagram","title":"Notation of an Activity diagram","text":"<ul> <li>Activity diagram constitutes following notations:</li> <li>Initial State: <ul> <li>It depicts the initial stage or beginning of the set of actions.</li> </ul> </li> <li>Final State: <ul> <li>It is the stage where all the control flows and object flows end.</li> </ul> </li> <li>Decision Box: <ul> <li>It makes sure that the control flow or object flow will follow only one path.</li> </ul> </li> <li>Action Box: <ul> <li>It represents the set of actions that are to be performed.</li> </ul> </li> </ul>"},{"location":"week-4/ce204-week-4/#why-use-activity-diagram","title":"Why use Activity Diagram?","text":"<ul> <li>An event is created as an activity diagram encompassing a group of nodes associated with edges. To model the behavior of activities, they can be attached to any modeling element. It can model use cases, classes, interfaces, components, and collaborations.</li> </ul>"},{"location":"week-4/ce204-week-4/#why-use-activity-diagram_1","title":"Why use Activity Diagram?","text":"<ul> <li>It mainly models processes and workflows. It envisions the dynamic behavior of the system as well as constructs a runnable system that incorporates forward and reverse engineering. It does not include the message part, which means message flow is not represented in an activity diagram.</li> </ul>"},{"location":"week-4/ce204-week-4/#why-use-activity-diagram_2","title":"Why use Activity Diagram?","text":"<ul> <li>It is the same as that of a flowchart but not exactly a flowchart itself. It is used to depict the flow between several activities.</li> </ul>"},{"location":"week-4/ce204-week-4/#how-to-draw-an-activity-diagram","title":"How to draw an Activity Diagram?","text":"<ul> <li>An activity diagram is a flowchart of activities, as it represents the workflow among various activities. They are identical to the flowcharts, but they themself are not exactly the flowchart. In other words, it can be said that an activity diagram is an enhancement of the flowchart, which encompasses several unique skills.</li> </ul>"},{"location":"week-4/ce204-week-4/#how-to-draw-an-activity-diagram_1","title":"How to draw an Activity Diagram?","text":"<ul> <li>Since it incorporates swimlanes, branching, parallel flows, join nodes, control nodes, and forks, it supports exception handling. A system must be explored as a whole before drawing an activity diagram to provide a clearer view of the user. All of the activities are explored after they are properly analyzed for finding out the constraints applied to the activities. Each and every activity, condition, and association must be recognized.</li> </ul>"},{"location":"week-4/ce204-week-4/#how-to-draw-an-activity-diagram_2","title":"How to draw an Activity Diagram?","text":"<ul> <li>After gathering all the essential information, an abstract or a prototype is built, which is then transformed into the actual diagram.</li> </ul>"},{"location":"week-4/ce204-week-4/#how-to-draw-an-activity-diagram_3","title":"How to draw an Activity Diagram?","text":"<ul> <li>Following are the rules that are to be followed for drawing an activity diagram:</li> <li>A meaningful name should be given to each and every activity.</li> <li>Identify all of the constraints.</li> <li>Acknowledge the activity associations.</li> </ul>"},{"location":"week-4/ce204-week-4/#example-of-an-activity-diagram","title":"Example of an Activity Diagram","text":""},{"location":"week-4/ce204-week-4/#example-of-an-activity-diagram_1","title":"Example of an Activity Diagram","text":"<ul> <li> <p>An example of an activity diagram showing the business flow activity of order processing is given below.</p> </li> <li> <p>Here the input parameter is the Requested order, and once the order is accepted, all of the required information is then filled, payment is also accepted, and then the order is shipped. It permits order shipment before an invoice is sent or payment is completed.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#when-to-use-an-activity-diagram","title":"When to use an Activity Diagram?","text":"<ul> <li>An activity diagram can be used to portray business processes and workflows. Also, it used for modeling business as well as the software. An activity diagram is utilized for the followings:</li> <li>To graphically model the workflow in an easier and understandable way.</li> <li>To model the execution flow among several activities.</li> <li>To model comprehensive information of a function or an algorithm employed within the system.</li> <li>To model the business process and its workflow.</li> <li>To envision the dynamic aspect of a system.</li> <li>To generate the top-level flowcharts for representing the workflow of an application.</li> <li>To represent a high-level view of a distributed or an object-oriented system.</li> </ul>"},{"location":"week-4/ce204-week-4/#uml-timing-diagram","title":"UML Timing Diagram","text":""},{"location":"week-4/ce204-week-4/#uml-timing-diagram_1","title":"UML Timing Diagram","text":"<ul> <li> <p>In UML, the timing diagrams are a part of Interaction diagrams that do not incorporate similar notations as that of sequence and collaboration diagram. It consists of a graph or waveform that depicts the state of a lifeline at a specific point of time. It illustrates how conditions are altered both inside and between lifelines alongside linear time axis.</p> </li> <li> <p>The timing diagram describes how an object underwent a change from one form to another. A waveform portrays the flow among the software programs at several instances of time.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#uml-timing-diagram_2","title":"UML Timing Diagram","text":"<ul> <li>Following are some important key points of a timing diagram:</li> <li>It emphasizes at that particular time when the message has been sent among objects.</li> <li>It explains the time processing of an object in detail.</li> <li>It is employed with distributed and embedded systems.</li> <li>It also explains how an object undergoes changes in its form throughout its lifeline.</li> <li>As the lifelines are named on the left side of an edge, the timing diagrams are read from left to right.</li> <li>It depicts a graphical representation of states of a lifeline per unit time.</li> <li>In UML, the timing diagram has come up with several notations to simplify the transition state among two lifelines per unit time.</li> </ul>"},{"location":"week-4/ce204-week-4/#basic-concepts-of-a-timing-diagram","title":"Basic concepts of a Timing Diagram","text":"<ul> <li>In UML, the timing diagram constitutes several major elements, which are as follows:</li> <li>Lifeline</li> <li>State or Condition Timeline</li> <li>Duration Constraint</li> <li>Time Constraint</li> <li>Destruction Occurrence</li> </ul>"},{"location":"week-4/ce204-week-4/#lifeline_1","title":"Lifeline","text":"<ul> <li>As the name suggests, the lifeline portrays an individual element in the interaction. It represents a single entity, which is a part of the interaction. It is represented by the classifier's name that it depicts. A lifeline can be placed within a \"swimlane\" or a diagram frame.</li> </ul> <ul> <li>Lifelines representing instances of a System and Virus</li> </ul>"},{"location":"week-4/ce204-week-4/#state-or-condition-timeline","title":"State or Condition Timeline","text":"<ul> <li> <p>The timing diagram represents the state of a classifier or attributes that are participating, or some testable conditions, which is a discrete value of the classifier.</p> </li> <li> <p>In UML, the state or condition is continuous. It is mainly used to show the temperature and density where the entities endure a continuous state change.</p> </li> </ul> <p></p> <ul> <li>Timeline showing the change in the state of virus between dormant, Propagation, Triggering, Execution</li> </ul>"},{"location":"week-4/ce204-week-4/#duration-constraint","title":"Duration Constraint","text":"<ul> <li> <p>The duration constraint is a constraint of an interval, which refers to duration interval. It is used to determine if the constraint is satisfied for a duration or not. The duration constraint semantics inherits from the constraints.</p> </li> <li> <p>The negative trace defines the violated constraints, which means the system is failed. A graphical association between duration interval and the construct, which it constrains, may represent a duration constraint.</p> </li> </ul> <p></p> <ul> <li>Ice should melt into the water in 1 to 6 mins.</li> </ul>"},{"location":"week-4/ce204-week-4/#time-constraint","title":"Time Constraint","text":"<ul> <li>It is an interval constraint, which refers to the time interval. Since it is a time expression, it depicts if the constraint is satisfied or not. The constraints dispense its time constraints semantics.</li> </ul>"},{"location":"week-4/ce204-week-4/#time-constraint_1","title":"Time Constraint","text":"<ul> <li> <p>The negative trace defines the violated constraints, which means the system is failed. The time constraint is represented by a graphical association between the time interval and the construct which it constrains.</p> </li> <li> <p>The graphical association is mainly represented by a small line in between a time interval and an occurrence specification.</p> </li> </ul> <p></p> <ul> <li>A person should wakeup in between 5:40 am, and 6 am</li> </ul>"},{"location":"week-4/ce204-week-4/#destruction-occurrence","title":"Destruction Occurrence","text":"<p>The destruction occurrence refers to the occurrence of a message that represents the destruction of an instance is defined by a lifeline. It may subsequently destruct other objects owned by the composition of this object, such that nothing occurs after the destruction event on a given lifeline. It is represented by a cross at the end of a timeline.</p> <p></p> <ul> <li>Virus lifeline is terminated</li> </ul>"},{"location":"week-4/ce204-week-4/#example-of-a-timing-diagram","title":"Example of a Timing Diagram","text":""},{"location":"week-4/ce204-week-4/#example-of-a-timing-diagram_1","title":"Example of a Timing Diagram","text":"<ul> <li> <p>A timing diagram example of a medical domain that depicts different stages of Alzheimer's disease (AD) is explained below.</p> </li> <li> <p>Since Alzheimer's is a very progressive fatal brain disease, it leads to memory loss and intellectual abilities. The reason behind this disease is yet to be discovered. It cannot be cured as well as one of the main reasons for rising death rates in the United States.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#example-of-a-timing-diagram_2","title":"Example of a Timing Diagram","text":"<ul> <li> <p>The doctor may require a diagnostic framework with three to seven-stage, such that its evolution may last for about 8 to 10 years. Also, in some cases, it lasts up to 20years from the time neuron starts changing.</p> </li> <li> <p>The example given below constitutes timing for a seven-stage framework. The given example is just a UML diagram and should not be considered as a reference to medical research. The medical details are provided for you to better understand the UML diagram.</p> </li> </ul> <p>Following are the seven-stage Alzheimer disease framework explained below:</p> <ul> <li>No Impairment, Normal State</li> <li>It is the stage where the memory and cognitive abilities look normal.</li> <li>Normal Aged Forgetfulness</li> <li>It is mostly seen in people with an age group of 65 who experience subjective complaints of cognitive and/or functional difficulties, which means they face problems in recalling the name and past 5 to 10 years of history.</li> </ul> <ul> <li>Early Confusional, Mild Cognitive Impairment</li> <li>It causes a problem in retrieving words, planning, organizing, objects misplacing as well as forgetting fresh learning, which in turn affects the surrounding.</li> <li>Late Confusional, Mild Alzheimer's</li> <li>In this, a person forgets the most recent events and conversations. The person remembers himself and his family, but face problems while carrying out sequential tasks such as cooking, driving, etc. Its duration is about two years,</li> </ul> <ul> <li>Early Dementia, Moderate Alzheimer's</li> <li>In this, the person cannot manage independently. He faces difficulty in recalling the past details and contact information. It lasts for about 1.5 years.</li> <li>Middle Dementia, Moderately Severe Alzheimer's</li> <li>It leads to insufficient awareness about current events, and the person is unable to recall the past. It causes an inability in people to take a bath and dress up independently. It lasts for about 2.5 years approximately.</li> </ul> <ul> <li>Late or Severe Dementia, Failure to Thrive</li> <li>It is severely limited intellectual ability. In this, a person either communicates through short words or cries, which leads health to decline as it shut down the body system. Its duration is 1 to 2.5 years.</li> </ul>"},{"location":"week-4/ce204-week-4/#benefits-of-timing-diagram","title":"Benefits of Timing Diagram","text":"<ul> <li> <p>It depicts the state of an object at a particular point in time.</p> </li> <li> <p>It implements forward and reverses engineering.</p> </li> <li> <p>It keeps an eye on every single change that happens within the system.</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#drawbacks-of-timing-diagram","title":"Drawbacks of Timing Diagram","text":"<ul> <li>It is hard to maintain and understand.</li> </ul>"},{"location":"week-4/ce204-week-4/#references","title":"References","text":"<ul> <li> <p>visual-paradigm-What is Unified Modeling Language (UML)?</p> </li> <li> <p>javatpoint-UML Overview</p> </li> <li> <p>javatpoint-UML Building Blocks</p> </li> <li> <p>javatpoint-UML Architecture</p> </li> <li> <p>javatpoint-UML Diagrams Overview</p> </li> <li> <p>javatpoint-UML Relationship</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#references_1","title":"References","text":"<ul> <li> <p>uml-diagrams-org</p> </li> <li> <p>javatpoint-UML Association vs. Aggregation vs. Composition</p> </li> <li> <p>javatpoint-UML- Association</p> </li> <li> <p>javatpoint-UML-Dependency</p> </li> <li> <p>javatpoint-UML-Generalization</p> </li> <li> <p>javatpoint-UML-Realization</p> </li> <li> <p>javatpoint-UML Class Diagram</p> </li> <li> <p>javatpoint-UML Object Diagram</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#references_2","title":"References","text":"<ul> <li> <p>javatpoint-UML Component Diagram</p> </li> <li> <p>javatpoint-UML Deployment Diagram</p> </li> <li> <p>javatpoint-UML Interaction Diagram</p> </li> <li> <p>javatpoint-UML Use Case Diagram</p> </li> <li> <p>javatpoint-UML Sequence Diagram</p> </li> </ul>"},{"location":"week-4/ce204-week-4/#references_3","title":"References","text":"<ul> <li> <p>javatpoint-UML Collaboration Diagram</p> </li> <li> <p>javatpoint-UML State Machine Diagram</p> </li> <li> <p>javatpoint-UML Activity Diagram</p> </li> <li> <p>javatpoint-UML Timing Diagram</p> </li> <li> <p>javatpoint-UML Tools</p> </li> </ul> <p>\\(End-Of-Week-4-Module\\)</p>"},{"location":"week-5/ce204-week-5/","title":"CEN206 Object-Oriented Programming","text":""},{"location":"week-5/ce204-week-5/#cen206-object-oriented-programming-formerly-ce204","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-5/ce204-week-5/#week-5-plantuml","title":"Week-5 (Plantuml)","text":""},{"location":"week-5/ce204-week-5/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC-PDF, DOC-DOCX, SLIDE, PPTX,</p>"},{"location":"week-5/ce204-week-5/#plantuml","title":"Plantuml","text":""},{"location":"week-5/ce204-week-5/#outline","title":"Outline","text":"<ul> <li>Plantuml What is it?</li> <li>Plantuml When do you need it?</li> <li>Plantuml How to use it online?</li> <li>Plantuml How to use it offline? </li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml_1","title":"Plantuml","text":""},{"location":"week-5/ce204-week-5/#outline_1","title":"Outline","text":"<ul> <li>Plantuml Integrations with other tools</li> <li>Plantuml How to integrate with Doxygen?</li> <li>Plantuml How to integrate with Eclipse?</li> <li>Plantuml How to integrate with Visual Studio Code?</li> <li>Plantuml How to integrate with Visual Studio?</li> <li>and More ...</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml_2","title":"Plantuml","text":""},{"location":"week-5/ce204-week-5/#outline_2","title":"Outline","text":"<ul> <li>Plantuml UML Diagrams</li> <li>Sequence diagram</li> <li>Usecase diagram</li> <li>Class diagram</li> <li>Object diagram</li> <li>Activity diagram (here is the legacy syntax)</li> <li>Component diagram</li> <li>Deployment diagram</li> <li>State diagram</li> <li>Timing diagram</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml_3","title":"Plantuml","text":""},{"location":"week-5/ce204-week-5/#outline_3","title":"Outline","text":"<ul> <li>Plantuml C4 Model Diagrams</li> <li>Context Diagram</li> <li>Container Diagram</li> <li>Component Diagram</li> <li>Class Diagram</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml_4","title":"Plantuml","text":""},{"location":"week-5/ce204-week-5/#outline_4","title":"Outline","text":"<ul> <li>Plantuml None-UML Diagrams (1)</li> <li>JSON data</li> <li>YAML data</li> <li>Network diagram (nwdiag)</li> <li>Wireframe graphical interface or UI mockups (salt)</li> <li>Archimate diagram</li> <li>Specification and Description Language (SDL)</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml_5","title":"Plantuml","text":""},{"location":"week-5/ce204-week-5/#outline_5","title":"Outline","text":"<ul> <li>Plantuml None-UML Diagrams (2)</li> <li>Ditaa diagram</li> <li>Gantt diagram</li> <li>MindMap diagram</li> <li>Work Breakdown Structure diagram (WBS)</li> <li>Mathematic with AsciiMath or JLaTeXMath notation</li> <li>Entity Relationship diagram (IE/ER)</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml_6","title":"Plantuml","text":""},{"location":"week-5/ce204-week-5/#outline_6","title":"Outline","text":"<ul> <li>PlantUML Preprocessing</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml_7","title":"Plantuml","text":""},{"location":"week-5/ce204-week-5/#outline_7","title":"Outline","text":"<ul> <li>Plantuml Icon Diagrams Support</li> <li>PlantUML Stdlib</li> <li>Calling PlantUML from Java</li> <li>PlantUML Java API</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-what-is-it","title":"Plantuml What is it?","text":""},{"location":"week-5/ce204-week-5/#plantuml-what-is-it_1","title":"Plantuml What is it?","text":"<ul> <li> <p>PlantUML is an open-source tool allowing users to create diagrams from a plain text language, based on UML</p> </li> <li> <p>22 April, 2009: First public release.</p> </li> <li> <p>Webpage PlantUML</p> </li> <li> <p>Wiki PlantUML</p> </li> <li> <p>Github PlantUML</p> </li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-what-is-it_2","title":"Plantuml What is it?","text":"<ul> <li> <p>Besides various UML diagrams, PlantUML has support for various other software development related formats such as </p> </li> <li> <p>Archimate, </p> </li> <li>Block diagram, </li> <li>BPMN, </li> <li>C4, </li> <li>Computer network diagram, </li> <li>ERD, </li> <li>Gantt chart, </li> <li>Mind map, </li> <li>and WBD, </li> <li>as well as visualisation of JSON and YAML files.</li> </ul> <p>Details in Next Slides...</p>"},{"location":"week-5/ce204-week-5/#plantuml-what-is-it_3","title":"Plantuml What is it?","text":"<pre><code>@startuml\nBob-&gt;Alice : Hello!\n@enduml\n</code></pre> <p>Demo Link</p> <p>PlantUML Web Server</p>"},{"location":"week-5/ce204-week-5/#plantuml-what-is-it_4","title":"Plantuml What is it?","text":"<pre><code>@startuml\nskinparam style strictuml\nclass Fa\u00e7ade {\n doSomething()\n}\nFa\u00e7ade .&gt; package1.Class1\nFa\u00e7ade .&gt; package2.Class2\nFa\u00e7ade .&gt; package3.Class3\nClient1 .&gt; Fa\u00e7ade : doSomething()\nClient2 .&gt; Fa\u00e7ade : doSomething()\nnote as N2\ndoSomething() {\n  Class1 c1 = newClass1();\n  Class2 c2 = newClass2();\n  Class3 c3 = newClass3();\n  c1.doStuff(c2)\n  c3.setX(c1.getX());\n  return c3.getY();\n}\nend note\nFa\u00e7ade .. N2\n@enduml\n</code></pre> <p>Demo Link</p> <p>PlantUML Web Server</p>"},{"location":"week-5/ce204-week-5/#plantuml-what-is-it_5","title":"Plantuml What is it?","text":""},{"location":"week-5/ce204-week-5/#plantuml-status","title":"PlantUML Status","text":""},{"location":"week-5/ce204-week-5/#plantuml-what-is-it_6","title":"Plantuml What is it?","text":""},{"location":"week-5/ce204-week-5/#plantuml-status_1","title":"PlantUML Status","text":""},{"location":"week-5/ce204-week-5/#plantuml-what-is-it_7","title":"Plantuml What is it?","text":""},{"location":"week-5/ce204-week-5/#plantuml-status_2","title":"PlantUML Status","text":""},{"location":"week-5/ce204-week-5/#plantuml-what-is-it_8","title":"Plantuml What is it?","text":""},{"location":"week-5/ce204-week-5/#plantuml-status_3","title":"PlantUML Status","text":"<p>This badges are generated via </p> <p>https://shields.io/</p>"},{"location":"week-5/ce204-week-5/#plantuml-what-is-it_9","title":"Plantuml What is it?","text":"<ul> <li> <p>Diagram As Code</p> </li> <li> <p>Diagrams are defined using a simple and intuitive language. (see PlantUML Language Reference Guide).</p> </li> <li> <p>Easy to use </p> </li> <li> <p>New users can read the quick start page. There is also a F.A.Q. page. </p> </li> <li> <p>Easy to integrate</p> </li> <li> <p>PlantUML can be used within many other tools.</p> </li> <li> <p>Several outputs </p> </li> <li> <p>Images can be generated in PNG, in SVG or in LaTeX format. </p> </li> <li>It is also possible to generate ASCII art diagrams (only for sequence diagrams).</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-what-is-it_10","title":"Plantuml What is it?","text":"<p>PlantUML is a component that allows to quickly write:</p> <ul> <li>Sequence diagram</li> <li>Usecase diagram</li> <li>Class diagram</li> <li>Object diagram</li> <li>Activity diagram\u00a0(here is\u00a0the legacy syntax)</li> <li>Component diagram</li> <li>Deployment diagram</li> <li>State diagram</li> <li>Timing diagram</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-what-is-it_11","title":"Plantuml What is it?","text":"<p>The following non-UML diagrams are also supported:</p> <ul> <li>JSON data</li> <li>YAML data</li> <li>Network diagram (nwdiag)</li> <li>Wireframe graphical interface or UI mockups (salt)</li> <li>Archimate diagram</li> <li>Specification and Description Language (SDL)</li> <li>Ditaa diagram</li> <li>Gantt diagram</li> <li>MindMap diagram</li> <li>Work Breakdown Structure diagram (WBS)</li> <li>Mathematic with AsciiMath or JLaTeXMath notation</li> <li>Entity Relationship diagram (IE/ER)</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-what-is-it_12","title":"Plantuml What is it?","text":"<p>Furthermore:</p> <ul> <li>Hyperlinks and tooltips</li> <li>Creole: rich text, emoticons, unicode, icons</li> <li>OpenIconic icons</li> <li>Sprite icons</li> <li>AsciiMath mathematical expressions</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-when-do-you-need-it","title":"Plantuml When do you need it?","text":""},{"location":"week-5/ce204-week-5/#plantuml-when-do-you-need-it_1","title":"Plantuml When do you need it?","text":"<ul> <li>Integrate application source code with its UML design</li> <li>Do not worry about visual design</li> <li>If you need something platform independent and portable</li> <li>If you need something that has lightweight diagramming features.</li> <li>If you do not want to pay for licences.</li> <li>If you do not need to install applications.</li> <li>If you need fast operations for diagraming models that you need to generate and share with others.</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-when-do-you-need-it_2","title":"Plantuml When do you need it?","text":"<ul> <li>There are many applications that use PlantUML.</li> <li>There are many examples of PlantUML diagrams.maybe you can find your solutions. Do not forget to check the examples.</li> </ul>"},{"location":"week-5/ce204-week-5/#before-start-lets-download-install-plantuml","title":"Before Start Lets Download &amp; Install PlantUML","text":""},{"location":"week-5/ce204-week-5/#download-installation-options-for-offline-usage","title":"Download &amp; Installation Options for Offline Usage","text":"<ul> <li>Download from Direct Site and Use As *.jar File</li> <li>Install via Choco and use with Command Line</li> </ul>"},{"location":"week-5/ce204-week-5/#option-1-download-jar-file-and-pdf-guide","title":"Option-1 : Download Jar File and PDF Guide","text":"<ul> <li> <p>Visit Download page</p> </li> <li> <p>Download Latest Version Always with GraphViz Support</p> </li> <li> <p>PlantUML compiled Jar (Version 1.2022.4)</p> <ul> <li>From GitHub releases, you can download\u00a0plantuml.1.2022.4.jar</li> <li>Version without embedded GraphViz:\u00a0plantuml-nodot.1.2022.4.jar</li> </ul> </li> <li> <p>PlantUML Language Reference Guide</p> </li> <li> <p> English Deutsch Espa\u00f1ol Fran\u00e7ais \u65e5\u672c\u8a9e \ud55c\uad6d\uc5b4 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u4e2d\u6587</p> </li> </ul>"},{"location":"week-5/ce204-week-5/#option-2-install-via-choco-and-use-with-command-line","title":"Option-2 : Install via Choco and use with Command Line","text":"<ul> <li>Choco install</li> <li>For windows users, majkinetor introduced a way to install plantuml and its dependencies easily. Run cmd.exe as Administrator, and run two commands as follows (the first command is not needed and will fail if you already have chocolatey installed).</li> </ul> <pre><code>@\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" &amp;&amp; SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"\n</code></pre> <pre><code>choco install plantuml\n</code></pre> <ul> <li>If you've installed java, but still prompts \"java not installed\", please add java bin path to PATH environment variable.</li> </ul>"},{"location":"week-5/ce204-week-5/#always-test-installation-and-its-version","title":"Always Test Installation and Its Version","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online","title":"Plantuml How to use it online?","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_1","title":"Plantuml How to use it online?","text":"<ul> <li>From PlantUML Web Page Select \"Online Server\"</li> <li>Default Online Server Link</li> <li>https://www.plantuml.com/plantuml/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000 </li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_2","title":"Plantuml How to use it online?","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_3","title":"Plantuml How to use it online?","text":"<ul> <li>You can download get shareable PNG, SVG links from server   -</li> <li>You can access directly UML diagram via browser</li> <li>You can parse links from server to get editable diagram</li> <li>You can try several built-in themes</li> <li>You can seperate diagram window from code window to make easier to edit diagram</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_4","title":"Plantuml How to use it online?","text":"<ul> <li> <p>Everything stored on link, example</p> </li> <li> <p>Request URL</p> </li> </ul> <pre><code>https://www.plantuml.com/plantuml/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_5","title":"Plantuml How to use it online?","text":"<ul> <li>Server Base URL</li> </ul> <pre><code>https://www.plantuml.com/plantuml/uml/\n</code></pre> <ul> <li>Encoded PlantUML Script</li> </ul> <pre><code>SyfFKj2rKt3CoKnELR1Io4ZDoSa70000\n</code></pre> <pre><code>- Decoded PlantUML Script\n\n``` plantuml\n\n@startuml\nBob -&gt; Alice : hello\n@enduml\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_6","title":"Plantuml How to use it online?","text":"<ul> <li>If you plantuml text-encoding features https://plantuml.com/text-encoding</li> <li>They use</li> <li>https://en.wikipedia.org/wiki/Deflate (LZ77 + Huffman)</li> <li>https://en.wikipedia.org/wiki/Brotli (LZ77)</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_7","title":"Plantuml How to use it online?","text":""},{"location":"week-5/ce204-week-5/#plantumljar-console-command","title":"Plantuml.jar Console-Command","text":"<p>You can use\u00a0<code>-encodeurl</code>\u00a0or\u00a0<code>-decodeurl</code>\u00a0in the\u00a0command line\u00a0flags to encode or decode the text.</p> <pre><code>@startuml\nBob -&gt; Alice : hello\n@enduml\n</code></pre> <p></p> <ul> <li>https://www.plantuml.com/plantuml/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_8","title":"Plantuml How to use it online?","text":"<p>You will find here some implementation of this encoder:</p> <ul> <li>Code in PHP</li> <li>Code in Javascript</li> <li>Code in Python</li> <li>Code in Swift</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_9","title":"Plantuml How to use it online?","text":""},{"location":"week-5/ce204-week-5/#javascript-encoder-decoder-library","title":"Javascript Encoder &amp; Decoder Library","text":"<ul> <li>You can use following libraries to encode/decode URLs with you app.</li> <li>https://github.com/markushedvall/plantuml-encoder</li> <li>https://www.npmjs.com/package/plantuml-encoder-decoder</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_10","title":"Plantuml How to use it online?","text":""},{"location":"week-5/ce204-week-5/#javascript-encoder-example","title":"Javascript Encoder Example","text":"<pre><code>var plantumlEncoder = require('plantuml-encoder')\n\nvar encoded = plantumlEncoder.encode('A -&gt; B: Hello')\nconsole.log(encoded) // SrJGjLDmibBmICt9oGS0\n\nvar url = 'http://www.plantuml.com/plantuml/img/' + encoded\n\nvar decoded = plantumlEncoder.decode(encoded)\nconsole.log(decoded)\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_11","title":"Plantuml How to use it online?","text":""},{"location":"week-5/ce204-week-5/#javascript-decoder-example","title":"Javascript Decoder Example","text":"<pre><code>var plantumlEncoder = require('plantuml-encoder')\n\nvar plain = plantumlEncoder.decode('UDfpLD2rKt2oKl18pSd91m0KGWDz')\nconsole.log(plain) // A -&gt; B: Hello\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_12","title":"Plantuml How to use it online?","text":""},{"location":"week-5/ce204-week-5/#simple-hex-format","title":"Simple HEX format","text":"<ul> <li> <p>If you find Deflate and Brotli too complex, you can try the HEX format. In that case, you just have to encode each character in hexadecimal format.</p> </li> <li> <p>For example :</p> </li> </ul> <pre><code>@startuml\nAlice-&gt;Bob : I am using hex\n@enduml\n</code></pre> <ul> <li>will be turned into:</li> </ul> <pre><code>407374617274756d6c0a416c6963652d3e426f62203a204920616d207573696e67206865780a40656e64756d6c\n</code></pre> <ul> <li> <p>To indicate the use of HEX format, you must add\u00a0<code>~h</code>\u00a0at the start of the data sent to PlantUML server.</p> </li> <li> <p>http://www.plantuml.com/plantuml/uml/~h4073...</p> </li> <li> <p>Since there is no compression here, the URL will become very long as the diagram grows.</p> </li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_13","title":"Plantuml How to use it online?","text":""},{"location":"week-5/ce204-week-5/#png-service","title":"PNG service","text":"<p>To get a PNG file of a diagram, use the following URL scheme:\u00a0/plantuml/png/ENCODED</p>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_14","title":"Plantuml How to use it online?","text":""},{"location":"week-5/ce204-week-5/#svg-service","title":"SVG service","text":"<p>To get a SVG XML file of a diagram, use the following URL scheme:\u00a0/plantuml/svg/ENCODED</p> <p>Note that not all diagrams can be produced in\u00a0SVG. For example,\u00a0ditaa diagrams\u00a0are only available in PNG format.</p>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_15","title":"Plantuml How to use it online?","text":""},{"location":"week-5/ce204-week-5/#ascii-art-service","title":"ASCII Art Service","text":"<p>To get an ASCII Art representation of a diagram, encoded in UTF-8, use the following URL scheme:\u00a0/plantuml/txt/ENCODED</p> <p>Note that only sequence diagrams can be produced in ASCII Art.</p>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_16","title":"Plantuml How to use it online?","text":""},{"location":"week-5/ce204-week-5/#image-map-service","title":"Image Map service","text":"<p>To get the\u00a0client image map\u00a0related to a previously generated PNG image, use the following URL scheme:\u00a0/plantuml/map/ENCODED</p>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_17","title":"Plantuml How to use it online?","text":""},{"location":"week-5/ce204-week-5/#image-map-service_1","title":"Image Map service","text":"<p>The output is a list of\u00a0<code>&lt;area&gt;</code>\u00a0tags, each line matching a link present in the diagram description.</p> <p>For example, the following\u00a0diagram:</p> <pre><code>@startuml\nparticipant Bob [[http://plantuml.com]]\nBob -&gt; Alice : [[http://forum.plantuml.net]] hello\n@enduml\n</code></pre> <p>produces the\u00a0following output:</p> <pre><code>&lt;map id=\"plantuml_map\" name=\"plantuml_map\"&gt;\n&lt;area shape=\"rect\" id=\"id1\" href=\"http://forum.plantuml.net\" title=\"http://forum.plantuml.net\" alt=\"\" coords=\"38,50,199,65\"/&gt;\n&lt;area shape=\"rect\" id=\"id2\" href=\"http://plantuml.com\" title=\"http://plantuml.com\" alt=\"\" coords=\"8,3,50,116\"/&gt;\n&lt;/map&gt;\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_18","title":"Plantuml How to use it online?","text":"<p>Note that you need to include these\u00a0<code>&lt;area...</code>\u00a0tags inside a\u00a0<code>&lt;map...</code>\u00a0html tag to make the complete image map.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Plantuml Image Map&lt;/title&gt;\n    &lt;meta charset=\"UTF-8\" &gt;\n    &lt;meta name=\"keywords\" content=\"Plantuml,ImageMap\"&gt;\n    &lt;meta name=\"description\" content=\"Plantuml Image Map\"&gt;\n    &lt;meta name=\"author\" content=\"U\u011fur CORUH\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n &lt;!-- --&gt;\n    &lt;h1&gt;Sample Image&lt;/h1&gt;\n    &lt;img src=\"image.png\" alt=\"Website map\" usemap=\"#plantuml_map\" /&gt;\n    &lt;map id=\"plantuml_map\" name=\"plantuml_map\"&gt;\n    &lt;area shape=\"rect\" id=\"id1\" href=\"http://forum.plantuml.net\" title=\"http://forum.plantuml.net\" alt=\"\" coords=\"38,50,199,65\"/&gt;\n    &lt;area shape=\"rect\" id=\"id2\" href=\"http://plantuml.com\" title=\"http://plantuml.com\" alt=\"\" coords=\"8,3,50,116\"/&gt;\n    &lt;/map&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_19","title":"Plantuml How to use it online?","text":""},{"location":"week-5/ce204-week-5/#proxy-service","title":"Proxy Service","text":"<p>With the proxy service, the source description of the diagram can be fetched by the PlantUML Server from a remote document.</p> <p>The proxy service uses the following URL scheme:\u00a0<code>/plantuml/proxy?src=RESOURCE&amp;idx=INDEX&amp;fmt=FORMAT</code></p> <ul> <li>RESOURCE is the complete URL of the document which contains the diagram description (with the\u00a0<code>@startxxx</code>\u00a0and\u00a0<code>@endxxx</code>\u00a0tags), it could be a\u00a0<code>.html</code>\u00a0or a\u00a0<code>.txt</code>\u00a0file.</li> <li>INDEX is optional, it specifies the occurrence (starting at 0) of the diagram description that will be parsed when there are more than one diagram descriptions in the remote document. It defaults to zero.</li> <li>FORMAT is optional, it specifies the format to return. Supported values are:\u00a0<code>png</code>,\u00a0<code>svg</code>,\u00a0<code>eps</code>,\u00a0<code>epstext</code>\u00a0and\u00a0<code>txt</code>. Default is\u00a0<code>png</code>,</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_20","title":"Plantuml How to use it online?","text":""},{"location":"week-5/ce204-week-5/#proxy-service_1","title":"Proxy Service","text":"<p>For example, try this link:\u00a0http://www.plantuml.com/plantuml/proxy?src=https://raw.github.com/plantuml/plantuml-server/master/src/main/webapp/resource/test2diagrams.txt</p> <p>Note that the address of the remote document is specified as a parameter, so it is not necessary to\u00a0URL encode\u00a0the URL.</p>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-online_21","title":"Plantuml How to use it online?","text":"<ul> <li>Checkout Integrations </li> <li>https://plantuml.com/running<ul> <li>Wikis and Forums</li> <li>Text editors and IDE</li> <li>Programming language</li> <li>Generated Documentation</li> <li>Online Editors</li> <li>Other services</li> </ul> </li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_1","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#plantuml-picoweb-server","title":"PlantUML PicoWeb Server","text":"<ul> <li> <p>https://plantuml.com/picoweb</p> </li> <li> <p>Many plugins take advantage of the online web server to generate images.</p> </li> <li> <p>For some reasons (security, performance...) you may need to use your own local server instead. This is possible thanks to the PlantUML Server which is available here.</p> </li> <li> <p>However, installing and configuring a full webserver may be too complex for some users so we have decided to integrate a tiny webserver inside plantuml.jar.</p> </li> <li> <p>This means that you only need a Java Runtime Environment and plantuml.jar to run this very simple web server.</p> </li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_2","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#plantuml-picoweb-server_1","title":"PlantUML PicoWeb Server","text":"<ul> <li>https://plantuml.com/picoweb</li> <li>Running the server</li> <li>Running the server is pretty simple. You just have to launch:</li> </ul> <pre><code>java -jar plantuml.jar -picoweb\n</code></pre> <ul> <li> <p>Attention: By default, the server listens on all interfaces on port 8080. </p> </li> <li> <p>To change the default behavior, you can specify a colon separated port (still listening on all interfaces) or, both, a port and a bind address:</p> </li> </ul> <pre><code>java -jar plantuml.jar -picoweb:8000\njava -jar plantuml.jar -picoweb:8000:127.0.0.1\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_3","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#plantuml-picoweb-server_2","title":"PlantUML PicoWeb Server","text":"<ul> <li>https://plantuml.com/picoweb</li> <li>Running the server</li> <li>The server is really basic. It only understands GET requests with following patterns: </li> </ul> <pre><code>/plantuml/png/xyz....\n/plantuml/svg/xyz....\n</code></pre> <ul> <li>The server will return a PNG or SVG image.</li> <li>The server will return a 404 error if the request is not understood.</li> <li>The server will return a 500 error if the image cannot be generated.</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_4","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#plantuml-picoweb-server_3","title":"PlantUML PicoWeb Server","text":"<ul> <li>Those GET requests are used by various PlantUML plugins. Once you have launched your server, you can simply test it. With any web browser, you just have to point to: http://127.0.0.1:8080.</li> <li>This way, you can very easily use any plugins which need some PlantUML HTTP server without the official online server.</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_5","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#plantuml-server","title":"PlantUML Server","text":"<ul> <li> <p>You can use PlantUML using the online web service to generate images on-the-fly. A online demonstration is available at http://www.plantuml.com/plantuml, but you can also install it on your own JEE web application server.</p> </li> <li> <p>Full featured server is available here:</p> </li> <li> <p>https://plantuml.com/server</p> </li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_6","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#plantuml-server_1","title":"PlantUML Server","text":"<ul> <li>To install PlantUML Server on your own JEE 5 web server, </li> <li>download the plantuml.war file and copy it on the webapp folder of your server.</li> <li>Because of the transition from javax.* to jakarta.*, the PlantUML Server does not work on Tomcat 6/\u215e/9 anymore. You have to use Tomcat 10.</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_7","title":"Plantuml How to use it offline?","text":"<ul> <li> <p>Download and install Java Runtime Environment (JRE) or Java Development Kit (JDK) with JRE. </p> </li> <li> <p>Download jar file from https://plantuml.com/download</p> </li> <li> <p>Select Latest version plantuml.jar with graphviz support.</p> </li> <li> <p>Prepare a batch file to launch on your computer as follow in the same folder with plantuml.jar</p> </li> <li> <p>for PNG image output run run_plantuml_for_png_export.bat</p> </li> </ul> <pre><code>java -DPLANTUML_LIMIT_SIZE=8192 -jar \"plantuml.jar\" -v \"./**.(puml)\"\n</code></pre> <ul> <li>for SVG output run run_plantuml_for_svg_export.bat</li> </ul> <pre><code>java -DPLANTUML_LIMIT_SIZE=8192 -jar \"plantuml.jar\" -svg -v \"./**.(puml)\"\n</code></pre> <ul> <li>This scripts are look for folders and find *.puml files and generate PNG or SVG images.</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_8","title":"Plantuml How to use it offline?","text":"<ul> <li>Other options</li> </ul> <p>The most basic way to run it is:</p> <pre><code>java -jar plantuml.jar file1 file2 file3\n</code></pre> <p>This will look for\u00a0<code>@startXYZ</code>\u00a0into\u00a0<code>file1</code>,\u00a0<code>file2</code>\u00a0and\u00a0<code>file3</code>. For each diagram, a\u00a0<code>.png</code>\u00a0file will be created.</p>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_9","title":"Plantuml How to use it offline?","text":"<p>For processing a whole directory, you can use:</p> <pre><code>java -jar plantuml.jar \"c:/directory1\" \"c:/directory2\"\n</code></pre> <p>This command will search for\u00a0<code>@startXYZ</code>\u00a0and\u00a0<code>@endXYZ</code>\u00a0into\u00a0<code>.txt</code>,\u00a0<code>.tex</code>,\u00a0<code>.java</code>,\u00a0<code>.htm</code>,\u00a0<code>.html</code>,\u00a0<code>.c</code>,\u00a0<code>.h</code>,\u00a0<code>.cpp</code>,\u00a0<code>.apt</code>,\u00a0<code>.pu</code>,\u00a0<code>.puml</code>,\u00a0<code>.hpp</code>,\u00a0<code>.hh</code>\u00a0or\u00a0<code>.md</code>\u00a0files of the\u00a0<code>c:/directory1</code>\u00a0and\u00a0<code>c:/directory2</code>\u00a0directories.</p>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_10","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#configuration-file","title":"Configuration File","text":"<ul> <li>You can also provide a configuration file which will be included before each diagram:</li> </ul> <pre><code>java -jar plantuml.jar -config \"./config.cfg\" dir1\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_11","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#configuration-file_1","title":"Configuration File","text":"<ul> <li>Suppose you have the two following files:</li> </ul> <p>test1.txt:</p> <pre><code>@startuml\nAlice-&gt;Bob : hello\n@enduml\n</code></pre> <p>config.txt:</p> <pre><code>skinparam handwritten true\n</code></pre> <ul> <li>If you launch the following command:</li> </ul> <pre><code>java -jar plantuml.jar -config config.txt test1.txt\n</code></pre> <ul> <li>File <code>config.txt</code> is automatically included at the very beginning of the diagram.</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_12","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#metadata","title":"Metadata","text":"<ul> <li> <p>PlantUML saves the diagram's source code in the generated PNG Metadata in the form of\u00a0encoded text. </p> </li> <li> <p>So it is possible to retrieve this source by using the query parameter\u00a0<code>metadata</code>, giving it some image URL.</p> </li> <li> <p>For example, if you want to retrieve the diagram source of the image\u00a0<code>http://i.stack.imgur.com/HJvKF.png</code>\u00a0use the following server request:\u00a0</p> </li> <li> <p><code>http://www.plantuml.com/plantuml/?metadata=http://i.stack.imgur.com/HJvKF.png</code>.</p> </li> <li> <p>Sounds like magic! No, merely clever engineering :-)</p> </li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_13","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#metadata_1","title":"Metadata","text":"<p>After all preprocessing (includes etc), PlantUML saves the diagram's source code in the generated PNG Metadata in the form of\u00a0encoded text.</p> <ul> <li>If you does not want plantuml to save the diagram's source code in the generated PNG Metadata, you can during generation use the option\u00a0<code>-nometadata</code>\u00a0to disable this functionality (To NOT export metadata in PNG/SVG generated files).</li> <li>It is possible to retrieve this source with the\u00a0<code>-metadata</code>\u00a0option. This means that the PNG is almost \"editable\": you can post it on a corporate wiki where you cannot install plugins, and someone in the future can update the diagram by getting the metadata, editing and re-uploading again. Also, the diagram is stand-alone.</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_14","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#metadata_2","title":"Metadata","text":"<ul> <li>Conversely, the\u00a0<code>-checkmetadata</code>\u00a0option checks whether the target PNG has the same source and if there are no changes, doesn't regenerate the PNG, thus saving all processing time. This allows you to run PlantUML on a whole folder (or tree with the\u00a0<code>-recursive</code>\u00a0option) incrementally.</li> </ul> <p>Sounds like magic! No, merely clever engineering :-)</p> <p>Example:</p> <pre><code>  java -jar plantuml.jar -metadata diagram.png &gt; diagram.puml\n</code></pre> <p>Unfortunately this option works only with local files. It doesn't work with\u00a0<code>-pipe</code>\u00a0so you cannot fetch a URL with eg\u00a0<code>curl</code>\u00a0and feed the PNG to PlantUML.</p> <p>However, the Plantuml\u00a0server\u00a0has a similar feature, where it can get a PNG from a URL and extract its metadata.</p>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_15","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#command-line","title":"Command line","text":"<p>You can run PlantUML using the command line. (See\u00a0running\u00a0for ways to run PlantUML from various other tools and workflows).The most basic way to run it is:</p> <pre><code>java -jar plantuml.jar file1 file2 file3\n</code></pre> <p>This will look for\u00a0<code>@startXYZ</code>\u00a0into\u00a0<code>file1</code>,\u00a0<code>file2</code>\u00a0and\u00a0<code>file3</code>. For each diagram, a\u00a0<code>.png</code>\u00a0file will be created.For processing a whole directory, you can use:</p> <pre><code>java -jar plantuml.jar \"c:/directory1\" \"c:/directory2\"\n</code></pre> <p>This command will search for\u00a0<code>@startXYZ</code>\u00a0and\u00a0<code>@endXYZ</code>\u00a0into\u00a0<code>.txt</code>,\u00a0<code>.tex</code>,\u00a0<code>.java</code>,\u00a0<code>.htm</code>,\u00a0<code>.html</code>,\u00a0<code>.c</code>,\u00a0<code>.h</code>,\u00a0<code>.cpp</code>,\u00a0<code>.apt</code>,\u00a0<code>.pu</code>,\u00a0<code>.puml</code>,\u00a0<code>.hpp</code>,\u00a0<code>.hh</code>\u00a0or\u00a0<code>.md</code>\u00a0files of the\u00a0<code>c:/directory1</code>\u00a0and\u00a0<code>c:/directory2</code>\u00a0directories.</p>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_16","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#wildcards","title":"Wildcards","text":"<p>You can also use wildcards :</p> <ul> <li>For a single character, use\u00a0<code>?</code></li> <li>For zero or more characters, use\u00a0<code>*</code></li> <li>For zero or more characters, (including\u00a0<code>/</code>\u00a0or\u00a0<code>\\</code>), use a double\u00a0<code>**</code></li> </ul> <p>So to process any\u00a0<code>.cpp</code>\u00a0files in all directories starting by\u00a0dummy\u00a0:</p> <pre><code>java -jar plantuml.jar \"dummy*/*.cpp\"\n</code></pre> <p>And to process any\u00a0<code>.cpp</code>\u00a0files in all directories starting by\u00a0dummy, and theirs subdirectories :</p> <pre><code>java -jar plantuml.jar \"dummy*/**.cpp\"\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_17","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#excluded-files","title":"Excluded files","text":"<p>You can exlude some files from the process using the\u00a0<code>-x</code>\u00a0option:</p> <pre><code>java -jar plantuml.jar -x \"**/common/**\" -x \"**/test/Test*\" \"dummy*/**/*.cpp\"\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_18","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#output-directory","title":"Output Directory","text":"<p>You can specify an output directory for all images using the\u00a0<code>-o</code>\u00a0switch:</p> <pre><code>java -jar plantuml.jar -o \"c:/outputPng\" \"c:/directory2\"\n</code></pre> <p>If you recurse into several directory, there is a slight difference if you provide an absolute or a relative path for this output directory:</p> <ul> <li> <p>An\u00a0absolute path\u00a0will ensure that all images are output to a single, specific, directory.</p> </li> <li> <p>If you provide a\u00a0relative path\u00a0then the images is placed in that directory relative to the location of the\u00a0input file, not the current directory (note: this applies even if the path begins with a\u00a0<code>.</code>). When Plantuml processes files from multiple directores then the corresponding directory structure is created under the computed output directory.</p> </li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_19","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#types-of-output-file","title":"Types of Output File","text":"<p>Images for your diagrams can be exported in a variety of different formats. By default the format will be a PNG file but another type can be selected using the following extensions:</p> <p>Example:</p> <pre><code>java -jar plantuml.jar yourdiagram.txt -ttxt\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_20","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#types-of-output-file_1","title":"Types of Output File","text":"Param name Short param name Output format Comment <code>-tpng</code> <code>-png</code> PNG Default <code>-tsvg</code> <code>-svg</code> SVG Further details can be found\u00a0here <code>-teps</code> <code>-eps</code> EPS Further details can be found\u00a0here"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_21","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#types-of-output-file_2","title":"Types of Output File","text":"Param Name Short Param Name Output Format Comment <code>-teps:text</code> <code>-eps:text</code> EPS This option keeps text as text <code>-tpdf</code> <code>-pdf</code> PDF Further details can be found\u00a0here <code>-tvdx</code> <code>-vdx</code> VDX Microsoft Visio Document"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_22","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#types-of-output-file_3","title":"Types of Output File","text":"Param Name Short Param Name Output Format Comment <code>-txmi</code> <code>-xmi</code> XMI Further details can be found\u00a0here <code>-tscxml</code> <code>-scxml</code> SCXML <code>-thtml</code> <code>-html</code> HTML Alpha feature: do not use"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_23","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#types-of-output-file_4","title":"Types of Output File","text":"Param Name Short Param Name Output Format Comment <code>-ttxt</code> <code>-txt</code> ATXT ASCII art. Further details can be found\u00a0here <code>-tutxt</code> <code>-utxt</code> UTXT ASCII art using Unicode characters <code>-tlatex</code> <code>-latex</code> LATEX Further details can be found\u00a0here"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_24","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#types-of-output-file_5","title":"Types of Output File","text":"Param Name Short Param Name Output Format Comment <code>-tlatex:nopreamble</code> <code>-latex:nopreamble</code> LATEX Contains no LaTeX preamble creating a document <code>-tbraille</code> <code>-braille</code> PNG Braille image\u00a0[Ref.\u00a0QA-4752]"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_25","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#exit-code","title":"Exit Code","text":"<ul> <li> <p>When there are some errors in diagrams the command returns an error (-1) exit code. But even if some diagrams contain some errors,\u00a0all\u00a0diagrams are generated, which can be time consuming for large project.</p> </li> <li> <p>You can use the\u00a0<code>-failfast</code>\u00a0flag to change this behavior to stop diagram generations as soon as one error occurs. In that case, some diagrams will be generated, and some will not.</p> </li> <li> <p>There is also a\u00a0<code>-failfast2</code>\u00a0flag that does a first checking pass. If some error is present, no diagram will be generated at all. In case of error,\u00a0<code>-failfast2</code>\u00a0runs even faster than\u00a0<code>-failfast</code>, which may be useful for huge project.</p> </li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_26","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#standard-report-stdrpt","title":"Standard report [stdrpt]","text":"<p>Using the\u00a0<code>-stdrpt</code>\u00a0(standard report) option, you can change the format of the error output of your PlantUML scripts.</p> <p>With this option, a different error output of your diagram is possible:</p> <ul> <li>none: two lines</li> <li><code>-stdrpt</code>: single line</li> <li><code>-stdrpt:1</code>: verbose</li> <li><code>-stdrpt:2</code>: single line</li> </ul> <p>[Ref.\u00a0Issue#155\u00a0and\u00a0QA-11805]</p>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_27","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#standard-report-stdrpt_1","title":"Standard report [stdrpt]","text":"<p>Examples, with the bad file\u00a0<code>file1.pu</code>, where\u00a0<code>as</code>\u00a0is written\u00a0<code>aass</code>:</p> <pre><code>@startuml\nparticipant \"Famous Bob\" aass Bob\n@enduml\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_28","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#standard-report-stdrpt_2","title":"Standard report [stdrpt]","text":""},{"location":"week-5/ce204-week-5/#without-any-option","title":"Without any option","text":"<pre><code>java -jar plantuml.jar file1.pu\n</code></pre> <p>The error output is:</p> <pre><code>Error line 2 in file: file1.pu\nSome diagram description contains errors\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_29","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#standard-report-stdrpt_3","title":"Standard report [stdrpt]","text":""},{"location":"week-5/ce204-week-5/#-stdrpt-option","title":"-stdrpt option","text":"<pre><code>java -jar plantuml.jar -stdrpt file1.pu\n</code></pre> <p>The error output is:</p> <pre><code>file1.pu:2:error:Syntax Error?\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_30","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#standard-report-stdrpt_4","title":"Standard report [stdrpt]","text":""},{"location":"week-5/ce204-week-5/#-stdrpt1-option","title":"-stdrpt:1 option","text":"<pre><code>java -jar plantuml.jar -stdrpt:1 file1.pu\n</code></pre> <p>The error output is:</p> <pre><code>protocolVersion=1\nstatus=ERROR\nlineNumber=2\nlabel=Syntax Error?\nError line 2 in file: file1.pu\nSome diagram description contains errors\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_31","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#standard-report-stdrpt_5","title":"Standard report [stdrpt]","text":""},{"location":"week-5/ce204-week-5/#-stdrpt2-option-like-stdrpt","title":"-stdrpt:2 option (like -stdrpt)","text":"<pre><code>java -jar plantuml.jar -stdrpt:2 file1.pu\n</code></pre> <p>The error output is:</p> <pre><code>file1.pu:2:error:Syntax Error?\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_32","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#command-line-options-and-help","title":"Command-Line Options and Help","text":"<p>You can have a help message by launching :</p> <pre><code>java -jar plantuml.jar -help\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_33","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#command-line-options-and-help_1","title":"Command-Line Options and Help","text":"<p>This will output:</p> <pre><code>Usage: java -jar plantuml.jar [options] -gui\n        (to execute the GUI)\n    or java -jar plantuml.jar [options] [file/dir] [file/dir] [file/dir]\n        (to process files or directories)\n\nYou can use the following wildcards in files/dirs:\n        *       means any characters but '\\'\n        ?       one and only one character but '\\'\n        **      means any characters (used to recurse through directories)\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_34","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#command-line-options-and-help_2","title":"Command-Line Options and Help","text":"<pre><code>where options include:\n    -gui                To run the graphical user interface\n    -tpng               To generate images using PNG format (default)\n    -tsvg               To generate images using SVG format\n    -teps               To generate images using EPS format\n    -tpdf               To generate images using PDF format\n    -tvdx               To generate images using VDX format\n    -txmi               To generate XMI file for class diagram\n    -tscxml             To generate SCXML file for state diagram\n    -thtml              To generate HTML file for class diagram\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_35","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#command-line-options-and-help_3","title":"Command-Line Options and Help","text":"<pre><code>    -ttxt               To generate images with ASCII art\n    -tutxt              To generate images with ASCII art using Unicode characters\n    -tlatex             To generate images using LaTeX/Tikz format\n    -tlatex:nopreamble  To generate images using LaTeX/Tikz format without preamble\n    -o[utput] \"dir\"     To generate images in the specified directory\n    -DVAR1=value        To set a preprocessing variable as if '!define VAR1 value' were used\n    -Sparam1=value      To set a skin parameter as if 'skinparam param1 value' were used\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_36","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#command-line-options-and-help_4","title":"Command-Line Options and Help","text":"<pre><code>    -Ppragma1=value     To set pragma as if '!pragma pragma1 value' were used\n    -I\\path\\to\\file     To include file as if '!include file' were used\n    -I\\path\\to\\*.puml   To include files with pattern\n    -theme xxx          To use a specific theme\n    -charset xxx        To use a specific charset (default is windows-1251)\n    -e[x]clude pattern  To exclude files that match the provided pattern\n    -metadata           To retrieve PlantUML sources from PNG images\n    -nometadata         To NOT export metadata in PNG/SVG generated files\n    -checkmetadata              Skip PNG files that don't need to be regenerated\n    -version            To display information about PlantUML and Java versions\n    -v[erbose]          To have log information\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_37","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#command-line-options-and-help_5","title":"Command-Line Options and Help","text":"<pre><code>    -quiet              To NOT print error message into the console\n    -debugsvek          To generate intermediate svek files\n    -h[elp]             To display this help message\n    -testdot            To test the installation of graphviz\n    -graphvizdot \"exe\"  To specify dot executable\n    -p[ipe]             To use stdin for PlantUML source and stdout for PNG/SVG/EPS generation\n    -encodesprite 4|8|16[z] \"file\"      To encode a sprite at gray level (z for compression) from an image\n    -computeurl|-encodeurl      To compute the encoded URL of a PlantUML source file\n    -decodeurl          To retrieve the PlantUML source from an encoded URL\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_38","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#command-line-options-and-help_6","title":"Command-Line Options and Help","text":"<pre><code>    -syntax             To report any syntax error from standard input without generating images\n    -language           To print the list of PlantUML keywords\n    -checkonly          To check the syntax of files without generating images\n    -failfast           To stop processing as soon as a syntax error in diagram occurs\n    -failfast2          To do a first syntax check before processing files, to fail even faster\n    -noerror            To skip images when error in diagrams\n    -duration           To print the duration of complete diagrams processing\n    -nbthread N         To use (N) threads for processing\n    -nbthread auto      To use 4 threads for processing\n    -timeout N          Processing timeout in (N) seconds. Defaults to 15 minutes (900 seconds).\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_39","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#command-line-options-and-help_7","title":"Command-Line Options and Help","text":"<pre><code>    -author[s]          To print information about PlantUML authors\n    -overwrite          To allow to overwrite read only files\n    -printfonts         To print fonts available on your system\n    -enablestats        To enable statistics computation\n    -disablestats       To disable statistics computation (default)\n    -htmlstats          To output general statistics in file plantuml-stats.html\n    -xmlstats           To output general statistics in file plantuml-stats.xml\n    -realtimestats      To generate statistics on the fly rather than at the end\n    -loopstats          To continuously print statistics about usage\n    -splash             To display a splash screen with some progress bar\n    -progress           To display a textual progress bar in console\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-use-it-offline_40","title":"Plantuml How to use it offline?","text":""},{"location":"week-5/ce204-week-5/#command-line-options-and-help_8","title":"Command-Line Options and Help","text":"<pre><code>    -pipeimageindex N   To generate the Nth image with pipe option\n    -stdlib             To print standard library info\n    -extractstdlib      To extract PlantUML Standard Library into stdlib folder\n    -filedir xxx        To behave as if the PlantUML source is in this dir (only affects '-pipe' and PicoWeb 'POST /render')\n    -filename \"example.puml\"    To override %filename% variable\n    -preproc            To output preprocessor text of diagrams\n    -cypher             To cypher texts of diagrams so that you can share them\n    -picoweb            To start internal HTTP Server. See https://plantuml.com/picoweb\n</code></pre> <ul> <li>If needed, you can setup the environment variable GRAPHVIZ_DOT</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_1","title":"Plantuml Integrations with other tools","text":"<ul> <li>PlantUML is integrated in a variety of external tools. See command-line for options to run it from the command line.</li> <li>Running PlantUML from Other Tools</li> <li>Plugins for PlantUML</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_2","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#wikis-and-forums","title":"Wikis and Forums","text":"<p>Make PlantUML diagrams easily accessible from markdown, GitHub flavored</p> <p>Marketplace on GitHub</p> <p>GitLab or GitHub integration with Markdown</p> <p>Integrate it with MoinMoin</p> <p>Integrate it with WordPress</p> <p>Integrate it with Discourse Forum</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_3","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#wikis-and-forums_1","title":"Wikis and Forums","text":"<p>Integrate it with NodeBB Forum</p> <p>Integrate it with MediaWiki</p> <p>Integrate it with Redmine</p> <p>Integrate it with Confluence</p> <p>Integrate it with Confluence Cloud</p> <p>Integrate it with Trac</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_4","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#wikis-and-forums_2","title":"Wikis and Forums","text":"<p>Integrate it with DokuWiki\u00a0(see\u00a0Weatherwax issue solved)</p> <p>Integrate it with XWiki</p> <p>Integrate it with PmWiki</p> <p>Integrate it with TiddlyWiki</p> <p>Integrate it with Ikiwiki</p> <p>Integrate it with Jekyll</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_5","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#wikis-and-forums_3","title":"Wikis and Forums","text":"<p>Integrate it with Publet</p> <p>Integrate it with Zim</p> <p>Integrate it with Fitnesse</p> <p>Integrate it with Slack</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_6","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#text-editors-and-ide","title":"Text editors and IDE","text":"<p>Render PlantUML Diagrams for QOwnNotes editor</p> <p>Connecting Astah and PlantUML</p> <p>Integrate it with TinyMCE Editor</p> <p>Integrate it with CKeditor</p> <p>Use the Eclipse Plugin</p> <p>Use a NetBeans Plugin</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_7","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#text-editors-and-ide_1","title":"Text editors and IDE","text":"<p>Use it with NetBeans</p> <p>Use it with Intellij idea</p> <p>Run it directly from\u00a0Word</p> <p>Use Gizmo to render PlantUML diagrams within\u00a0Word</p> <p>Run it directly from\u00a0Open Office</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_8","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#text-editors-and-ide_2","title":"Text editors and IDE","text":"<p>Run it from Emacs</p> <p>Run it from Sublime Text Editor</p> <p>Run it from VIM\u00a0(And use\u00a0F5 key,\u00a0Syntax, or\u00a0PaperColor)</p> <p>Use it with LaTeX</p> <p>Use it with mbeddr</p> <p>Use it with GEdit</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_9","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#text-editors-and-ide_3","title":"Text editors and IDE","text":"<p>Use it with Brackets</p> <p>Use it with Atom</p> <p>PlantUML language package for Atom</p> <p>UDL for Notepad++ to support the PlantUML language syntax</p> <p>Visual Studio Code plugin</p> <p>Another Visual Studio Code plugin</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_10","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#text-editors-and-ide_4","title":"Text editors and IDE","text":"<p>PlantUML syntax highlighter</p> <p>Generates UML class diagrams from MATLAB m-code</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_11","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#programming-language","title":"Programming language","text":"<p>Use it with Markdown</p> <p>Use it from HTML code with JQuery</p> <p>JOII-based classes diagram generator</p> <p>Call it from PHP</p> <p>Call it from Java</p> <p>Call it from Python</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_12","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#programming-language_1","title":"Programming language","text":"<p>Another python remote client interface</p> <p>Integration with IPython</p> <p>Python tools for PlantUML</p> <p>Call it from Groovy</p> <p>Use builder pattern with Groovy PlantUML builder</p> <p>Use command line</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_13","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#programming-language_2","title":"Programming language","text":"<p>Write an ANT task</p> <p>Use the Maven2 plugin</p> <p>Use it with Gradle</p> <p>Use it on Salesforce.com with Apex</p> <p>A Leiningen plugin for generating UML diagrams using PlantUML</p> <p>Emacs Lisp DSL for PlantUML</p> <p>Generate PHP classes from your PlantUML diagram</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_14","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#generated-documentation","title":"Generated Documentation","text":"<p>Create logical and physical database diagrams and generate DDL files.</p> <p>Helm chart for PlantUML.</p> <p>Markdown extension for PlantUML and Nikola.</p> <p>Renders PlantUML files from Nikola.</p> <p>JSDoc plugin to use PlantUML inside javascript documentation.</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_15","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#generated-documentation_1","title":"Generated Documentation","text":"<p>Simple tool to turn a swagger api spec into a uml class diagram.</p> <p>Convert OpenAPI specifications to PlantUML diagrams.</p> <p>Generate UML Diagrams for Given Swagger Definition.</p> <p>Use it with LyX.</p> <p>Reverse Engineering with PlantUML Dependency</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_16","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#generated-documentation_2","title":"Generated Documentation","text":"<p>Use it with\u00a0Almost Plain Text (APT)\u00a0files</p> <p>Generate diagrams with Javadoc</p> <p>Generate diagrams with Javadoc and PlantUML Taglet</p> <p>Use it with Doxygen</p> <p>Integrate it with docutils</p> <p>Use it with AsciiDoc</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_17","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#generated-documentation_3","title":"Generated Documentation","text":"<p>Use it with Asciidoctor</p> <p>Generate UML description from Java sources using a doclet</p> <p>Use it with Pegdown</p> <p>Use enhanced Doclet</p> <p>Generate UML from C# sources</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_18","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#generated-documentation_4","title":"Generated Documentation","text":"<p>Generate UML from Scaladoc</p> <p>Integrate it with Sphinx</p> <p>Generate PlantUML diagrams from\u00a0SqlALchemy\u00a0models</p> <p>Generate PlantUML diagram for Lua with LDoc</p> <p>Generate PlantUML diagrams from grails project sources</p> <p>Create PlantUML class diagrams from your PHP source.</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_19","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#generated-documentation_5","title":"Generated Documentation","text":"<p>Integrate PlantUML with ROBODoc.</p> <p>Integrate PlantUML with Pandoc.</p> <p>Integrate PlantUML with Sbt, the interactive build tool.</p> <p>Gulp plugin for automated generation of diagrams.</p> <p>Node.Js module for processing PlantUML</p> <p>Another Node.js module and CLI</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_20","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#generated-documentation_6","title":"Generated Documentation","text":"<p>Plugin for TypeDoc for TypeScript programs</p> <p>Maven plugin to inspect at compile time</p> <p>Show the recursive dependencies of a Helm Chart-</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_21","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#online-editors","title":"Online Editors","text":"<p>Create and update UML diagrams inside of Google Docs,</p> <p>Use the online servlet,\u00a0(Explanation here)</p> <p>Codeuml - design UML diagrams as fast as you can code</p> <p>PlantText UML Editor</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_22","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#online-editors_1","title":"Online Editors","text":"<p>Seeduml</p> <p>EtherPlant on Etherpad</p> <p>Emacs/vim online Editor</p> <p>TexWriting online Editor</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_23","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#other","title":"Other","text":"<p>Node.js CLI tool that allows for live-reloading and exporting PlantUML.</p> <p>Embed PlantUml diagrams in PowerPoint presentations.</p> <p>A Chrome / Firefox extension for visualizing PlantUML descriptions.</p> <p>Use the Docker repository</p> <p>PlantUML with GitLab.org / GitLab Community Edition</p> <p>PlantUML with Github Gist and Gitlab Support</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_24","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#other_1","title":"Other","text":"<p>A GitBucket plugin renders PlantUML sources</p> <p>Auto generating UML diagrams from SAP/ABAP code</p> <p>Puse editor</p> <p>PlantUML Chrome extension</p> <p>Cloud version with Renderist on herokuapp.com</p> <p>PlantUML QEditor written in Qt4</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_25","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#other_2","title":"Other","text":"<p>Sketchlet : a software designer's sketchbook</p> <p>Double-click on the .jar to run it</p> <p>PlantUML Editor: A fast and simple UML editor using WPF Dotnet</p> <p>Install your own server</p> <p>Use it with textcube</p> <p>Gravizo.com</p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_26","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-doxygen","title":"Plantuml How to integrate with Doxygen?","text":"<ul> <li>Plantuml search for @startuml and @enduml tags in your source code and generate the diagram.</li> <li>You need to specify the output directory for the generated images in the Doxygen configuration file with the environment variable DOC_IMG_PATH_UML.</li> <li>First plantuml runs the source code through the PlantUML compiler and generates the images.</li> <li>Then doxygen runs the source code through the Doxygen preprocessor and generates the documentation.</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_27","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-doxygen_1","title":"Plantuml How to integrate with Doxygen?","text":"<ul> <li>Folder structure should be as follow</li> <li>app<ul> <li>src</li> <li>main.cpp</li> <li>doxygen</li> <li>Resouces</li> <li>DoxyFile</li> <li>doxy_run.bat</li> <li>plantuml.jar</li> </ul> </li> <li>Example Application</li> <li>https://github.com/ucoruh/ce103-hw2-template/tree/f3e17bc466b4b4db50625ab6c8aee884fbe4345f/doxygen</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_28","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-doxygen_2","title":"Plantuml How to integrate with Doxygen?","text":"<ul> <li>Example Doxyfile</li> <li>https://github.com/ucoruh/ce103-hw2-template/blob/f3e17bc466b4b4db50625ab6c8aee884fbe4345f/doxygen/Doxyfile</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_29","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-doxygen_3","title":"Plantuml How to integrate with Doxygen?","text":"<ul> <li>Example Batch Script</li> </ul> <pre><code>SET GRAPHVIZ_DOT=\"C:\\Program Files\\Graphviz\\bin\\dot.exe\"\nSET DOXYGEN_EXE=\"C:\\Program Files\\doxygen\\bin\\doxygen.exe\"\nSET SOURCE_DIR=..\\source\nSET DOCS_DIR=..\\docs\nSET DOC_IMG_PATH_UML=..\\doxygen-plantuml\\resources\nSET DOC_IMG_PATH=../doxygen-plantuml/resources\n:: SET STRIP_PATH=\"C:xx\"\n</code></pre> <p>IF NOT EXIST plantuml.jar (     curl -o plantuml.jar \"https://github.com/plantuml/plantuml/releases/download/v1.2021.14/plantuml-1.2021.14.jar\" )</p> <p>java -jar \"plantuml.jar\" -v \"%DOCS_DIR%/.(puml)\" java -jar \"plantuml.jar\" -v -o \"%DOC_IMG_PATH_UML%\" \"%SOURCE_DIR%/.(c|cpp|doc|h|cs)\" doxygen Doxyfile pause</p> <pre><code>---\n\n&lt;style scoped&gt;section{ font-size: 25px; }&lt;/style&gt;\n\n## **Plantuml Integrations with other tools**\n### Plantuml How to integrate with Doxygen?\n\n``` c\n\n  /**\n   @name TestFunction(fnCE103HW2Lib)\n   @brief \\b Auto Generated Test Function\n   Auto Generated Test Function Has Doxygen and Plantuml Integration\n   Sample Web Page Link\n   @see https://www.cplusplus.com/reference/cstring/strcpy/\n   Sample Image AES Block Decryption Operation\n   @image html aes_enc_dec.png\n   @image rtf aes_enc_dec.png\n   @image latex aes_enc_dec.png\n   Sample Related Function Link\n   @see TestFunction (fnCE103HW2Lib)\n   &lt;b&gt; Plant UML Sample &lt;/b&gt; &lt;BR&gt;\n   @image html fnCE103HW2Lib.png\n   @image rtf fnCE103HW2Lib.png\n   @image latex fnCE103HW2Lib.png\n   &lt;!--\n    @startuml fnCE103HW2Lib.png\n    start\n    if (multiprocessor?) then (yes)\n      fork\n        :Treatment 1;\n      fork again\n        :Treatment 2;\n      end fork\n    else (monoproc)\n      :Treatment 1;\n      :Treatment 2;\n    endif\n    @enduml\n   --&gt;\n     @param [in] fia    [\\b unsigned char*] Binary Data Input\n     @param [in] fib    [\\b int] Binary Data Input Length\n     @param [out] fic    [\\b char*] Hex String Output Array\n      @retval [\\b int] operation result success 0 fail 1\n      Example Usage :\n       @code\n        #include &lt;stdio.h&gt;\n        #include &lt;string.h&gt;\n        int main (){\n          unsigned char data[]=\"\\x13\\x13\\x13x\\13\";\n         int dataLength = 4;\n          char dataHex[40];\n          if(fnCE103HW2Lib(data,dataLength,dataHex)!=0)\n         {\n           printf(\"Operation Failed!\");\n           return -1;\n         }\n        printf(\"Converted Data [%s]\",dataHex);\n          return 0;\n       }\n      @endcode\n  **/\nint fnCE103HW2Lib(unsigned char* fia, int fib, char* fic)\n{\n    //Empty Body...\n    return -1;\n}\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_30","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-doxygen_4","title":"Plantuml How to integrate with Doxygen?","text":"<pre><code>...\n   @image html fnCE103HW2Lib.png\n   @image rtf fnCE103HW2Lib.png\n   @image latex fnCE103HW2Lib.png\n   &lt;!--\n    @startuml fnCE103HW2Lib.png\n    start\n    if (multiprocessor?) then (yes)\n      fork\n        :Treatment 1;\n      fork again\n        :Treatment 2;\n      end fork\n    else (monoproc)\n      :Treatment 1;\n      :Treatment 2;\n    endif\n    @enduml\n   --&gt;\n...\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_31","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-doxygen_5","title":"Plantuml How to integrate with Doxygen?","text":""},{"location":"week-5/ce204-week-5/#built-in-feature","title":"Built-in Feature","text":"<ul> <li>https://www.doxygen.nl/manual/commands.html#cmdstartuml</li> </ul>"},{"location":"week-5/ce204-week-5/#startuml-optionoption-caption","title":"\\startuml ['{'option[,option]'}'] [\"caption\"] [=]","text":"<ul> <li>Starts a text fragment which should contain a valid description of a PlantUML diagram. </li> <li>See\u00a0https://plantuml.com/\u00a0for examples. The text fragment ends with\u00a0\\enduml.</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_32","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-doxygen_6","title":"Plantuml How to integrate with Doxygen?","text":""},{"location":"week-5/ce204-week-5/#built-in-feature_1","title":"Built-in Feature","text":"<p>Note</p> <ul> <li>You need to install Java and the PlantUML's jar file, if you want to use this command. When using PlantUML in\u00a0\u00a0you have to download some more\u00a0<code>jar</code>\u00a0files, </li> <li>for details see the PlantUML documentation. This also is valid for the\u00a0<code>&lt;engine&gt;</code>s\u00a0<code>latex</code>\u00a0and\u00a0<code>math</code>. </li> <li>The location of the PlantUML file should be specified using\u00a0PLANTUML_JAR_PATH. The other jar files should also reside in this directory.</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_33","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-doxygen_7","title":"Plantuml How to integrate with Doxygen?","text":""},{"location":"week-5/ce204-week-5/#built-in-feature_2","title":"Built-in Feature","text":"<ul> <li> <p>The use of the\u00a0<code>&lt;engine&gt;</code> <code>ditaa</code>\u00a0is not possible in\u00a0\u00a0as PlantUML only supports the\u00a0<code>png</code>\u00a0format and doxygen requires, temporary,\u00a0<code>eps</code>\u00a0output.</p> </li> <li> <p>Not all diagrams can be created with the PlantUML\u00a0<code>@startuml</code>\u00a0command but need another PlantUML\u00a0<code>@start...</code>\u00a0command. </p> </li> <li> <p>This will look like\u00a0<code>@start&lt;engine&gt;</code>\u00a0where currently supported are the following\u00a0<code>&lt;engine&gt;</code>s:\u00a0<code>uml</code>,\u00a0<code>bpm</code>,\u00a0<code>wire</code>,\u00a0<code>dot</code>,\u00a0<code>ditaa</code>,\u00a0<code>salt</code>,\u00a0<code>math</code>,\u00a0<code>latex</code>,\u00a0<code>gantt</code>,\u00a0<code>mindmap</code>,\u00a0<code>wbs</code>,\u00a0<code>yaml</code>,\u00a0<code>creole</code>,\u00a0<code>json</code>,\u00a0<code>flow</code>,\u00a0<code>board</code>\u00a0and\u00a0<code>git</code>. By default the\u00a0<code>&lt;engine&gt;</code>\u00a0is\u00a0<code>uml</code>. The\u00a0<code>&lt;engine&gt;</code>\u00a0can be specified as an option. </p> </li> <li> <p>Also the file to write the resulting image to can be specified by means of an option, see the description of the first (optional) argument for details. Of course only one\u00a0<code>&lt;engine&gt;</code>\u00a0can be specified and also the filename can only be specified once.</p> </li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_34","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-doxygen_8","title":"Plantuml How to integrate with Doxygen?","text":""},{"location":"week-5/ce204-week-5/#built-in-feature_3","title":"Built-in Feature","text":"<ul> <li>The first argument is optional and is for compatibility with running PlantUML as a preprocessing step before running doxygen, you can also add the name of the image file after\u00a0<code>\\startuml</code>\u00a0and inside curly brackets as option, i.e.</li> </ul> <pre><code>  @startuml{myimage.png} \"Image Caption\" width=5cm\n  Alice -&gt; Bob : Hello\n  @enduml\n</code></pre> <ul> <li>When the name of the image is specified, doxygen will generate an image with that name. Without the name doxygen will choose a name automatically.</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_35","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-doxygen_9","title":"Plantuml How to integrate with Doxygen?","text":""},{"location":"week-5/ce204-week-5/#built-in-feature_4","title":"Built-in Feature","text":"<ul> <li> <p>The second argument is optional and can be used to specify the caption that is displayed below the image. This argument has to be specified between quotes even if it does not contain any spaces. The quotes are stripped before the caption is displayed.</p> </li> <li> <p>The third argument is also optional and can be used to specify the width or height of the image. For a description of the possibilities see the paragraph\u00a0Size indication\u00a0with the\u00a0\\image\u00a0command.</p> </li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_36","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-doxygen_10","title":"Plantuml How to integrate with Doxygen?","text":""},{"location":"week-5/ce204-week-5/#built-in-feature_5","title":"Built-in Feature","text":"<p>Note</p> <ul> <li>doxygen creates a temporary file that is automatically removed unless the\u00a0DOT_CLEANUP\u00a0tag is set to\u00a0<code>NO</code>.</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_37","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-doxygen_11","title":"Plantuml How to integrate with Doxygen?","text":""},{"location":"week-5/ce204-week-5/#built-in-feature_6","title":"Built-in Feature","text":"<p>Here is an example of the use of the\u00a0<code>\\startuml</code>\u00a0command.</p> <pre><code>/** Sender class. Can be used to send a command to the server.\n\n* The receiver will acknowledge the command by calling Ack().\n\n* \\startuml\n\n* Sender-&gt;Receiver : Command()\n\n* Sender&lt;--Receiver : Ack()\n\n* \\enduml\n\n*/\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_38","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-doxygen_12","title":"Plantuml How to integrate with Doxygen?","text":""},{"location":"week-5/ce204-week-5/#built-in-feature_7","title":"Built-in Feature","text":"<pre><code>class Sender\n\n{\n\npublic:\n\n/** Acknowledgment from server */\n\nvoid Ack(bool ok);\n\n};\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_39","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-doxygen_13","title":"Plantuml How to integrate with Doxygen?","text":""},{"location":"week-5/ce204-week-5/#built-in-feature_8","title":"Built-in Feature","text":"<pre><code>/** Receiver class. Can be used to receive and execute commands.\n\n* After execution of a command, the receiver will send an acknowledgment\n\n* \\startuml\n\n* Receiver&lt;-Sender : Command()\n\n* Receiver--&gt;Sender : Ack()\n\n* \\enduml\n\n*/\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_40","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-doxygen_14","title":"Plantuml How to integrate with Doxygen?","text":""},{"location":"week-5/ce204-week-5/#built-in-feature_9","title":"Built-in Feature","text":"<pre><code>class Receiver\n\n{\n\npublic:\n\n/** Executable a command on the server */\n\nvoid Command(int commandId);\n\n};\n</code></pre>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_41","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-eclipse","title":"Plantuml How to integrate with Eclipse?","text":""},{"location":"week-5/ce204-week-5/#information-about-the-plantuml-eclipse-plugin","title":"Information about the PlantUML Eclipse Plugin","text":"<ul> <li> <p>The Eclipse Plugin is developed and maintained by\u00a0Hallvard Tr\u00e6tteberg\u00a0(many thanks for his work!).</p> </li> <li> <p>Like the core library PlantUML itself, it is\u00a0open source\u00a0and the plugin is distributed under EPL license.</p> </li> <li> <p>The source code\u00a0is hosted on GitHub.</p> </li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_42","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-eclipse_1","title":"Plantuml How to integrate with Eclipse?","text":""},{"location":"week-5/ce204-week-5/#how-to-use-it","title":"How to use it?","text":"<ul> <li>First, you have to display the\u00a0PlantUML View\u00a0(click the\u00a0Window\u00a0menu):</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_43","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-eclipse_2","title":"Plantuml How to integrate with Eclipse?","text":""},{"location":"week-5/ce204-week-5/#how-to-use-it_1","title":"How to use it?","text":"<p>This view displays automatically the class you are working on:</p> <p></p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_44","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-eclipse_3","title":"Plantuml How to integrate with Eclipse?","text":""},{"location":"week-5/ce204-week-5/#how-to-use-it_2","title":"How to use it?","text":"<p>If you write some comment in\u00a0PlantUML language, the corresponding diagram is automatically displayed. And if you have several comments with diagrams, it selects the one the cursor is in.</p> <p></p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_45","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-eclipse_4","title":"Plantuml How to integrate with Eclipse?","text":""},{"location":"week-5/ce204-week-5/#how-to-use-it_3","title":"How to use it?","text":"<p>In the\u00a0Preferences\u00a0Windows, you can also set up\u00a0GraphViz path if needed:</p> <p></p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_46","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-eclipse_5","title":"Plantuml How to integrate with Eclipse?","text":""},{"location":"week-5/ce204-week-5/#how-to-install-it","title":"How to install it?","text":"<p>To install the plugin, you have to:</p> <ul> <li>Go to\u00a0Help/Software Update/Find and install...\u00a0or\u00a0Help/Install new software...</li> <li>Create (if needed) or choose the following site as update site:\u00a0<code>http://hallvard.github.io/plantuml/</code> </li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_47","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-eclipse_6","title":"Plantuml How to integrate with Eclipse?","text":""},{"location":"week-5/ce204-week-5/#how-to-install-it_1","title":"How to install it?","text":"<ul> <li>Add Repository <code>http://hallvard.github.io/plantuml/</code> to Eclipse</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_48","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-eclipse_7","title":"Plantuml How to integrate with Eclipse?","text":""},{"location":"week-5/ce204-week-5/#how-to-install-it_2","title":"How to install it?","text":"<ul> <li>Select PlantUML features: </li> <li>Restart Eclipse</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_49","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-eclipse_8","title":"Plantuml How to integrate with Eclipse?","text":""},{"location":"week-5/ce204-week-5/#how-to-improve-it","title":"How to improve it?","text":"<p>The plugin is not limited to Java source file, it also works with\u00a0Ecore**/Xcore\u00a0files.</p> <p>So that you can see the corresponding class diagram in a view side-by-side the\u00a0Ecore**/Xcore\u00a0editor :</p> <p></p>"},{"location":"week-5/ce204-week-5/#plantuml-integrations-with-other-tools_50","title":"Plantuml Integrations with other tools","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-eclipse_9","title":"Plantuml How to integrate with Eclipse?","text":""},{"location":"week-5/ce204-week-5/#how-to-improve-it_1","title":"How to improve it?","text":"<ul> <li>If you want to support other file types, you can implement a new extension to do so. You can have a look at\u00a0the current xcore implementation.</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-visual-studio-code","title":"Plantuml How to integrate with Visual Studio Code?","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-visual-studio-code_1","title":"Plantuml How to integrate with Visual Studio Code?","text":"<p>TBD</p>"},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-visual-studio","title":"Plantuml How to integrate with Visual Studio?","text":""},{"location":"week-5/ce204-week-5/#plantuml-how-to-integrate-with-visual-studio_1","title":"Plantuml How to integrate with Visual Studio?","text":"<p>TBD</p>"},{"location":"week-5/ce204-week-5/#plantuml-uml-diagrams","title":"Plantuml UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#plantuml-uml-diagrams_1","title":"Plantuml UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#sequence-diagram","title":"Sequence diagram","text":"<p>TBD</p> <ul> <li>https://plantuml.com/sequence-diagram</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-uml-diagrams_2","title":"Plantuml UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#usecase-diagram","title":"Usecase diagram","text":"<p>TBD</p> <ul> <li>https://plantuml.com/use-case-diagram</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-uml-diagrams_3","title":"Plantuml UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#class-diagram","title":"Class diagram","text":"<p>TBD</p> <ul> <li>https://plantuml.com/class-diagram</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-uml-diagrams_4","title":"Plantuml UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#object-diagram","title":"Object diagram","text":"<p>TBD</p> <ul> <li>https://plantuml.com/object-diagram</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-uml-diagrams_5","title":"Plantuml UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#activity-diagram-here-is-the-legacy-syntax","title":"Activity diagram (here is the legacy syntax)","text":"<p>TBD</p> <ul> <li>https://plantuml.com/activity-diagram-beta</li> <li>https://plantuml.com/activity-diagram-legacy</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-uml-diagrams_6","title":"Plantuml UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#component-diagram","title":"Component diagram","text":"<p>TBD</p> <ul> <li>https://plantuml.com/component-diagram</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-uml-diagrams_7","title":"Plantuml UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#deployment-diagram","title":"Deployment diagram","text":"<p>TBD</p> <ul> <li>https://plantuml.com/deployment-diagram</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-uml-diagrams_8","title":"Plantuml UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#state-diagram","title":"State diagram","text":"<p>TBD</p> <ul> <li>https://plantuml.com/state-diagram</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-uml-diagrams_9","title":"Plantuml UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#timing-diagram","title":"Timing diagram","text":"<p>TBD</p> <ul> <li>https://plantuml.com/timing-diagram</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-c4-model-diagrams","title":"Plantuml C4 Model Diagrams","text":""},{"location":"week-5/ce204-week-5/#plantuml-c4-model-diagrams_1","title":"Plantuml C4 Model Diagrams","text":"<ul> <li>Context Diagram</li> <li>Container Diagram</li> <li>Component Diagram</li> <li> <p>Class Diagram</p> </li> <li> <p>https://crashedmind.github.io/PlantUMLHitchhikersGuide/C4/c4.html</p> </li> <li>https://crashedmind.github.io/PlantUMLHitchhikersGuide/C4/C4Stdlib.html</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-c4-model-diagrams_2","title":"Plantuml C4 Model Diagrams","text":""},{"location":"week-5/ce204-week-5/#context-diagram","title":"Context Diagram","text":"<p>TBD</p>"},{"location":"week-5/ce204-week-5/#plantuml-c4-model-diagrams_3","title":"Plantuml C4 Model Diagrams","text":""},{"location":"week-5/ce204-week-5/#container-diagram","title":"Container Diagram","text":"<p>TBD</p>"},{"location":"week-5/ce204-week-5/#plantuml-c4-model-diagrams_4","title":"Plantuml C4 Model Diagrams","text":""},{"location":"week-5/ce204-week-5/#component-diagram_1","title":"Component Diagram","text":"<p>TBD</p>"},{"location":"week-5/ce204-week-5/#plantuml-c4-model-diagrams_5","title":"Plantuml C4 Model Diagrams","text":""},{"location":"week-5/ce204-week-5/#class-diagram_1","title":"Class Diagram","text":"<p>TBD</p>"},{"location":"week-5/ce204-week-5/#plantuml-none-uml-diagrams","title":"Plantuml None-UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#plantuml-none-uml-diagrams_1","title":"Plantuml None-UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#json-data","title":"JSON data","text":"<p>TBD</p> <ul> <li>https://plantuml.com/json</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-none-uml-diagrams_2","title":"Plantuml None-UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#yaml-data","title":"YAML data","text":"<p>TBD</p> <ul> <li>https://plantuml.com/yaml</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-none-uml-diagrams_3","title":"Plantuml None-UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#network-diagram-nwdiag","title":"Network diagram (nwdiag)","text":"<p>TBD</p> <ul> <li>https://plantuml.com/nwdiag</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-none-uml-diagrams_4","title":"Plantuml None-UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#wireframe-graphical-interface-or-ui-mockups-salt","title":"Wireframe graphical interface or UI mockups (salt)","text":"<p>TBD</p> <ul> <li>https://plantuml.com/salt</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-none-uml-diagrams_5","title":"Plantuml None-UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#archimate-diagram","title":"Archimate diagram","text":"<p>TBD</p> <ul> <li>https://plantuml.com/archimate-diagram</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-none-uml-diagrams_6","title":"Plantuml None-UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#specification-and-description-language-sdl","title":"Specification and Description Language (SDL)","text":"<p>TBD</p> <ul> <li>https://plantuml.com/activity-diagram-beta#sdl</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-none-uml-diagrams_7","title":"Plantuml None-UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#ditaa-diagram","title":"Ditaa diagram","text":"<p>TBD</p> <ul> <li>https://plantuml.com/ditaa</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-none-uml-diagrams_8","title":"Plantuml None-UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#gantt-diagram","title":"Gantt diagram","text":"<p>TBD</p> <ul> <li>https://plantuml.com/gantt-diagram</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-none-uml-diagrams_9","title":"Plantuml None-UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#mindmap-diagram","title":"MindMap diagram","text":"<p>TBD</p> <ul> <li>https://plantuml.com/mindmap-diagram</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-none-uml-diagrams_10","title":"Plantuml None-UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#work-breakdown-structure-diagram-wbs","title":"Work Breakdown Structure diagram (WBS)","text":"<p>TBD</p> <ul> <li>https://plantuml.com/wbs-diagram</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-none-uml-diagrams_11","title":"Plantuml None-UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#mathematic-with-asciimath-or-jlatexmath-notation","title":"Mathematic with AsciiMath or JLaTeXMath notation","text":"<p>TBD</p> <ul> <li>https://plantuml.com/ascii-math</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-none-uml-diagrams_12","title":"Plantuml None-UML Diagrams","text":""},{"location":"week-5/ce204-week-5/#entity-relationship-diagram-ieer","title":"Entity Relationship diagram (IE/ER)","text":"<p>TBD</p> <ul> <li>https://plantuml.com/ie-diagram</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-preprocessing","title":"PlantUML Preprocessing","text":""},{"location":"week-5/ce204-week-5/#plantuml-preprocessing_1","title":"PlantUML Preprocessing","text":"<p>TBD</p> <ul> <li>https://plantuml.com/preprocessing</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-icon-diagrams-support-plantuml-stdlib","title":"Plantuml Icon Diagrams Support (PlantUML Stdlib)","text":""},{"location":"week-5/ce204-week-5/#plantuml-icon-diagrams-support-plantuml-stdlib_1","title":"Plantuml Icon Diagrams Support (PlantUML Stdlib)","text":"<p>TBD</p> <ul> <li>https://plantuml.com/stdlib</li> <li>https://crashedmind.github.io/PlantUMLHitchhikersGuide/NetworkUsersMachines/NetworkUsersMachines.html</li> </ul>"},{"location":"week-5/ce204-week-5/#calling-plantuml-from-java","title":"Calling PlantUML from Java","text":"<p>You can easily integrate\u00a0PlantUML\u00a0with your own code by adding\u00a0plantuml.jar\u00a0in your classpath.</p>"},{"location":"week-5/ce204-week-5/#calling-plantuml-from-java_1","title":"Calling PlantUML from Java","text":""},{"location":"week-5/ce204-week-5/#png-generation-from-a-string","title":"PNG generation from a String","text":"<p>If your diagram description is stored in a\u00a0<code>String</code>, you can use the\u00a0<code>SourceStringReader</code>\u00a0class to generate some PNG file.</p> <pre><code>import net.sourceforge.plantuml.SourceStringReader;\nOutputStream png = ...;\nString source = \"@startuml\\n\";\nsource += \"Bob -&gt; Alice : hello\\n\";\nsource += \"@enduml\\n\";\n\nSourceStringReader reader = new SourceStringReader(source);\n// Write the first image to \"png\"\nString desc = reader.outputImage(png).getDescription();\n// Return a null string if no generation\n</code></pre>"},{"location":"week-5/ce204-week-5/#calling-plantuml-from-java_2","title":"Calling PlantUML from Java","text":""},{"location":"week-5/ce204-week-5/#png-generation-from-a-file","title":"PNG generation from a File","text":"<p>If your diagram description is stored in a\u00a0<code>File</code>, you can use the\u00a0<code>SourceFileReader</code>\u00a0class to generate some PNG file.</p> <pre><code>File source = ...;\nSourceFileReader reader = new SourceFileReader(source);\nList&lt;GeneratedImage&gt; list = reader.getGeneratedImages();\n// Generated files\nFile png = list.get(0).getPngFile();\n</code></pre>"},{"location":"week-5/ce204-week-5/#calling-plantuml-from-java_3","title":"Calling PlantUML from Java","text":""},{"location":"week-5/ce204-week-5/#svg-generation-from-a-string","title":"SVG generation from a String","text":"<p>If your diagram description is stored in a\u00a0<code>String</code>, you can use the\u00a0<code>SourceStringReader</code>\u00a0class to generate some SVG file.</p> <pre><code>String source = \"@startuml\\n\";\nsource += \"Bob -&gt; Alice : hello\\n\";\nsource += \"@enduml\\n\";\n\nSourceStringReader reader = new SourceStringReader(source);\nfinal ByteArrayOutputStream os = new ByteArrayOutputStream();\n// Write the first image to \"os\"\nString desc = reader.generateImage(os, new FileFormatOption(FileFormat.SVG));\nos.close();\n\n// The XML is stored into svg\nfinal String svg = new String(os.toByteArray(), Charset.forName(\"UTF-8\"));\n</code></pre>"},{"location":"week-5/ce204-week-5/#references","title":"References","text":"<ul> <li>Plantuml Official Web Site</li> <li>Plantuml Wikipedia</li> <li>Plantuml GitHub</li> <li>Plantuml Online Server</li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-credits","title":"Plantuml Credits","text":"<ul> <li>Original idea: Arnaud Roques </li> <li>Word Macro: Alain Bertucat &amp; Matthieu Sabatier </li> <li>Word Add-in: Adriaan van den Brand </li> <li>J2V8 &amp; viz.js integration: Andreas Studer </li> <li>Official Eclipse Plugin: Hallvard Tr\u00e6tteberg </li> <li>Original Eclipse Plugin: Claude Durif &amp; Anne Pecoil </li> </ul>"},{"location":"week-5/ce204-week-5/#plantuml-credits_1","title":"Plantuml Credits","text":"<ul> <li>Servlet &amp; XWiki: Maxime Sinclair </li> <li>Docker: David Ducatel </li> <li>AWS lib: Chris Passarello </li> <li>Stdlib Icons: tupadr3 </li> <li>Site design: Raphael Cotisson </li> <li>Logo: Benjamin Croizet</li> </ul>"},{"location":"week-6/ce204-week-6/","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-6/ce204-week-6/#cen206-object-oriented-programming-formerly-ce204","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-6/ce204-week-6/#week-6-umple-part-1","title":"Week-6 (UMPLE - Part 1)","text":""},{"location":"week-6/ce204-week-6/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC-PDF, DOC-DOCX, SLIDE, PPTX,</p>"},{"location":"week-6/ce204-week-6/#umple","title":"UMPLE","text":""},{"location":"week-6/ce204-week-6/#common-scope","title":"Common Scope","text":"<ul> <li>What is UMPLE?</li> <li>What is its purpose?</li> <li>How to create a UML model with UMPLE?</li> <li>What is philosophy of UMPLE?</li> </ul>"},{"location":"week-6/ce204-week-6/#common-scope_1","title":"Common Scope","text":"<ul> <li>How to use UMPLE?</li> <li>UMPLE Online</li> <li>Command-Line</li> <li>Eclipse Plugin</li> <li>Visual Studio Code Plugin</li> </ul>"},{"location":"week-6/ce204-week-6/#common-scope_2","title":"Common Scope","text":"<ul> <li>How to learn UMPLE?</li> <li>Online Documentations</li> <li>Video Tutorials</li> <li>UMPLE Community</li> </ul>"},{"location":"week-6/ce204-week-6/#common-scope_3","title":"Common Scope","text":"<ul> <li>Overview of the basics of UMPLE</li> <li>Associations in UMPLE</li> <li>State machines in UMPLE</li> <li>Product lines in UMPLE: Mixins and Mixsets</li> <li>Other separation of concerns mechanisms: (Aspects and traits) and their code generation</li> <li>Other advanced features of UMPLE</li> <li>Hands-on exercise developing versions of a concurrent system using state machines and product lines.</li> <li>UMPLE as written in itself: A case study.</li> </ul>"},{"location":"week-6/ce204-week-6/#common-scope_4","title":"Common Scope","text":"<ul> <li>Introduction: </li> <li>Overview of Model-Driven Development</li> <li>Languages / Tools / Motivation for UMPLE</li> <li>Class Modeling</li> <li>Tools / Attributes / Methods / Associations / Exercises /      Patterns</li> <li>Modeling with State Machines</li> <li>Basics / Concurrency / Case study and exercises</li> <li>Separation of Concerns in Models</li> <li>Mixins / Aspects / Traits</li> <li>More Case Studies and Hands-on Exercises</li> <li>UMPLE in itself / Real-Time / Data Oriented</li> <li>Conclusion</li> </ul>"},{"location":"week-6/ce204-week-6/#outline-umple-part-1","title":"Outline - UMPLE Part 1","text":"<ul> <li>Introduction to UMPLE</li> <li>Motivation for developing UMPLE</li> <li>Some key UMPLE innovations</li> <li>Using UMPLE</li> <li>UMPLE Philosophy</li> <li>UMPLE Class Modeling</li> </ul>"},{"location":"week-6/ce204-week-6/#outline-umple-part-1_1","title":"Outline - UMPLE Part 1","text":"<ul> <li>UMPLE Online Usage</li> <li>UMPLE Attributes</li> <li>UMPLE Generalization and interfaces</li> <li>UMPLE Methods</li> <li>UMPLE Associations</li> </ul>"},{"location":"week-6/ce204-week-6/#introduction-to-umple","title":"Introduction to UMPLE","text":""},{"location":"week-6/ce204-week-6/#umple-simple-ample-uml-programming-language","title":"UMPLE: Si&amp;mple&amp;, A&amp;mple&amp;, &amp;UM&amp;L &amp;P&amp;rogramming &amp;L&amp;anguag&amp;e&amp;","text":"<ul> <li> <p>Open source textual modelling tool set for 3 platforms</p> </li> <li> <p>Command line compiler</p> </li> <li> <p>Web-based tool (UMPLEOnline) for demos and education</p> </li> <li> <p>Eclipse plugin</p> </li> <li> <p>Code generator for UML ++</p> </li> <li> <p>Infinitely nested state machines, with concurrency</p> </li> <li> <p>Proper referential integrity and multiplicity constraints on  associations</p> </li> <li> <p>Traits, mixins, aspects for modularity</p> </li> <li> <p>Text generation templates, patterns, traits</p> </li> <li> <p>Pre-processor to add UML, patterns and other features on top of    Java, PhP, C++ and other languages</p> </li> </ul>"},{"location":"week-6/ce204-week-6/#umple-simple-ample-uml-programming-language_1","title":"UMPLE: Si&amp;mple&amp;, A&amp;mple&amp;, &amp;UM&amp;L &amp;P&amp;rogramming &amp;L&amp;anguag&amp;e&amp;","text":"<ul> <li>Open source textual modeling tool and code generator</li> <li>Adds modeling to Java,. C++, PHP</li> <li>A sample of features<ul> <li>Referential integrity on associations</li> <li>Code generation for patterns</li> <li>Blending of conventional code with models</li> <li>Infinitely nested state machines, with concurrency</li> <li>Separation of concerns for models: mixins, traits, mixsets, aspects</li> </ul> </li> <li>Tools</li> <li>Command line compiler</li> <li>Web-based tool (UMPLEOnline) for demos and education</li> <li>Plugins for Eclipse and other tools</li> </ul>"},{"location":"week-6/ce204-week-6/#what-are-we-going-to-learn-about-in-this-tutorial-what-will-you-be-able-to-do","title":"What Are we Going to Learn About in This Tutorial? What Will You Be Able To Do?","text":"<ul> <li>Modeling using class diagrams</li> <li>Attributes, Associations, Methods, Patterns, Constraints</li> <li>Modeling using state diagrams</li> <li>States, Events, Transitions, Guards, Nesting, Actions, Activities</li> <li>Concurrency</li> <li>Separation of Concerns in Models</li> <li>Mixins, Traits, Aspects, Mixsets</li> <li>Practice with a examples focusing on state machines and product lines</li> <li>Building a complete system in UMPLE</li> </ul>"},{"location":"week-6/ce204-week-6/#what-technology-will-you-need","title":"What Technology Will You Need?","text":"<ul> <li>As a minimum: Any web browser.</li> <li>For a richer command-line experience</li> <li>A computer (laptop) with Java 8-14 JDK</li> <li>Mac and Linux are the easiest platforms, but Windows also will work</li> <li>Download UMPLE Jar at http://dl.UMPLE.org</li> <li>You can also run UMPLE in Docker: http://docker.UMPLE.org</li> </ul>"},{"location":"week-6/ce204-week-6/#key-websites","title":"Key Websites","text":"<ul> <li> <p>Entry-point: https://www.UMPLE.org</p> </li> <li> <p>Everything you need to get started with UMPLE</p> </li> <li> <p>Github: https://github.com/UMPLE/UMPLE</p> </li> <li> <p>Source code and examples for UMPLE</p> </li> <li> <p>UMPLE Online: https://try.UMPLE.org</p> </li> <li> <p>Online application for UMPLE</p> </li> </ul>"},{"location":"week-6/ce204-week-6/#key-websites-another-way","title":"Key Websites (Another way)","text":"<p>The UMPLEOnline web interface is at try.UMPLE.org</p> <p>The user manual is at manual.UMPLE.org</p> <p>The UMPLE home page is at www.UMPLE.org</p> <p>UMPLE download page: dl.UMPLE.org</p>"},{"location":"week-6/ce204-week-6/#motivation-for-developing-umple","title":"Motivation for developing UMPLE","text":""},{"location":"week-6/ce204-week-6/#motivation-for-developing-umple-1","title":"Motivation for developing UMPLE (1)","text":"<p>Designers want the best combination of features: </p> <ul> <li> <p>Textual editing and blending with other languages </p> </li> <li> <p>Ability to use in an agile process </p> </li> <li> <p>Write tests, continuous integration, versioning </p> </li> <li> <p>Combine the best of agility and modeling </p> </li> <li> <p>Excellent code generation </p> </li> <li> <p>A complete generation of real systems (including itself) </p> </li> <li> <p>Multi-platform (command line, Eclipse, VsCode, Web) </p> </li> <li> <p>Practical and easy to use for developers </p> </li> <li> <p>Including great documentation </p> </li> <li> <p>Open source</p> </li> </ul>"},{"location":"week-6/ce204-week-6/#motivation-for-developing-umple-2","title":"Motivation for developing UMPLE (2)","text":"<p>Many existing tools: </p> <ul> <li> <p>Lacked in usability</p> </li> <li> <p>Awkward to edit diagrams</p> </li> <li> <p>Many steps to do a task</p> </li> <li> <p>Lengthy learning process</p> </li> <li> <p>Lack in ongoing support</p> </li> <li> <p>Could be enhanced by us perhaps, but we would be tied to key decisions (e.g. Eclipse-only)</p> </li> </ul>"},{"location":"week-6/ce204-week-6/#some-key-umple-innovations","title":"Some key UMPLE innovations","text":""},{"location":"week-6/ce204-week-6/#some-key-umple-innovations_1","title":"Some key UMPLE innovations","text":"<ul> <li> <p>Model is code</p> </li> <li> <p>Traditional code is embedded in model</p> </li> <li> <p>No need to edit generated code</p> </li> <li> <p>No round-trip engineering</p> </li> </ul>"},{"location":"week-6/ce204-week-6/#using-umple","title":"Using UMPLE","text":""},{"location":"week-6/ce204-week-6/#using-umple_1","title":"Using UMPLE","text":"<ul> <li> <p>We will mostly be using</p> </li> <li> <p>UMPLEonline</p> <ul> <li> <p>In a web browser: http://try.UMPLE.org</p> </li> <li> <p>Or in Docker: http://docker.UMPLE.org</p> </li> </ul> </li> <li> <p>UMPLE on the command line: http://dl.UMPLE.org</p> <ul> <li> <p>Needs Java 8 JDK on the command line: </p> </li> <li> <p>http://bit.ly/1lO1FSV</p> <ul> <li>Java 9 works well too</li> </ul> </li> </ul> </li> </ul>"},{"location":"week-6/ce204-week-6/#docker-container-experimental","title":"Docker Container Experimental","text":"<pre><code>mkdir ~/src &amp;&amp; cd ~/src &amp;&amp;  git clone git@github.com:UMPLE/UMPLE.git\n</code></pre> <pre><code>docker run -i -t -v `pwd`:/src UMPLE/UMPLE:0.4.0 bash\n</code></pre>"},{"location":"week-6/ce204-week-6/#using-umple_2","title":"Using UMPLE","text":"<ul> <li> <p>Optional:</p> </li> <li> <p>UMPLE in Eclipse </p> <ul> <li>https://github.com/UMPLE/UMPLE/wiki/InstallEclipsePlugin</li> </ul> </li> <li> <p>cmake and gcc for compiling C++ code</p> </li> </ul>"},{"location":"week-6/ce204-week-6/#umple-philosophy","title":"UMPLE Philosophy","text":""},{"location":"week-6/ce204-week-6/#umple-philosophy-1-4","title":"UMPLE Philosophy 1-4","text":"<ul> <li> <p>P1. Modeling is programming and vice versa</p> </li> <li> <p>P2. An UMPLE programmer should never need to edit generated code to accomplish any task.</p> </li> <li> <p>P3. The UMPLE compiler can accept and generate code that uses nothing but UML abstractions. </p> </li> <li> <p>The above is the inverse of the following</p> </li> <li> <p>P4. A program without UMPLE features can be compiled by an UMPLE compiler.</p> </li> <li> <p>e.g. input Java results in the same as output</p> </li> </ul>"},{"location":"week-6/ce204-week-6/#umple-philosophy-5-8","title":"UMPLE Philosophy 5-8","text":"<ul> <li> <p>P5. A programmer can incrementally add UMPLE features to an existing program</p> </li> <li> <p>Umplification</p> </li> <li> <p>P6. UMPLE extends the base language in a minimally invasive and safe way.</p> </li> <li> <p>P7. UMPLE features can be created and viewed diagrammatically or textually</p> </li> <li> <p>P8. UMPLE goes beyond UML</p> </li> </ul>"},{"location":"week-6/ce204-week-6/#umple-class-modeling","title":"UMPLE Class Modeling","text":""},{"location":"week-6/ce204-week-6/#umple-class-models-quick-overview","title":"UMPLE Class Models - Quick Overview","text":"<ul> <li> <p>Key elements:</p> </li> <li> <p>Classes</p> </li> <li> <p>Attributes</p> </li> <li> <p>Associations</p> </li> <li> <p>Generalizations</p> </li> <li> <p>Methods</p> </li> <li> <p>We will look at all these using examples via UMPLE ONLINE</p> </li> <li> <p>UMPLE code/models are stored in files with suffix .ump</p> </li> </ul>"},{"location":"week-6/ce204-week-6/#exercise-compiling-and-changing-a-model","title":"Exercise: Compiling and changing a model","text":"<ul> <li> <p>Look at the example at the bottom of  </p> </li> <li> <p>http://helloworld.UMPLE.org (also on next slide)</p> <ul> <li>Observe: attribute, association, class hierarchy, mixin</li> </ul> </li> <li> <p>Click on Load the above code into UMPLEOnline</p> </li> <li> <p>Observe and modify the diagram</p> </li> <li>Add an attribute</li> <li>Make a multiplicity error, then undo</li> <li>Generate code and take a look</li> <li>Download, compile and run if you want</li> </ul>"},{"location":"week-6/ce204-week-6/#hello-world-example-2-in-the-user-manual","title":"Hello World Example 2 in the User Manual","text":""},{"location":"week-6/ce204-week-6/#key-tools","title":"Key tools:","text":"<ul> <li>UMPLE Online</li> <li>Command-Line</li> <li>User Manual</li> </ul>"},{"location":"week-6/ce204-week-6/#hello-world-example-2-in-umpleonline","title":"Hello World example 2 in UMPLEOnline","text":""},{"location":"week-6/ce204-week-6/#exploration-of-umpleonline","title":"Exploration of UMPLEOnline","text":"<ul> <li>Explore class diagram examples</li> <li>Options</li> <li><code>T</code> or <code>Control-t</code> (hide and show text)</li> <li><code>D</code> or <code>Control-d</code> (hide and show diagram)</li> <li><code>A</code>, <code>M</code> to hide and show attributes, methods</li> <li>Default diagram types<ul> <li><code>G</code>/<code>Control-g</code> (Graphviz), <code>S</code>/<code>Control-s</code> (State Diagram)</li> <li><code>E</code>/<code>Control-e</code> (Editable class diagram)</li> </ul> </li> <li>Generate code and look at the results</li> <li>In UMPLE you never should modify generated code</li> <li>It is designed to be readable for educational purposes</li> </ul>"},{"location":"week-6/ce204-week-6/#use-of-the-umpleonline-docker-image","title":"Use of the UMPLEOnline Docker image","text":"<ul> <li> <p>UMPLE's server can handle <code>80,000</code> transactions per hour</p> </li> <li> <p>Code generations, edits</p> </li> <li> <p>But needs a good Internet connection   (sometimes hundreds of students have assignments due)</p> </li> <li> <p>To maximize speed of UMPLEOnline run it in your local machine:</p> </li> <li> <p>Follow the instructions at http://docker.UMPLE.org</p> </li> </ul>"},{"location":"week-6/ce204-week-6/#demo-of-compiling-on-the-command-line","title":"Demo of compiling on the command line","text":"<ul> <li>To compile on the command line you will need Java 8</li> <li>Download UMPLE from http://dl.UMPLE.org</li> <li>Basic compilation</li> </ul> <pre><code>java -jar UMPLE.jar model.ump\n</code></pre> <ul> <li>Help for features and commands</li> </ul> <pre><code>java -jar UMPLE.jar --help\n</code></pre> <ul> <li>To generate and compile the java to a final system</li> </ul> <pre><code>java \u2013jar UMPLE.jar model.ump -c -\n</code></pre>"},{"location":"week-6/ce204-week-6/#quick-walkthrough-of-the-user-manual","title":"Quick walkthrough of the user manual","text":"<ul> <li>http://manual.UMPLE.org</li> </ul> <p>Note in particular</p> <ul> <li>Key sections: </li> <li>attributes, </li> <li>associations, </li> <li>state machines</li> <li>Grammar</li> <li>Generated API</li> <li>Errors and warnings</li> <li>Editing pages in github</li> </ul>"},{"location":"week-6/ce204-week-6/#umple-attributes","title":"UMPLE Attributes","text":"<ul> <li>More than just variables</li> <li>http://attributes.UMPLE.org</li> </ul>"},{"location":"week-6/ce204-week-6/#attributes","title":"Attributes","text":""},{"location":"week-6/ce204-week-6/#attributes-exercise-1","title":"Attributes Exercise #1","text":""},{"location":"week-6/ce204-week-6/#attributes_1","title":"Attributes","text":"<ul> <li> <p>\"Instance variables\"</p> </li> <li> <p>Part of the state of an object</p> </li> <li> <p>Simple data that will always be present in each instance</p> </li> <li> <p>Specified like a Java or C++ field or member variable</p> </li> <li> <p>But, intended to be more abstract!</p> </li> <li> <p>Example, with an initial value</p> </li> </ul> <pre><code>a = \"init value\";\n</code></pre>"},{"location":"week-6/ce204-week-6/#attributes_2","title":"Attributes","text":"<ul> <li> <p>As in UML, more abstract than instance variables</p> </li> <li> <p>Always private by default</p> </li> <li> <p>Should only be accessed get, set methods </p> </li> <li> <p>Can be stereotyped (upcoming slides) to affect code  generation</p> </li> <li> <p>Can have aspects applied (discussed later)</p> </li> <li> <p>Can be constrained (discussed later)</p> </li> </ul>"},{"location":"week-6/ce204-week-6/#code-generation-from-attributes","title":"Code generation from attributes","text":"<ul> <li>Default code generation</li> <li>Generates a <code>getName()</code> and <code>setName()</code> method for <code>name</code><ul> <li><code>public</code></li> </ul> </li> <li>Creates an arguments in the class constructor by default</li> <li>An attribute is <code>private</code> to the class by default</li> <li>Should only be accessed get, set methods</li> </ul>"},{"location":"week-6/ce204-week-6/#code-generation-javadocs","title":"Code Generation (JavaDocs)","text":""},{"location":"week-6/ce204-week-6/#code-generation-patterns","title":"Code Generation Patterns","text":"<ul> <li> <p>Attributes</p> </li> <li> <p>Set/Get (UB = 1)</p> </li> <li>Add/Remove/NumberOf/IndexOf/Get (UB &gt; 1)</li> <li>Lazy immutability</li> <li>Default values</li> <li>Constants</li> <li>Before / After cod</li> </ul> <p>UB = upper bound</p>"},{"location":"week-6/ce204-week-6/#code-generation-patterns_1","title":"Code Generation Patterns","text":"<ul> <li> <p>Associations</p> </li> <li> <p>Set/Get (UB = 1)</p> </li> <li>Add/Remove/NumberOf/IndexOf/Get (UB &gt; 1)</li> <li>Referential Integrity</li> <li>Multiplicity Constraints</li> <li>42 different cases</li> </ul> <p>UB = upper bound</p>"},{"location":"week-6/ce204-week-6/#code-generation-semantics","title":"Code Generation (Semantics)","text":"<ul> <li>http://api.UMPLE.org/</li> </ul>"},{"location":"week-6/ce204-week-6/#umple-builtin-datatypes","title":"UMPLE builtin datatypes","text":"<pre><code>String // (default if none specified)\nInteger\nFloat\nDouble\nBoolean\nTime\nDate\n</code></pre> <ul> <li>The above will generate appropriate code in Java, C++ etc.</li> <li>e.g. Integer becomes int</li> <li>Other (native) types can be used but without guaranteed correctness</li> </ul>"},{"location":"week-6/ce204-week-6/#attribute-stereotypes-1","title":"Attribute stereotypes (1)","text":"<ul> <li>Code generation can be controlled through stereotypes:</li> <li>lazy - don't add a constructor argument</li> </ul> <pre><code>lazy b; // sets it to null, 0, \"\" depending on type\n</code></pre> <ul> <li>Defaulted \u2013 can be reset</li> </ul> <pre><code>defaulted s = \"def\"; // resettable to the default\n</code></pre>"},{"location":"week-6/ce204-week-6/#attribute-stereotypes-2","title":"Attribute stereotypes (2)","text":"<ul> <li>autounique \u2013 provide a unique value to each instance</li> </ul> <pre><code>autounique x; // sets attribute to 1, 2, 3 ...\n</code></pre> <ul> <li>internal \u2013 don't generate any methods</li> </ul> <pre><code>internal i; // doesn't generate any get/set either\n</code></pre>"},{"location":"week-6/ce204-week-6/#immutability","title":"Immutability","text":"<ul> <li> <p>Useful for objects where you want to guarantee no possible change once created</p> </li> <li> <p>e.g. a geometric point</p> </li> <li> <p>Generate a constructor argument and get method but no set method</p> </li> </ul> <pre><code>immutable String str;\n</code></pre> <ul> <li>No constructor argument, but allows setting just once.</li> </ul> <pre><code>lazy immutable z;\n</code></pre>"},{"location":"week-6/ce204-week-6/#lets-explore-attributes-by-example","title":"Lets explore attributes by example","text":"<ul> <li>Go to</li> <li>http://attributes.UMPLE.org</li> </ul>"},{"location":"week-6/ce204-week-6/#derived-attributes","title":"Derived attributes","text":"<ul> <li>These generate a get method that is calculated.</li> </ul> <pre><code>class Point\n{\n// Cartesian coordinates\nFloat x;\nFloat y;\n\n// Polar coordinates\nFloat rho =\n{Math.sqrt(Math.pow(getX(), 2) + Math.pow(getY(), 2))}\nFloat theta =\n{Math.toDegrees(Math.atan2(getY(),getX()))}\n\n}\n</code></pre>"},{"location":"week-6/ce204-week-6/#multi-valued-attributes","title":"Multi-valued attributes","text":"<ul> <li>Limit their use. Associations are generally better.</li> </ul> <pre><code>class Office {\nInteger number;\nPhone[] installedTelephones;\n}\n\nclass Phone {\nString digits;\nString callerID;\n}\n</code></pre>"},{"location":"week-6/ce204-week-6/#keys","title":"Keys","text":"<ul> <li>Enable UMPLE to generate an <code>equals()</code> and a <code>hashcode()</code> method</li> </ul> <pre><code>class Student {\nInteger id;\nname;\nkey { id }\n}\n</code></pre> <ul> <li>The user manual has a sports team example showing keys on associations too</li> <li>Note how this feature is not inherited from UML</li> </ul>"},{"location":"week-6/ce204-week-6/#umple-generalization-and-interfaces","title":"UMPLE Generalization and interfaces","text":""},{"location":"week-6/ce204-week-6/#generalization-in-umple","title":"Generalization in UMPLE","text":"<ul> <li>UMPLE uses the <code>isA</code> keyword to indicate generalization</li> <li>Used to indicate <code>superclass</code>, used <code>trait</code>, implemented <code>interface</code></li> </ul> <pre><code>class Shape {\ncolour;\n}\nclass Rectangle {\nisA Shape;\n}\n</code></pre>"},{"location":"week-6/ce204-week-6/#avoiding-unnecessary-generalizations","title":"Avoiding unnecessary generalizations","text":"<p>Open in UMPLE</p> <ul> <li> <p>Inappropriate hierarchy of Classes</p> </li> <li> <p>What should the model be?</p> </li> </ul> <p></p>"},{"location":"week-6/ce204-week-6/#interfaces","title":"Interfaces","text":"<ul> <li> <p>Declare signatures of a group of methods that must be implemented by various classes</p> </li> <li> <p>Also declared using the keyword <code>isA</code></p> </li> <li> <p>Essentially the same concept as in Java</p> </li> <li> <p>Let's explore examples in the user manual \u2026</p> </li> </ul>"},{"location":"week-6/ce204-week-6/#umple-methods","title":"UMPLE Methods","text":""},{"location":"week-6/ce204-week-6/#user-written-methods-in-umple","title":"User-written Methods in UMPLE","text":"<ul> <li> <p>Methods can be added to any UMPLE code.</p> </li> <li> <p>UMPLE parses the signature only; the rest is passed to the  generated code.</p> </li> <li> <p>You can specify different bodies in different languages</p> </li> <li> <p>We will look at examples in the user manual \u2026</p> </li> </ul>"},{"location":"week-6/ce204-week-6/#umple-associations","title":"UMPLE Associations","text":"<ul> <li> <p>http://associations.UMPLE.org</p> </li> <li> <p>Notice the inline and independent state machines</p> </li> </ul>"},{"location":"week-6/ce204-week-6/#associations","title":"Associations","text":""},{"location":"week-6/ce204-week-6/#associations-exercise-1","title":"Associations Exercise #1","text":""},{"location":"week-6/ce204-week-6/#associations-exercise-2","title":"Associations Exercise #2","text":""},{"location":"week-6/ce204-week-6/#associations_1","title":"Associations","text":"<ul> <li>Describe how instances of classes are linked at runtime </li> <li>Bidirectional <code>--</code> or </li> <li>Unidirectional <code>-&gt;</code></li> <li>Multiplicity: </li> <li>Bounds on the number of linked instances</li> <li><code>*</code> Or <code>0..*</code> \\(\\longrightarrow\\) 0 or more</li> <li><code>1..*</code> \\(\\longrightarrow\\) 1 or more</li> <li><code>1</code> \\(\\longrightarrow\\) Exactly 1</li> <li><code>2</code> \\(\\longrightarrow\\) Exactly 2</li> <li><code>1..3</code> \\(\\longrightarrow\\) Between 1 and 3</li> <li><code>0..2</code> \\(\\longrightarrow\\) Up to 2</li> </ul>"},{"location":"week-6/ce204-week-6/#association-relationships","title":"Association Relationships","text":""},{"location":"week-6/ce204-week-6/#association-relationships_1","title":"Association Relationships","text":"<ul> <li>Directional Associations</li> </ul> <pre><code>* -&gt; 0..1, * -&gt; 1, * -&gt; *, * -&gt; m..n, * - &gt;n, *-&gt;m..* and*-&gt;0..n.\n</code></pre> <ul> <li>Symmetric Reflexive</li> </ul> <pre><code>0..1, 0..n, *, 1, n, m..n,m..*\n</code></pre>"},{"location":"week-6/ce204-week-6/#basic-uml-associations","title":"Basic UML associations","text":""},{"location":"week-6/ce204-week-6/#many-to-one-associations-1","title":"Many-to-one associations (1)","text":"<pre><code>class Employee {\nid;\nfirstName;\nlastName;\n}\n\nclass Company {\nname;\n1 -- * Employee;\n}\n</code></pre>"},{"location":"week-6/ce204-week-6/#many-to-one-associations-2","title":"Many-to-one associations (2)","text":"<ul> <li>A company has many employees, </li> <li>An employee can only work for one company.</li> <li>This company will not store data about the  moonlighting activities of employees! </li> <li>A company can have zero employees</li> <li>E.g. a 'shell' company</li> <li>It is not possible to be an employee unless you work for a company</li> <li>Let's draw and write this in UMPLEOnline:</li> </ul>"},{"location":"week-6/ce204-week-6/#role-names-optional-in-most-cases","title":"Role names (optional, in most cases)","text":"<ul> <li>Allow you to better label either end of an association</li> </ul> <pre><code>class Person{\nid;\nfirstName;\nlastName;\n}\n\nclass Company {\nname;\n1 employer -- * Person employee;\n}\n</code></pre>"},{"location":"week-6/ce204-week-6/#referential-integrity","title":"Referential Integrity","text":"<ul> <li> <p>When an instance on one side of the association changes</p> </li> <li> <p>The linked instances on the other side know \u2026</p> </li> <li> <p>And vice-versa</p> </li> <li> <p>This is standard in UMPLE associations, which are    bidirectional</p> </li> </ul>"},{"location":"week-6/ce204-week-6/#many-to-many-associations","title":"Many-to-Many Associations","text":"<ul> <li>An assistant can work for many managers</li> <li>A manager can have many assistants</li> <li>Assistants can work in pools working for several  managers</li> <li>Managers can have a group of assistants</li> <li>Some managers might have zero assistants. </li> <li>Is it possible for an assistant to have, perhaps  temporarily, zero managers?</li> </ul> <p>Open in UMPLE</p> <p></p>"},{"location":"week-6/ce204-week-6/#one-to-one-associations-use-cautiously","title":"One-to-One Associations (Use cautiously)","text":"<ul> <li>For each company, there is exactly one board of  directors</li> <li>A board is the board of only one company</li> <li>A company must always have a board</li> <li>A board must always be of some company</li> </ul> <p>Open in UMPLE</p> <p></p>"},{"location":"week-6/ce204-week-6/#typical-erroneous-use-of-one-to-one","title":"Typical erroneous use of one-to-one","text":""},{"location":"week-6/ce204-week-6/#unidirectional-associations","title":"Unidirectional Associations","text":"<ul> <li>Associations are by default bi-directional</li> <li>It is possible to limit the direction of an association by adding an arrow at one end</li> <li>In the following unidirectional association</li> <li>A Day knows about its notes, but a Note does not know which Day is belongs to</li> <li>Note remains 'uncoupled' and can be used in other contexts</li> </ul> <pre><code>class Day {\n* -&gt; 1 Note;\n}\nclass Note {}\n</code></pre> <p>Open in UMPLE</p> <p></p>"},{"location":"week-6/ce204-week-6/#association-classes","title":"Association Classes","text":"<ul> <li>Sometimes, an attribute that concerns two associated classes cannot be placed in either of the classes</li> </ul> <p>Open in UMPLE</p> <p>and Extended Example</p> <p></p> <ul> <li>The following are nearly equivalent</li> <li>The only difference:<ul> <li>in the association class there can be only a single registration of a given Student in a CourseSection</li> </ul> </li> </ul> <p></p>"},{"location":"week-6/ce204-week-6/#association-classes-cont","title":"Association classes (cont.)","text":"<ul> <li>UMPLE code </li> </ul> <pre><code>class Student {}\nclass CourseSection {}\nassociationClass Registration {\n*  Student;\n*  CourseSection;\n}\n</code></pre> <ul> <li>Open in UMPLEOnline, and then generate code</li> </ul>"},{"location":"week-6/ce204-week-6/#reflexive-associations","title":"Reflexive Associations","text":"<ul> <li>An association that connects a class to itself</li> </ul> <p>Open in UMPLE</p> <pre><code>class Course {\n* self isMutuallyExclusiveWith; // Symmetric\n}\n\nassociation {\n* Course successor -- * Course prerequisite;\n} \n</code></pre>"},{"location":"week-6/ce204-week-6/#inline-vs-standalone-associations","title":"Inline vs. Standalone associations","text":"<ul> <li>The following are equivalent to allow flexibility:</li> </ul> <pre><code>class X {}\nclass Y {\n1 -- * X;\n\n}\n</code></pre> <pre><code>class X {}\nclass Y {}\nassociation {\n1 Y -- * X;\n\n}\n</code></pre>"},{"location":"week-6/ce204-week-6/#aggregation","title":"Aggregation","text":"<ul> <li>Aggregations are ordinary associations that represent part-whole relationships. </li> <li>The 'whole' side is often called the assembly or the aggregate</li> <li>This is a shorthand for association named <code>isPartOf</code></li> <li>UMPLE has no special syntax currently</li> </ul> <pre><code>class Vehicle {\n1 whole -- * VehiclePart part;\n}\nclass VehiclePart{\n}\n</code></pre>"},{"location":"week-6/ce204-week-6/#composition","title":"Composition","text":"<ul> <li>A composition is a strong kind of aggregation </li> <li>If the aggregate is destroyed, then the parts are destroyed as well</li> </ul> <pre><code>class Building {\n1 &lt;@&gt;- * Room;\n}\nclass Room{\n}\n</code></pre>"},{"location":"week-6/ce204-week-6/#sorted-associations","title":"Sorted Associations","text":"<ul> <li>Order objects in the association according to a specific key</li> </ul> <pre><code>class Academy {\n1 -- * Student registrants sorted {id};\n}\n\nclass Student {\nInteger id;\nname;\n}\n</code></pre> <ul> <li>We will look at a more complete example in the User Manual</li> </ul>"},{"location":"week-6/ce204-week-6/#a-final-word-on-associations","title":"A final word on associations","text":"<ul> <li>More help and examples are in the user manual online at</li> <li>http://associations.UMPLE.org</li> </ul>"},{"location":"week-6/ce204-week-6/#references","title":"References","text":"<ul> <li>UMPLE Tutorials</li> <li>UMPLE Github</li> <li>UMPLE Online</li> <li>UMPLE Documentation</li> <li>UMPLE CSI5112\u2013 February 2018</li> <li>UMPLE Tutorial: Models 2020 Web</li> <li>UMPLE Tutorial: Models 2020 Pdf</li> </ul>"},{"location":"week-6/ce204-week-6/#references_1","title":"References","text":"<ul> <li>Getting Started in UMPLE</li> <li>Experiential Learning for Software Engineering Using Agile Modeling in UMPLE (Youtube)</li> <li>Experiential Learning for Software Engineering Using Agile Modeling in UMPLE (Slide)</li> <li>Tomassetti Code Generation</li> </ul> <p>\\(End-Of-Week-6\\)</p>"},{"location":"week-7/ce204-week-7/","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-7/ce204-week-7/#cen206-object-oriented-programming-formerly-ce204","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-7/ce204-week-7/#week-7-umple-part-2","title":"Week-7 (UMPLE - Part 2)","text":""},{"location":"week-7/ce204-week-7/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC-PDF, DOC-DOCX, SLIDE, PPTX,</p>"},{"location":"week-7/ce204-week-7/#umple","title":"UMPLE","text":""},{"location":"week-7/ce204-week-7/#common-scope","title":"Common Scope","text":"<ul> <li>What is UMPLE?</li> <li>What is its purpose?</li> <li>How to create a UML model with UMPLE?</li> <li>What is philosophy of UMPLE?</li> </ul>"},{"location":"week-7/ce204-week-7/#common-scope_1","title":"Common Scope","text":"<ul> <li>How to use UMPLE?</li> <li>UMPLE Online</li> <li>Command-Line</li> <li>Eclipse Plugin</li> <li>Visual Studio Code Plugin</li> </ul>"},{"location":"week-7/ce204-week-7/#common-scope_2","title":"Common Scope","text":"<ul> <li>How to learn UMPLE?</li> <li>Online Documentations</li> <li>Video Tutorials</li> <li>UMPLE Community</li> </ul>"},{"location":"week-7/ce204-week-7/#common-scope_3","title":"Common Scope","text":"<ul> <li>Overview of the basics of Umple</li> <li>Associations in Umple</li> <li>State machines in Umple</li> <li>Product lines in Umple: Mixins and Mixsets</li> <li>Other separation of concerns mechanisms: (Aspects and traits) and their code generation</li> <li>Other advanced features of Umple</li> <li>Hands-on exercise developing versions of a concurrent system using state machines and product lines.</li> <li>Umple as written in itself: A case study.</li> </ul>"},{"location":"week-7/ce204-week-7/#common-scope_4","title":"Common Scope","text":"<ul> <li>Introduction: </li> <li>Overview of Model-Driven Development</li> <li>Languages / Tools / Motivation for Umple</li> <li>Class Modeling</li> <li>Tools / Attributes / Methods / Associations / Exercises /      Patterns</li> <li>Modeling with State Machines</li> <li>Basics / Concurrency / Case study and exercises</li> <li>Separation of Concerns in Models</li> <li>Mixins / Aspects / Traits</li> <li>More Case Studies and Hands-on Exercises</li> <li>Umple in itself / Real-Time / Data Oriented</li> <li>Conclusion</li> </ul>"},{"location":"week-7/ce204-week-7/#outline-part-2","title":"Outline - Part 2","text":"<ul> <li>Modeling exercises</li> <li>Simple patterns (if time)</li> <li>Basic state machines</li> <li>Analysing models</li> <li>Concurrency</li> <li>State machine case study</li> <li>Mixins</li> <li>Aspect orientation</li> </ul>"},{"location":"week-7/ce204-week-7/#outline-part-2_1","title":"Outline - Part 2","text":"<ul> <li>Traits</li> <li>Mixins and Traits together</li> <li>Mixsets</li> <li>Case Studies</li> <li>Unit Testing with UMPLE</li> <li>UMPLE issues list</li> <li>UMPLE's Architecture</li> <li>Umplification</li> <li>Conclusion</li> </ul>"},{"location":"week-7/ce204-week-7/#modeling-exercises","title":"Modeling exercises","text":""},{"location":"week-7/ce204-week-7/#modeling-exercise","title":"Modeling Exercise","text":"<ul> <li> <p>Build a class diagram for the following description. </p> </li> <li> <p>If you think there are key requirements missing, then add them.</p> </li> <li> <p>A football (soccer) team has players. Each player plays a  position. The team plays some games against other teams during each season. The system needs to record who scored goals, and the score of each game.</p> </li> </ul>"},{"location":"week-7/ce204-week-7/#simple-patterns-if-time","title":"Simple patterns (if time)","text":""},{"location":"week-7/ce204-week-7/#singleton-pattern","title":"Singleton pattern","text":"<ul> <li> <p>Standard pattern to enable only a single instance of a class to be created.</p> </li> <li> <p><code>private</code> constructor</p> </li> <li> <p><code>getInstance()</code> method</p> </li> <li> <p>Declaring in Umple</p> </li> </ul> <pre><code>class University {\nsingleton;\nname;\n} \n</code></pre>"},{"location":"week-7/ce204-week-7/#delegation-pattern","title":"Delegation pattern","text":"<ul> <li>A class calls a method in its \"neighbour\"</li> </ul> <pre><code>class RegularFlight {\nflightNumber;\n}\n\nClass SpecificFlight {\n* -- 1 RegularFlight;\nflightNumber = {getRegularFlight().getFullNumber()}\n}\n</code></pre> <ul> <li>Full details of this example in the user manual</li> </ul>"},{"location":"week-7/ce204-week-7/#basic-constraints","title":"Basic constraints","text":"<ul> <li>Shown in square brackets</li> <li>Code is added to the constructor and the set method</li> </ul> <pre><code>class X {\nInteger i;\n[! (i == 10)]\n}\n</code></pre> <ul> <li>We will see constraints later in state machines</li> </ul>"},{"location":"week-7/ce204-week-7/#basic-state-machines","title":"Basic state machines","text":"<ul> <li>http://statemachines.umple.org </li> </ul>"},{"location":"week-7/ce204-week-7/#basics-of-state-machines","title":"Basics of state machines","text":"<ul> <li> <p>At any given point in time, the system is in one state.</p> </li> <li> <p>It will remain in this state until an event occurs that causes it to change state.</p> </li> <li> <p>A state is represented by a rounded rectangle containing the name of the state.</p> </li> <li> <p>Special states:</p> </li> <li> <p>A black circle represents the start state</p> </li> <li>A circle with a ring around it represents an end state</li> </ul>"},{"location":"week-7/ce204-week-7/#garage-door-state-machine","title":"Garage door state machine","text":"<pre><code>class GarageDoor{\n  status {\n    Open {\n      buttonOrObstacle -&gt; Closing;\n    }\n    Closing {\n      buttonOrObstacle -&gt; Opening;\n      reachBottom -&gt; Closed;\n    }\n    Closed {\n      buttonOrObstacle -&gt; Opening;\n    }\n    Opening {\n      buttonOrObstacle -&gt; HalfOpen;\n      reachTop -&gt; Open;\n    }\n    HalfOpen {\n      buttonOrObstacle -&gt; Opening;\n    }\n  }\n}\n</code></pre>"},{"location":"week-7/ce204-week-7/#events","title":"Events","text":"<ul> <li>An occurrence that may trigger a change of state</li> <li>Modeled in Umple as generated methods that can be called</li> <li>Several states may be able to respond to the same event</li> </ul>"},{"location":"week-7/ce204-week-7/#transitions","title":"Transitions","text":"<ul> <li>A change of state in response to an event.</li> <li>It is considered to occur instantaneously.</li> <li>The label on each transition is the event that causes the change of state.</li> </ul>"},{"location":"week-7/ce204-week-7/#state-diagrams-an-example-with-conditional-transitions","title":"State diagrams \u2013 an example with conditional transitions","text":""},{"location":"week-7/ce204-week-7/#actions-in-state-diagrams","title":"Actions in state diagrams","text":"<ul> <li>An action is a block of code that must be executed effectively instantaneously</li> <li>When a particular transition is taken,</li> <li>Upon entry into a particular state, or</li> <li>Upon exit from a particular state</li> <li>An action should consume no noticeable amount of time</li> </ul>"},{"location":"week-7/ce204-week-7/#nested-substates-and-guard-conditions","title":"Nested substates and guard conditions","text":"<ul> <li>A state diagram can be nested inside a state. </li> <li>The states of the inner diagram are called substates.</li> </ul>"},{"location":"week-7/ce204-week-7/#nested-state-diagram-another-example","title":"Nested state diagram \u2013 Another example","text":""},{"location":"week-7/ce204-week-7/#auto-transitions","title":"Auto-transitions","text":"<ul> <li>A transition taken immediately upon entry into a state</li> <li>Unless guarded</li> <li>We will look at an example in the user manual</li> </ul>"},{"location":"week-7/ce204-week-7/#events-with-parameters","title":"Events with parameters","text":"<ul> <li>Parameters can be referenced in guards and actions.</li> <li>We will look at an example in the user manual.</li> </ul>"},{"location":"week-7/ce204-week-7/#analysing-models","title":"Analysing models","text":""},{"location":"week-7/ce204-week-7/#models-can-be-analysed-in-several-ways","title":"Models can be analysed in several ways","text":"<ul> <li>Visually</li> <li>Automatically generated errors and warnings</li> <li>State tables (next slide)\\</li> <li>Metrics</li> <li>Formal methods (nuXMV)</li> </ul>"},{"location":"week-7/ce204-week-7/#state-tables-and-simulations","title":"State tables and simulations","text":"<ul> <li>Allow analysis of state machines statically without having to write code</li> <li>We will explore these in UmpleOnline by looking at state machine examples and generating tables and simulations</li> </ul>"},{"location":"week-7/ce204-week-7/#concurrency","title":"Concurrency","text":""},{"location":"week-7/ce204-week-7/#do-activities-and-concurrency","title":"Do activities and concurrency","text":"<ul> <li>A do activity executes</li> <li>In a separate thread</li> <li>Until<ul> <li>Its method terminates, or</li> <li>The state needs to exit (killing the tread)</li> </ul> </li> <li>Example uses:</li> <li>Outputting a stream (e.g. playing music)</li> <li>Monitoring something</li> <li>Running a motor while in the state</li> <li>Achieving concurrency, using multiple do activities</li> </ul>"},{"location":"week-7/ce204-week-7/#active-objects","title":"Active objects","text":"<ul> <li> <p>These start in a separate thread as they are instantiated.</p> </li> <li> <p>Declared with the keyword</p> </li> </ul> <pre><code>active\n</code></pre>"},{"location":"week-7/ce204-week-7/#default-threading-in-state-machines","title":"Default threading in state machines","text":"<ul> <li>As discussed so far, code generated for state machines has the following behaviour:</li> <li>A single thread:<ul> <li>Calls an event</li> <li>Executes the event (running any actions)</li> <li>Returns to the caller and continues</li> </ul> </li> <li>This has two problems:</li> <li>If another thread calls the event at the same time they will interfere</li> <li>There can be deadlocks if an action itself triggers an event</li> </ul>"},{"location":"week-7/ce204-week-7/#queued-state-machines","title":"Queued state machines","text":"<ul> <li> <p>Solve the threading problem:</p> </li> <li> <p>Callers can add events to a queue without blocking</p> </li> <li> <p>A separate thread takes items off the queue \u2018as fast as it can\u2019 and processes them</p> </li> <li> <p>Umple syntax: <code>queued</code> before the state machine declaration</p> </li> <li> <p>We will look at examples in the manual</p> </li> </ul>"},{"location":"week-7/ce204-week-7/#pooled-state-machines","title":"Pooled state machines","text":"<ul> <li>Default Umple Behavior (including with queued):</li> <li>If an event is received but the system is not in a state that  can handle it, then the event is ignored.</li> <li>Alternative <code>pooled</code> stereotype:</li> <li>Uses a queue (see previous slide)</li> <li>Events that cannot be processed in the current state are  left at the head of the queue until a relevant state reached</li> <li>The first relevant event nearest the head of the queue is processed</li> <li>Events may hence be processed out of order, but not ignored</li> </ul>"},{"location":"week-7/ce204-week-7/#unspecified-pseudo-event","title":"Unspecified pseudo-event","text":"<ul> <li> <p>Matches any event that is not listed</p> </li> <li> <p>Can be in any state, e.g.</p> </li> </ul> <pre><code>unspecified -&gt; error;\n</code></pre>"},{"location":"week-7/ce204-week-7/#example-using-unspecified","title":"Example using unspecified","text":"<pre><code>class AutomatedTellerMachine{\n  queued sm {\n    idle {\n      cardInserted -&gt; active; maintain -&gt; maintenance;\n      unspecified -&gt; error1;\n    }        \n    maintenance { isMaintained -&gt; idle; }\n    active {\n        entry /{addLog(\"Card is read\");}\n        exit /{addLog(\"Card is ejected\");}\n      validating {\n        validated -&gt; selecting;\n        unspecified -&gt; error2;\n      }\n      selecting {select -&gt; processing; }\n      processing {\n        selectAnotherTransiction -&gt; selecting;\n        finish -&gt; printing;\n      }\n      printing {receiptPrinted -&gt; idle;}\n      cancel -&gt; idle;\n    }\n    error1 {entry / {printError1();} -&gt;idle;}\n    error2 {entry / {printError2();} -&gt;validating;}\n  }\n}\n</code></pre>"},{"location":"week-7/ce204-week-7/#state-machines-in-the-user-manual","title":"State machines in the user manual","text":"<ul> <li>http://statemachines.umple.org</li> </ul>"},{"location":"week-7/ce204-week-7/#state-machine-case-study","title":"State machine case study","text":""},{"location":"week-7/ce204-week-7/#state-machine-for-a-phone-line","title":"State machine for a phone line","text":""},{"location":"week-7/ce204-week-7/#umple-for-the-phone-line-example","title":"Umple for the phone line example","text":"<pre><code>class phone {\nstate {\nonHook {\nstartDialing -&gt; dialling;\nincomingCall -&gt; ringing;\n\n}\n\nringing {\npickUp -&gt; communicating;\notherPartyHangUp -&gt; onHook;\n\n}\n\ncommunicating {\nhangUp -&gt; onHook;\notherPartyHangUp -&gt; waitForHook;\nputOnHold -&gt; onHold;\n\n}\n\nonHold {\nhangUp -&gt; onHook;\notherPartyHangUp -&gt; waitForHook;\ntakeOffHold -&gt; communicating;\n\n}\n</code></pre> <ul> <li>next slide</li> </ul>"},{"location":"week-7/ce204-week-7/#umple-for-the-phone-line-example_1","title":"Umple for the phone line example","text":"<ul> <li>con't. </li> </ul> <pre><code>dialing {\ncompleteNumber -&gt; \nwaitingForConnection;\nhangUp -&gt; onHook;\n\n}\n\nwaitingForConnection {\notherPartyPickUp -&gt; communicating;\nhangUp -&gt; onHook;\ntimeOut -&gt; onHook;\n\n}\n\nwaitForHook {\nhangUp -&gt; onHook;\n\n}\n\n}\n\n}\n</code></pre>"},{"location":"week-7/ce204-week-7/#in-class-modeling-exercise-for-state-machines","title":"In-class modeling exercise for state machines","text":"<ul> <li>Microwave oven system state machine</li> <li>Events include<ul> <li>pressing of buttons</li> <li>door opening</li> <li>door closing</li> <li>timer ending</li> <li>etc.</li> </ul> </li> </ul>"},{"location":"week-7/ce204-week-7/#mixins","title":"Mixins","text":""},{"location":"week-7/ce204-week-7/#mixins-motivation","title":"Mixins : Motivation","text":"<ul> <li> <p>Product variants have long been important for</p> </li> <li> <p>Product lines/families, whose members target different:</p> <ul> <li>hardware, OS, feature sets, basic/pro versions</li> </ul> </li> <li> <p>Feature-oriented development (separation of concerns)</p> </li> </ul>"},{"location":"week-7/ce204-week-7/#separation-of-concerns-by-mixins-in-umple","title":"Separation of concerns by mixins in Umple","text":"<ul> <li> <p>Mixins allow including attributes, associations, state    machines, groups of states, stereotypes, etc</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>class X { a; }\nclass X { b; }\n</code></pre> <ul> <li> <p>The result would be a class with both a and b.</p> </li> <li> <p>It doesn\u2019t matter whether the mixins are</p> </li> <li> <p>Both in the same file</p> </li> <li>One in one file, that includes the other in an other file</li> <li>In two separate files, with a third file invoking them</li> </ul>"},{"location":"week-7/ce204-week-7/#typical-ways-of-using-mixins","title":"Typical ways of using mixins","text":"<ul> <li> <p>Separate groups of classes for </p> </li> <li> <p>model (classes, attributes, associations)</p> </li> <li> <p>Methods operating on the model</p> </li> <li> <p>Allows a clearer view of the core model</p> </li> <li> <p>Another possibility</p> </li> <li> <p>One feature per file</p> </li> </ul>"},{"location":"week-7/ce204-week-7/#typical-ways-of-using-mixins_1","title":"Typical ways of using mixins","text":"<ul> <li>Separate model files (classes, attributes associations)</li> <li>\u2026 from files for the same class containing methods</li> <li>Allows a clearer view of the core model</li> <li>Separate system features, each into a separate file</li> </ul>"},{"location":"week-7/ce204-week-7/#advantages-and-disadvantages-of-mixins","title":"Advantages and disadvantages of mixins","text":"<ul> <li> <p>Advantages:</p> </li> <li> <p>Smaller files that are easier to understand</p> </li> <li> <p>Different versions of a class for different software versions (e.g. a professional version) can be built by using different mixins</p> </li> <li> <p>Disadvantage</p> </li> <li> <p>Delocalization: </p> <ul> <li>Bits of functionality of a class in different files</li> <li>The developer may not know that a mixin exists unless a tool helps show this</li> </ul> </li> </ul>"},{"location":"week-7/ce204-week-7/#aspect-orientation","title":"Aspect orientation","text":""},{"location":"week-7/ce204-week-7/#aspects-motivation","title":"Aspects : Motivation","text":"<ul> <li>We often don\u2019t quite like the code as generated</li> </ul> <p>Or</p> <ul> <li>We want to do a little more than what the generated code    does</li> </ul> <p>Or</p> <ul> <li>We want to inject some feature (e.g. security checks) into    many places of generated or custom code</li> </ul>"},{"location":"week-7/ce204-week-7/#aspect-orientation-general-concept","title":"Aspect orientation : General Concept","text":"<ul> <li> <p>Create a pointcut that specifies (advises) where to inject code at multiple points elsewhere in a system</p> </li> <li> <p>The pointcut uses a pattern</p> </li> <li> <p>Pieces of code that would otherwise be scattered are thus gathered into the aspect</p> </li> <li> <p>But: There is potentially acute sensitivity to change</p> </li> <li> <p>If the code changes the aspect may need to change</p> </li> <li> <p>Yet without tool support, developers wouldn\u2019t know this</p> </li> <li> <p>Drawback : Delocalization even stronger than for mixins</p> </li> </ul>"},{"location":"week-7/ce204-week-7/#aspect-orientation-in-umple","title":"Aspect orientation in Umple","text":"<ul> <li> <p>It is common to limit a pointcuts a single class</p> </li> <li> <p>Inject code before, after, or around execution of custom or generated methods and constructors</p> </li> </ul> <pre><code>class Person {\nname;\nbefore setName {\nif (aName != null &amp;&amp; aName.length() &gt; 20) { return false;\n}\n}\n}\n</code></pre> <ul> <li>We have found these limited abilities nonetheless solve key  problems</li> </ul>"},{"location":"week-7/ce204-week-7/#traits","title":"Traits","text":""},{"location":"week-7/ce204-week-7/#traits-motivation","title":"Traits : Motivation","text":"<ul> <li> <p>We may want to inject similar elements into unrelated classes </p> </li> <li> <p>without complex multiple inheritance</p> </li> <li> <p>Elements can be</p> </li> <li> <p>Methods</p> </li> <li> <p>Attributes</p> </li> <li> <p>Associations</p> </li> <li> <p>States or state machines</p> </li> <li> <p>.. Anything</p> </li> </ul>"},{"location":"week-7/ce204-week-7/#separation-of-concerns-by-traits","title":"Separation of Concerns by Traits","text":"<ul> <li>Allow modeling elements to be made available in multiple classes</li> </ul> <pre><code>trait Identifiable {\nfirstName;\nlastName;\naddress;\nphoneNumber;\nfullName = {firstName + \" \" + lastName}\nBoolean isLongName() {return lastName.length() &gt; 1;}  \n}\n\nclass Person {\nisA Identifiable;\n}\n</code></pre> <ul> <li>See more complete version of this in the user manual</li> </ul>"},{"location":"week-7/ce204-week-7/#another-trait-example","title":"Another Trait example","text":"<pre><code>trait T1{\n  abstract void method1(); /* required method */\n  abstract void method2();\n  void method4(){/*implementation \u2013 provided method*/ } \n}\n\ntrait T2{\n  isA T1;\n  void method3();\n  void method1(){/*implementation*/ } \n  void method2(){/*implementation*/ } \n}\n\nclass C1{\n  void method3(){/*implementation*/ }\n} \n\nclass C2{ isA C1; isA T2; \n  void method2(){/*implementation*/ }\n}\n</code></pre>"},{"location":"week-7/ce204-week-7/#traits-with-parameters","title":"Traits With Parameters","text":"<pre><code>trait T1&lt; TP isA I1 &gt; {\nabstract TP method2(TP data);\nString method3(TP data){ /*implementation*/ } \n}\ninterface I1{ \nvoid method1(); \n} \nclass C1{ isA I1;\nisA T1&lt;TP = C1&gt;;\nvoid method1(){/*implementation*/}\nC1 method2(C1 data){ /*implementation*/ } \n}\nclass C2{ \nisA I1;\nisA T1&lt; TP = C2 &gt;;\nvoid method1(){/*implementation*/}\nC2 method2(C2 data){ /*implementation*/ }\n} \n</code></pre>"},{"location":"week-7/ce204-week-7/#trait-parameters-in-methods","title":"Trait Parameters in Methods","text":"<pre><code>trait T1 &lt;TP&gt;{ \nString method1();\nString method2(){\n#TP# instance = new #TP#();\nreturn method1() +\":\"+instance.process();\n}\n}\nclass C1{\nString process(){/*implementation*/}\n}\nclass C2{\nisA T1&lt; TP = C1 &gt;;\nString method1(){/*implementation*/ }\n}\n</code></pre>"},{"location":"week-7/ce204-week-7/#selecting-subsets-of-items-in-traits","title":"Selecting Subsets of Items in Traits","text":"<pre><code>trait T1{\nabstract method1();\nvoid method2(){/*implementation*/}\nvoid method3(){/*implementation*/}\nvoid method4(){/*implementation*/}\nvoid method5(){/*implementation*/}\n}\nclass C1{\nisA T1&lt;-method2() , -method3()&gt;;\nvoid method1() {/*implementation related to C1*/}\n}\nclass C2{\nisA T1&lt;+method5()&gt;;\nvoid method1() {\n/*implementation related to C2*/}\n}\n</code></pre>"},{"location":"week-7/ce204-week-7/#renaming-elements-when-using-traits","title":"Renaming Elements when Using Traits","text":"<pre><code>trait T1{\nabstract method1();\nvoid method2(){/*implementation*/}\nvoid method3(){/*implementation*/}\nvoid method4(){/*implementation*/}\nvoid method5(Integer data){/* implementation*/}\n}\nclass C1{\nisA T1&lt; method2() as function2 &gt;;\nvoid method1() {/*implementation related to C1*/}\n}\nclass C2{\nisA T1&lt; method3() as private function3 &gt;;\nvoid method1() {/*implementation related to C2*/}\n}\nclass C3{\nisA T1&lt; +method5(Integer) as function5 &gt;;\nvoid method1() {/*implementation related to C3*/}\n}\n</code></pre>"},{"location":"week-7/ce204-week-7/#associations-in-traits-observer-pattern","title":"Associations in Traits: Observer Pattern","text":"<pre><code>class Dashboard{\nvoid update (Sensor sensor){ /*implementation*/ }\n}\nclass Sensor{\nisA Subject&lt; Observer = Dashboard &gt;;\n}\ntrait Subject &lt;Observer&gt;{\n0..1 -&gt; * Observer;\nvoid notifyObservers() { /*implementation*/ }\n}\n</code></pre>"},{"location":"week-7/ce204-week-7/#using-traits-to-reuse-state-machines","title":"Using Traits to Reuse State Machines","text":"<pre><code>trait T1 {\nsm1{\ns0 {e1-&gt; s1;}\ns1 {e0-&gt; s0;}\n}\n}\ntrait T2 {\nisA T1;\nsm2{\ns0 {e1-&gt; s1;}\ns1 {e0-&gt; s0;}\n}\n}\nclass C1 {\nisA T2;\n}\n</code></pre>"},{"location":"week-7/ce204-week-7/#satisfaction-of-required-methods-through-state-machines","title":"Satisfaction of Required Methods Through State Machines","text":"<pre><code>trait T1{\nBoolean m1(String input);\nBoolean m2();\nsm1{\ns1{\ne1(String data) -&gt; /{ m1(data); } s2; }\ns2{\ne2 -&gt; /{ m2(); } s1; }\n}\n}\nclass C1{\nisA T1;\nsm2{\ns1{ m1(String str) -&gt; s2;}\ns2{ m2 -&gt; s1;}\n}\n}\n</code></pre>"},{"location":"week-7/ce204-week-7/#changing-name-of-a-state-machine-region","title":"Changing Name of a State Machine Region","text":"<pre><code>trait T1{\nsm {\ns1{\nr1{ e1-&gt; r11; }\nr11{}\n||\nr2{ e2-&gt; r21; }\nr21{}\n}\n}\n}\nclass C1{\nisA T1&lt;sm.s1.r1 as region1,sm.s1.r2 as region2&gt;;\n}\n</code></pre>"},{"location":"week-7/ce204-week-7/#changing-the-name-of-an-event","title":"Changing the Name of an Event","text":"<pre><code>trait T1 {\nsm1{\ns0 { e1(Integer index)-&gt; s1;}\ns1 {e0-&gt; s0;}\n}\nsm2{\nt0 {e1(Integer index)-&gt; t1;}\nt1 {e0-&gt; t0;}\n}\n}\nclass C1 {\nisA T1&lt;sm1.e1(Integer) as event1, *.e0() as event0&gt;;\n}\n</code></pre>"},{"location":"week-7/ce204-week-7/#mixins-and-traits-together","title":"Mixins and Traits together","text":"<ul> <li>Examples of mixins and traits combined in the user manual:</li> <li>Mixins with traits:</li> <li>https://cruise.umple.org/umple/TraitsandUmpleMixins.html</li> </ul>"},{"location":"week-7/ce204-week-7/#mixsets","title":"Mixsets","text":""},{"location":"week-7/ce204-week-7/#mixsets-motivations","title":"Mixsets: Motivations","text":"<ul> <li> <p>A feature or variant needs to inject or alter code in many    places</p> </li> <li> <p>Historically tools like the C Preprocessor were used</p> </li> <li> <p>Now tools like \"Pure: Variants\"</p> </li> <li> <p>There is also a need to</p> </li> <li> <p>Enable model variants in a very straightforward way</p> </li> <li>Blend variants with code/models in core compilers<ul> <li>With harmonious syntax + analysable semantics</li> <li>Without the need for tools external to the compiler</li> </ul> </li> </ul>"},{"location":"week-7/ce204-week-7/#mixsets-top-level-syntax","title":"Mixsets: Top-Level Syntax","text":"<ul> <li>Mixsets are named sets of mixins</li> </ul> <pre><code>mixset Name {\n// Anything valid in Umple at top level\n}\n</code></pre> <ul> <li>The following syntactic sugar works for top level elements  (class, trait, interface, association, etc.)</li> </ul> <pre><code>mixset Name class Classname {\n}\n</code></pre>"},{"location":"week-7/ce204-week-7/#use-statements","title":"Use Statements","text":"<ul> <li>A use statement specifies inclusion of either</li> <li>A file, or</li> <li>A mixset</li> </ul> <pre><code>use Name;\n</code></pre> <ul> <li>A mixset is conceptually a <code>virtual file</code> that is composed of a    set of model/code elements</li> <li>The use statement for a mixset can appear</li> <li>Before, after or among the definition of the mixset parts</li> <li>In <code>another mixset</code></li> <li>On the command line to generate a variant</li> </ul>"},{"location":"week-7/ce204-week-7/#mixsets-and-mixins-synergies","title":"Mixsets and Mixins: Synergies","text":"<ul> <li>The blocks defined by a mixset are mixins</li> <li>Mixsets themselves can be composed using mixins <ul> <li>e.g.</li> </ul> </li> </ul> <pre><code>mixset Name1 {class X { a; } }\n</code></pre> <ul> <li>And somewhere else</li> </ul> <pre><code>mixset Name1 {class X { b; } }\nuse Name1;\n</code></pre> <ul> <li>Would be the same as:</li> </ul> <pre><code>class X { a; b;}\n</code></pre>"},{"location":"week-7/ce204-week-7/#mixset-definitions-internal-to-a-top-level-element","title":"Mixset Definitions Internal to a Top-Level Element","text":"<pre><code>class X {\nmixset Name2 {a;}\nb;\n\n}\n</code></pre> <ul> <li>Is the same as,</li> </ul> <pre><code>mixset Name2 class X {a;}\nclass X {b;}\n</code></pre> <ul> <li>The above works for attributes, associations, state    machines, states, etc.</li> </ul>"},{"location":"week-7/ce204-week-7/#motivating-example-umple-modelcode-for-basic-bank","title":"Motivating Example: Umple Model/Code for Basic Bank","text":""},{"location":"week-7/ce204-week-7/#class-diagram-of-basic-bank-example","title":"Class Diagram of Basic Bank Example:","text":""},{"location":"week-7/ce204-week-7/#adding-optional-multi-branch-feature","title":"Adding Optional Multi-branch Feature","text":""},{"location":"week-7/ce204-week-7/#example-multi-branch-umple-modelcode","title":"Example: Multi-branch Umple Model/Code","text":""},{"location":"week-7/ce204-week-7/#alternative-approach-same-system","title":"Alternative Approach (same system)","text":""},{"location":"week-7/ce204-week-7/#constraints-on-mixsets","title":"Constraints on Mixsets","text":"<pre><code>require [Mixset1 or Mixset2];\n</code></pre> <ul> <li> <p>Allowed operators</p> </li> <li> <p>and, or, xor</p> </li> <li> <p>not</p> </li> <li> <p>n..m of {\u2026}</p> </li> <li> <p>Parentheses allowed</p> </li> </ul> <p><code>opt X (means 0..1 of {X})</code></p>"},{"location":"week-7/ce204-week-7/#case-study-and-exercise-1-modifying-the-banking-example","title":"Case Study and Exercise 1: Modifying the banking example","text":"<ul> <li>I will give you the text of the banking example and set up a    task for you to:</li> <li>Add the ability to have one or more account holders</li> <li>Add the ability to have one or more co-signers</li> </ul>"},{"location":"week-7/ce204-week-7/#case-study-and-exercise-2-dishwasher-example","title":"Case Study and Exercise 2: Dishwasher example","text":"<ul> <li>We will start with the Dishwasher example in UmpleOnline</li> <li>We will use UmpleOnline\u2019s Task capability to ask you to split the Dishwasher example into two versions</li> <li>A cheap version that only does normal wash and not fast wash</li> <li>A full version that does everything</li> <li>Hint: Pull out the relevant state and transition for fast wash    and wrap it in a mixset</li> </ul>"},{"location":"week-7/ce204-week-7/#case-study-3-umple-itself-written-in-umple","title":"Case Study 3: Umple itself, written in Umple","text":"<ul> <li>We will look at:</li> <li>Code in Github</li> <li>Generated Architecture diagrams</li> <li>Generated Javadoc</li> <li>Sample master code</li> <li>Sample test output</li> <li>Sample code for generators (that replaced Jet)</li> <li>UmpleParser (that replaced Antlr</li> </ul>"},{"location":"week-7/ce204-week-7/#unit-testing-with-umple","title":"Unit Testing with UMPLE","text":""},{"location":"week-7/ce204-week-7/#unit-testing-with-umple_1","title":"Unit Testing with Umple","text":"<ul> <li>To see how to integrate Unit Testing with Umple, see the sample project at</li> <li>https://github.com/umple/umple/tree/master/sandbox</li> <li>And the build script at</li> <li>https://github.com/umple/umple/blob/master/build/build.sandbox.xml</li> <li>Command line from build directory</li> </ul> <pre><code>ant -f build.xml sandbox\n</code></pre>"},{"location":"week-7/ce204-week-7/#a-look-at-how-umple-is-written-in-itself","title":"A Look at How Umple is Written in Itself","text":"<ul> <li>Source:</li> <li>https://github.com/umple/umple/tree/master/cruise.umple/src</li> <li>Umple\u2019s own class diagram generated by itself from itself:</li> <li>http://metamodel.umple.org</li> <li>Colours represent key subsystems</li> <li>Click on classes to see Javadoc, and then Umple Code</li> </ul>"},{"location":"week-7/ce204-week-7/#testing-tdd-with100-pass-always-required","title":"Testing: TDD with100% pass always required","text":"<ul> <li>Multiple levels:  https://cruise.eecs.uottawa.ca/qa/index.php</li> <li>Parsing tests: basic constructs</li> <li>Metamodel tests: ensure it is populated properly</li> <li>E.g.</li> <li>https://github.com/umple/umple/blob/master/cruise.umple/test/cruise/umple/compiler/AssociationTest.java</li> <li>Implementation template tests: to ensure constructs generate code that looks as expected</li> <li>Testbed semantic tests: Generate code and make sure it    behaves the way it should </li> </ul>"},{"location":"week-7/ce204-week-7/#umple-issues-list","title":"UMPLE issues list","text":""},{"location":"week-7/ce204-week-7/#umple-issues-list_1","title":"UMPLE issues list","text":"<ul> <li>Tagged by</li> <li>Priority</li> <li>Perceived difficulty</li> <li>Scale (bug, project, research project)</li> <li>Milestone (slow release)</li> </ul> <p>http://bugs.umple.org</p>"},{"location":"week-7/ce204-week-7/#using-umple-with-builds-and-continuous-integration","title":"Using Umple with Builds and Continuous Integration","text":""},{"location":"week-7/ce204-week-7/#using-umple-with-builds-and-continuous-integration_1","title":"Using Umple with Builds and Continuous Integration","text":"<ul> <li>Example build scripts</li> <li>Example travis.yml</li> <li>Umple\u2019s own Travis page</li> </ul>"},{"location":"week-7/ce204-week-7/#umples-architecture","title":"UMPLE's Architecture","text":""},{"location":"week-7/ce204-week-7/#umples-architecture_1","title":"Umple's Architecture","text":""},{"location":"week-7/ce204-week-7/#umplification","title":"Umplification","text":""},{"location":"week-7/ce204-week-7/#umplification_1","title":"Umplification","text":"<ul> <li> <p>Umplification: \u2018amplication\u2019 + converting into Umple.</p> </li> <li> <p>Produces a program with behavior identical to the original one but written in Umple.</p> </li> <li> <p>Eliminates the distinction between code and model. Proceeds incrementally until the desired level of abstraction is achieved.</p> </li> </ul>"},{"location":"week-7/ce204-week-7/#umplification-the-transformation-steps","title":"Umplification: The Transformation Steps","text":"<ul> <li>Transformation 0: Initial transformation</li> <li>Transformation 1: Transformation of generalization, dependency, and namespace declarations.</li> <li>Transformation 2: Analysis and conversion of many instance   variables, along with the methods that use the variables.</li> <li>Transformation 2a: Transformation of variables to UML/Umple attributes.</li> <li>Transformation 2b: Transformation of variables in one or more classes to UML/Umple associations.</li> <li>Transformation 2c: Transformation of variables to UML/Umple state machines.</li> </ul>"},{"location":"week-7/ce204-week-7/#umplification-process","title":"Umplification Process","text":""},{"location":"week-7/ce204-week-7/#umplificator-architecture","title":"Umplificator Architecture","text":""},{"location":"week-7/ce204-week-7/#umplification-example","title":"Umplification - Example","text":""},{"location":"week-7/ce204-week-7/#umplification-example_1","title":"Umplification - Example","text":""},{"location":"week-7/ce204-week-7/#systems-umplified-jhotdraw-751","title":"Systems umplified (JhotDraw 7.5.1)","text":""},{"location":"week-7/ce204-week-7/#systems-umplified-jhotdraw-751_1","title":"Systems umplified (JhotDraw 7.5.1)","text":""},{"location":"week-7/ce204-week-7/#systems-umplified","title":"Systems umplified","text":"<ul> <li> <p>Weka</p> </li> <li> <p>Associations umplified</p> </li> <li> <p>Args4J- Modernization</p> </li> <li> <p>Original Args4j source code is composed of 61 classes and 2223 LOC.</p> </li> <li> <p>Umplified Args4j source code is composed of 122 (2 per input class) umple files and 1980 LOC.</p> </li> <li> <p># LOC in files containing modeling constructs (X.ump) is 312.</p> </li> <li> <p># LOC in files with algorithmic/logic code (X code.ump) is 1668.</p> </li> </ul> <p>The developer must then translate 1518 lines of code rather than 2223 lines of code.</p>"},{"location":"week-7/ce204-week-7/#conclusion","title":"Conclusion","text":""},{"location":"week-7/ce204-week-7/#conclusion_1","title":"Conclusion","text":"<ul> <li>Umple</li> <li>Is simple but powerful modeling tool</li> <li>Generates state-of-the-art code</li> <li>Enables agility + model-driven development</li> <li>We call the overall approach model-based programming</li> </ul>"},{"location":"week-7/ce204-week-7/#umple-examples-more","title":"Umple Examples More ..","text":"<ul> <li>http://try.umple.org</li> <li>https://github.com/umple/umple/wiki/examples</li> <li>http://umpr.a4word.com/</li> <li>http://code.umple.org</li> <li>http://metamodel.umple.org</li> </ul>"},{"location":"week-7/ce204-week-7/#references","title":"References","text":""},{"location":"week-7/ce204-week-7/#references_1","title":"References","text":"<ul> <li>UMPLE Tutorials</li> <li>UMPLE Github</li> <li>UMPLE Online</li> <li>UMPLE Documentation</li> <li>UMPLE CSI5112\u2013 February 2018</li> <li>Umple Tutorial: Models 2020 Web</li> <li>Umple Tutorial: Models 2020 Pdf</li> </ul>"},{"location":"week-7/ce204-week-7/#references_2","title":"References","text":"<ul> <li>Getting Started in UMPLE</li> <li>Experiential Learning for Software Engineering Using Agile Modeling in Umple (Youtube)</li> <li>Experiential Learning for Software Engineering Using Agile Modeling in Umple (Slide)</li> <li>Tomassetti Code Generation</li> </ul> <p>\\(End-Of-Week-7\\)</p>"},{"location":"week-8/ce204-week-8-midterm/","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-8/ce204-week-8-midterm/#cen206-object-oriented-programming-formerly-ce204","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"week-8/ce204-week-8-midterm/#week-8-midterm","title":"Week-8 (Midterm)","text":""},{"location":"week-8/ce204-week-8-midterm/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC-PDF, DOC-DOCX, SLIDE, PPTX,</p>"},{"location":"week-8/ce204-week-8-midterm/#title","title":"Title","text":""},{"location":"week-8/ce204-week-8-midterm/#outline","title":"Outline","text":"<p>TBD</p>"},{"location":"week-8/ce204-week-8-midterm/#references","title":"References","text":"<p>TBD</p>"},{"location":"week-9/ce204-week-9/","title":"CEN206 Object-Oriented Programming","text":""},{"location":"week-9/ce204-week-9/#cen206-object-oriented-programming","title":"CEN206 Object-Oriented Programming","text":""},{"location":"week-9/ce204-week-9/#week-9-oo-design-principles-design-patterns","title":"Week-9 (OO Design Principles &amp; Design Patterns)","text":""},{"location":"week-9/ce204-week-9/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC-PDF, DOC-DOCX, SLIDE, PPTX</p>"},{"location":"week-9/ce204-week-9/#oo-design-principles-design-patterns","title":"OO Design Principles &amp; Design Patterns","text":""},{"location":"week-9/ce204-week-9/#outline","title":"Outline","text":"<ul> <li>Design Patterns</li> <li>SOLID Principles</li> <li>Dependency Injection &amp; Inversion of Control</li> <li>Practical Applications in Java</li> </ul>"},{"location":"week-9/ce204-week-9/#introduction-to-design-patterns","title":"Introduction to Design Patterns","text":"<p>Design patterns are typical solutions to common problems in software design. They represent best practices evolved over time by experienced software developers.</p> <ul> <li>Definition: Reusable solution template for common design problems</li> <li>Benefits: Accelerate development, improve code quality and maintainability</li> <li>Origins: Inspired by architectural patterns (Christopher Alexander)</li> </ul> <p>First Design Pattern book in architecture: https://www.amazon.com/Pattern-Language-Buildings-Construction-Environmental/dp/0195019199</p>"},{"location":"week-9/ce204-week-9/#the-gang-of-four-gof-book","title":"The Gang of Four (GoF) Book","text":"<p>The seminal work in the field of design patterns is \"Design Patterns: Elements of Reusable Object-Oriented Software\" by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (Gang of Four).</p> <p>This book categorizes design patterns into: - Creational Patterns: Object creation mechanisms - Structural Patterns: Object composition and relationships - Behavioral Patterns: Object interaction and responsibility distribution</p> <p>Reference: https://www.amazon.com/gp/product/0201633612/</p>"},{"location":"week-9/ce204-week-9/#common-design-patterns","title":"Common Design Patterns","text":""},{"location":"week-9/ce204-week-9/#factory-method-pattern","title":"Factory Method Pattern","text":"<p>The Factory Method defines an interface for creating objects but lets subclasses decide which classes to instantiate.</p> <pre><code>// Product interface\ninterface Product {\n    void operation();\n}\n\n// Concrete products\nclass ConcreteProductA implements Product {\n    @Override\n    public void operation() {\n        System.out.println(\"ConcreteProductA operation\");\n    }\n}\n\n// Creator abstract class\nabstract class Creator {\n    public abstract Product createProduct();\n\n    public void someOperation() {\n        Product product = createProduct();\n        product.operation();\n    }\n}\n\n// Concrete creator\nclass ConcreteCreator extends Creator {\n    @Override\n    public Product createProduct() {\n        return new ConcreteProductA();\n    }\n}\n</code></pre> <p>Learn more: https://refactoring.guru/design-patterns/factory-method</p>"},{"location":"week-9/ce204-week-9/#solid-principles","title":"SOLID Principles","text":"<p>SOLID is a set of five design principles that help make software designs more understandable, flexible, and maintainable.</p> <p>The five principles are:</p> <ol> <li>**S**ingle Responsibility Principle</li> <li>**O**pen/Closed Principle</li> <li>**L**iskov Substitution Principle</li> <li>**I**nterface Segregation Principle</li> <li>**D**ependency Inversion Principle</li> </ol> <p>Resources: - https://www.monterail.com/blog/solid-principles-cheatsheet-printable - https://www.monterail.com/hubfs/PDF%20content/SOLID_cheatsheet.pdf - https://www.freecodecamp.org/news/solid-principles-explained-in-plain-english/</p>"},{"location":"week-9/ce204-week-9/#single-responsibility-principle-srp","title":"Single Responsibility Principle (SRP)","text":"<p>\"A class should have only one reason to change.\"</p> <p>Each class should have a single responsibility or purpose. It should encapsulate only one aspect of the software's functionality.</p> <pre><code>// Violates SRP\nclass Employee {\n    public void calculatePay() { /* ... */ }\n    public void saveToDatabase() { /* ... */ }\n    public void generateReport() { /* ... */ }\n}\n\n// Follows SRP\nclass Employee {\n    private String name;\n    private double salary;\n    // Employee properties and behavior only\n}\n\nclass PayrollCalculator {\n    public double calculatePay(Employee employee) { /* ... */ }\n}\n\nclass EmployeeRepository {\n    public void save(Employee employee) { /* ... */ }\n}\n\nclass ReportGenerator {\n    public void generateReport(Employee employee) { /* ... */ }\n}\n</code></pre>"},{"location":"week-9/ce204-week-9/#openclosed-principle-ocp","title":"Open/Closed Principle (OCP)","text":"<p>\"Software entities should be open for extension but closed for modification.\"</p> <p>You should be able to extend a class's behavior without modifying it.</p> <pre><code>// Violates OCP\nclass Rectangle {\n    public double width;\n    public double height;\n}\n\nclass AreaCalculator {\n    public double calculateArea(Object shape) {\n        if (shape instanceof Rectangle) {\n            Rectangle rect = (Rectangle) shape;\n            return rect.width * rect.height;\n        }\n        // Add more conditions for new shapes\n        return 0;\n    }\n}\n\n// Follows OCP\ninterface Shape {\n    double calculateArea();\n}\n\nclass Rectangle implements Shape {\n    private double width;\n    private double height;\n\n    @Override\n    public double calculateArea() {\n        return width * height;\n    }\n}\n\nclass Circle implements Shape {\n    private double radius;\n\n    @Override\n    public double calculateArea() {\n        return Math.PI * radius * radius;\n    }\n}\n</code></pre>"},{"location":"week-9/ce204-week-9/#liskov-substitution-principle-lsp","title":"Liskov Substitution Principle (LSP)","text":"<p>\"Subtypes must be substitutable for their base types.\"</p> <p>Objects of a superclass should be replaceable with objects of a subclass without affecting the correctness of the program.</p> <pre><code>// Violates LSP\nclass Rectangle {\n    protected int width;\n    protected int height;\n\n    public void setWidth(int width) {\n        this.width = width;\n    }\n\n    public void setHeight(int height) {\n        this.height = height;\n    }\n\n    public int getArea() {\n        return width * height;\n    }\n}\n\nclass Square extends Rectangle {\n    @Override\n    public void setWidth(int width) {\n        this.width = width;\n        this.height = width;  // Square changes both dimensions\n    }\n\n    @Override\n    public void setHeight(int height) {\n        this.width = height;  // Square changes both dimensions\n        this.height = height;\n    }\n}\n\n// LSP violation example\nvoid testRectangle(Rectangle r) {\n    r.setWidth(5);\n    r.setHeight(4);\n    assert r.getArea() == 20; // Fails for Square\n}\n</code></pre> <p>More examples: https://code-examples.net/en/q/a476f2</p>"},{"location":"week-9/ce204-week-9/#interface-segregation-principle-isp","title":"Interface Segregation Principle (ISP)","text":"<p>\"Clients should not be forced to depend on interfaces they do not use.\"</p> <p>Many client-specific interfaces are better than one general-purpose interface.</p> <pre><code>// Violates ISP\ninterface Worker {\n    void work();\n    void eat();\n    void sleep();\n}\n\nclass Robot implements Worker {\n    public void work() { /* ... */ }\n    public void eat() { /* Not applicable */ }  \n    public void sleep() { /* Not applicable */ }\n}\n\n// Follows ISP\ninterface Workable {\n    void work();\n}\n\ninterface Eatable {\n    void eat();\n}\n\ninterface Sleepable {\n    void sleep();\n}\n\nclass Human implements Workable, Eatable, Sleepable {\n    public void work() { /* ... */ }\n    public void eat() { /* ... */ }\n    public void sleep() { /* ... */ }\n}\n\nclass Robot implements Workable {\n    public void work() { /* ... */ }\n}\n</code></pre>"},{"location":"week-9/ce204-week-9/#dependency-inversion-principle-dip","title":"Dependency Inversion Principle (DIP)","text":"<p>\"High-level modules should not depend on low-level modules. Both should depend on abstractions.\"</p> <p>\"Abstractions should not depend on details. Details should depend on abstractions.\"</p> <pre><code>// Violates DIP\nclass LightBulb {\n    public void turnOn() {\n        // Turn on the light\n    }\n\n    public void turnOff() {\n        // Turn off the light\n    }\n}\n\nclass Switch {\n    private LightBulb bulb;\n\n    public Switch() {\n        this.bulb = new LightBulb();\n    }\n\n    public void operate() {\n        // Logic to operate the switch\n        bulb.turnOn();\n    }\n}\n\n// Follows DIP\ninterface Switchable {\n    void turnOn();\n    void turnOff();\n}\n\nclass LightBulb implements Switchable {\n    public void turnOn() {\n        // Turn on the light\n    }\n\n    public void turnOff() {\n        // Turn off the light\n    }\n}\n\nclass Fan implements Switchable {\n    public void turnOn() {\n        // Turn on the fan\n    }\n\n    public void turnOff() {\n        // Turn off the fan\n    }\n}\n\nclass Switch {\n    private Switchable device;\n\n    public Switch(Switchable device) {\n        this.device = device;\n    }\n\n    public void operate() {\n        // Logic to operate the switch\n        device.turnOn();\n    }\n}\n</code></pre>"},{"location":"week-9/ce204-week-9/#inversion-of-control-ioc-and-dependency-injection-di","title":"Inversion of Control (IoC) and Dependency Injection (DI)","text":"<p>Inversion of Control is a design principle in which custom-written portions of a program receive the flow of control from a generic framework.</p> <p>Dependency Injection is a specific form of IoC where the dependencies of a class are \"injected\" from the outside.</p> <p>Resources: - http://www.dotnet-stuff.com/tutorials/dependency-%C4%B1njection/understanding-and-implementing-inversion-of-control-container-ioc-container-using-csharp - https://stackify.com/dependency-injection/ - https://www.tutorialsteacher.com/ioc/inversion-of-control - https://www.wikiwand.com/en/Dependency_injection - https://www.baeldung.com/inversion-control-and-dependency-injection-in-spring</p>"},{"location":"week-9/ce204-week-9/#types-of-dependency-injection","title":"Types of Dependency Injection","text":""},{"location":"week-9/ce204-week-9/#1-constructor-injection","title":"1. Constructor Injection","text":"<p>Dependencies are provided through a class constructor.</p> <pre><code>class Service {\n    private final Repository repository;\n\n    public Service(Repository repository) {\n        this.repository = repository;\n    }\n}\n</code></pre>"},{"location":"week-9/ce204-week-9/#2-setter-injection","title":"2. Setter Injection","text":"<p>Dependencies are provided through setter methods.</p> <pre><code>class Service {\n    private Repository repository;\n\n    public void setRepository(Repository repository) {\n        this.repository = repository;\n    }\n}\n</code></pre>"},{"location":"week-9/ce204-week-9/#3-interface-injection","title":"3. Interface Injection","text":"<p>Dependencies are provided through an interface method.</p> <pre><code>interface RepositoryInjector {\n    void injectRepository(Repository repository);\n}\n\nclass Service implements RepositoryInjector {\n    private Repository repository;\n\n    @Override\n    public void injectRepository(Repository repository) {\n        this.repository = repository;\n    }\n}\n</code></pre>"},{"location":"week-9/ce204-week-9/#benefits-of-design-patterns-and-solid","title":"Benefits of Design Patterns and SOLID","text":"<ul> <li>Improved Code Quality: More maintainable, flexible, and robust code</li> <li>Reduced Complexity: Break down complex problems into smaller, manageable parts</li> <li>Better Communication: Common vocabulary for discussing design solutions</li> <li>Faster Development: Reuse proven solutions rather than reinventing</li> <li>Easier Testing: More modular code is easier to test</li> <li>Reduced Technical Debt: Future changes require less rework</li> </ul>"},{"location":"week-9/ce204-week-9/#security-best-practices-in-design","title":"Security Best Practices in Design","text":"<p>When applying design patterns, also consider security aspects:</p> <p>https://www.cisecurity.org/controls/cis-controls-list</p> <ul> <li>Ensure authentication and authorization are properly encapsulated</li> <li>Apply principle of least privilege</li> <li>Consider data validation at every boundary</li> <li>Implement proper error handling that doesn't leak information</li> <li>Design for security from the beginning</li> </ul>"},{"location":"week-9/ce204-week-9/#references","title":"References","text":"<ul> <li>Gamma, E., Helm, R., Johnson, R., Vlissides, J. (1994). Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley.</li> <li>Martin, R. C. (2003). Agile Software Development, Principles, Patterns, and Practices. Pearson.</li> <li>Freeman, E., Robson, E., Bates, B., Sierra, K. (2004). Head First Design Patterns. O'Reilly Media.</li> <li>Refactoring Guru. (n.d.). Design Patterns. https://refactoring.guru/design-patterns</li> <li>Martin, R. C. (n.d.). The Principles of OOD. http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod</li> </ul> <p>And all the references linked throughout the presentation.</p>"},{"location":"week-9/ce204-week-9/#recommended-practice","title":"Recommended Practice","text":"<ol> <li>Implement the Factory Method pattern in a simple application</li> <li>Refactor an existing codebase to apply SOLID principles</li> <li>Create a small application using Dependency Injection</li> <li>Identify design patterns in existing frameworks (Spring, JavaFX, etc.)</li> <li>Practice explaining when and why to use specific patterns</li> </ol>"},{"location":"week-9/ce204-week-9/#next-week","title":"Next Week","text":"<p>We'll continue exploring more design patterns and their practical implementations in Java.</p>"},{"location":"tr/license/","title":"Lisans","text":""},{"location":"tr/license/#code-license","title":"Code License","text":"<p>MIT Lisans\u0131</p> <p>Telif hakk\u0131 \u00a9 2019-2024 U\u011fur CORUH</p> <p>Bu yaz\u0131l\u0131m\u0131n ve ili\u015fkili dok\u00fcmantasyon dosyalar\u0131n\u0131n (\"Yaz\u0131l\u0131m\") bir kopyas\u0131n\u0131 edinen her ki\u015fiye, a\u015fa\u011f\u0131daki ko\u015fullara tabi olmak kayd\u0131yla, Yaz\u0131l\u0131m\u0131 herhangi bir k\u0131s\u0131tlama olmaks\u0131z\u0131n kullanma, kopyalama, de\u011fi\u015ftirme, birle\u015ftirme, yay\u0131nlama, da\u011f\u0131tma, alt lisanslama ve/veya Yaz\u0131l\u0131m\u0131n kopyalar\u0131n\u0131 satma hakk\u0131 \u00fccretsiz olarak verilmektedir, ayr\u0131ca Yaz\u0131l\u0131m\u0131n sa\u011fland\u0131\u011f\u0131 ki\u015filere de bu haklar\u0131n verilmesine izin verilmektedir:</p> <p>Yukar\u0131daki telif hakk\u0131 bildirimi ve bu izin bildirimi, Yaz\u0131l\u0131m\u0131n t\u00fcm kopyalar\u0131na veya \u00f6nemli k\u0131s\u0131mlar\u0131na dahil edilecektir.</p> <p>YAZILIM, \"OLDU\u011eU G\u0130B\u0130\" SA\u011eLANMAKTADIR, T\u0130CAR\u0130 ELVER\u0130\u015eL\u0130L\u0130K, BEL\u0130RL\u0130 B\u0130R AMACA UYGUNLUK VE \u0130HLAL ETMEME DAH\u0130L ANCAK BUNLARLA SINIRLI OLMAMAK \u00dcZERE A\u00c7IK VEYA ZIMN\u0130 HERHANG\u0130 B\u0130R GARANT\u0130 OLMAKSIZIN SA\u011eLANMAKTADIR. H\u0130\u00c7B\u0130R DURUMDA YAZARLAR VEYA TEL\u0130F HAKKI SAH\u0130PLER\u0130, YAZILIMIN VEYA YAZILIMIN KULLANIMI VEYA BA\u015eKA B\u0130R \u015eEK\u0130LDE \u0130LG\u0130L\u0130 OLAN HERHANG\u0130 B\u0130R TALEP, ZARAR VEYA D\u0130\u011eER Y\u00dcK\u00dcML\u00dcL\u00dcKLERDEN SORUMLU TUTULAMAZ.</p>"},{"location":"tr/license/#content-license","title":"Content License","text":"<p>Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 Uluslararas\u0131 Lisans\u0131 (CC BY-NC-ND 4.0)</p> <p>Serbestsiniz:</p> <ul> <li>Payla\u015fmak: Materyali her ortamda veya formatta kopyalayabilir ve yeniden da\u011f\u0131tabilirsiniz.</li> </ul> <p>A\u015fa\u011f\u0131daki ko\u015fullar alt\u0131nda:</p> <ul> <li>At\u0131f: Uygun at\u0131f yapmal\u0131s\u0131n\u0131z, lisansa bir ba\u011flant\u0131 sa\u011flamal\u0131s\u0131n\u0131z ve de\u011fi\u015fiklik yap\u0131l\u0131p yap\u0131lmad\u0131\u011f\u0131n\u0131 belirtmelisiniz. Bunu makul bir \u015fekilde yapabilirsiniz, ancak lisans verenin sizi veya kullan\u0131m\u0131n\u0131z\u0131 onaylad\u0131\u011f\u0131n\u0131 ima edecek bir \u015fekilde de\u011fil.</li> <li>Ticari Olmayan: Materyali ticari ama\u00e7larla kullanamazs\u0131n\u0131z.</li> <li>T\u00fcrev Yaratamazs\u0131n\u0131z: Materyali yeniden kar\u0131\u015ft\u0131ramaz, d\u00f6n\u00fc\u015ft\u00fcremez veya \u00fczerine in\u015fa edemezsiniz.</li> </ul> <p>Ek k\u0131s\u0131tlama yoktur \u2014 Lisans\u0131n izin verdi\u011fi hi\u00e7bir \u015feyi ba\u015fkalar\u0131n\u0131n yapmas\u0131n\u0131 yasal olarak k\u0131s\u0131tlayan yasal terimler veya teknolojik \u00f6nlemler uygulayamazs\u0131n\u0131z.</p> <p>Daha fazla detay i\u00e7in: Creative Commons CC BY-NC-ND 4.0</p>"},{"location":"tr/changelog/","title":"Revizyonlar","text":""},{"location":"tr/project-guide/","title":"Proje Rehberi","text":""},{"location":"tr/resume/","title":"\u00d6zge\u00e7mi\u015f","text":""},{"location":"tr/resume/#ozgecmis","title":"\u00d6zge\u00e7mi\u015f","text":"<p>\u0130ndir </p> <ul> <li> <p>\u00d6zge\u00e7mi\u015f-\u0130ngilizce</p> </li> <li> <p>\u00d6zge\u00e7mi\u015f-T\u00fcrk\u00e7e</p> </li> </ul> \u0130ngilizce T\u00fcrk\u00e7e"},{"location":"tr/syllabus/syllabus/","title":"CEN206 Nesne Y\u00f6nelimli Programlama Ders \u0130zlencesi","text":""},{"location":"tr/syllabus/syllabus/#recep-tayyip-erdogan-universitesi","title":"Recep Tayyip Erdo\u011fan \u00dcniversitesi","text":""},{"location":"tr/syllabus/syllabus/#muhendislik-ve-mimarlk-fakultesi","title":"M\u00fchendislik ve Mimarl\u0131k Fak\u00fcltesi","text":""},{"location":"tr/syllabus/syllabus/#bilgisayar-muhendisligi","title":"Bilgisayar M\u00fchendisli\u011fi","text":""},{"location":"tr/syllabus/syllabus/#cen206-nesne-yonelimli-programlama","title":"CEN206 Nesne Y\u00f6nelimli Programlama","text":""},{"location":"tr/syllabus/syllabus/#ders-izlencesi","title":"Ders \u0130zlencesi","text":""},{"location":"tr/syllabus/syllabus/#bahar-donemi-2024-2025","title":"Bahar D\u00f6nemi, 2024-2025","text":"<p>\u0130ndir BELGE, SLAYT, PPTX</p> <p>\u0130ndir WORD (Eski), PDF (Eski)</p> \u00d6\u011fretim \u00dcyesi Dr. \u00d6\u011fr. \u00dcyesi U\u011fur CORUH \u0130leti\u015fim Bilgileri ugur.coruh@erdogan.edu.tr Ofis No F-301 Google Classroom Kodu N/A Microsoft Teams Kodu 42ttevp Ders G\u00fcn ve Saatleri Cuma 13:00-16:00 (Teori ve Lab) ED-K4-20 (D-414) Derslik \u0130\u0130BF &amp; Hukuk Fak\u00fcltesi Binas\u0131 / ED-K4-20 (D-414) veya \u00c7evrimi\u00e7i Google Meet / Microsoft Teams Ofis Saatleri G\u00f6r\u00fc\u015fmeler \u00fcniversite e-posta hesab\u0131n\u0131z \u00fczerinden Google Meet veya Microsoft Teams arac\u0131l\u0131\u011f\u0131yla planlanacak ve talep e-postalar\u0131 yoluyla ger\u00e7ekle\u015ftirilecektir. H\u0131zl\u0131 yan\u0131t almak i\u00e7in l\u00fctfen konu alan\u0131 [CEN206] ile ba\u015flayan e-postalar g\u00f6nderin ve resmi, a\u00e7\u0131k ve k\u0131sa e-postalar yaz\u0131n. Ders ve \u0130leti\u015fim Dili \u0130ngilizce Teori/Laboratuvar Haftal\u0131k Saat 3/0 Saat Kredi 3 \u00d6n Ko\u015ful Yok Yan Ko\u015ful Yok Gereklilik Yok"},{"location":"tr/syllabus/syllabus/#a-ders-tanm","title":"A. Ders Tan\u0131m\u0131","text":"<p>Bu ders, Java gibi \u00fcst d\u00fczey bir dil kullanarak nesne y\u00f6nelimli programlama ve tasar\u0131m temelleri \u00fczerine odaklanan ileri programlama becerilerini tan\u0131t\u0131r. Nesne y\u00f6nelimli programlama, yaz\u0131l\u0131m bile\u015fenlerini b\u00fcy\u00fck \u00f6l\u00e7ekli bir yaz\u0131l\u0131m mimarisine entegre etme s\u00fcrecidir. Kodlaman\u0131n temellerini \u00f6\u011frendikten sonra, yaz\u0131l\u0131m geli\u015ftirmeye y\u00f6nelik bu yakla\u015f\u0131m, b\u00fcy\u00fck \u00f6l\u00e7ekli programlara izin veren bir sonraki mant\u0131kl\u0131 ad\u0131md\u0131r. Ders, s\u0131n\u0131flar, nesneler, veri soyutlama, metotlar, metot a\u015f\u0131r\u0131 y\u00fckleme, kal\u0131t\u0131m ve \u00e7ok bi\u00e7imlilik gibi nesne y\u00f6nelimli kavramlar\u0131 anlamaya ve uygulamaya odaklan\u0131r. Ders, nesne y\u00f6nelimli programlama konular\u0131nda \u00f6\u011frenme y\u00f6ntemleri ve uygulamalar bulmak i\u00e7in uzmanl\u0131k payla\u015f\u0131m\u0131 ve \u00f6\u011frencilere rehberlik etme etraf\u0131nda yap\u0131land\u0131r\u0131lacakt\u0131r. Derslerde programlama uygulamalar\u0131 ve projeleri yapmak, teoriyi prati\u011fe d\u00f6kerek \u00f6\u011frenme s\u00fcrecini g\u00fc\u00e7lendirecektir.</p>"},{"location":"tr/syllabus/syllabus/#b-ders-ogrenme-cktlar","title":"B. Ders \u00d6\u011frenme \u00c7\u0131kt\u0131lar\u0131","text":"<p>Bu dersi ba\u015far\u0131yla tamamlayan bir \u00f6\u011frenci:</p> <ul> <li> <p>Nesne y\u00f6nelimli teknikler kullanarak uygulamalar tasarlayabilir</p> </li> <li> <p>Yaz\u0131l\u0131m geli\u015ftirmeyi y\u00f6netmek i\u00e7in birle\u015fik yaz\u0131l\u0131m geli\u015ftirme s\u00fcrecini kullanabilir</p> </li> <li> <p>Uygulamalar\u0131n notasyon diyagramlar\u0131 i\u00e7in UML kullanabilir</p> </li> <li> <p>Yaz\u0131l\u0131m geli\u015ftirme i\u00e7in yararl\u0131 tasar\u0131m ve mimari desenlerini uygulayabilir.</p> </li> </ul>"},{"location":"tr/syllabus/syllabus/#c-ders-konular","title":"C. Ders Konular\u0131","text":"<ul> <li> <p>Nesne y\u00f6nelimli kavramlar</p> </li> <li> <p>Birle\u015fik nesne y\u00f6nelimli analiz ve tasar\u0131m s\u00fcreci</p> </li> <li> <p>Birle\u015fik Model Dili (UML)</p> </li> <li> <p>Kullan\u0131m senaryosu analizi</p> </li> <li> <p>Nesne yap\u0131s\u0131 ve davran\u0131\u015f analizi</p> </li> <li> <p>Sistem tasar\u0131m\u0131</p> </li> <li> <p>Uygulama mimarisi ve tasar\u0131m desenleri</p> </li> <li> <p>Nesne y\u00f6nelimli tasar\u0131m\u0131n Java uygulamas\u0131</p> </li> </ul>"},{"location":"tr/syllabus/syllabus/#d-ders-kitaplar-ve-gerekli-donanm-veya-ekipman","title":"D. Ders Kitaplar\u0131 ve Gerekli Donan\u0131m veya Ekipman","text":"<p>Bu ders i\u00e7in bir kurs kitab\u0131 gerekmez. Gerekirse, a\u015fa\u011f\u0131daki kitaplar\u0131 ve a\u00e7\u0131k kaynakl\u0131 \u00e7evrimi\u00e7i kaynaklar\u0131 kullanabilirsiniz.</p> <ul> <li> <p>Timothy C. Lethbridge ve Robert Lagani\u00e8re, Object-Oriented Software Engineering: Practical Software Development using UML and Java, McGraw Hill</p> </li> <li> <p>Walter Savitch, Absolute C++, Addison-Wesley Longman</p> </li> </ul> <ul> <li> <p>Intro to Java Programming, Comprehensive Version (10<sup>th</sup> Edition) 10<sup>th</sup> Edition by Y. Daniel Liang</p> </li> <li> <p>Harvey M. Deitel ve Paul J. Deitel. 2001. Java How to Program (4<sup>th</sup>. ed.). Prentice Hall PTR, USA.</p> </li> <li> <p>Paul Deitel ve Harvey Deitel. 2016. Visual C# How to Program (6<sup>th</sup>. ed.). Pearson.</p> </li> <li> <p>Ek Kitaplar Belirlenecek</p> </li> </ul> <p>Bu ders s\u00fcresince, programlama uygulamalar\u0131 i\u00e7in bir diz\u00fcst\u00fc bilgisayara sahip olmal\u0131s\u0131n\u0131z. Kendi geli\u015ftirme ortam\u0131n\u0131z olacak ve bunu s\u0131nav, \u00f6dev ve s\u0131n\u0131f uygulamalar\u0131 i\u00e7in kullanacaks\u0131n\u0131z.</p>"},{"location":"tr/syllabus/syllabus/#e-degerlendirme-sistemi","title":"E. De\u011ferlendirme Sistemi","text":"<p>D\u00f6nem boyunca bir proje ve iki yaz\u0131l\u0131 s\u0131nav tamamlayacaks\u0131n\u0131z. Ara s\u0131navda Ara S\u0131nav Proje Raporu (MPR1) sunman\u0131z beklenecek, projenizin ilerlemesini ve uygulamas\u0131n\u0131 g\u00f6stermeniz istenecektir. 15. haftada Final Proje Raporunuzu (MPR2) sunacak ve teslim edeceksiniz.</p> <ol> <li>haftada (QUIZ1) ve 13. haftada (QUIZ2) olmak \u00fczere iki yaz\u0131l\u0131 s\u0131nava gireceksiniz.</li> </ol> De\u011ferlendirme Kod A\u011f\u0131rl\u0131k Kapsam Ara S\u0131nav Proje Raporu MPR1 %60 Ara S\u0131nav S\u0131nav-1 QUIZ1 %40 Ara S\u0131nav Final Proje Raporu MPR2 %70 Final S\u0131nav-2 QUIZ2 %30 Final \\[ Aras\u0131navNotu = 0.6MPR1 + 0.4QUIZ1 \\] \\[ FinalNotu = 0.7MPR2 + 0.3QUIZ2 \\] \\[ Ge\u00e7meNotu = (40 * Aras\u0131navNotu + 60 * FinalNotu)/100 \\]"},{"location":"tr/syllabus/syllabus/#f-ogretim-stratejileri-ve-yontemleri","title":"F. \u00d6\u011fretim Stratejileri ve Y\u00f6ntemleri","text":"<p>Bu dersin temel \u00f6\u011fretim y\u00f6ntemi, s\u0131n\u0131fta y\u00fcz y\u00fcze olacak \u015fekilde planlanacak ve destek kaynaklar\u0131, \u00f6devler ve duyurular Google Classroom \u00fczerinden payla\u015f\u0131lacakt\u0131r. Beklenmedik durumlarda ders, afet senaryolar\u0131 i\u00e7in \u00e7evrimi\u00e7i olarak planlanacakt\u0131r. \u00d6\u011frencilerin y\u00fcz y\u00fcze y\u00f6ntem se\u00e7ilirse \u00fcniversitede olmalar\u0131 beklenmektedir. Bu sorumluluk bu dersi ba\u015far\u0131yla tamamlamak i\u00e7in \u00e7ok \u00f6nemlidir. Pandemi durumu de\u011fi\u015firse ve bu ders s\u0131ras\u0131nda uzaktan e\u011fitim gerekirse, bu ders senkron ve asenkron uzaktan e\u011fitim y\u00f6ntemleri kullan\u0131larak yap\u0131lacakt\u0131r. Bu senaryoda, \u00f6\u011frencilerin ders program\u0131nda belirtilen saatte \u00e7evrimi\u00e7i platformda, Zoom'da veya Meet'te olmalar\u0131 beklenmektedir. Yoklama al\u0131nacakt\u0131r.</p>"},{"location":"tr/syllabus/syllabus/#g-gec-odev","title":"G. Ge\u00e7 \u00d6dev","text":"<p>D\u00f6nem boyunca, \u00f6devler duyurulan son teslim tarihine uygun olarak teslim edilmelidir. S\u00fcresi ge\u00e7mi\u015f \u00f6devler kabul edilmeyecektir. \u00d6\u011frenciler taraf\u0131ndan ge\u00e7 \u00f6devler i\u00e7in beklenmedik durumlar e\u011fitmene bildirilmelidir.</p>"},{"location":"tr/syllabus/syllabus/#h-ders-platformu-ve-iletisim","title":"H. Ders Platformu ve \u0130leti\u015fim","text":"<p>Google Classroom ve Github, ders \u00f6\u011frenme y\u00f6netim sistemi olarak kullan\u0131lacakt\u0131r. Ders hakk\u0131ndaki t\u00fcm elektronik kaynaklar ve duyurular bu platform \u00fczerinden payla\u015f\u0131lacakt\u0131r. Dersi ba\u015far\u0131yla tamamlamak i\u00e7in ders sayfas\u0131n\u0131 g\u00fcnl\u00fck olarak kontrol etmek, gerekli kaynaklara ve duyurulara eri\u015fmek ve e\u011fitmenle ileti\u015fim kurmak \u00e7ok \u00f6nemlidir.</p>"},{"location":"tr/syllabus/syllabus/#i-akademik-durustluk-intihal-ve-kopya","title":"I. Akademik D\u00fcr\u00fcstl\u00fck, \u0130ntihal ve Kopya","text":"<p>Akademik D\u00fcr\u00fcstl\u00fck, RTE\u00dc \u00dcniversitesi'nin en \u00f6nemli ilkelerinden biridir. Akademik d\u00fcr\u00fcstl\u00fck ilkelerini ihlal eden herkes ciddi \u015fekilde cezaland\u0131r\u0131l\u0131r.</p> <p>S\u0131n\u0131f arkada\u015flar\u0131n\u0131zla ve ba\u015fkalar\u0131yla \"birlikte \u00e7al\u0131\u015fmak\" do\u011fald\u0131r. Bir \u00f6\u011frencinin, \u00fccretli veya \u00fccretsiz olarak, ba\u015fka birinden zor bir konuyu veya t\u00fcm bir dersi daha iyi anlamak i\u00e7in yard\u0131m istemesi de s\u00f6z konusu olabilir. Ancak, \"birlikte \u00e7al\u0131\u015fmak\" veya \"\u00f6zel ders almak\" ile \"akademik sahtekarl\u0131k\" aras\u0131ndaki s\u0131n\u0131r nedir? Ne zaman intihal, ne zaman kopya \u00e7ekmedir?</p> <p>S\u0131nav s\u0131ras\u0131nda ba\u015fka bir \u00f6\u011frencinin ka\u011f\u0131d\u0131na veya izin verilenden ba\u015fka bir kayna\u011fa bakmak kopya \u00e7ekmektir ve cezaland\u0131r\u0131lacakt\u0131r. Bununla birlikte, bir\u00e7ok \u00f6\u011frencinin \u00f6zellikle \u00f6devler i\u00e7in neyin kabul edilebilir oldu\u011fu ve neyin \"kopyalama\" say\u0131ld\u0131\u011f\u0131 konusunda \u00e7ok az deneyimle \u00fcniversiteye geldi\u011fi bilinmektedir.</p> <p>A\u015fa\u011f\u0131dakiler, \u00f6\u011frencinin not alaca\u011f\u0131 \u00f6devler i\u00e7in akademik d\u00fcr\u00fcstl\u00fck felsefesini vurgulamak amac\u0131yla M\u00fchendislik ve Mimarl\u0131k Fak\u00fcltesi \u00f6\u011frencileri i\u00e7in k\u0131lavuz olarak sunulmu\u015ftur. A\u015fa\u011f\u0131da a\u00e7\u0131klanmayan bir durum ortaya \u00e7\u0131karsa, \u00f6\u011frencinin yapmak istediklerinin akademik d\u00fcr\u00fcstl\u00fck \u00e7er\u00e7evesi i\u00e7inde kal\u0131p kalmayaca\u011f\u0131n\u0131 dersin \u00f6\u011fretim \u00fcyesine veya asistan\u0131na sormas\u0131 tavsiye edilir.</p>"},{"location":"tr/syllabus/syllabus/#a-bir-odev-hazrlarken-kabul-edilebilir-olan-nedir","title":"a. Bir \u00f6dev haz\u0131rlarken kabul edilebilir olan nedir?","text":"<ul> <li>\u00d6devi daha iyi anlamak i\u00e7in s\u0131n\u0131f arkada\u015flar\u0131yla ileti\u015fim kurmak</li> </ul> <ul> <li> <p>\u0130nternette veya ba\u015fka bir yerde buldu\u011funuz fikirleri, al\u0131nt\u0131lar\u0131, paragraflar\u0131, k\u00fc\u00e7\u00fck kod par\u00e7ac\u0131klar\u0131n\u0131 (snippets) \u00f6devinize yerle\u015ftirmek, \u015fu ko\u015fullarda:</p> </li> <li> <p>bunlar kendi ba\u015flar\u0131na \u00f6devin tamam\u0131 de\u011filse,</p> </li> <li> <p>bunlar\u0131n kayna\u011f\u0131n\u0131 belirtiyorsan\u0131z</p> </li> </ul> <ul> <li> <p>\u00d6devi dil i\u00e7eri\u011fi konusunda yard\u0131m almak i\u00e7in kaynaklara dan\u0131\u015fmak.</p> </li> <li> <p>Tart\u0131\u015fmal\u0131 konular hakk\u0131nda s\u0131n\u0131fta tart\u0131\u015fma yaratmak i\u00e7in \u00f6devinizin k\u00fc\u00e7\u00fck par\u00e7alar\u0131n\u0131 payla\u015fmak.</p> </li> </ul> <ul> <li> <p>Do\u011frudan \u00f6deve cevap olmayan, fakat talimatlara, referanslara ve teknik zorluklar\u0131n \u00e7\u00f6z\u00fcmlerine y\u00f6nelik web veya ba\u015fka kaynaklara ba\u015fvurmak.</p> </li> <li> <p>Diyagramlar veya \u00f6zetlenmi\u015f ifadeler kullanarak ba\u015fkalar\u0131yla \u00f6dev \u00e7\u00f6z\u00fcmlerini tart\u0131\u015fmak, ancak ger\u00e7ek metni veya kodu payla\u015fmamak.</p> </li> <li> <p>E\u011fitmen size \u00f6devlerinizi yapmad\u0131\u011f\u0131 s\u00fcrece, kursla ilgili yard\u0131m i\u00e7in bir e\u011fitmen ile (hatta \u00fccretli olarak) \u00e7al\u0131\u015fmak.</p> </li> </ul>"},{"location":"tr/syllabus/syllabus/#b-kabul-edilemez-olan-nedir","title":"b. Kabul edilemez olan nedir?","text":"<ul> <li> <p>Kendi \u00e7\u00f6z\u00fcm\u00fcn\u00fcz\u00fc teslim etmeden \u00f6nce bir s\u0131n\u0131f arkada\u015f\u0131n\u0131z\u0131n bir probleme y\u00f6nelik \u00e7\u00f6z\u00fcm\u00fcn\u00fc g\u00f6rmek.</p> </li> <li> <p>Dersin dersleri d\u0131\u015f\u0131nda ke\u015ffetti\u011finiz ve \u00e7al\u0131\u015fman\u0131za dahil etti\u011finiz herhangi bir metin (veya programlama dersleri i\u00e7in kod) k\u00f6kenini belirtmemek.</p> </li> <li> <p>Bir s\u0131n\u0131f arkada\u015f\u0131n\u0131z bir sorunu \u00e7\u00f6zmekte zorlan\u0131rken, ona kendi \u00e7\u00f6z\u00fcm\u00fcn\u00fcz\u00fc vermek veya g\u00f6stermek.</p> </li> </ul>"},{"location":"tr/syllabus/syllabus/#j-beklentiler","title":"J. Beklentiler","text":"<p>D\u00f6nem boyunca haftal\u0131k ders gereksinimlerini (okumalar ve \u00f6devler) zaman\u0131nda tamamlayarak derslere zaman\u0131nda kat\u0131lman\u0131z beklenmektedir. \u00d6\u011fretim \u00fcyesi ve \u00f6\u011frenciler aras\u0131ndaki ana ileti\u015fim kanal\u0131 e-posta olacakt\u0131r. L\u00fctfen dersle ilgili sorular\u0131n\u0131z\u0131, \u00fcniversite taraf\u0131ndan size sa\u011flanan e-posta adresi \u00fczerinden \u00f6\u011fretim \u00fcyesinin e-posta adresine g\u00f6nderin. Mesaj\u0131n\u0131z\u0131n konu alan\u0131na ders ad\u0131n\u0131 ve metin alan\u0131na isminizi ekledi\u011finizden emin olun. Ayr\u0131ca, \u00f6\u011fretim \u00fcyesi gerekti\u011finde sizinle e-posta yoluyla ileti\u015fim kuracakt\u0131r. Bu nedenle, sa\u011fl\u0131kl\u0131 ileti\u015fim i\u00e7in e-posta adresinizi her g\u00fcn kontrol etmek \u00e7ok \u00f6nemlidir.</p>"},{"location":"tr/syllabus/syllabus/#k-ders-icerigi-ve-izlence-guncellemeleri","title":"K. Ders \u0130\u00e7eri\u011fi ve \u0130zlence G\u00fcncellemeleri","text":"<p>Gerekli g\u00f6r\u00fcl\u00fcrse, ders i\u00e7eri\u011fi veya ders program\u0131nda de\u011fi\u015fiklikler yap\u0131labilir. Bu belge kapsam\u0131nda herhangi bir de\u011fi\u015fiklik yap\u0131l\u0131rsa, \u00f6\u011fretim \u00fcyesi sizi bilgilendirecektir.</p>"},{"location":"tr/syllabus/syllabus/#ders-program-genel-baks","title":"Ders Program\u0131 Genel Bak\u0131\u015f","text":"Hafta Tarih Konular Di\u011fer G\u00f6revler Hafta 1 14.02.2025 Ders Plan\u0131 ve \u0130leti\u015fim De\u011ferlendirme Sistemi, \u00d6devler ve S\u0131navlar. Yaz\u0131l\u0131m ve Yaz\u0131l\u0131m M\u00fchendisli\u011fi Nesne Y\u00f6nelimi ve Java ile OOP B\u00f6l\u00fcm-I (S\u0131n\u0131flar, Nesneler, Metotlar, Kal\u0131t\u0131m, Eri\u015fim Belirleyicileri, This ve InstanceOf Anahtar Kelimeleri) Hafta 2 21.02.2025 Java ile OOP B\u00f6l\u00fcm-II (super anahtar kelimesi, final anahtar kelimesi, \u00c7ok Bi\u00e7imlilik / Kaps\u00fclleme, Metot Ge\u00e7ersiz K\u0131lma, \u0130\u00e7 \u0130\u00e7e S\u0131n\u0131f, Statik S\u0131n\u0131f, Anonim S\u0131n\u0131f, Enumlar / Enum-Yap\u0131c\u0131 / Enum-String, Soyut S\u0131n\u0131f, Object S\u0131n\u0131f\u0131, Kal\u0131t\u0131m Bi\u00e7imleri, Kal\u0131t\u0131m\u0131n Faydalar\u0131 ve Maliyetleri, Paketler, Paketlerde Eri\u015fim Korumas\u0131) Hafta Tarih Konular Di\u011fer G\u00f6revler Hafta 3 28.02.2025 Java ile OOP B\u00f6l\u00fcm-III (Arabirim Tan\u0131mlama ve Arabirim Uygulama, \u0130\u00e7 \u0130\u00e7e Arabirimler, Arabirimlerde De\u011fi\u015fkenler, Arabirimleri Geni\u015fletme, Yans\u0131ma, Sarmalay\u0131c\u0131 S\u0131n\u0131flar, Lambda Notasyonu) Hafta 4 07.03.2025 Java ile OOP B\u00f6l\u00fcm-III (Arabirim Tan\u0131mlama ve Arabirim Uygulama, \u0130\u00e7 \u0130\u00e7e Arabirimler, Arabirimlerde De\u011fi\u015fkenler, Arabirimleri Geni\u015fletme, Yans\u0131ma, Sarmalay\u0131c\u0131 S\u0131n\u0131flar, Lambda Notasyonu) Hafta 5 14.03.2025 Java ile OOP B\u00f6l\u00fcm-IV Hafta Tarih Konular Di\u011fer G\u00f6revler Hafta 6 21.03.2025 UMPLE ve \u00d6rnekler Hafta 7 28.03.2025 UMPLE ve \u00d6rnekler S\u0131nav-1 (\u00c7ar\u015famba \u00f6\u011fleden sonra) Hafta 8 04.04.2025 Proje \u00d6devi Kontrolleri ve \u00d6zeti Proje \u00f6devi incelemesi Hafta 9 11.04.2025 Ara S\u0131nav Ara S\u0131nav Proje Raporu Teslimi Hafta Tarih Konular Di\u011fer G\u00f6revler Hafta 10 18.04.2025 Tasar\u0131m Desenleri Kullan\u0131m\u0131 Hafta 11 25.04.2025 Tasar\u0131m Desenleri Kullan\u0131m\u0131 Hafta 12 02.05.2025 UML + UMPLE + Java Uygulamalar\u0131 Hafta 13 09.05.2025 S\u0131nav 2 S\u0131nav-2 Hafta Tarih Konular Di\u011fer G\u00f6revler Hafta 14 16.05.2025 SMC Uzak Servis Vaka \u00c7al\u0131\u015fmas\u0131 ve OOP ATM Vaka \u00c7al\u0131\u015fmas\u0131 Hafta 15 23.05.2025 Proje \u00d6devi Kontrolleri ve \u00d6zeti Final Proje Raporu Teslimi Hafta 16 24.05.2025 Final <p>\\(CEN206-Ders-\u0130zlencesi-Sonu\\)</p>"},{"location":"tr/week-1/ce204-week-1/#cen206-object-oriented-programming-formerly-ce204","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"tr/week-1/ce204-week-1/#week-1-software-engineering-and-oop-with-java-i","title":"Week-1 (Software Engineering and OOP with Java -I)","text":""},{"location":"tr/week-1/ce204-week-1/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC-PDF, DOC-DOCX, SLIDE, PPTX,</p>"},{"location":"tr/week-1/ce204-week-1/#brief-description-of-course-and-rules","title":"Brief Description of Course and Rules","text":"<p>We will first talk about, </p> <ol> <li> <p>Course Plan and Communication</p> </li> <li> <p>Grading System, Homeworks, and Exams</p> </li> </ol> <p>please read the syllabus carefully. </p>"},{"location":"tr/week-1/ce204-week-1/#the-nature-of-software-2","title":"The Nature of Software... (2)","text":"<ul> <li> <p>Software is easy to modify</p> </li> <li> <p>People make changes without fully understanding it</p> </li> <li> <p>Software does not \"wear out\"</p> </li> <li> <p>It deteriorates by having its design changed:</p> <ul> <li>erroneously, or</li> <li>in ways that were not anticipated, thus making it complex</li> </ul> </li> <li> <p>Conclusions</p> </li> <li> <p>Much software has poor design and is getting worse</p> </li> <li>We have to learn to \u2018engineer\u2019 software</li> </ul>"},{"location":"tr/week-1/ce204-week-1/#need-for-a-good-programming-method","title":"Need  for a good programming method","text":"<ul> <li> <p>Common problems </p> </li> <li> <p>Why does it take so long? </p> </li> <li> <p>Why are development costs so high? </p> </li> <li> <p>Why can\u2019t find all faults before delivery? </p> </li> <li> <p>Why can\u2019t we measure development?</p> </li> </ul> <p>NIST reported that even though 50 percent of software development budgets go to testing, flaws in software still cost the U.S. economy $59.5 billion annually.*</p> <p>Updated NIST Software Uses Combination Testing to Catch Bugs Fast and Easy | NIST</p>"},{"location":"tr/week-1/ce204-week-1/#what-is-software-engineering-2","title":"What is Software Engineering? (2)","text":"<ul> <li>Solving customers\u2019 problems</li> <li>The goal<ul> <li>Sometimes the solution is to buy, not build</li> <li>Adding unnecessary features often makes software worse</li> <li>Software engineers must communicate effectively to identify and understand the problem</li> </ul> </li> </ul>"},{"location":"tr/week-1/ce204-week-1/#software-quality","title":"Software Quality","text":"<ul> <li>Usability</li> <li>Users can learn it and fast and get their job done easily</li> <li>Efficiency</li> <li>It doesn\u2019t waste resources such as CPU time and memory</li> <li>Reliability</li> <li>It does what it is required to do without failing</li> <li>Maintainability</li> <li>It can be easily changed</li> <li>Reusability</li> <li>Its parts can be used in other projects, so reprogramming is not needed</li> </ul>"},{"location":"tr/week-1/ce204-week-1/#learning-java","title":"Learning JAVA","text":"<ul> <li>Many syntax and grammar rules </li> <li>Learning how to write \u201cgood programs\u201d </li> <li>Focusing on concepts and not get lost in language-technical - details </li> <li>Paying attention to design techniques rather than details </li> <li>Building an effective programming scheme </li> <li>Practicing, practicing and practicing! </li> <li>Consequently, new and better ways of building systems </li> </ul>"},{"location":"tr/week-1/ce204-week-1/#the-basics-of-java","title":"The Basics of Java","text":"<p>History</p> <ul> <li>The first object oriented programming language was Simula-67 </li> <li>designed to allow programmers to write simulation programs </li> <li>In the early 1980\u2019s, Smalltalk was developed at Xerox PARC </li> <li>New syntax, large open-source library of reusable code, bytecode, platform independence, garbage collection.</li> </ul>"},{"location":"tr/week-1/ce204-week-1/#the-basics-of-java_1","title":"The Basics of Java","text":"<ul> <li>late 1980\u2019s, C++ was developed by B. Stroustrup, </li> <li>Recognized the advantages of OO but also recognized that there were tremendous numbers of C programmers</li> <li>In 1991, engineers at Sun Microsystems started a project to design a language that could be used in consumer \u2018smart devices\u2019: Oak </li> <li>When the Internet gained popularity, Sun saw an opportunity to exploit the technology. </li> <li>The new language, renamed Java, was formally presented in 1995 at the SunWorld \u201995 conference.</li> </ul>"},{"location":"tr/week-1/ce204-week-1/#java-documentation","title":"Java documentation","text":"<ul> <li>Looking up classes and methods is an essential skill</li> <li>Looking up unknown classes and methods will get you a long way towards understanding code</li> <li>Java documentation can be automatically generated by a program called Javadoc</li> <li>Documentation is generated from the code and its comments</li> <li>You should format your comments as shown in some of the book\u2019s examples<ul> <li>These may include embeded html</li> </ul> </li> </ul>"},{"location":"tr/week-1/ce204-week-1/#interfaces","title":"Interfaces","text":"<ul> <li>Like abstract classes, but cannot have executable statements</li> <li>Define a set of operations that make sense in several classes</li> <li>Abstract Data Types</li> <li>A class can implement any number of interfaces</li> <li>It must have concrete methods for the operations</li> <li>You can declare the type of a variable to be an interface</li> <li>This is just like declaring the type to be an abstract class</li> <li>Important interfaces in Java\u2019s library include</li> <li>Runnable, Collection, Iterator, Comparable, Cloneable</li> </ul>"},{"location":"tr/week-1/ce204-week-1/#programming-style_2","title":"Programming style","text":"<ul> <li>Adhere to good object oriented principles</li> <li>E.g. the \u2018isa rule\u2019</li> <li>Prefer private as opposed to public</li> <li>Do not mix user interface code with non-user interface code</li> <li>Interact with the user in separate classes<ul> <li>This makes non-UI classes more reusable</li> </ul> </li> </ul>"},{"location":"tr/week-1/ce204-week-1/#difficulties-and-risks-in-programming","title":"Difficulties and Risks in Programming","text":"<ul> <li>Language evolution and deprecated features: </li> <li>Java is evolving, so some features are \u2018deprecated\u2019 at every release</li> <li>Efficiency can be a concern in some object oriented systems </li> <li>Java can be less efficient than other languages<ul> <li>VM-based</li> <li>Dynamic binding</li> </ul> </li> </ul>"},{"location":"tr/week-1/ce204-week-1/#problems-with-procedural-programming","title":"Problems with Procedural Programming","text":"<ul> <li>Data Is undervalued </li> <li>Data is, after all, the reason for a program\u2019s existence. The  important parts of a program are not functions that display  the data or functions that checks for correct input; they are  data </li> <li>Procedural programs don\u2019t model the real world very well.    The real world does not consist of functions </li> <li>Global data can be corrupted by functions that have no business changing it  </li> <li>To add new data items, all the functions that access data must  be modified so that they can also access these new items </li> <li>Creating new data types is difficult </li> </ul>"},{"location":"tr/week-1/ce204-week-1/#oop-encapsulation-and-data-hiding","title":"OOP: Encapsulation and Data Hiding","text":"<ul> <li>Thinking in terms of objects rather than functions </li> <li>Close match between objects in the programming sense and  objects in the real world </li> <li>Both data and the functions that operate on that data are combined into a single program entity </li> <li>Data represent the properties (state), and functions represent the behavior of an object. Data and its functions are said to be encapsulated into a single entity </li> <li>An object\u2019s functions, called member functions in Java typically provide the only way to access its data. The data is hidden, so it is safe from accidental alteration. </li> </ul>"},{"location":"tr/week-1/ce204-week-1/#object-model","title":"Object Model","text":"<p>A Java program typically consists of a number of  objects that communicate with each other by calling  one another\u2019s member functions.</p> <p></p>"},{"location":"tr/week-1/ce204-week-1/#oop-vs-procedural-programming_3","title":"OOP vs. Procedural Programming","text":"<ul> <li> <p>Procedural paradigm:</p> </li> <li> <p>Software is organized around the notion of procedures </p> </li> <li> <p>Procedural abstraction</p> <ul> <li>Works as long as the data is simple</li> </ul> </li> <li> <p>Adding data abstractions groups together the pieces of data that describe some entity</p> </li> <li> <p>Helps reduce the system\u2019s complexity. </p> <ul> <li>Such as Records and structures</li> </ul> </li> <li> <p>Object oriented paradigm:</p> </li> <li> <p>Organizing procedural abstractions in the context of data abstractions</p> </li> </ul>"},{"location":"tr/week-1/ce204-week-1/#classes","title":"Classes","text":"<p>A class:</p> <ul> <li>A unit of abstraction in an object oriented (OO) program </li> <li>Represents similar objects</li> <li>Its instances</li> <li>A kind of software module</li> <li>Describes its instances\u2019 structure (properties)</li> <li>Contains methods to implement their behaviour</li> </ul>"},{"location":"tr/week-1/ce204-week-1/#is-something-a-class-or-an-instance_1","title":"Is Something a Class or an Instance?","text":"<ul> <li>Science Fiction</li> <li>Instance of the class Genre.</li> <li>Science Fiction Film</li> <li>Class; instances include \u2018Star Wars\u2019</li> <li>Showing of \u2018Star Wars\u2019 in the Phoenix Cinema at 7 p.m.:</li> <li>Instance of ShowingOfFilm</li> </ul>"},{"location":"tr/week-1/ce204-week-1/#class-variables","title":"Class variables","text":"<ul> <li>A class variable\u2019s value is shared by all instances of a class.</li> <li>Also called a static variable</li> <li>If one instance sets the value of a class variable, then all the other instances see the same changed value. </li> <li>Class variables are useful for:<ul> <li>Default or \u2018constant\u2019 values (e.g. PI)</li> <li>Lookup tables and similar structures</li> </ul> </li> </ul> <p>Caution: do not over-use class variables </p>"},{"location":"tr/week-1/ce204-week-1/#types-of-frameworks","title":"Types of frameworks","text":"<ul> <li>A horizontal framework provides general application facilities that a large number of applications can use </li> <li>A vertical framework (application framework) is more \u2018complete\u2019 but still needs some slots to be filled to adapt it to specific application needs</li> </ul>"},{"location":"tr/week-1/ce204-week-1/#advantages-of-client-server-systems","title":"Advantages of client-server systems","text":"<ul> <li>The work can be distributed among different machines </li> <li>The clients can access the server\u2019s functionality from a distance </li> <li>The client and server can be designed separately</li> <li>They can both be simpler</li> <li>There is a choice about where to keep data:</li> <li>All the data can be kept centrally at the server </li> <li>Data can be distributed among many different clients or servers</li> <li>The server can be accessed simultaneously by many clients </li> <li>Competing clients can be written to communicate with the same server, and vice-versa </li> </ul>"},{"location":"tr/week-1/ce204-week-1/#internals-of-abstractclient","title":"Internals of AbstractClient","text":"<ul> <li>Instance variables:</li> <li>A Socket which keeps all the information about the connection to the server </li> <li>Two streams, an ObjectOutputStream and an ObjectInputStream </li> <li>A Thread that runs using AbstractClient\u2019s run method </li> <li>Two variables storing the host and port of the server </li> </ul>"},{"location":"tr/week-1/ce204-week-1/#why-method-overloading","title":"Why method overloading?","text":"<p>Suppose, you have to perform the addition of given numbers but there can be any number of arguments (let\u2019s say either 2 or 3 arguments for simplicity).</p> <p>In order to accomplish the task, you can create two methods sum2num(int, int) and sum3num(int, int, int) for two and three parameters respectively. However, other programmers, as well as you in the future may get confused as the behavior of both methods are the same but they differ by name.</p> <p>The better way to accomplish this task is by overloading methods. And, depending upon the argument passed, one of the overloaded methods is called. This helps to increase the readability of the program.</p>"},{"location":"tr/week-10/ce204-week-10/","title":"CEN206 Nesne Y\u00f6nelimli Programlama","text":""},{"location":"tr/week-10/ce204-week-10/#cen206-nesne-yonelimli-programlama","title":"CEN206 Nesne Y\u00f6nelimli Programlama","text":""},{"location":"tr/week-10/ce204-week-10/#hafta-10-nesne-yonelimli-tasarm-desenleri-ileri-kavramlar","title":"Hafta-10 (Nesne Y\u00f6nelimli Tasar\u0131m Desenleri - \u0130leri Kavramlar)","text":""},{"location":"tr/week-10/ce204-week-10/#bahar-donemi-2024-2025","title":"Bahar D\u00f6nemi, 2024-2025","text":"<p>\u0130ndir BELGE-PDF, BELGE-DOCX, SLAYT, PPTX</p>"},{"location":"tr/week-10/ce204-week-10/#nesne-yonelimli-tasarm-desenleri-ileri-kavramlar","title":"Nesne Y\u00f6nelimli Tasar\u0131m Desenleri - \u0130leri Kavramlar","text":""},{"location":"tr/week-10/ce204-week-10/#ana-hatlar","title":"Ana Hatlar","text":"<ul> <li>Daha Fazla Yarat\u0131msal Desenler</li> <li>Daha Fazla Yap\u0131sal Desenler</li> <li>Daha Fazla Davran\u0131\u015fsal Desenler</li> <li>Anti-Desenler</li> <li>Tasar\u0131m Deseni Se\u00e7im Kriterleri</li> </ul>"},{"location":"tr/week-10/ce204-week-10/#yaratmsal-tasarm-desenleri","title":"Yarat\u0131msal Tasar\u0131m Desenleri","text":""},{"location":"tr/week-10/ce204-week-10/#tekil-singleton-deseni","title":"Tekil (Singleton) Deseni","text":"<p>Bir s\u0131n\u0131f\u0131n yaln\u0131zca bir \u00f6rne\u011finin olmas\u0131n\u0131 sa\u011flar ve buna global bir eri\u015fim noktas\u0131 sunar.</p> <pre><code>public class Tekil {\n    // \u00d6zel statik \u00f6rnek\n    private static Tekil ornek;\n\n    // \u00d6rneklemeyi engellemek i\u00e7in \u00f6zel yap\u0131c\u0131\n    private Tekil() {}\n\n    // \u00d6rne\u011fi almak i\u00e7in genel metod\n    public static Tekil ornekAl() {\n        if (ornek == null) {\n            ornek = new Tekil();\n        }\n        return ornek;\n    }\n\n    // \u0130\u015f par\u00e7ac\u0131\u011f\u0131 g\u00fcvenli versiyon\n    public static synchronized Tekil isPar\u00e7ac\u0131\u011f\u0131GuvenliOrnekAl() {\n        if (ornek == null) {\n            ornek = new Tekil();\n        }\n        return ornek;\n    }\n\n    // \u00c7ift kontroll\u00fc kilitleme\n    public static Tekil ciftKontrolluOrnekAl() {\n        if (ornek == null) {\n            synchronized (Tekil.class) {\n                if (ornek == null) {\n                    ornek = new Tekil();\n                }\n            }\n        }\n        return ornek;\n    }\n}\n</code></pre>"},{"location":"tr/week-10/ce204-week-10/#insaatc-builder-deseni","title":"\u0130n\u015faat\u00e7\u0131 (Builder) Deseni","text":"<p>Karma\u015f\u0131k bir nesnenin yap\u0131s\u0131n\u0131, g\u00f6steriminden ay\u0131r\u0131r ve ayn\u0131 olu\u015fturma s\u00fcrecinin farkl\u0131 g\u00f6sterimler olu\u015fturmas\u0131na izin verir.</p> <pre><code>// \u00dcr\u00fcn\nclass Pizza {\n    private String hamur;\n    private String sos;\n    private String malzeme;\n\n    public void hamurAyarla(String hamur) { this.hamur = hamur; }\n    public void sosAyarla(String sos) { this.sos = sos; }\n    public void malzemeAyarla(String malzeme) { this.malzeme = malzeme; }\n\n    @Override\n    public String toString() {\n        return hamur + \" hamurlu, \" + sos + \" soslu ve \" + malzeme + \" malzemeli pizza\";\n    }\n}\n\n// Soyut \u0130n\u015faat\u00e7\u0131\nabstract class PizzaInsaatcisi {\n    protected Pizza pizza;\n\n    public Pizza getPizza() { return pizza; }\n    public void yeniPizzaOlustur() { pizza = new Pizza(); }\n\n    public abstract void hamurInsa();\n    public abstract void sosInsa();\n    public abstract void malzemeInsa();\n}\n\n// Somut \u0130n\u015faat\u00e7\u0131\nclass HawaiianPizzaInsaatcisi extends PizzaInsaatcisi {\n    public void hamurInsa() { pizza.hamurAyarla(\"\u00e7apraz\"); }\n    public void sosInsa() { pizza.sosAyarla(\"hafif\"); }\n    public void malzemeInsa() { pizza.malzemeAyarla(\"jambon ve ananas\"); }\n}\n\n// Y\u00f6netici\nclass Asci {\n    private PizzaInsaatcisi pizzaInsaatcisi;\n\n    public void pizzaInsaatcisiAyarla(PizzaInsaatcisi pizzaInsaatcisi) {\n        this.pizzaInsaatcisi = pizzaInsaatcisi;\n    }\n\n    public Pizza getPizza() { return pizzaInsaatcisi.getPizza(); }\n\n    public void pizzaInsa() {\n        pizzaInsaatcisi.yeniPizzaOlustur();\n        pizzaInsaatcisi.hamurInsa();\n        pizzaInsaatcisi.sosInsa();\n        pizzaInsaatcisi.malzemeInsa();\n    }\n}\n</code></pre> <p>Fabrika Metodu hakk\u0131nda daha fazla bilgi: https://refactoring.guru/design-patterns/factory-method</p>"},{"location":"tr/week-10/ce204-week-10/#yapsal-tasarm-desenleri","title":"Yap\u0131sal Tasar\u0131m Desenleri","text":""},{"location":"tr/week-10/ce204-week-10/#adaptor-adapter-deseni","title":"Adapt\u00f6r (Adapter) Deseni","text":"<p>Uyumsuz aray\u00fczlerin birlikte \u00e7al\u0131\u015fmas\u0131n\u0131 sa\u011flar; bir s\u0131n\u0131f\u0131n \u00f6rne\u011fini, ba\u015fka bir s\u0131n\u0131f\u0131n aray\u00fcz\u00fcne uyan bir adapt\u00f6re sararak.</p> <pre><code>// Hedef aray\u00fcz\ninterface MedyaOynatici {\n    void oynat(String sestipi, String dosyaAd\u0131);\n}\n\n// Uyarlanacak aray\u00fcz\ninterface GelismisMediaOynatici {\n    void vlcOynat(String dosyaAd\u0131);\n    void mp4Oynat(String dosyaAd\u0131);\n}\n\n// Somut Uyarlanacak\nclass VlcOynatici implements GelismisMediaOynatici {\n    @Override\n    public void vlcOynat(String dosyaAd\u0131) {\n        System.out.println(\"Vlc dosyas\u0131n\u0131 oynat\u0131yor: \" + dosyaAd\u0131);\n    }\n\n    @Override\n    public void mp4Oynat(String dosyaAd\u0131) {\n        // Hi\u00e7bir \u015fey yapma\n    }\n}\n\n// Adapt\u00f6r\nclass MedyaAdaptor implements MedyaOynatici {\n    private GelismisMediaOynatici gelismisMediaOynatici;\n\n    public MedyaAdaptor(String sestipi) {\n        if (sestipi.equalsIgnoreCase(\"vlc\")) {\n            gelismisMediaOynatici = new VlcOynatici();\n        }\n        // Gerekirse ba\u015fka oynat\u0131c\u0131lar ekle\n    }\n\n    @Override\n    public void oynat(String sestipi, String dosyaAd\u0131) {\n        if (sestipi.equalsIgnoreCase(\"vlc\")) {\n            gelismisMediaOynatici.vlcOynat(dosyaAd\u0131);\n        }\n        // Di\u011fer formatlar\u0131 i\u015fle\n    }\n}\n</code></pre> <pre><code>// \u0130stemci\nclass SesOynatici implements MedyaOynatici {\n    private MedyaAdaptor medyaAdaptor;\n\n    @Override\n    public void oynat(String sestipi, String dosyaAd\u0131) {\n        // Mp3 i\u00e7in dahili destek\n        if (sestipi.equalsIgnoreCase(\"mp3\")) {\n            System.out.println(\"Mp3 dosyas\u0131n\u0131 oynat\u0131yor: \" + dosyaAd\u0131);\n        } \n        // MediaAdapter di\u011fer formatlar i\u00e7in destek sa\u011flar\n        else if (sestipi.equalsIgnoreCase(\"vlc\") || sestipi.equalsIgnoreCase(\"mp4\")) {\n            medyaAdaptor = new MedyaAdaptor(sestipi);\n            medyaAdaptor.oynat(sestipi, dosyaAd\u0131);\n        } else {\n            System.out.println(\"Ge\u00e7ersiz medya tipi: \" + sestipi);\n        }\n    }\n}\n</code></pre>"},{"location":"tr/week-10/ce204-week-10/#dekorator-decorator-deseni","title":"Dekorat\u00f6r (Decorator) Deseni","text":"<p>Bir nesneye dinamik olarak ek sorumluluklar ekler. Dekorat\u00f6rler, i\u015flevselli\u011fi geni\u015fletmek i\u00e7in alt s\u0131n\u0131fland\u0131rmaya esnek bir alternatif sa\u011flar.</p> <pre><code>// Bile\u015fen aray\u00fcz\u00fc\ninterface Kahve {\n    double maliyet();\n    String tanim();\n}\n\n// Somut Bile\u015fen\nclass BasitKahve implements Kahve {\n    @Override\n    public double maliyet() {\n        return 1.0;\n    }\n\n    @Override\n    public String tanim() {\n        return \"Basit kahve\";\n    }\n}\n\n// Soyut Dekorat\u00f6r\nabstract class KahveDekorator implements Kahve {\n    protected final Kahve dekoreEdilenKahve;\n\n    public KahveDekorator(Kahve kahve) {\n        this.dekoreEdilenKahve = kahve;\n    }\n\n    @Override\n    public double maliyet() {\n        return dekoreEdilenKahve.maliyet();\n    }\n\n    @Override\n    public String tanim() {\n        return dekoreEdilenKahve.tanim();\n    }\n}\n</code></pre> <pre><code>// Somut Dekorat\u00f6r\nclass SutDekorator extends KahveDekorator {\n    public SutDekorator(Kahve kahve) {\n        super(kahve);\n    }\n\n    @Override\n    public double maliyet() {\n        return super.maliyet() + 0.5;\n    }\n\n    @Override\n    public String tanim() {\n        return super.tanim() + \", s\u00fctl\u00fc\";\n    }\n}\n\n// Kullan\u0131m\n// Kahve kahvem = new BasitKahve();\n// kahvem = new SutDekorator(kahvem);\n// System.out.println(kahvem.tanim() + \" \" + kahvem.maliyet() + \" TL\");\n</code></pre>"},{"location":"tr/week-10/ce204-week-10/#davranssal-tasarm-desenleri","title":"Davran\u0131\u015fsal Tasar\u0131m Desenleri","text":""},{"location":"tr/week-10/ce204-week-10/#gozlemci-observer-deseni","title":"G\u00f6zlemci (Observer) Deseni","text":"<p>Nesneler aras\u0131nda bire-\u00e7ok ba\u011f\u0131ml\u0131l\u0131k tan\u0131mlar; \u00f6yle ki bir nesne durumunu de\u011fi\u015ftirdi\u011finde, ba\u011f\u0131ml\u0131lar\u0131n\u0131n t\u00fcm\u00fc otomatik olarak bilgilendirilir ve g\u00fcncellenir.</p> <pre><code>import java.util.ArrayList;\nimport java.util.List;\n\n// G\u00f6zlemci aray\u00fcz\u00fc\ninterface Gozlemci {\n    void guncelle(String mesaj);\n}\n\n// \u00d6zne\nclass Ozne {\n    private final List&lt;Gozlemci&gt; gozlemciler = new ArrayList&lt;&gt;();\n    private String durum;\n\n    public String getDurum() {\n        return durum;\n    }\n\n    public void durumAyarla(String durum) {\n        this.durum = durum;\n        tumGozlemcileriBilgilendir();\n    }\n\n    public void ekle(Gozlemci gozlemci) {\n        gozlemciler.add(gozlemci);\n    }\n\n    public void tumGozlemcileriBilgilendir() {\n        for (Gozlemci gozlemci : gozlemciler) {\n            gozlemci.guncelle(durum);\n        }\n    }\n}\n</code></pre> <pre><code>// Somut G\u00f6zlemci\nclass SomutGozlemci implements Gozlemci {\n    private String isim;\n\n    public SomutGozlemci(String isim) {\n        this.isim = isim;\n    }\n\n    @Override\n    public void guncelle(String mesaj) {\n        System.out.println(isim + \" ald\u0131: \" + mesaj);\n    }\n}\n\n// Kullan\u0131m\n// Ozne ozne = new Ozne();\n// Gozlemci gozlemci1 = new SomutGozlemci(\"G\u00f6zlemci 1\");\n// Gozlemci gozlemci2 = new SomutGozlemci(\"G\u00f6zlemci 2\");\n// ozne.ekle(gozlemci1);\n// ozne.ekle(gozlemci2);\n// ozne.durumAyarla(\"Yeni Durum\");\n</code></pre>"},{"location":"tr/week-10/ce204-week-10/#strateji-strategy-deseni","title":"Strateji (Strategy) Deseni","text":"<p>Bir algoritma ailesi tan\u0131mlar, her birini kaps\u00fcller ve birbirinin yerine kullan\u0131labilir hale getirir. Strateji, algoritmay\u0131 kullan\u0131c\u0131lardan ba\u011f\u0131ms\u0131z olarak de\u011fi\u015ftirmeye izin verir.</p> <pre><code>// Strateji aray\u00fcz\u00fc\ninterface OdemeStratejisi {\n    void ode(int miktar);\n}\n\n// Somut Stratejiler\nclass KrediKartiStratejisi implements OdemeStratejisi {\n    private String isim;\n    private String kartNumarasi;\n    private String cvv;\n    private String sonKullanmaTarihi;\n\n    public KrediKartiStratejisi(String isim, String kartNumarasi, String cvv, String sonKullanmaTarihi) {\n        this.isim = isim;\n        this.kartNumarasi = kartNumarasi;\n        this.cvv = cvv;\n        this.sonKullanmaTarihi = sonKullanmaTarihi;\n    }\n\n    @Override\n    public void ode(int miktar) {\n        System.out.println(miktar + \" TL kredi kart\u0131 ile \u00f6dendi\");\n    }\n}\n</code></pre> <pre><code>class PayPalStratejisi implements OdemeStratejisi {\n    private String emailId;\n    private String sifre;\n\n    public PayPalStratejisi(String emailId, String sifre) {\n        this.emailId = emailId;\n        this.sifre = sifre;\n    }\n\n    @Override\n    public void ode(int miktar) {\n        System.out.println(miktar + \" TL PayPal kullan\u0131larak \u00f6dendi\");\n    }\n}\n\n// Ba\u011flam\nclass AlisverisKart {\n    private List&lt;Urun&gt; urunler;\n\n    public AlisverisKart() {\n        this.urunler = new ArrayList&lt;Urun&gt;();\n    }\n\n    public void urunEkle(Urun urun) {\n        this.urunler.add(urun);\n    }\n\n    public int toplamHesapla() {\n        int toplam = 0;\n        for (Urun urun : urunler) {\n            toplam += urun.getFiyat();\n        }\n        return toplam;\n    }\n\n    public void ode(OdemeStratejisi odemeStratejisi) {\n        int miktar = toplamHesapla();\n        odemeStratejisi.ode(miktar);\n    }\n}\n</code></pre>"},{"location":"tr/week-10/ce204-week-10/#anti-desenler","title":"Anti-Desenler","text":"<p>Anti-desenler, etkisiz ve riskli olma e\u011filiminde olan tekrarlanan sorunlara y\u00f6nelik yayg\u0131n \u00e7\u00f6z\u00fcmlerdir.</p>"},{"location":"tr/week-10/ce204-week-10/#yaygn-anti-desenler","title":"Yayg\u0131n Anti-Desenler","text":"<ul> <li>Tanr\u0131 Nesnesi (God Object): \u00c7ok fazla \u015fey bilen veya yapan bir s\u0131n\u0131f</li> <li>Spagetti Kodu (Spaghetti Code): Yap\u0131land\u0131r\u0131lmam\u0131\u015f ve bak\u0131m\u0131 zor kod</li> <li>Tekil K\u00f6t\u00fcye Kullan\u0131m (Singleton Abuse): Tekil desenini a\u015f\u0131r\u0131 kullanma</li> <li>Alt\u0131n \u00c7eki\u00e7 (Golden Hammer): Sorundan ba\u011f\u0131ms\u0131z olarak tan\u0131d\u0131k bir \u00e7\u00f6z\u00fcm kullanmak</li> <li>Tekerle\u011fi Yeniden \u0130cat Etmek (Reinventing the Wheel): Standart \u00e7\u00f6z\u00fcmler varken \u00f6zel \u00e7\u00f6z\u00fcmler yaratmak</li> <li>Erken Optimizasyon (Premature Optimization): Darbo\u011fazlar\u0131 belirlemeden \u00f6nce optimizasyon yapmak</li> <li>Kopyala-Yap\u0131\u015ft\u0131r Programlama (Copy-Paste Programming): Kodu yeniden kullanmak yerine \u00e7o\u011faltmak</li> </ul>"},{"location":"tr/week-10/ce204-week-10/#tasarm-deseni-secim-kriterleri","title":"Tasar\u0131m Deseni Se\u00e7im Kriterleri","text":"<p>Bir tasar\u0131m deseni se\u00e7erken \u015funlar\u0131 g\u00f6z \u00f6n\u00fcnde bulundurun:</p> <ol> <li>Problem Ba\u011flam\u0131: \u00c7\u00f6zmeye \u00e7al\u0131\u015ft\u0131\u011f\u0131n\u0131z belirli sorun nedir?</li> <li>Desen Sonu\u00e7lar\u0131: Bu deseni kullanman\u0131n avantaj ve dezavantajlar\u0131 nelerdir?</li> <li>Alternatif Desenler: Bu sorunu ele alabilecek ba\u015fka desenler var m\u0131?</li> <li>Uygulama Dili: Baz\u0131 desenler belirli dillerde daha do\u011fal olabilir</li> <li>Ekip A\u015final\u0131\u011f\u0131: Ekibiniz bu desenle a\u015fina m\u0131?</li> <li>Bak\u0131m Yap\u0131labilirlik: Desen, kodu daha bak\u0131m\u0131 yap\u0131labilir hale getirecek mi?</li> <li>Performans Kayg\u0131lar\u0131: Desen performans\u0131 etkileyecek mi?</li> </ol>"},{"location":"tr/week-10/ce204-week-10/#gercek-projelerde-desenleri-uygulamak","title":"Ger\u00e7ek Projelerde Desenleri Uygulamak","text":""},{"location":"tr/week-10/ce204-week-10/#en-iyi-uygulamalar","title":"En \u0130yi Uygulamalar","text":"<ul> <li>Tasar\u0131m desenlerini uymad\u0131klar\u0131 yerlere zorlamay\u0131n</li> <li>Basit ba\u015flay\u0131n, gerekti\u011finde desenlere do\u011fru yeniden d\u00fczenleyin</li> <li>Belirli bir deseni neden se\u00e7ti\u011finizi belgelendirin</li> <li>Sadece bile\u015fenleri de\u011fil, t\u00fcm sistemi g\u00f6z \u00f6n\u00fcnde bulundurun</li> <li>Desen kombinasyonlar\u0131, tek tek desenlerden daha g\u00fc\u00e7l\u00fc olabilir</li> <li>Desen uygulamalar\u0131n\u0131 kapsaml\u0131 bir \u015fekilde test edin</li> </ul>"},{"location":"tr/week-10/ce204-week-10/#guvenli-tasarm-desenleri","title":"G\u00fcvenli Tasar\u0131m Desenleri","text":"<p>G\u00fcvenlik, yaz\u0131l\u0131m tasar\u0131m\u0131nda temel bir husus olmal\u0131d\u0131r.</p> <p>\u00d6nemli g\u00fcvenlik tasar\u0131m desenleri \u015funlard\u0131r:</p> <ul> <li>G\u00fcvenli Fabrika (Secure Factory): G\u00fcvenlik kontrolleriyle nesne olu\u015fturmay\u0131 merkezile\u015ftirme</li> <li>G\u00fcvenli Vekil (Secure Proxy): Hassas nesnelere eri\u015fimi kontrol etme</li> <li>G\u00fcvenli Tekil (Secure Singleton): Tek \u00f6rneklere g\u00fcvenli eri\u015fim sa\u011flama</li> <li>Araya Giren Do\u011frulay\u0131c\u0131 (Intercepting Validator): T\u00fcm giri\u015fleri merkezi do\u011frulay\u0131c\u0131larla do\u011frulama</li> </ul> <p>Daha fazla g\u00fcvenlik kontrol\u00fc: https://www.cisecurity.org/controls/cis-controls-list</p>"},{"location":"tr/week-10/ce204-week-10/#ek-kaynaklar","title":"Ek Kaynaklar","text":"<p>Mimaride ilk Tasar\u0131m Deseni kitab\u0131: https://www.amazon.com/Pattern-Language-Buildings-Construction-Environmental/dp/0195019199</p> <p>D\u00f6rtl\u00fc \u00c7ete (Gang of Four - GoF) Tasar\u0131m Desenleri Kitab\u0131: https://www.amazon.com/gp/product/0201633612/</p> <p>SOLID \u0130lkeleri Kaynaklar\u0131: - https://www.monterail.com/blog/solid-principles-cheatsheet-printable - https://www.monterail.com/hubfs/PDF%20content/SOLID_cheatsheet.pdf - https://www.freecodecamp.org/news/solid-principles-explained-in-plain-english/</p> <p>Liskov Yerine Ge\u00e7me \u0130lkesi \u00d6rnekleri: https://code-examples.net/en/q/a476f2</p> <p>Ba\u011f\u0131ml\u0131l\u0131k Enjeksiyonu Kaynaklar\u0131: - http://www.dotnet-stuff.com/tutorials/dependency-%C4%B1njection/understanding-and-implementing-inversion-of-control-container-ioc-container-using-csharp - https://stackify.com/dependency-injection/ - https://www.tutorialsteacher.com/ioc/inversion-of-control - https://www.wikiwand.com/en/Dependency_injection - https://www.baeldung.com/inversion-control-and-dependency-injection-in-spring</p>"},{"location":"tr/week-10/ce204-week-10/#gelecek-hafta","title":"Gelecek Hafta","text":"<p>UML ve UMPLE ile devam edece\u011fiz, tasar\u0131mlar\u0131m\u0131z\u0131 modellemeye ve modellerden kod \u00fcretmeye odaklanaca\u011f\u0131z.</p>"},{"location":"tr/week-2/ce204-week-2/#cen206-object-oriented-programming-formerly-ce204","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"tr/week-2/ce204-week-2/#week-2-oop-with-java-ii","title":"Week-2 (OOP with Java-II)","text":""},{"location":"tr/week-2/ce204-week-2/#spring-semester-2024-2025","title":"Spring Semester, 2024-2025","text":"<p>Download DOC-PDF, DOC-DOCX, SLIDE, PPTX,</p>"},{"location":"tr/week-4/ce204-week-4/","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"tr/week-5/ce204-week-5/","title":"CEN206 Object-Oriented Programming (formerly CE204)","text":""},{"location":"tr/week-6/ce204-week-6/#interfaces","title":"Interfaces","text":"<ul> <li> <p>Declare signatures of a group of methods that must be implemented by various classes</p> </li> <li> <p>Also declared using the keyword <code>isA</code></p> </li> <li> <p>Essentially the same concept as in Java</p> </li> <li> <p>Let's explore examples in the user manual ...</p> </li> </ul>"},{"location":"tr/week-6/ce204-week-6/#user-written-methods-in-umple","title":"User-written Methods in UMPLE","text":"<ul> <li> <p>Methods can be added to any UMPLE code.</p> </li> <li> <p>UMPLE parses the signature only; the rest is passed to the  generated code.</p> </li> <li> <p>You can specify different bodies in different languages</p> </li> <li> <p>We will look at examples in the user manual ...</p> </li> </ul>"},{"location":"tr/week-9/ce204-week-9/","title":"CEN206 Nesne Y\u00f6nelimli Programlama","text":""},{"location":"tr/week-9/ce204-week-9/#cen206-nesne-yonelimli-programlama","title":"CEN206 Nesne Y\u00f6nelimli Programlama","text":""},{"location":"tr/week-9/ce204-week-9/#hafta-9-nesne-yonelimli-tasarm-ilkeleri-ve-tasarm-desenleri","title":"Hafta-9 (Nesne Y\u00f6nelimli Tasar\u0131m \u0130lkeleri ve Tasar\u0131m Desenleri)","text":""},{"location":"tr/week-9/ce204-week-9/#bahar-donemi-2024-2025","title":"Bahar D\u00f6nemi, 2024-2025","text":"<p>\u0130ndir BELGE-PDF, BELGE-DOCX, SLAYT, PPTX</p>"},{"location":"tr/week-9/ce204-week-9/#nesne-yonelimli-tasarm-ilkeleri-ve-tasarm-desenleri","title":"Nesne Y\u00f6nelimli Tasar\u0131m \u0130lkeleri ve Tasar\u0131m Desenleri","text":""},{"location":"tr/week-9/ce204-week-9/#ana-hatlar","title":"Ana Hatlar","text":"<ul> <li>Tasar\u0131m Desenleri</li> <li>SOLID \u0130lkeleri</li> <li>Ba\u011f\u0131ml\u0131l\u0131k Enjeksiyonu ve Kontrol\u00fcn Tersine \u00c7evrilmesi</li> <li>Java'da Pratik Uygulamalar</li> </ul>"},{"location":"tr/week-9/ce204-week-9/#tasarm-desenlerine-giris","title":"Tasar\u0131m Desenlerine Giri\u015f","text":"<p>Tasar\u0131m desenleri, yaz\u0131l\u0131m tasar\u0131m\u0131ndaki yayg\u0131n problemlere tipik \u00e7\u00f6z\u00fcmlerdir. Deneyimli yaz\u0131l\u0131m geli\u015ftiricileri taraf\u0131ndan zaman i\u00e7inde geli\u015ftirilmi\u015f en iyi uygulamalar\u0131 temsil ederler.</p> <ul> <li>Tan\u0131m: Yayg\u0131n tasar\u0131m problemleri i\u00e7in yeniden kullan\u0131labilir \u00e7\u00f6z\u00fcm \u015fablonu</li> <li>Faydalar: Geli\u015ftirmeyi h\u0131zland\u0131r\u0131r, kod kalitesini ve bak\u0131m yap\u0131labilirli\u011fini art\u0131r\u0131r</li> <li>K\u00f6kenler: Mimari desenlerden esinlenilmi\u015ftir (Christopher Alexander)</li> </ul> <p>Mimaride ilk Tasar\u0131m Deseni kitab\u0131: https://www.amazon.com/Pattern-Language-Buildings-Construction-Environmental/dp/0195019199</p>"},{"location":"tr/week-9/ce204-week-9/#dortlu-cete-gang-of-four-gof-kitab","title":"D\u00f6rtl\u00fc \u00c7ete (Gang of Four - GoF) Kitab\u0131","text":"<p>Tasar\u0131m desenleri alan\u0131ndaki temel eser, Erich Gamma, Richard Helm, Ralph Johnson ve John Vlissides (D\u00f6rtl\u00fc \u00c7ete) taraf\u0131ndan yaz\u0131lan \"Design Patterns: Elements of Reusable Object-Oriented Software\" kitab\u0131d\u0131r.</p> <p>Bu kitap tasar\u0131m desenlerini \u015fu kategorilere ay\u0131r\u0131r: - Yarat\u0131msal Desenler (Creational Patterns): Nesne olu\u015fturma mekanizmalar\u0131 - Yap\u0131sal Desenler (Structural Patterns): Nesne kompozisyonu ve ili\u015fkileri - Davran\u0131\u015fsal Desenler (Behavioral Patterns): Nesne etkile\u015fimi ve sorumluluk da\u011f\u0131t\u0131m\u0131</p> <p>Referans: https://www.amazon.com/gp/product/0201633612/</p>"},{"location":"tr/week-9/ce204-week-9/#yaygn-tasarm-desenleri","title":"Yayg\u0131n Tasar\u0131m Desenleri","text":""},{"location":"tr/week-9/ce204-week-9/#fabrika-metodu-deseni-factory-method-pattern","title":"Fabrika Metodu Deseni (Factory Method Pattern)","text":"<p>Fabrika Metodu, nesneler olu\u015fturmak i\u00e7in bir aray\u00fcz tan\u0131mlar ancak hangi s\u0131n\u0131flar\u0131n \u00f6rneklenece\u011fine alt s\u0131n\u0131flar\u0131n karar vermesini sa\u011flar.</p> <pre><code>// \u00dcr\u00fcn aray\u00fcz\u00fc\ninterface Urun {\n    void islem();\n}\n\n// Somut \u00fcr\u00fcnler\nclass SomutUrunA implements Urun {\n    @Override\n    public void islem() {\n        System.out.println(\"SomutUrunA i\u015flemi\");\n    }\n}\n\n// Yarat\u0131c\u0131 soyut s\u0131n\u0131f\nabstract class Yaratici {\n    public abstract Urun urunOlustur();\n\n    public void birIslemYap() {\n        Urun urun = urunOlustur();\n        urun.islem();\n    }\n}\n\n// Somut yarat\u0131c\u0131\nclass SomutYaratici extends Yaratici {\n    @Override\n    public Urun urunOlustur() {\n        return new SomutUrunA();\n    }\n}\n</code></pre> <p>Daha fazla bilgi: https://refactoring.guru/design-patterns/factory-method</p>"},{"location":"tr/week-9/ce204-week-9/#solid-ilkeleri","title":"SOLID \u0130lkeleri","text":"<p>SOLID, yaz\u0131l\u0131m tasar\u0131mlar\u0131n\u0131 daha anla\u015f\u0131l\u0131r, esnek ve bak\u0131m\u0131 yap\u0131labilir hale getirmeye yard\u0131mc\u0131 olan be\u015f tasar\u0131m ilkesidir.</p> <p>Bu be\u015f ilke \u015funlard\u0131r:</p> <ol> <li>**T**ek Sorumluluk \u0130lkesi (Single Responsibility Principle)</li> <li>**A**\u00e7\u0131k/Kapal\u0131 \u0130lkesi (Open/Closed Principle)</li> <li>**L**iskov Yerine Ge\u00e7me \u0130lkesi (Liskov Substitution Principle)</li> <li>**A**ray\u00fcz Ayr\u0131m\u0131 \u0130lkesi (Interface Segregation Principle)</li> <li>**B**a\u011f\u0131ml\u0131l\u0131\u011f\u0131n Tersine \u00c7evrilmesi \u0130lkesi (Dependency Inversion Principle)</li> </ol> <p>Kaynaklar: - https://www.monterail.com/blog/solid-principles-cheatsheet-printable - https://www.monterail.com/hubfs/PDF%20content/SOLID_cheatsheet.pdf - https://www.freecodecamp.org/news/solid-principles-explained-in-plain-english/</p>"},{"location":"tr/week-9/ce204-week-9/#tek-sorumluluk-ilkesi-srp","title":"Tek Sorumluluk \u0130lkesi (SRP)","text":"<p>\"Bir s\u0131n\u0131f\u0131n de\u011fi\u015fmesi i\u00e7in yaln\u0131zca bir nedeni olmal\u0131d\u0131r.\"</p> <p>Her s\u0131n\u0131f\u0131n tek bir sorumlulu\u011fu veya amac\u0131 olmal\u0131d\u0131r. Yaz\u0131l\u0131m\u0131n yaln\u0131zca bir y\u00f6n\u00fcn\u00fc kaps\u00fcllenmelidir.</p> <pre><code>// SRP'yi ihlal eder\nclass Calisan {\n    public void maasHesapla() { /* ... */ }\n    public void veritabaninaKaydet() { /* ... */ }\n    public void raporOlustur() { /* ... */ }\n}\n\n// SRP'yi takip eder\nclass Calisan {\n    private String ad;\n    private double maas;\n    // Sadece \u00e7al\u0131\u015fan \u00f6zellikleri ve davran\u0131\u015flar\u0131\n}\n\nclass MaasHesaplayici {\n    public double maasHesapla(Calisan calisan) { /* ... */ }\n}\n\nclass CalisanDeposu {\n    public void kaydet(Calisan calisan) { /* ... */ }\n}\n\nclass RaporOlusturucu {\n    public void raporOlustur(Calisan calisan) { /* ... */ }\n}\n</code></pre>"},{"location":"tr/week-9/ce204-week-9/#ackkapal-ilkesi-ocp","title":"A\u00e7\u0131k/Kapal\u0131 \u0130lkesi (OCP)","text":"<p>\"Yaz\u0131l\u0131m varl\u0131klar\u0131 geni\u015fletilmeye a\u00e7\u0131k, de\u011fi\u015ftirilmeye kapal\u0131 olmal\u0131d\u0131r.\"</p> <p>Bir s\u0131n\u0131f\u0131n davran\u0131\u015f\u0131n\u0131 de\u011fi\u015ftirmeden geni\u015fletebilmelisiniz.</p> <pre><code>// OCP'yi ihlal eder\nclass Dikdortgen {\n    public double genislik;\n    public double yukseklik;\n}\n\nclass AlanHesaplayici {\n    public double alanHesapla(Object sekil) {\n        if (sekil instanceof Dikdortgen) {\n            Dikdortgen dikdortgen = (Dikdortgen) sekil;\n            return dikdortgen.genislik * dikdortgen.yukseklik;\n        }\n        // Yeni \u015fekiller i\u00e7in daha fazla ko\u015ful ekle\n        return 0;\n    }\n}\n\n// OCP'yi takip eder\ninterface Sekil {\n    double alanHesapla();\n}\n\nclass Dikdortgen implements Sekil {\n    private double genislik;\n    private double yukseklik;\n\n    @Override\n    public double alanHesapla() {\n        return genislik * yukseklik;\n    }\n}\n\nclass Daire implements Sekil {\n    private double yaricap;\n\n    @Override\n    public double alanHesapla() {\n        return Math.PI * yaricap * yaricap;\n    }\n}\n</code></pre>"},{"location":"tr/week-9/ce204-week-9/#liskov-yerine-gecme-ilkesi-lsp","title":"Liskov Yerine Ge\u00e7me \u0130lkesi (LSP)","text":"<p>\"Alt tipler, temel tiplerinin yerini alabilir olmal\u0131d\u0131r.\"</p> <p>Bir \u00fcst s\u0131n\u0131f\u0131n nesneleri, program\u0131n do\u011frulu\u011funu etkilemeden alt s\u0131n\u0131f nesneleriyle de\u011fi\u015ftirilebilir olmal\u0131d\u0131r.</p> <pre><code>// LSP'yi ihlal eder\nclass Dikdortgen {\n    protected int genislik;\n    protected int yukseklik;\n\n    public void genislikAyarla(int genislik) {\n        this.genislik = genislik;\n    }\n\n    public void yukseklikAyarla(int yukseklik) {\n        this.yukseklik = yukseklik;\n    }\n\n    public int alanGetir() {\n        return genislik * yukseklik;\n    }\n}\n\nclass Kare extends Dikdortgen {\n    @Override\n    public void genislikAyarla(int genislik) {\n        this.genislik = genislik;\n        this.yukseklik = genislik;  // Kare her iki boyutu da de\u011fi\u015ftirir\n    }\n\n    @Override\n    public void yukseklikAyarla(int yukseklik) {\n        this.genislik = yukseklik;  // Kare her iki boyutu da de\u011fi\u015ftirir\n        this.yukseklik = yukseklik;\n    }\n}\n\n// LSP ihlali \u00f6rne\u011fi\nvoid dikdortgenTest(Dikdortgen d) {\n    d.genislikAyarla(5);\n    d.yukseklikAyarla(4);\n    assert d.alanGetir() == 20; // Kare i\u00e7in ba\u015far\u0131s\u0131z olur\n}\n</code></pre> <p>Daha fazla \u00f6rnek: https://code-examples.net/en/q/a476f2</p>"},{"location":"tr/week-9/ce204-week-9/#arayuz-ayrm-ilkesi-isp","title":"Aray\u00fcz Ayr\u0131m\u0131 \u0130lkesi (ISP)","text":"<p>\"\u0130stemciler kullanmad\u0131klar\u0131 aray\u00fczlere ba\u011fl\u0131 olmaya zorlanmamal\u0131d\u0131r.\"</p> <p>Bir\u00e7ok istemciye \u00f6zel aray\u00fcz, genel ama\u00e7l\u0131 bir aray\u00fczden daha iyidir.</p> <pre><code>// ISP'yi ihlal eder\ninterface Calisan {\n    void calis();\n    void ye();\n    void uyu();\n}\n\nclass Robot implements Calisan {\n    public void calis() { /* ... */ }\n    public void ye() { /* Uygulanamaz */ }  \n    public void uyu() { /* Uygulanamaz */ }\n}\n\n// ISP'yi takip eder\ninterface Calisabilir {\n    void calis();\n}\n\ninterface Yiyebilir {\n    void ye();\n}\n\ninterface Uyuyabilir {\n    void uyu();\n}\n\nclass Insan implements Calisabilir, Yiyebilir, Uyuyabilir {\n    public void calis() { /* ... */ }\n    public void ye() { /* ... */ }\n    public void uyu() { /* ... */ }\n}\n\nclass Robot implements Calisabilir {\n    public void calis() { /* ... */ }\n}\n</code></pre>"},{"location":"tr/week-9/ce204-week-9/#bagmllgn-tersine-cevrilmesi-ilkesi-dip","title":"Ba\u011f\u0131ml\u0131l\u0131\u011f\u0131n Tersine \u00c7evrilmesi \u0130lkesi (DIP)","text":"<p>\"\u00dcst d\u00fczey mod\u00fcller alt d\u00fczey mod\u00fcllere ba\u011fl\u0131 olmamal\u0131d\u0131r. Her ikisi de soyutlamalara ba\u011fl\u0131 olmal\u0131d\u0131r.\"</p> <p>\"Soyutlamalar ayr\u0131nt\u0131lara ba\u011fl\u0131 olmamal\u0131d\u0131r. Ayr\u0131nt\u0131lar soyutlamalara ba\u011fl\u0131 olmal\u0131d\u0131r.\"</p> <pre><code>// DIP'yi ihlal eder\nclass Ampul {\n    public void ac() {\n        // I\u015f\u0131\u011f\u0131 a\u00e7\n    }\n\n    public void kapa() {\n        // I\u015f\u0131\u011f\u0131 kapa\n    }\n}\n\nclass Anahtar {\n    private Ampul ampul;\n\n    public Anahtar() {\n        this.ampul = new Ampul();\n    }\n\n    public void calistir() {\n        // Anahtar\u0131 \u00e7al\u0131\u015ft\u0131rma mant\u0131\u011f\u0131\n        ampul.ac();\n    }\n}\n\n// DIP'yi takip eder\ninterface Acilabilir {\n    void ac();\n    void kapa();\n}\n\nclass Ampul implements Acilabilir {\n    public void ac() {\n        // I\u015f\u0131\u011f\u0131 a\u00e7\n    }\n\n    public void kapa() {\n        // I\u015f\u0131\u011f\u0131 kapa\n    }\n}\n\nclass Vantilat\u00f6r implements Acilabilir {\n    public void ac() {\n        // Vantilat\u00f6r\u00fc a\u00e7\n    }\n\n    public void kapa() {\n        // Vantilat\u00f6r\u00fc kapa\n    }\n}\n\nclass Anahtar {\n    private Acilabilir cihaz;\n\n    public Anahtar(Acilabilir cihaz) {\n        this.cihaz = cihaz;\n    }\n\n    public void calistir() {\n        // Anahtar\u0131 \u00e7al\u0131\u015ft\u0131rma mant\u0131\u011f\u0131\n        cihaz.ac();\n    }\n}\n</code></pre>"},{"location":"tr/week-9/ce204-week-9/#kontrolun-tersine-cevrilmesi-ioc-ve-bagmllk-enjeksiyonu-di","title":"Kontrol\u00fcn Tersine \u00c7evrilmesi (IoC) ve Ba\u011f\u0131ml\u0131l\u0131k Enjeksiyonu (DI)","text":"<p>Kontrol\u00fcn Tersine \u00c7evrilmesi, bir program\u0131n \u00f6zel olarak yaz\u0131lm\u0131\u015f k\u0131s\u0131mlar\u0131n\u0131n kontrol ak\u0131\u015f\u0131n\u0131 genel bir \u00e7er\u00e7eveden almas\u0131n\u0131 sa\u011flayan bir tasar\u0131m ilkesidir.</p> <p>Ba\u011f\u0131ml\u0131l\u0131k Enjeksiyonu, bir s\u0131n\u0131f\u0131n ba\u011f\u0131ml\u0131l\u0131klar\u0131n\u0131n d\u0131\u015far\u0131dan \"enjekte edildi\u011fi\" \u00f6zel bir IoC bi\u00e7imidir.</p> <p>Kaynaklar: - http://www.dotnet-stuff.com/tutorials/dependency-%C4%B1njection/understanding-and-implementing-inversion-of-control-container-ioc-container-using-csharp - https://stackify.com/dependency-injection/ - https://www.tutorialsteacher.com/ioc/inversion-of-control - https://www.wikiwand.com/en/Dependency_injection - https://www.baeldung.com/inversion-control-and-dependency-injection-in-spring</p>"},{"location":"tr/week-9/ce204-week-9/#bagmllk-enjeksiyonu-turleri","title":"Ba\u011f\u0131ml\u0131l\u0131k Enjeksiyonu T\u00fcrleri","text":""},{"location":"tr/week-9/ce204-week-9/#1-yapc-enjeksiyonu-constructor-injection","title":"1. Yap\u0131c\u0131 Enjeksiyonu (Constructor Injection)","text":"<p>Ba\u011f\u0131ml\u0131l\u0131klar bir s\u0131n\u0131f yap\u0131c\u0131s\u0131 arac\u0131l\u0131\u011f\u0131yla sa\u011flan\u0131r.</p> <pre><code>class Servis {\n    private final Depo depo;\n\n    public Servis(Depo depo) {\n        this.depo = depo;\n    }\n}\n</code></pre>"},{"location":"tr/week-9/ce204-week-9/#2-ayarlayc-enjeksiyonu-setter-injection","title":"2. Ayarlay\u0131c\u0131 Enjeksiyonu (Setter Injection)","text":"<p>Ba\u011f\u0131ml\u0131l\u0131klar setter metotlar\u0131 arac\u0131l\u0131\u011f\u0131yla sa\u011flan\u0131r.</p> <pre><code>class Servis {\n    private Depo depo;\n\n    public void depoAyarla(Depo depo) {\n        this.depo = depo;\n    }\n}\n</code></pre>"},{"location":"tr/week-9/ce204-week-9/#3-arayuz-enjeksiyonu-interface-injection","title":"3. Aray\u00fcz Enjeksiyonu (Interface Injection)","text":"<p>Ba\u011f\u0131ml\u0131l\u0131klar bir aray\u00fcz metodu arac\u0131l\u0131\u011f\u0131yla sa\u011flan\u0131r.</p> <pre><code>interface DepoEnjektoru {\n    void depoEnjekteEt(Depo depo);\n}\n\nclass Servis implements DepoEnjektoru {\n    private Depo depo;\n\n    @Override\n    public void depoEnjekteEt(Depo depo) {\n        this.depo = depo;\n    }\n}\n</code></pre>"},{"location":"tr/week-9/ce204-week-9/#tasarm-desenleri-ve-solidin-faydalar","title":"Tasar\u0131m Desenleri ve SOLID'in Faydalar\u0131","text":"<ul> <li>Geli\u015ftirilmi\u015f Kod Kalitesi: Daha bak\u0131m\u0131 yap\u0131labilir, esnek ve sa\u011flam kod</li> <li>Azalt\u0131lm\u0131\u015f Karma\u015f\u0131kl\u0131k: Karma\u015f\u0131k problemleri daha k\u00fc\u00e7\u00fck, y\u00f6netilebilir par\u00e7alara ay\u0131rma</li> <li>Daha \u0130yi \u0130leti\u015fim: Tasar\u0131m \u00e7\u00f6z\u00fcmlerini tart\u0131\u015fmak i\u00e7in ortak bir kelime da\u011farc\u0131\u011f\u0131</li> <li>Daha H\u0131zl\u0131 Geli\u015ftirme: Yeniden icat etmek yerine kan\u0131tlanm\u0131\u015f \u00e7\u00f6z\u00fcmleri yeniden kullanma</li> <li>Daha Kolay Test Etme: Daha mod\u00fcler kod daha kolay test edilebilir</li> <li>Azalt\u0131lm\u0131\u015f Teknik Bor\u00e7: Gelecekteki de\u011fi\u015fiklikler daha az yeniden \u00e7al\u0131\u015fma gerektirir</li> </ul>"},{"location":"tr/week-9/ce204-week-9/#tasarmda-guvenlik-en-iyi-uygulamalar","title":"Tasar\u0131mda G\u00fcvenlik En \u0130yi Uygulamalar\u0131","text":"<p>Tasar\u0131m desenleri uygularken, g\u00fcvenlik y\u00f6nlerini de g\u00f6z \u00f6n\u00fcnde bulundurun:</p> <p>https://www.cisecurity.org/controls/cis-controls-list</p> <ul> <li>Kimlik do\u011frulama ve yetkilendirmenin do\u011fru \u015fekilde kaps\u00fcllendi\u011finden emin olun</li> <li>En az ayr\u0131cal\u0131k ilkesini uygulay\u0131n</li> <li>Her s\u0131n\u0131rda veri do\u011frulamas\u0131n\u0131 d\u00fc\u015f\u00fcn\u00fcn</li> <li>Bilgi s\u0131zd\u0131rmayan uygun hata i\u015fleme uygulay\u0131n</li> <li>Ba\u015flang\u0131\u00e7tan itibaren g\u00fcvenlik i\u00e7in tasarlay\u0131n</li> </ul>"},{"location":"tr/week-9/ce204-week-9/#kaynaklar","title":"Kaynaklar","text":"<ul> <li>Gamma, E., Helm, R., Johnson, R., Vlissides, J. (1994). Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley.</li> <li>Martin, R. C. (2003). Agile Software Development, Principles, Patterns, and Practices. Pearson.</li> <li>Freeman, E., Robson, E., Bates, B., Sierra, K. (2004). Head First Design Patterns. O'Reilly Media.</li> <li>Refactoring Guru. (n.d.). Design Patterns. https://refactoring.guru/design-patterns</li> <li>Martin, R. C. (n.d.). The Principles of OOD. http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod</li> </ul> <p>Ve sunum boyunca ba\u011flant\u0131s\u0131 verilen t\u00fcm kaynaklar.</p>"},{"location":"tr/week-9/ce204-week-9/#onerilen-alstrmalar","title":"\u00d6nerilen Al\u0131\u015ft\u0131rmalar","text":"<ol> <li>Basit bir uygulamada Fabrika Metodu desenini uygulay\u0131n</li> <li>Mevcut bir kod taban\u0131n\u0131 SOLID ilkelerini uygulamak i\u00e7in yeniden d\u00fczenleyin</li> <li>Ba\u011f\u0131ml\u0131l\u0131k Enjeksiyonu kullanarak k\u00fc\u00e7\u00fck bir uygulama olu\u015fturun</li> <li>Mevcut \u00e7er\u00e7evelerde (Spring, JavaFX, vb.) tasar\u0131m desenlerini belirleyin</li> <li>Belirli desenlerin ne zaman ve neden kullan\u0131laca\u011f\u0131n\u0131 a\u00e7\u0131klamay\u0131 al\u0131\u015ft\u0131r\u0131n</li> </ol>"},{"location":"tr/week-9/ce204-week-9/#gelecek-hafta","title":"Gelecek Hafta","text":"<p>Java'da daha fazla tasar\u0131m deseni ve bunlar\u0131n pratik uygulamalar\u0131n\u0131 ke\u015ffetmeye devam edece\u011fiz.</p>"}]}