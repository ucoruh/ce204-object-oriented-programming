{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"license/","text":"License \u00b6 MIT License Copyright \u00a9 2019-2022 U\u011fur CORUH Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright \u00a9 2019-2022 U\u011fur CORUH Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"changelog/","text":"Changelog \u00b6 Material for Software Developers \u00b6 1.0.0 _ October 20, 2020 \u00b6 Initial release","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#material-for-software-developers","text":"","title":"Material for Software Developers"},{"location":"changelog/#1.0.0","text":"Initial release","title":"1.0.0 _ October 20, 2020"},{"location":"syllabus/syllabus/","text":"Recep Tayyip Erdogan University \u00b6 Faculty of Engineering and Architecture \u00b6 Computer Engineering \u00b6 CE204 Object-Oriented Programming \u00b6 Syllabus \u00b6 Spring Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Download WORD , PDF Instructor Asst. Prof. Dr. U\u011fur CORUH Contact Information ugur.coruh@erdogan.edu.tr Office No F-301 Google Classroom Code n24xrzo Lecture Hours and Days Theory - Monday (13:00-16:00) Lab \u2013 Thursday (10:00-12:00) Lecture Classroom D-203 Office Hours Meetings will be scheduled over Google Meet with your university account and email and performed via demand emails. Please send emails with the subject starts with [CE204] tag for the fast response and write formal, clear, and short emails. Lecture and Communication Language English Theory/Laboratory Course Hour Per Week 3/2 Hours Credit 4 Prerequisite CE103- Algorithms and Programming I CE100- Algorithms and Programming II Corequisite TBD Requirement TBD *TBD: To Be Defined. A.Course Description \u00b6 This course introduces advanced programming skills with a focus on object-oriented programming and design fundamentals using a high-level language such as Java. Object-oriented programming is the process of integrating software components into a large-scale software architecture. After learning the fundamentals of coding, this approach to software development is the next logical step, allowing for large-scale programs. The course focuses on understanding and applying object-oriented concepts such as classes, objects, data abstraction, methods, method overloading, inheritance, and polymorphism. The class will be built around sharing expertise and guiding students to find learning methods and practice for object-oriented programming topics. Making programming applications and projects in the courses will strengthen the learning process by putting theory into practice. B.Course Learning Outcomes \u00b6 After completing this course satisfactorily, a student will be able to: Design applications using OO techniques Use the unified software development process to manage software development Use UML for the notation diagrams of applications Apply useful design and architecture patterns for software development. C.Course Topics \u00b6 Object-oriented concepts Unified object-oriented analysis and design process Unified Model Language Use case analysis Object structure and behavior analysis System design Application architecture and design patterns Java implementation of object-oriented design D.Textbooks and Required Hardware or Equipment \u00b6 This course does not require a coursebook. If necessary, you can use the following books and open-source online resources. Timothy C. Lethbridge and Robert Lagani\u00e8re, Object-Oriented Software Engineering: Practical Software Development using UML and Java, McGraw Hill Walter Savitch, Absolute C++, Addison-Wesley Longman Intro to Java Programming, Comprehensive Version (10 th Edition) 10 th Edition by Y. Daniel Liang Harvey M. Deitel and Paul J. Deitel. 2001. Java How to Program (4 th . ed.). Prentice Hall PTR, USA. Paul Deitel and Harvey Deitel. 2016. Visual C# How to Program (6 th . ed.). Pearson. Additional Books TBD During this course, you should have a laptop for programming practices. You will have your development environment, and you will use this for examination and assignments also classroom practices. E.Grading System \u00b6 Midterm and Final grades will be calculated with the weighted average of the project or homework-based examinations. Midterm grades will be calculated between term beginning to the midterm week, and Final grades will be calculated between Midterm and Final week homeworks or projects as follow \\[ a_n=\\text{Homework or Project Weight} \\] \\[ HW_n=\\text{Homework or Project Points} \\] \\[ n=\\text{Number of Homework or Project} \\] \\[ Grade=(a_1HW_1+a_2HW_2+...+a_nHW_n)/n \\] Homework Weight Midterm %40 Final %60 \\[ \\text{Passing Grade}=(40*Midterm_{Grade}+60*Final_{Grade})/100 \\] F. Instructional Strategies and Methods \u00b6 The basic teaching method of this course will be planned to be face-to-face in the classroom, and support resources, homeworks, and announcements will be shared over google classroom. Students are expected to be in the university. This responsibility is very important to complete this course with success. If pandemic situation changes and distance education is required during this course, this course will be done using synchronous and asynchronous distance education methods. In this scenario, students are expected to be in the online platform, zoom, or meet at the time specified in the course schedule. Attendance will be taken G. Late Homework \u00b6 Throughout the semester, assignments must be submitted as specified by the announced deadline. Overdue assignments will not be accepted. Unexpected situations must be reported to the instructor for late homeworks by students H. Course Platform and Communication \u00b6 Google Classroom and Github will be used as a course learning management system. All electronic resources and announcements about the course will be shared on this platform. It is very important to check the course page daily, access the necessary resources and announcements, and communicate with the instructor to complete the course with success. I. Academic Integrity, Plagiarism & Cheating \u00b6 Academic Integrity is one of the most important principles of RTE\u00dc University. Anyone who breaches the principles of academic honesty is severely punished. It is natural to interact with classmates and others t.\"study together\". It may also be the case where a student asks to help from someone else, paid or unpaid, better understand a difficult topic or a whole course. However, what is the borderline between \"studying together\" or \"taking private lessons\" and \"academic dishonesty\"? When is it plagiarism, when is it cheating? It is obvious that looking at another student's paper or any source other than what is allowed during the exam is cheating and will be punished. However, it is known that many students come to university with very little experience concerning what is acceptable and what counts as \"copying,\"\" especially for assignments. The following are attempted as guidelines for the Faculty of Engineering and Architecture students to highlight the philosophy of academic honesty for assignments for which the student will be graded. Should a situation arise which is not described below, the student is advised to ask the instructor or assistant of the course whether what they intend to do would remain within the framework of academic honesty or not. a. What is acceptable when preparing an assignment? \u00b6 Communicating with classmates about the assignment to understand it better Putting ideas, quotes, paragraphs, small pieces of code (snippets) that you find online or elsewhere into your assignment, provided that these are not themselves the whole solution to the assignment, you cite the origins of these Asking sources for help in guiding you for the English language content of your assignment. Sharing small pieces of your assignment in the classroom to create a class discussion on some controversial topics. Turning to the web or elsewhere for instructions, references, and solutions to technical difficulties, but not for direct answers to the assignment Discuss solutions to assignments with others using diagrams or summarized statements but not actual text or code. Working with (and even paying) a tutor to help you with the course, provided the tutor does not do your assignment for you. b. What is not acceptable? \u00b6 Ask a classmate to see their solution to a problem before submitting your own. Failing to cite the origins of any text (or code for programming courses) that you discover outside of the course's lessons and integrate into your work You are giving or showing a classmate your solution to a problem when the classmate is struggling to solve it. J. Expectations \u00b6 You are expected to attend classes on time by completing weekly course requirements (readings and assignments) during the semester. The main communication channel between the instructor and the students email emailed. Please send your questions to the instructor's email address about the course via the email address provided to you by the university. Ensure that you include the course name in the subject field of your message and your name in the text field . In addition, the instructor will contact you via email if necessary. For this reason, it is very important to check your email address every day for healthy communication. K. Lecture Content and Syllabus Updates \u00b6 If deemed necessary, changes in the lecture content or course schedule can be made. If any changes are made in the scope of this document, the instructor will inform you about this. Course Schedule Overview \u00b6 Weeks Dates Subjects Other Tasks Week 1 21.02.2022-24.02.2022 Course Plan and Communication Grading System, Assignments, and Exams. Software and Software Engineering Object Orientation and OOP with Java Part-I(Classes, Objects, Methods,Inheritance,Access Modifiers,This and InstanceOf Keywords) TBD Week 2 28.02.2022-03.03.2022 OOP with Java Part-II (super keyword, final keyword, Polymorphism / Encapsulation, Method Overriding, Nested Inner Class, Static Class, Anonymous Class, Enums / Enum-Constructor / Enum-String, Abstract Class, Object Class, Forms of Inheritance, Benefits, and Costs of Inheritance, Packages, Access Protection in Packages TBD Week 3 07.03.2022-10.03.2022 OOP with Java Part-III(Defining and Interface and Interface Implementation, Nested Interfaces, Variables in Interfaces, Extending Interfaces, Reflection, Wrapper Classes, Lambda Notation) TBD Week 4 14.03.2022-17.03.2022 UML (UML tools, UML building blocks, architecture, diagrams, relationship, association, aggregation, composition comparison, association, dependency, generalization, realization, class diagram, object diagram, component diagram, deployment diagram, interaction diagram, use-case diagram, sequence diagram, collaboration diagram, state-machine diagram, activity diagram, timing diagram) TBD Week 5 21.03.2022-24.03.2022 Plantuml and Examples TBD Week-6 28.03.2022-31.03.2022 UMPLE and Examples TBD Week-7 04.04.2022-07.04.2022 UMPLE and Examples TBD Week-8 09.04.2022-17.04.2022 Midterm TBD Week-9 18.04.2022-21.04.2022 Using Design Patterns TBD Week-10 25.04.2022-28.04.2022 Using Design Patterns TBD Week-11 02.05.2022-05.05.2022 Holiday TBD Week-12 09.05.2022-12.05.2022 UML + UMPLE + Java Implementations TBD Week-13 16.05.2022-19.05.2022 SMC Remote Service Case Study Part-I TBD Week-14 23.05.2022-26.05.2022 SMC Remote Service Case Study Part-II TBD Week-15 30.05.2022-02.06.2022 OOP ATM Case Study Part-I TBD Week-16 06.06.2022-09.06.2022 OOP ATM Case Study Part-II TBD Week-17 13.06.2022-26.06.2022 Final \\(End-Of-CE204-Object-Oriented-Programming-Syllabus\\)","title":"Syllabus"},{"location":"syllabus/syllabus/#recep-tayyip-erdogan-university","text":"","title":"Recep Tayyip Erdogan University"},{"location":"syllabus/syllabus/#faculty-of-engineering-and-architecture","text":"","title":"Faculty of Engineering and Architecture"},{"location":"syllabus/syllabus/#computer-engineering","text":"","title":"Computer Engineering"},{"location":"syllabus/syllabus/#ce204-object-oriented-programming","text":"","title":"CE204 Object-Oriented Programming"},{"location":"syllabus/syllabus/#syllabus","text":"","title":"Syllabus"},{"location":"syllabus/syllabus/#spring-semester-2021-2022","text":"Download DOC , SLIDE , PPTX Download WORD , PDF Instructor Asst. Prof. Dr. U\u011fur CORUH Contact Information ugur.coruh@erdogan.edu.tr Office No F-301 Google Classroom Code n24xrzo Lecture Hours and Days Theory - Monday (13:00-16:00) Lab \u2013 Thursday (10:00-12:00) Lecture Classroom D-203 Office Hours Meetings will be scheduled over Google Meet with your university account and email and performed via demand emails. Please send emails with the subject starts with [CE204] tag for the fast response and write formal, clear, and short emails. Lecture and Communication Language English Theory/Laboratory Course Hour Per Week 3/2 Hours Credit 4 Prerequisite CE103- Algorithms and Programming I CE100- Algorithms and Programming II Corequisite TBD Requirement TBD *TBD: To Be Defined.","title":"Spring Semester, 2021-2022"},{"location":"syllabus/syllabus/#acourse-description","text":"This course introduces advanced programming skills with a focus on object-oriented programming and design fundamentals using a high-level language such as Java. Object-oriented programming is the process of integrating software components into a large-scale software architecture. After learning the fundamentals of coding, this approach to software development is the next logical step, allowing for large-scale programs. The course focuses on understanding and applying object-oriented concepts such as classes, objects, data abstraction, methods, method overloading, inheritance, and polymorphism. The class will be built around sharing expertise and guiding students to find learning methods and practice for object-oriented programming topics. Making programming applications and projects in the courses will strengthen the learning process by putting theory into practice.","title":"A.Course Description"},{"location":"syllabus/syllabus/#bcourse-learning-outcomes","text":"After completing this course satisfactorily, a student will be able to: Design applications using OO techniques Use the unified software development process to manage software development Use UML for the notation diagrams of applications Apply useful design and architecture patterns for software development.","title":"B.Course Learning Outcomes"},{"location":"syllabus/syllabus/#ccourse-topics","text":"Object-oriented concepts Unified object-oriented analysis and design process Unified Model Language Use case analysis Object structure and behavior analysis System design Application architecture and design patterns Java implementation of object-oriented design","title":"C.Course Topics"},{"location":"syllabus/syllabus/#dtextbooks-and-required-hardware-or-equipment","text":"This course does not require a coursebook. If necessary, you can use the following books and open-source online resources. Timothy C. Lethbridge and Robert Lagani\u00e8re, Object-Oriented Software Engineering: Practical Software Development using UML and Java, McGraw Hill Walter Savitch, Absolute C++, Addison-Wesley Longman Intro to Java Programming, Comprehensive Version (10 th Edition) 10 th Edition by Y. Daniel Liang Harvey M. Deitel and Paul J. Deitel. 2001. Java How to Program (4 th . ed.). Prentice Hall PTR, USA. Paul Deitel and Harvey Deitel. 2016. Visual C# How to Program (6 th . ed.). Pearson. Additional Books TBD During this course, you should have a laptop for programming practices. You will have your development environment, and you will use this for examination and assignments also classroom practices.","title":"D.Textbooks and Required Hardware or Equipment"},{"location":"syllabus/syllabus/#egrading-system","text":"Midterm and Final grades will be calculated with the weighted average of the project or homework-based examinations. Midterm grades will be calculated between term beginning to the midterm week, and Final grades will be calculated between Midterm and Final week homeworks or projects as follow \\[ a_n=\\text{Homework or Project Weight} \\] \\[ HW_n=\\text{Homework or Project Points} \\] \\[ n=\\text{Number of Homework or Project} \\] \\[ Grade=(a_1HW_1+a_2HW_2+...+a_nHW_n)/n \\] Homework Weight Midterm %40 Final %60 \\[ \\text{Passing Grade}=(40*Midterm_{Grade}+60*Final_{Grade})/100 \\]","title":"E.Grading System"},{"location":"syllabus/syllabus/#f-instructional-strategies-and-methods","text":"The basic teaching method of this course will be planned to be face-to-face in the classroom, and support resources, homeworks, and announcements will be shared over google classroom. Students are expected to be in the university. This responsibility is very important to complete this course with success. If pandemic situation changes and distance education is required during this course, this course will be done using synchronous and asynchronous distance education methods. In this scenario, students are expected to be in the online platform, zoom, or meet at the time specified in the course schedule. Attendance will be taken","title":"F. Instructional Strategies and Methods"},{"location":"syllabus/syllabus/#g-late-homework","text":"Throughout the semester, assignments must be submitted as specified by the announced deadline. Overdue assignments will not be accepted. Unexpected situations must be reported to the instructor for late homeworks by students","title":"G. Late Homework"},{"location":"syllabus/syllabus/#h-course-platform-and-communication","text":"Google Classroom and Github will be used as a course learning management system. All electronic resources and announcements about the course will be shared on this platform. It is very important to check the course page daily, access the necessary resources and announcements, and communicate with the instructor to complete the course with success.","title":"H. Course Platform and Communication"},{"location":"syllabus/syllabus/#i-academic-integrity-plagiarism-cheating","text":"Academic Integrity is one of the most important principles of RTE\u00dc University. Anyone who breaches the principles of academic honesty is severely punished. It is natural to interact with classmates and others t.\"study together\". It may also be the case where a student asks to help from someone else, paid or unpaid, better understand a difficult topic or a whole course. However, what is the borderline between \"studying together\" or \"taking private lessons\" and \"academic dishonesty\"? When is it plagiarism, when is it cheating? It is obvious that looking at another student's paper or any source other than what is allowed during the exam is cheating and will be punished. However, it is known that many students come to university with very little experience concerning what is acceptable and what counts as \"copying,\"\" especially for assignments. The following are attempted as guidelines for the Faculty of Engineering and Architecture students to highlight the philosophy of academic honesty for assignments for which the student will be graded. Should a situation arise which is not described below, the student is advised to ask the instructor or assistant of the course whether what they intend to do would remain within the framework of academic honesty or not.","title":"I. Academic Integrity, Plagiarism &amp; Cheating"},{"location":"syllabus/syllabus/#a-what-is-acceptable-when-preparing-an-assignment","text":"Communicating with classmates about the assignment to understand it better Putting ideas, quotes, paragraphs, small pieces of code (snippets) that you find online or elsewhere into your assignment, provided that these are not themselves the whole solution to the assignment, you cite the origins of these Asking sources for help in guiding you for the English language content of your assignment. Sharing small pieces of your assignment in the classroom to create a class discussion on some controversial topics. Turning to the web or elsewhere for instructions, references, and solutions to technical difficulties, but not for direct answers to the assignment Discuss solutions to assignments with others using diagrams or summarized statements but not actual text or code. Working with (and even paying) a tutor to help you with the course, provided the tutor does not do your assignment for you.","title":"a. What is acceptable when preparing an assignment?"},{"location":"syllabus/syllabus/#b-what-is-not-acceptable","text":"Ask a classmate to see their solution to a problem before submitting your own. Failing to cite the origins of any text (or code for programming courses) that you discover outside of the course's lessons and integrate into your work You are giving or showing a classmate your solution to a problem when the classmate is struggling to solve it.","title":"b. What is not acceptable?"},{"location":"syllabus/syllabus/#j-expectations","text":"You are expected to attend classes on time by completing weekly course requirements (readings and assignments) during the semester. The main communication channel between the instructor and the students email emailed. Please send your questions to the instructor's email address about the course via the email address provided to you by the university. Ensure that you include the course name in the subject field of your message and your name in the text field . In addition, the instructor will contact you via email if necessary. For this reason, it is very important to check your email address every day for healthy communication.","title":"J. Expectations"},{"location":"syllabus/syllabus/#k-lecture-content-and-syllabus-updates","text":"If deemed necessary, changes in the lecture content or course schedule can be made. If any changes are made in the scope of this document, the instructor will inform you about this.","title":"K. Lecture Content and Syllabus Updates"},{"location":"syllabus/syllabus/#course-schedule-overview","text":"Weeks Dates Subjects Other Tasks Week 1 21.02.2022-24.02.2022 Course Plan and Communication Grading System, Assignments, and Exams. Software and Software Engineering Object Orientation and OOP with Java Part-I(Classes, Objects, Methods,Inheritance,Access Modifiers,This and InstanceOf Keywords) TBD Week 2 28.02.2022-03.03.2022 OOP with Java Part-II (super keyword, final keyword, Polymorphism / Encapsulation, Method Overriding, Nested Inner Class, Static Class, Anonymous Class, Enums / Enum-Constructor / Enum-String, Abstract Class, Object Class, Forms of Inheritance, Benefits, and Costs of Inheritance, Packages, Access Protection in Packages TBD Week 3 07.03.2022-10.03.2022 OOP with Java Part-III(Defining and Interface and Interface Implementation, Nested Interfaces, Variables in Interfaces, Extending Interfaces, Reflection, Wrapper Classes, Lambda Notation) TBD Week 4 14.03.2022-17.03.2022 UML (UML tools, UML building blocks, architecture, diagrams, relationship, association, aggregation, composition comparison, association, dependency, generalization, realization, class diagram, object diagram, component diagram, deployment diagram, interaction diagram, use-case diagram, sequence diagram, collaboration diagram, state-machine diagram, activity diagram, timing diagram) TBD Week 5 21.03.2022-24.03.2022 Plantuml and Examples TBD Week-6 28.03.2022-31.03.2022 UMPLE and Examples TBD Week-7 04.04.2022-07.04.2022 UMPLE and Examples TBD Week-8 09.04.2022-17.04.2022 Midterm TBD Week-9 18.04.2022-21.04.2022 Using Design Patterns TBD Week-10 25.04.2022-28.04.2022 Using Design Patterns TBD Week-11 02.05.2022-05.05.2022 Holiday TBD Week-12 09.05.2022-12.05.2022 UML + UMPLE + Java Implementations TBD Week-13 16.05.2022-19.05.2022 SMC Remote Service Case Study Part-I TBD Week-14 23.05.2022-26.05.2022 SMC Remote Service Case Study Part-II TBD Week-15 30.05.2022-02.06.2022 OOP ATM Case Study Part-I TBD Week-16 06.06.2022-09.06.2022 OOP ATM Case Study Part-II TBD Week-17 13.06.2022-26.06.2022 Final \\(End-Of-CE204-Object-Oriented-Programming-Syllabus\\)","title":"Course Schedule Overview"},{"location":"week-1/ce204-week-1/","text":"CE204 Object-Oriented Programming \u00b6 Week-1 (Software Engineering and OOP with Java -I) \u00b6 Spring Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Brief Description of Course and Rules \u00b6 We will first talk about, Course Plan and Communication Grading System, Homeworks, and Exams please read the syllabus carefully. Course Growth Track \u00b6 OOP with Java UML PlantUML + UMPLE + UML PlantUML + UMPLE + UML + Java Design Patterns + UML + Java + UMPLE Outline (1) \u00b6 Software and Software Engineering Object Orientation and Review OOP with Java Intro Basing Software Development on Reusable Technology Outline (2) \u00b6 Java Classes Java Objects Java Methods Java Inheritance Java Access Modifiers This and InstanceOf Keywords Software and Software Engineering \u00b6 Software \u00b6 Computer Software is the product that software engineers design and build. It encompasses programs that execute within a computer of any size and architecture, documents that encompass hard-copy and virtual forms, data that combine numbers and text but also includes representations of pictorial, video, and audio information. The Nature of Software... (1) \u00b6 Software is intangible Hard to understand development effort Software is easy to reproduce Cost is in its development in other engineering products, manufacturing is the costly stage The industry is labor-intensive Hard to automate Untrained people can hack something together Quality problems are hard to notice The Nature of Software... (2) \u00b6 Software is easy to modify People make changes without fully understanding it Software does not \"wear out\" It deteriorates by having its design changed: erroneously, or in ways that were not anticipated, thus making it complex Conclusions Much software has poor design and is getting worse We have to learn to \u2018engineer\u2019 software Some types of Software \u00b6 Real time embedded software E.g. control and monitoring systems Must react immediately Safety often a concern Data processing software Used to run businesses Accuracy and security of data are key Game software Mobile device software Web-based software Etc. Single Chance \u00b6 Most of the clients use applications to ease their tasks to make money. For this reason, you do not have a chance to try your application development in real system. Before this deployment you have to use Theory Experimentation Guesses Feedback Lets talk about. The Project Construction Cycle - The Tree Swing Example \u00b6 1-How the customer explained it \u00b6 2-How the project leader understood it. \u00b6 3- How the analyst designed it \u00b6 4-How the programmer wrote it \u00b6 5-What the beta testers received \u00b6 6-How the business consultant described it \u00b6 7- How the project was documented \u00b6 8-What operations installed \u00b6 9-How the customer was billed \u00b6 10-How it was supported \u00b6 11-What marketing advertised \u00b6 12-What the customer really needed \u00b6 13-The disaster recover plan \u00b6 14- What the digg effect can do to your site \u00b6 15- (Finally) When it was delivered \u00b6 Need for a good programming method \u00b6 Common problems Why does it take so long? Why are development costs so high? Why can\u2019t find all faults before delivery? Why can\u2019t we measure development? NIST reported that even though 50 percent of software development budgets go to testing, flaws in software still cost the U.S. economy $59.5 billion annually.* Updated NIST Software Uses Combination Testing to Catch Bugs Fast and Easy | NIST What is Software Engineering? (1) \u00b6 The process of solving customers' problems by the systematic development and evolution of large, high-quality software systems within cost, time and other constraints What is Software Engineering? (2) \u00b6 Solving customers\u2019 problems The goal Sometimes the solution is to buy , not build Adding unnecessary features often makes software worse Software engineers must communicate effectively to identify and understand the problem What is Software Engineering? (3) \u00b6 Systematic development and evolution An engineering process involves applying well understood techniques in a organized and disciplined way Many well-accepted practices have been formally standardized e.g. by the IEEE or ISO Most development work is evolution What is Software Engineering? (4) \u00b6 Large, high quality software systems Software engineering techniques are needed because large systems cannot be completely understood by one person Teamwork and co-ordination are required Key challenge: Dividing up the work and ensuring that the parts of the system work properly together The end-product must be of sufficient quality What is Software Engineering? (5) \u00b6 Cost, time and other constraints Finite resources The benefit must outweigh the cost Others are competing to do the job cheaper and faster Inaccurate estimates of cost and time have caused many project failures The Software Engineering Profession \u00b6 The term Software Engineering was coined in 1968 People began to realize that the principles of engineering should be applied to software development Engineering is a licensed profession In order to protect the public Engineers design artifacts following well accepted practices which involve the application of science, mathematics and economics Ethical practice is also a key tenet of the profession In many countries, much software engineering does not require an engineering licence, but is still engineering Software Engineering Code of Ethics \u00b6 Software engineers shall Act consistently with public interest Act in the best interests of their clients Develop and maintain with the highest standards possible Maintain integrity and independence Promote an ethical approach in management Advance the integrity and reputation of the profession Be fair and supportive to colleagues Participate in lifelong learning Software Quality \u00b6 Usability Users can learn it and fast and get their job done easily Efficiency It doesn\u2019t waste resources such as CPU time and memory Reliability It does what it is required to do without failing Maintainability It can be easily changed Reusability Its parts can be used in other projects, so reprogramming is not needed Software Quality and Stakeholders \u00b6 Software Quality and Stakeholders \u00b6 Customer (those who pay): solves problems at an acceptable cost in terms of money paid and resources used User easy to learn; efficient to use; helps get work done Developer easy to design; easy to maintain; easy to reuse its parts Development manager sells more and pleases customers while costing less to develop and maintain Software Quality Metrics \u2013 User \u00b6 A program must do its job correctly . It must be useful and - usable A program must run as fast as necessary (Real-time constraints) A program must not waste system resources (processor time, - memory, disk capacity, network capacity) too much It must be reliable It must be easily updated A good software must have sufficient documentation (users manual) Software Quality Metrics \u2013 SW Developer \u00b6 Source code must be readable and understandable It must be easy to maintain and update the program A program must consist of independent modules An error may not affect other parts of a program (Locality of errors) Modules of the program must be reusable in other projects A software project must meet its deadline Good software must have sufficient documentation Software Quality Metrics - OOP \u00b6 OOP techniques ensure high-quality programs While designing and coding a program, these quality metrics must always be considered Software Quality: Conflicts and Objectives \u00b6 The different qualities can conflict Increasing efficiency can reduce maintainability or reusability Increasing usability can reduce efficiency Setting objectives for quality is a key engineering activity You then design to meet the objectives Avoids \"over-engineering\" which wastes money Software Engineering Projects \u00b6 Most projects are evolutionary or maintenance projects, involving work on legacy systems Corrective projects: fixing defects Adaptive projects: changing the system in response to changes in Operating system Database Rules and regulations Enhancement projects: adding new features for users Reengineering or perfective projects: changing the system internally so it is more maintainable Software Engineering Projects Start Points \u00b6 Green Field Development Brownfield Development Start afresh Build on existing code Choose your technology Technology already chosen Use your best ideas, patterns, techniques Understand previous developers' code Learn from mistakes Live with mistakes Software Engineering Projects Start Points \u00b6 Requirements must be determined Clients have produced requirements New development, Green Field Project A B Evolution of Existing System, Brown Field Project C D Activities Common to Software Projects \u00b6 Requirements and specification Includes Domain analysis Defining the problem Requirements gathering Obtaining input from as many sources as possible Requirements analysis Organizing the information Requirements specification Writing detailed instructions about how the software should behave Activities Common to Software Projects \u00b6 Design Deciding how the requirements should be implemented, using the available technology Includes: Systems engineering: Deciding what should be in hardware and what in software Software architecture: Dividing the system into subsystems and deciding how the subsystems will interact Detailed design of the internals of a subsystem User interface design Design of databases Activities Common to Software Projects \u00b6 Modeling Creating representations of the domain or the software Use case modeling Structural modeling Dynamic and behavioural modeling Programming Quality assurance Reviews and inspections Testing Deployment Managing the process Software Projects Development Team \u00b6 Software Life Cycle \u00b6 Requirements Phase Specification Phase Design Phase Implementation Phase Integration Phase Maintenance Phase Retirement Phase Requirements Phase \u00b6 Defining constraints Functions Due dates Costs Reliability Size Types Functional Non-Functional Specification Phase \u00b6 Documentation of requirements Inputs & Outputs Formal Understandable for user & developer Usually functional requirements (what to do) Base for testing & maintenance The contract between customer & developer Design Phase \u00b6 Defining Internal structure (how to do) Has some levels (or types of docs) Architectural design Detailed design Important To backtrack the aims of decisions To easily maintain Implementation and Integration Phases \u00b6 Implementation phase: Simply coding Unit tests For verification Combining modules System tests For validation Quality tests Maintenance Phase \u00b6 Corrective Enhancement Perfective Adaptive Usually maintainers are not the same people with developers. The only input is (in general) the source code of the software Retirement Phase \u00b6 When the cost of maintenance is not effective. Changes are so drastic, that the software should be redesigned. So many changes may have been made. The update frequency of docs is not enough. The hardware (or OS) will be changed. Software Development Process \u00b6 Software Development Process \u00b6 Analysis : Understanding requirements. They may change during (or after) development of the system! Building the programming team. Design : Identifying the key concepts involved in a solution and creation of the models. This stage has a strong effect on the quality of the software. Therefore, before the coding, verification of the created model must be done. Design process is connected with the programming scheme. Here, our design style is object-oriented. Software Development Process \u00b6 Coding : The solution (model) is expressed in a program. In this course we will use Java. Documentation: Each phase of a software project must be clearly explained. A users manual should also be written. Test : the behavior of the program for possible inputs must be examined. These steps are important design principles and design patterns, which help us developing high-quality software. The Unified Modeling Language (UML) is useful to express the model. Unified Process (UP) \u00b6 The UP promotes several best practices. Iterative Incremental Risk-driven Unified Process (UP) \u00b6 Unified Process (UP) \u00b6 Object Orientation Part-1 \u00b6 OOP Concepts in Java \u00b6 OOP stands for Object-Oriented Programming. OOP is a programming paradigm in which every program is follows the concept of object. In other words, OOP is a way of writing programs based on the object concept. The object-oriented programming paradigm has the following core concepts. Encapsulation Inheritance Polymorphism Abstraction The popular object-oriented programming languages are Smalltalk, C++, Java, PHP, C#, Python, etc. Encapsulation \u00b6 Encapsulation is the process of combining data and code into a single unit (object / class). In OOP, every object is associated with its data and code. In programming, data is defined as variables and code is defined as methods. The java programming language uses the class concept to implement encapsulation. Encapsulation \u00b6 Inheritance \u00b6 Inheritance is the process of acquiring properties and behaviors from one object to another object or one class to another class. In inheritance, we derive a new class from the existing class. Here, the new class acquires the properties and behaviors from the existing class. In the inheritance concept, the class which provides properties is called as parent class and the class which recieves the properties is called as child class. The parent class is also known as base class or supre class. The child class is also known as derived class or sub class. In the inheritance, the properties and behaviors of base class extended to its derived class, but the base class never receive properties or behaviors from its derived class. In java programming language the keyword extends is used to implement inheritance. Inheritance \u00b6 Polymorphism \u00b6 Polymorphism is the process of defining same method with different implementation. That means creating multiple methods with different behaviors. The java uses method overloading and method overriding to implement polymorphism. Method overloading - multiple methods with same name but different parameters. Method overriding - multiple methods with same name and same parameters. Polymorphism \u00b6 Abstraction \u00b6 Abstraction is hiding the internal details and showing only esential functionality. In the abstraction concept, we do not show the actual implemention to the end user, instead we provide only esential things. For example, if we want to drive a car, we does not need to know about the internal functionality like how wheel system works? how brake system works? how music system works? etc. Abstraction \u00b6 Why Object Technology \u00b6 Expectations are, Reducing the effort, complexity, and cost of development and maintenance of software systems. Reducing the time to adapt an existing system (quicker reaction to changes in the business environment): Flexibility, reusability. Increasing the reliability of the system. What is Programming? \u00b6 A programming language provides a way to express concepts. Program development involves creating models of real world - situations and building computer programs based on these models. Computer programs describe the method of implementing the model. Computer programs may contain computer world representations of the things that constitute the solutions of real world problems. What is Programming? \u00b6 If successful, this medium of expression (the object-oriented way) will be significantly easier, more flexible, and efficient than the alternatives as problems grow larger and more complex Why JAVA \u00b6 Java supports writing high quality programs (pure OO) Provides an easy-to-use language Provides an interpreted environment for Improved development speed Code portability Simple Architecture Neutral and Portable Robust and Secure High Performance Why JAVA \u00b6 Write less code can be four times smaller than the same program written in C++ Write better code encourages good coding practices, garbage collection for avoiding memory leaks, wide-ranging, easily extendible API Avoid platform dependencies Write once, run anywhere Gained popularity in gadgets such as PDAs, cell phones etc. Learning JAVA \u00b6 Many syntax and grammar rules Learning how to write \u201cgood programs\u201d Focusing on concepts and not get lost in language-technical - details Paying attention to design techniques rather than details Building an effective programming scheme Practicing, practicing and practicing! Consequently, new and better ways of building systems Java Buzz Words \u00b6 Simple Secure Portable Object-oriented Robust Architecture-neutral (or) Platform Independent Multi-threaded Interpreted High performance Distributed Dynamic Simple \u00b6 Java programming language is very simple and easy to learn, understand, and code. Most of the syntaxes in java follow basic programming language C and object-oriented programming concepts are similar to C++. In a java programming language, many complicated features like pointers, operator overloading, structures, unions, etc. have been removed. One of the most useful features is the garbage collector it makes java more simple. Secure \u00b6 Java is said to be more secure programming language because it does not have pointers concept, java provides a feature \"applet\" which can be embedded into a web application. The applet in java does not allow access to other parts of the computer, which keeps away from harmful programs like viruses and unauthorized access. Portable \u00b6 Portability is one of the core features of java which enables the java programs to run on any computer or operating system. For example, an applet developed using java runs on a wide variety of CPUs, operating systems, and browsers connected to the Internet. Object-oriented \u00b6 Java is said to be a pure object-oriented programming language. In java, everything is an object. It supports all the features of the object-oriented programming paradigm. The primitive data types java also implemented as objects using wrapper classes, but still, it allows primitive data types to archive high-performance. Robust \u00b6 Java is more robust because the java code can be executed on a variety of environments, java has a strong memory management mechanism (garbage collector), java is a strictly typed language, it has a strong set of exception handling mechanism, and many more. Architecture-neutral (or) Platform Independent \u00b6 Java has invented to archive \"write once; run anywhere, any time, forever\". The java provides JVM (Java Virtual Machine) to to archive architectural-neutral or platform-independent. The JVM allows the java program created using one operating system can be executed on any other operating system. Multi-threaded \u00b6 Java supports multi-threading programming, which allows us to write programs that do multiple operations simultaneously. Interpreted \u00b6 Java enables the creation of cross-platform programs by compiling into an intermediate representation called Java bytecode. The byte code is interpreted to any machine code so that it runs on the native machine. High performance \u00b6 Java provides high performance with the help of features like JVM, interpretation, and its simplicity. Distributed \u00b6 Java programming language supports TCP/IP protocols which enable the java to support the distributed environment of the Internet. Java also supports Remote Method Invocation (RMI), this feature enables a program to invoke methods across a network. Dynamic \u00b6 Java is said to be dynamic because the java byte code may be dynamically updated on a running system and it has a dynamic memory allocation and deallocation (objects and garbage collector). The Basics of Java \u00b6 History The first object oriented programming language was Simula-67 designed to allow programmers to write simulation programs In the early 1980\u2019s, Smalltalk was developed at Xerox PARC New syntax, large open-source library of reusable code, bytecode, platform independence, garbage collection. The Basics of Java \u00b6 late 1980\u2019s, C++ was developed by B. Stroustrup, Recognized the advantages of OO but also recognized that there were tremendous numbers of C programmers In 1991, engineers at Sun Microsystems started a project to design a language that could be used in consumer \u2018smart devices\u2019: Oak When the Internet gained popularity, Sun saw an opportunity to exploit the technology. The new language, renamed Java, was formally presented in 1995 at the SunWorld \u201995 conference. Java documentation \u00b6 Looking up classes and methods is an essential skill Looking up unknown classes and methods will get you a long way towards understanding code Java documentation can be automatically generated by a program called Javadoc Documentation is generated from the code and its comments You should format your comments as shown in some of the book\u2019s examples These may include embeded html Characters and Strings \u00b6 Character is a class representing Unicode characters More than a byte each Represent any world language char is a primitive data type containing a Unicode character String is a class containing collections of characters + is the operator used to concatenate strings Arrays and Collections \u00b6 Arrays are of fixed size and lack methods to manipulate them ArrayList is the most widely used class to hold a collection of other objects More powerful than arrays, but less efficient Iterators are used to access members of Vectors Enumerations were formally used, but were more complex a = new ArrayList (); Iterator i = a . iterator (); while ( i . hasNext ()) { aMethod ( i . next ()); } Casting \u00b6 Java is very strict about types If variable v is declared to have type X, you can only invoke operations on v that are defined in X or its superclasses Even though an instance of a subclass of X may be actually stored in the variable If you know an instance of a subclass is stored, then you can cast the variable to the subclass E.g. if I know a Vector contains instances of String, I can get the next element of its Iterator using: (String)i.next(); To avoid casting you could also have used templates:: a = ArrayList<String>; i=a.iterator(); i.next() Exceptions \u00b6 Anything that can go wrong should result in the raising of an Exception Exception is a class with many subclasses for specific things that can go wrong Use a try - catch block to trap an exception try { // some code } catch ( ArithmeticException e ) { // code to handle division by zero } Interfaces \u00b6 Like abstract classes, but cannot have executable statements Define a set of operations that make sense in several classes Abstract Data Types A class can implement any number of interfaces It must have concrete methods for the operations You can declare the type of a variable to be an interface This is just like declaring the type to be an abstract class Important interfaces in Java\u2019s library include Runnable, Collection, Iterator, Comparable, Cloneable Packages and importing \u00b6 A package combines related classes into subsystems All the classes in a particular directory Classes in different packages can have the same name Although not recommended Importing a package is done as follows: import finance.banking.accounts.*; Access control \u00b6 Applies to methods and variables public Any class can access protected Only code in the package, or subclasses can access (blank) Only code in the package can access private Only code written in the class can access Inheritance still occurs! Threads and concurrency \u00b6 Thread : Sequence of executing statements that can be running concurrently with other threads To create a thread in Java : Create a class implementing Runnable or extending Thread Implement the run method as a loop that does something for a period of time Create an instance of this class Invoke the start operation, which calls run Programming Style Guidelines \u00b6 Remember that programs are for people to read Always choose the simpler alternative Reject clever code that is hard to understand Shorter code is not necessarily better Choose good names Make them highly descriptive Do not worry about using long names Programming style \u00b6 Comment extensively Comment whatever is non-obvious Do not comment the obvious Comments should be 25-50% of the code Organize class elements consistently Variables, constructors, public methods then private methods Be consistent regarding layout of code Programming style \u00b6 Avoid duplication of code Do not \"clone\" if possible Create a new method and call it Cloning results in two copies that may both have bugs When one copy of the bug is fixed, the other may be forgotten Programming style \u00b6 Adhere to good object oriented principles E.g. the \u2018isa rule\u2019 Prefer private as opposed to public Do not mix user interface code with non-user interface code Interact with the user in separate classes This makes non-UI classes more reusable Difficulties and Risks in Programming \u00b6 Language evolution and deprecated features : Java is evolving, so some features are \u2018deprecated\u2019 at every release Efficiency can be a concern in some object oriented systems Java can be less efficient than other languages VM-based Dynamic binding C++ vs Java \u00b6 Comparison Index C++ Java Platform-independent C++ is platform-dependent. Java is platform-independent. Mainly used for C++ is mainly used for system programming. Java is mainly used for application programming. It is widely used in Windows-based, web-based, enterprise, and mobile applications. C++ vs Java \u00b6 Comparison Index C++ Java Multiple inheritance C++ supports multiple inheritance. Java doesn't support multiple inheritance through class. It can be achieved by using interfaces in java. Operator Overloading C++ supports operator overloading. Java doesn't support operator overloading. C++ vs Java \u00b6 Comparison Index C++ Java Goto C++ supports the goto statement. Java doesn't support the goto statement. Compiler and Interpreter C++ uses compiler only. C++ is compiled and run using the compiler which converts source code into machine code so, C++ is platform dependent. Java uses both compiler and interpreter. Java source code is converted into bytecode at compilation time. The interpreter executes this bytecode at runtime and produces output. Java is interpreted that is why it is platform-independent. C++ vs Java \u00b6 Comparison Index C++ Java Pointers C++ supports pointers. You can write a pointer program in C++. Java supports pointer internally. However, you can't write the pointer program in java. It means java has restricted pointer support in java. Design Goal C++ was designed for systems and applications programming. It was an extension of the C programming language. Java was designed and created as an interpreter for printing systems but later extended as a support network computing. It was designed to be easy to use and accessible to a broader audience. C++ vs Java \u00b6 Comparison Index C++ Java Structure and Union C++ supports structures and unions. Java doesn't support structures and unions. Thread Support C++ doesn't have built-in support for threads. It relies on third-party libraries for thread support. Java has built-in thread support. C++ vs Java \u00b6 Comparison Index C++ Java Documentation comment C++ doesn't support documentation comments. Java supports documentation comment (/** ... */) to create documentation for java source code. Virtual Keyword C++ supports virtual keyword so that we can decide whether or not to override a function. Java has no virtual keyword. We can override all non-static methods by default. In other words, non-static methods are virtual by default. C++ vs Java \u00b6 Comparison Index C++ Java unsigned right shift >>> C++ doesn't support >>> operator. Java supports unsigned right shift >>> operator that fills zero at the top for the negative numbers. For positive numbers, it works same like >> operator. Inheritance Tree C++ always creates a new inheritance tree. Java always uses a single inheritance tree because all classes are the child of the Object class in Java. The Object class is the root of the inheritance tree in java. C++ vs Java \u00b6 Comparison Index C++ Java Hardware C++ is nearer to hardware. Java is not so interactive with hardware. Object-oriented C++ is an object-oriented language. However, in the C language, a single root hierarchy is not possible. Java is also an object-oriented language. However, everything (except fundamental types) is an object in Java. It is a single root hierarchy as everything gets derived from java.lang.Object. Object Orientation Part-2 \u00b6 Procedural Programming \u00b6 Pascal, C, Basic, Fortran and similar traditional languages are procedural Each statement tells the computer to do something The emphasis is on doing things Functions A program is divided into functions Each function has a clearly defined purpose and interface Procedural Programming \u00b6 Problems with Procedural Programming \u00b6 Data Is undervalued Data is, after all, the reason for a program\u2019s existence. The important parts of a program are not functions that display the data or functions that checks for correct input; they are data Procedural programs don\u2019t model the real world very well. The real world does not consist of functions Global data can be corrupted by functions that have no business changing it To add new data items, all the functions that access data must be modified so that they can also access these new items Creating new data types is difficult Besides \u00b6 It is also possible to write good programs by using procedural programming (C programs). But object-oriented programming offers programmers many advantages, enables them to write high-quality programs Object-Oriented Programming \u00b6 The fundamental idea behind object-oriented programming: The real world consists of objects. Computer programs may contain computer world representations of the things (objects) that constitute the solutions of real world problems. Real world objects have two parts: Properties (or state: characteristics that can change), Behavior (or abilities: things they can do). To solve a programming problem in an object-oriented language,the programmer no longer asks how the problem will be divided into functions, but how it will be divided into objects . The emphasis is on data Object-Oriented Programming \u00b6 What kinds of things become objects in object-oriented programs? Human entities : Employees, customers, salespeople,worker, manager Graphics program : Point, line, square, circle, ... Mathematics : Complex numbers, matrix Computer user environment : Windows, menus, buttons Data-storage constructs : Customized arrays, stacks, linked lists OOP: Encapsulation and Data Hiding \u00b6 Thinking in terms of objects rather than functions Close match between objects in the programming sense and objects in the real world Both data and the functions that operate on that data are combined into a single program entity Data represent the properties (state), and functions represent the behavior of an object. Data and its functions are said to be encapsulated into a single entity An object\u2019s functions, called member functions in Java typically provide the only way to access its data. The data is hidden , so it is safe from accidental alteration. OOP: Encapsulation and Data Hiding \u00b6 Encapsulation and data hiding are key terms in the description of object-oriented languages. If you want to modify the data in an object, you know exactly what functions to interact with it The member functions in the object. No other functions can access the data: This simplifies writing, debugging, and maintaining the program. Example: A Point on the plane \u00b6 A Point on a plane has two properties; x-y coordinates. Abilities (behavior) of a Point are, moving on the plane, appearing on the screen and disappearing. A model for 2 dimensional points with the following parts: Two integer variables (x,y) to represent x and y coordinates A function to move the point: move A function to print the point on the screen: print A function to hide the point: hide Example: A Point on the plane \u00b6 Once the model has been built and tested, it is possible to create many objects of this model , in the main program. Point pointOne = new Point ( 67 , 89 ); Point pointTwo = new Point ( 12 , 34 ); public class Point { public int x = 0 ; public int y = 0 ; public Point ( int a , int b ) { x = a ; y = b ; } } Object Model \u00b6 A Java program typically consists of a number of objects that communicate with each other by calling one another\u2019s member functions. OOP vs. Procedural Programming \u00b6 Procedural languages still require you to think in terms of the structure of the computer rather than the structure of the problem you are trying to solve. The programmer must establish the association between the machine model and the model of the problem that is actually being solved. The effort required to perform this mapping produces programs that are difficult to write and expensive to maintain . Because the real world thing and their models on the computer are quite different Example: Procedural Programming \u00b6 Real world thing: student Computer model: char *, int, float It is said that the C language is closer to the computer than the problem . OOP vs. Procedural Programming \u00b6 The OO approach provides tools for the programmer to represent elements in the problem space Objects are both in the problem space and the solution The OO programs are easy to update by adding new types of objects OOP allows you to describe the problem in terms of the problem, rather than in terms of the computer where the solution will run. OOP vs. Procedural Programming \u00b6 Benefits of the object-oriented programming: Readability Understandability Low probability of errors Maintenance Reusability Teamwork OOP vs. Procedural Programming \u00b6 Procedural paradigm: Software is organized around the notion of procedures Procedural abstraction Works as long as the data is simple Adding data abstractions groups together the pieces of data that describe some entity Helps reduce the system\u2019s complexity. Such as Records and structures Object oriented paradigm: Organizing procedural abstractions in the context of data abstractions Object Oriented paradigm \u00b6 All computations are performed in the context of objects. The objects are instances of classes, which: are data abstractions contain procedural abstractions that operate on the objects A running program can be seen as a collection of objects collaborating to perform a given task A View of the Two paradigms \u00b6 Classes and Objects \u00b6 Object A chunk of structured data in a running software system Has properties Represent its state Has behaviour How it acts and reacts May simulate the behaviour of an object in the real world Objects: Shown as a UML instance diagram \u00b6 Classes \u00b6 A class: A unit of abstraction in an object oriented (OO) program Represents similar objects Its instances A kind of software module Describes its instances\u2019 structure (properties) Contains methods to implement their behaviour section{ font-size: 25px; } Is Something a Class or an Instance? \u00b6 Something should be a class if it could have instances Something should be an instance if it is clearly a single member of the set defined by a class Film Class; instances are individual films. Reel of Film: Class; instances are physical reels Film reel with serial number SW19876 Instance of ReelOfFilm section{ font-size: 25px; } Is Something a Class or an Instance? \u00b6 Science Fiction Instance of the class Genre. Science Fiction Film Class; instances include \u2018Star Wars\u2019 Showing of \u2018Star Wars\u2019 in the Phoenix Cinema at 7 p.m.: Instance of ShowingOfFilm Naming classes \u00b6 Use capital letters E.g. BankAccount not bankAccount Use singular nouns Use the right level of generality E.g. Municipality , not City Make sure the name has only one meaning E.g. \"bus\" has several meanings Instance Variables \u00b6 Variables defined inside a class corresponding to data present in each instance Also called fields or member variables Attributes Simple data E.g. name , dateOfBirth Associations Relationships to other important classes E.g. supervisor , coursesTaken Variables vs. Objects \u00b6 A variable Refers to an object May refer to different objects at different points in time An object can be referred to by several different variables at the same time Type of a variable Determines what classes of objects it may contain Class variables \u00b6 A class variable\u2019s value is shared by all instances of a class. Also called a static variable If one instance sets the value of a class variable, then all the other instances see the same changed value. Class variables are useful for: Default or \u2018constant\u2019 values (e.g. PI) Lookup tables and similar structures Caution : do not over-use class variables Methods, Operations and Polymorphism \u00b6 Operation A higher-level procedural abstraction that specifies a type of behaviour Independent of any code which implements that behaviour E.g. calculating area (in general) Methods, Operations and Polymorphism \u00b6 Method A procedural abstraction used to implement the behaviour of a class Several different classes can have methods with the same name They implement the same abstract operation in ways suitable to each class E.g. calculating area in a rectangle is done differently from in a circle Polymorphism \u00b6 A property of object oriented software by which an abstract operation may be performed in different ways in different classes. Requires that there be multiple methods of the same name The choice of which one to execute depends on the object that is in a variable Reduces the need for programmers to code many if-else or switch statements Organizing Classes into Inheritance Hierarchies \u00b6 Superclasses Contain features common to a set of subclasses Inheritance hierarchies Show the relationships among superclasses and subclasses A triangle shows a generalization Inheritance The implicit possession by all subclasses of features defined in its superclasses An Example Inheritance Hierarchy \u00b6 Inheritance The implicit possession by all subclasses of features defined in its superclasses The Is-a Rule \u00b6 Always check generalizations to ensure they obey the isa rule \"A checking account is an account\" \"A village is a municipality\" Should 'Province' be a subclass of 'Country'? No, it violates the is-a rule \"A province is a country\" is invalid! A possible inheritance hierarchy of mathematical objects \u00b6 Make Sure all Inherited Features Make Sense in Subclasses \u00b6 Inheritance, Polymorphism and Variables \u00b6 Some Operations in the Shape Example \u00b6 Abstract Classes and Methods \u00b6 An operation should be declared to exist at the highest class in the hierarchy where it makes sense The operation may be abstract (lacking implementation) at that level If so, the class also must be abstract No instances can be created The opposite of an abstract class is a concrete class If a superclass has an abstract operation then its subclasses at some level must have a concrete method for the operation Leaf classes must have or inherit concrete methods for all operations Leaf classes must be concrete Overriding \u00b6 A method would be inherited, but a subclass contains a new version instead For extension E.g. SavingsAccount might charge an extra fee following every debit For optimization E.g. The getPerimeterLength method in Circle is much simpler than the one in Ellipse For restriction (best to avoid) E.g. scale(x,y) would not work in Circle How a decision is made about which method to run \u00b6 If there is a concrete method for the operation in the current class, run that method. Otherwise, check in the immediate superclass to see if there is a method there; if so, run it. Repeat step 2, looking in successively higher superclasses until a concrete method is found and run. If no method is found, then there is an error In Java and C++ the program would not have compiled In Java and C++ the program would not have compiled Dynamic binding \u00b6 Occurs when decision about which method to run can only be made at run time Needed when: A variable is declared to have a superclass as its type, and There is more than one possible polymorphic method that could be run among the type of the variable and its subclasses Key Terminology \u00b6 Abstraction Object \\(\\Longrightarrow\\) something in the world Class \\(\\Longrightarrow\\) objects Superclass \\(\\Longrightarrow\\) subclasses Operation \\(\\Longrightarrow\\) methods Attributes and associations \\(\\Longrightarrow\\) instance variables Modularity Code is divided into classes, and classes into methods Encapsulation Details can be hidden in classes This gives rise to information hiding : Programmers do not need to know all the details of a class Basing Software Development on Reusable Technology \u00b6 Building on the Experience of Others \u00b6 Software engineers should avoid re-developing software already developed Types of reuse: Reuse of expertise Reuse of standard designs and algorithms Reuse of libraries of classes or procedures Reuse of powerful commands built into languages and operating systems Reuse of frameworks Reuse of complete applications Frameworks: Reusable Subsystems \u00b6 A framework is reusable software that implements a generic solution to a generalized problem. It provides common facilities applicable to different application programs. - Principle : Applications that do different, but related, things tend to have similar designs Frameworks to promote reuse \u00b6 A framework is intrinsically incomplete Certain classes or methods are used by the framework, but are missing ( slots ) Some functionality is optional Allowance is made for developer to provide it ( hooks or extension points ) Developers use the services that the framework provides Taken together the services are called the Application Program Interface ( API ) Object-oriented frameworks \u00b6 In the object oriented paradigm, a framework is composed of a library of classes. The API is defined by the set of all public methods of these classes. Some of the classes will normally be abstract and there are often many Interfaces Example: A framework for payroll management A framework for frequent buyer clubs A framework for university registration A framework for e-commerce web sites Frameworks and product lines \u00b6 A product line (or product family) is a set of products built on a common base of technology. The various products in the product line have different features to satisfy different markets The software common to all products in included in a framework Each product is produced by filling the available hooks and slots E.g. software products offering \"demo\", \"lite\" or \"pro\" versions Types of frameworks \u00b6 A horizontal framework provides general application facilities that a large number of applications can use A vertical framework ( application framework ) is more \u2018complete\u2019 but still needs some slots to be filled to adapt it to specific application needs The Client-Server Architecture \u00b6 A distributed system is a system in which: computations are performed by separate programs \u2026 normally running on separate pieces of hardware \u2026 that co-operate to perform the task of the system. Server: A program that provides a service for other programs that connect to it using a communication channel Client A program that accesses a server (or several servers) to obtain services A server may be accessed by many clients simultaneously Example of client-server systems \u00b6 Activities of a server \u00b6 Initializes itself Starts listening for clients Handles the following types of events originating from clients accepts connections responds to messages handles client disconnection May stop listening Must cleanly terminate Activities of a client \u00b6 Initializes itself Initiates a connection Sends messages Handles the following types of events originating from the server responds to messages handles server disconnection Must cleanly terminate Threads in a client-server system \u00b6 Thin- versus fat-client systems \u00b6 Thin-client system (a) Client is made as small as possible Most of the work is done in the server. Client easy to download over the network Fat-client system (b) As much work as possible is delegated to the clients. Server can handle more clients Communications protocols \u00b6 The messages the client sends to the server form a language. The server has to be programmed to understand that language. The messages the server sends to the client also form a language. The client has to be programmed to understand that language. When a client and server are communicating, they are in effect having a conversation using these two languages The two languages and the rules of the conversation, taken together, are called the protocol Tasks to perform to develop client-server applications \u00b6 Design the primary work to be performed by both client and server Design how the work will be distributed Design the details of the set of messages that will be sent Design the mechanism for Initializing Handling connections Sending and receiving messages Terminating Advantages of client-server systems \u00b6 The work can be distributed among different machines The clients can access the server\u2019s functionality from a distance The client and server can be designed separately They can both be simpler There is a choice about where to keep data: All the data can be kept centrally at the server Data can be distributed among many different clients or servers The server can be accessed simultaneously by many clients Competing clients can be written to communicate with the same server, and vice-versa Technology Needed to Build Client-Server Systems \u00b6 Internet Protocol (IP) Route messages from one computer to another Long messages are normally split up into small pieces Transmission Control Protocol (TCP) Handles connections between two computers Computers can then exchange many IP messages over a connection Assures that the messages have been satisfactorily received A host has an IP address and a host name Several servers can run on the same host. Each server is identified by a port number (0 to 65535). To initiate communication with a server, a client must know both the host name and the port number Establishing a connection in Java \u00b6 The java.net package Permits the creation of a TCP/IP connection between two applications Before a connection can be established, the server must start listening to one of the ports: ServerSocket serverSocket = new ServerSocket ( port ); Socket clientSocket = serverSocket . accept (); For a client to connect to a server: Socket clientSocket = new Socket ( host , port ); Exchanging information in Java \u00b6 Each program uses an instance of InputStream to receive messages from the other program OutputStream to send messages to the other program These are found in package java.io output = clientSocket . getOutputStream (); input = clientSocket . getInputStream (); Sending and receiving messages \u00b6 without any filters (raw bytes) output . write ( msg ); msg = input . read (); or using DataInputStream / DataOutputStream filters output . writeDouble ( msg ); msg = input . readDouble (); or using ObjectInputStream / ObjectOutputStream filters output . writeObject ( msg ); msg = input . readObject (); The Object Client-Server Framework (OCSF) \u00b6 Using OCSF \u00b6 Software engineers using OCSF never modify its three classes They: Create subclasses of the abstract classes in the framework Call public methods that are provided by the framework Override certain slot and hook methods (explicitly designed to be overridden) The Client Side \u00b6 Consists of a single class: AbstractClient Must be subclassed Any subclass must provide an implementation for handleMessageFromServer Takes appropriate action when a message is received from a server Implements the Runnable interface Has a run method which Contains a loop that executes for the lifetime of the thread The public interface of AbstractClient \u00b6 Controlling methods: openConnection closeConnection sendToServer Accessing methods: isConnected getHost setHost getPort setPort getInetAddress The callback methods of AbstractClient \u00b6 Methods that may be overridden: connectionEstablished connectionClosed Method that must be implemented: handleMessageFromServer Using AbstractClient \u00b6 Create a subclass of AbstractClient Implement handleMessageFromServer slot method Write code that: Creates an instance of the new subclass Calls openConnection Sends messages to the server using the sendToServer service method Implement the connectionClosed callback Implement the connectionException callback Internals of AbstractClient \u00b6 Instance variables: A Socket which keeps all the information about the connection to the server Two streams, an ObjectOutputStream and an ObjectInputStream A Thread that runs using AbstractClient\u2019s run method Two variables storing the host and port of the server The Server Side \u00b6 Two classes: One for the thread which listens for new connections ( AbstractServer ) One for the threads that handle the connections to clients ( ConnectionToClient ) The public interface of AbstractServer \u00b6 Controlling methods: listen stopListening close sendToAllClients Accessing methods: isListening getClientConnections getPort setPort setBacklog The callback methods of AbstractServer \u00b6 Methods that may be overridden: serverStarted clientConnected clientDisconnected clientException serverStopped listeningException serverClosed Method that must be implemented: handleMessageFromClient The public interface of ConnectionToClient \u00b6 Controlling methods: sendToClient close Accessing methods: getInetAddress setInfo getInfo Using AbstractServer and ConnectionToClient \u00b6 Create a subclass of AbstractServer Implement the slot method handleMessageFromClient Write code that: Creates an instance of the subclass of AbstractServer Calls the listen method Sends messages to clients, using: the getClientConnections and sendToClient service methods or sendToAllClients Implement one or more of the other callback methods Internals of AbstractServer and ConnectionToClient \u00b6 The setInfo and getInfo methods make use of a Java class called HashMap Many methods in the server side are synchronized The collection of instances of ConnectionToClient is stored using a special class called ThreadGroup The server must pause from listening every 500ms to see if the stopListening method has been called if not, then it resumes listening immediately An Instant Messaging Application: SimpleChat \u00b6 ClientConsole can eventually be replaced by ClientGUI The server \u00b6 EchoServer is a subclass of AbstractServer The main method creates a new instance and starts it It listens for clients and handles connections until the server is stopped The three callback methods just print out a message to the user handleMessageFromClient , serverStarted and serverStopped The slot method handleMessageFromClient calls sendToAllClients This echoes any messages Key code in EchoServer \u00b6 public void handleMessageFromClient ( Object msg , ConnectionToClient client ) { System . out . println ( \"Message received: \" + msg + \" from \" + client ); this . sendToAllClients ( msg ); } The client \u00b6 When the client program starts, it creates instances of two classes: ChatClient A subclass of AbstractClient Overrides handleMessageFromServer This calls the display method of the user interface ClientConsole User interface class that implements the interface ChatIF Hence implements display which outputs to the console Accepts user input by calling accept in its run method Sends all user input to the ChatClient by calling its handleMessageFromClientUI This, in turn, calls sendToServer Key code in ChatClient \u00b6 public void handleMessageFromClientUI ( String message ) { try { sendToServer ( message ); } catch ( IOException e ) { clientUI . display ( \"Could not send message. \" + \"Terminating client.\" ); quit (); } } Key code in ChatClient \u00b6 public void handleMessageFromServer ( Object msg ) { clientUI . display ( msg . toString ()); } Risks when reusing technology \u00b6 Poor quality reusable components Ensure that the developers of the reusable technology: follow good software engineering practices are willing to provide active support Compatibility not maintained Avoid obscure features Only re-use technology that others are also re-using Risks when developing reusable technology \u00b6 Investment uncertainty Plan the development of the reusable technology, just as if it was a product for a client The \"not invented here syndrome\" Build confidence in the reusable technology by: Guaranteeing support Ensuring it is of high quality Responding to the needs of its users Risks when developing reusable technology \u00b6 Competition The reusable technology must be as useful and as high quality as possible Divergence (tendency of various groups to change technology in different ways) Design it to be general enough, test it and review it in advance Risks when adopting a client-server approach \u00b6 Security Security is a big problem with no perfect solutions: consider the use of encryption, firewalls, ... Need for adaptive maintenance Ensure that all software is forward and backward compatible with other versions of clients and servers Java Classes and Objects \u00b6 Java Classes \u00b6 Java is an object-oriented programming language, so everything in java program must be based on the object concept. In a java programming language, the class concept defines the skeleton of an object. Java Classes \u00b6 The java class is a template of an object. The class defines the blueprint of an object. Every class in java forms a new data type. Once a class got created, we can generate as many objects as we want. Every class defines the properties and behaviors of an object. All the objects of a class have the same properties and behaviors that were defined in the class. Java Classes \u00b6 Every class of java programming language has the following characteristics. Identity - It is the name given to the class. State - Represents data values that are associated with an object. Behavior - Represents actions can be performed by an object. Java Classes \u00b6 Creating a Class \u00b6 In java, we use the keyword class to create a class. A class in java contains properties as variables and behaviors as methods. Following is the syntax of class in the java. class < ClassName > { data members declaration ; methods defination ; } Here, fields (variables) and methods represent the state and behavior of the object respectively. fields are used to store data methods are used to perform some operations Creating a Class \u00b6 A class is a blueprint for the object. Before we create an object, we first need to define the class. We can think of the class as a sketch (prototype) of a house. It contains all the details about the floors, doors, windows, etc. Based on these descriptions we build the house. House is the object. Since many houses can be made from the same description, we can create many objects from a class. Creating a Class \u00b6 The ClassName must begin with an alphabet, and the Upper-case letter is preferred. The ClassName must follow all naming rules. Creating a Class \u00b6 class Bicycle { // state or field private int gear = 5 ; // behavior or method public void braking () { System . out . println ( \"Working of Braking\" ); } } In the above example, we have created a class named Bicycle. It contains a field named gear and a method named braking(). Creating a Class \u00b6 Here, Bicycle is a prototype. Now, we can create any number of bicycles using the prototype. And, all the bicycles will share the fields and methods of the prototype. Creating an Object \u00b6 In java, an object is an instance of a class. When an object of a class is created, the class is said to be instantiated. All the objects that are created using a single class have the same properties and methods. But the value of properties is different for every object. Following is the syntax of class in the java. < ClassName > < objectName > = new < ClassName > ( ); Creating an Object \u00b6 The objectName must begin with an alphabet, and a Lower-case letter is preferred. The objectName must follow all naming rules. Creating an Object \u00b6 An object is called an instance of a class. For example, suppose Bicycle is a class then MountainBicycle, SportsBicycle, TouringBicycle, etc can be considered as objects of the class. className object = new className (); // for Bicycle class Bicycle sportsBicycle = new Bicycle (); Bicycle touringBicycle = new Bicycle (); We have used the new keyword along with the constructor of the class to create an object. Constructors are similar to methods and have the same name as the class. For example, Bicycle() is the constructor of the Bicycle class. Creating an Object \u00b6 Here, sportsBicycle and touringBicycle are the names of objects. We can use them to access fields and methods of the class. Access Members of a Class \u00b6 sportsBicycle.gear - access the field gear sportsBicycle.braking() - access the method braking() class Bicycle { // field of class int gear = 5 ; // method of class void braking () { ... } } // create object Bicycle sportsBicycle = new Bicycle (); // access field and method sportsBicycle . gear ; sportsBicycle . braking (); Example: Java Class and Objects \u00b6 class Lamp { // stores the value for light // true if light is on // false if light is off boolean isOn ; // method to turn on the light void turnOn () { isOn = true ; System . out . println ( \"Light on? \" + isOn ); } // method to turnoff the light void turnOff () { isOn = false ; System . out . println ( \"Light on? \" + isOn ); } } Example: Java Class and Objects \u00b6 class Main { public static void main ( String [] args ) { // create objects led and halogen Lamp led = new Lamp (); Lamp halogen = new Lamp (); // turn on the light by // calling method turnOn() led . turnOn (); // turn off the light by // calling method turnOff() halogen . turnOff (); } } Example: Create objects inside the same class \u00b6 Note that in the previous example, we have created objects inside another class and accessed the members from that class. However, we can also create objects inside the same class. Example: Create objects inside the same class \u00b6 class Lamp { // stores the value for light // true if light is on // false if light is off boolean isOn ; // method to turn on the light void turnOn () { isOn = true ; System . out . println ( \"Light on? \" + isOn ); } public static void main ( String [] args ) { // create an object of Lamp Lamp led = new Lamp (); // access method using object led . turnOn (); } } Java Methods \u00b6 Java Methods \u00b6 A method is a block of statements under a name that gets executes only when it is called. Every method is used to perform a specific task. The major advantage of methods is code re-usability (define the code once, and use it many times). Java Methods \u00b6 In a java programming language, a method defined as a behavior of an object. That means, every method in java must belong to a class. Every method in java must be declared inside a class. Java Methods \u00b6 Every method declaration has the following characteristics. returnType - Specifies the data type of a return value. name - Specifies a unique name to identify it. parameters - The data values it may accept or recieve. { } - Defienes the block belongs to the method. Creating a method \u00b6 A method is created inside the class and it may be created with any access specifier. However, specifying access specifier is optional. Following is the syntax for creating methods in java. class < ClassName > { < accessSpecifier > < returnType > < methodName > ( parameters ){ ... block of statements ; ... } } Creating a method \u00b6 modifier static returnType nameOfMethod ( parameter1 , parameter2 , ...) { // method body } modifier - It defines access types whether the method is public, private, and so on. static - If we use the static keyword, it can be accessed without creating objects. Creating a method \u00b6 The methodName must begin with an alphabet, and the Lower-case letter is preferred. The methodName must follow all naming rules. If you don't want to pass parameters, we ignore it. If a method defined with return type other than void, it must contain the return statement, otherwise, it may be ignored. Calling a method \u00b6 In java, a method call precedes with the object name of the class to which it belongs and a dot operator. It may call directly if the method defined with the static modifier. Every method call must be made, as to the method name with parentheses (), and it must terminate with a semicolon. < objectName > . < methodName > ( actualArguments ); Calling a method \u00b6 The method call must pass the values to parameters if it has. If the method has a return type, we must provide the receiver. Calling a Method : Example \u00b6 import java.util.Scanner ; public class JavaMethodsExample { int sNo ; String name ; Scanner read = new Scanner ( System . in ); void readData () { System . out . print ( \"Enter Serial Number: \" ); sNo = read . nextInt (); System . out . print ( \"Enter the Name: \" ); name = read . next (); } static void showData ( int sNo , String name ) { System . out . println ( \"Hello, \" + name + \"! your serial number is \" + sNo ); } ... ... public static void main ( String [] args ) { JavaMethodsExample obj = new JavaMethodsExample (); obj . readData (); // method call using object showData ( obj . sNo , obj . name ); // method call without using object } } Variable arguments of a method \u00b6 In java, a method can be defined with a variable number of arguments. That means creating a method that receives any number of arguments of the same data type. < returnType > < methodName > ( dataType ... parameterName ); Variable arguments of a method : Example \u00b6 public class JavaMethodWithVariableArgs { void diaplay ( int ... list ) { System . out . println ( \"\\nNumber of arguments: \" + list . length ); for ( int i : list ) { System . out . print ( i + \"\\t\" ); } } ... Variable arguments of a method : Example \u00b6 ... public static void main ( String [] args ) { JavaMethodWithVariableArgs obj = new JavaMethodWithVariableArgs (); obj . diaplay ( 1 , 2 ); obj . diaplay ( 10 , 20 , 30 , 40 , 50 ); } } Java Normal Method Example \u00b6 class Main { // create a method public int addNumbers ( int a , int b ) { int sum = a + b ; // return value return sum ; } public static void main ( String [] args ) { int num1 = 25 ; int num2 = 15 ; // create an object of Main Main obj = new Main (); // calling method int result = obj . addNumbers ( num1 , num2 ); System . out . println ( \"Sum is: \" + result ); } } Java Static Method Example \u00b6 class Main { // create a method public static int square ( int num ) { // return statement return num * num ; } public static void main ( String [] args ) { int result ; // call the method // store returned value to result result = square ( 10 ); System . out . println ( \"Squared value of 10 is: \" + result ); } } Java Method Parameters \u00b6 class Main { // method with no parameter public void display1 () { System . out . println ( \"Method without parameter\" ); } // method with single parameter public void display2 ( int a ) { System . out . println ( \"Method with a single parameter: \" + a ); } public static void main ( String [] args ) { // create an object of Main Main obj = new Main (); // calling method with no parameter obj . display1 (); // calling method with the single parameter obj . display2 ( 24 ); } } Java Method Overloading \u00b6 Java Method Overloading \u00b6 two or more methods may have the same name if they differ in parameters (different number of parameters, different types of parameters, or both). These methods are called overloaded methods and this feature is called method overloading. Java Method Overloading \u00b6 void func () { ... } void func ( int a ) { ... } float func ( double a ) { ... } float func ( int a , float b ) { ... } Note : The return types of the above methods are not the same. It is because method overloading is not associated with return types. Overloaded methods may have the same or different return types, but they must differ in parameters. Why method overloading? \u00b6 Suppose, you have to perform the addition of given numbers but there can be any number of arguments (let\u2019s say either 2 or 3 arguments for simplicity). In order to accomplish the task, you can create two methods sum2num(int, int) and sum3num(int, int, int) for two and three parameters respectively. However, other programmers, as well as you in the future may get confused as the behavior of both methods are the same but they differ by name. The better way to accomplish this task is by overloading methods. And, depending upon the argument passed, one of the overloaded methods is called. This helps to increase the readability of the program. How to perform method overloading in Java? \u00b6 Overloading by changing the number of parameters class MethodOverloading { private static void display ( int a ){ System . out . println ( \"Arguments: \" + a ); } private static void display ( int a , int b ){ System . out . println ( \"Arguments: \" + a + \" and \" + b ); } public static void main ( String [] args ) { display ( 1 ); display ( 1 , 4 ); } } How to perform method overloading in Java? \u00b6 Method Overloading by changing the data type of parameters class MethodOverloading { // this method accepts int private static void display ( int a ){ System . out . println ( \"Got Integer data.\" ); } // this method accepts String object private static void display ( String a ){ System . out . println ( \"Got String object.\" ); } public static void main ( String [] args ) { display ( 1 ); display ( \"Hello\" ); } } Java Overloading Example \u00b6 class HelperService { private String formatNumber ( int value ) { return String . format ( \"%d\" , value ); } private String formatNumber ( double value ) { return String . format ( \"%.3f\" , value ); } private String formatNumber ( String value ) { return String . format ( \"%.2f\" , Double . parseDouble ( value )); } public static void main ( String [] args ) { HelperService hs = new HelperService (); System . out . println ( hs . formatNumber ( 500 )); System . out . println ( hs . formatNumber ( 89.9934 )); System . out . println ( hs . formatNumber ( \"550\" )); } } Java Constructor \u00b6 Java Constructor \u00b6 A constructor is a special method of a class that has the same name as the class name. The constructor gets executes automatically on object creation. It does not require the explicit method call. A constructor may have parameters and access specifiers too. In java, if you do not provide any constructor the compiler automatically creates a default constructor. Java Constructor \u00b6 A constructor can not have return value. public class ConstructorExample { ConstructorExample () { System . out . println ( \"Object created!\" ); } public static void main ( String [] args ) { ConstructorExample obj1 = new ConstructorExample (); ConstructorExample obj2 = new ConstructorExample (); } } Types of Constructor \u00b6 In Java, constructors can be divided into 3 types: No-Arg Constructor Parameterized Constructor Default Constructor Java No-Arg Constructors \u00b6 Java private no-arg constructor class Main { int i ; // constructor with no parameter private Main () { i = 5 ; System . out . println ( \"Constructor is called\" ); } public static void main ( String [] args ) { // calling the constructor without any parameter Main obj = new Main (); System . out . println ( \"Value of i: \" + obj . i ); } } Java No-Arg Constructors \u00b6 Java public no-arg constructor class Company { String name ; // public constructor public Company () { name = \"My Company\" ; } } class Main { public static void main ( String [] args ) { // object is created in another class Company obj = new Company (); System . out . println ( \"Company name = \" + obj . name ); } } Java Parameterized Constructor \u00b6 class Main { String languages ; // constructor accepting single value Main ( String lang ) { languages = lang ; System . out . println ( languages + \" Programming Language\" ); } public static void main ( String [] args ) { // call constructor by passing a single value Main obj1 = new Main ( \"Java\" ); Main obj2 = new Main ( \"Python\" ); Main obj3 = new Main ( \"C\" ); } } Java Default Constructor \u00b6 class Main { int a ; boolean b ; public static void main ( String [] args ) { // A default constructor is called Main obj = new Main (); System . out . println ( \"Default Value:\" ); System . out . println ( \"a = \" + obj . a ); System . out . println ( \"b = \" + obj . b ); } } Java Default Values \u00b6 The default constructor initializes any uninitialized instance variables with default values. Type \\(\\Longrightarrow\\) Default Value boolean \\(\\Longrightarrow\\) false byte \\(\\Longrightarrow\\) 0 short \\(\\Longrightarrow\\) 0 int \\(\\Longrightarrow\\) 0 long \\(\\Longrightarrow\\) 0L char \\(\\Longrightarrow\\) \\u0000 float \\(\\Longrightarrow\\) 0.0f double \\(\\Longrightarrow\\) 0.0d object \\(\\Longrightarrow\\) Reference null Java Default Constructor Equivalent \u00b6 class Main { int a ; boolean b ; // a private constructor private Main () { a = 0 ; b = false ; } public static void main ( String [] args ) { // call the constructor Main obj = new Main (); System . out . println ( \"Default Value:\" ); System . out . println ( \"a = \" + obj . a ); System . out . println ( \"b = \" + obj . b ); } } Constructors Overloading in Java \u00b6 class Main { String language ; // constructor with no parameter Main () { this . language = \"Java\" ; } // constructor with a single parameter Main ( String language ) { this . language = language ; } public void getName () { System . out . println ( \"Programming Langauage: \" + this . language ); } ... Constructors Overloading in Java \u00b6 ... public static void main ( String [] args ) { // call constructor with no parameter Main obj1 = new Main (); // call constructor with a single parameter Main obj2 = new Main ( \"Python\" ); obj1 . getName (); obj2 . getName (); } } Java Inheritance \u00b6 Inheritance Concept \u00b6 The inheritance is a very useful and powerful concept of object-oriented programming. In java, using the inheritance concept, we can use the existing features of one class in another class. - The inheritance provides a greate advantage called code re-usability. With the help of code re-usability, the commonly used code in an application need not be written again and again. Inheritance Concept \u00b6 Inheritance Concept \u00b6 The inheritance is the process of acquiring the properties of one class to another class. Inheritance Basics \u00b6 In inheritance, we use the terms like parent class, child class, base class, derived class, superclass, and subclass. Inheritance Basics \u00b6 The Parent class is the class which provides features to another class. The parent class is also known as Base class or Superclass . The Child class is the class which receives features from another class. The child class is also known as the Derived Class or Subclass . Inheritance Basics \u00b6 In the inheritance, the child class acquires the features from its parent class. But the parent class never acquires the features from its child class. Inheritance Basics \u00b6 There are five types of inheritances, and they are as follows. Simple Inheritance (or) Single Inheritance Multiple Inheritance Multi-Level Inheritance Hierarchical Inheritance Hybrid Inheritance Inheritance Basics \u00b6 Simple Inheritance (or) Single Inheritance Inheritance Basics \u00b6 Multiple Inheritance Inheritance Basics \u00b6 Multi-Level Inheritance Inheritance Basics \u00b6 Hierarchical Inheritance Inheritance Basics \u00b6 Hybrid Inheritance Inheritance Basics \u00b6 The java programming language does not support multiple inheritance type. However, it provides an alternate with the concept of interfaces . Creating Child Class in java \u00b6 In java, we use the keyword extends to create a child class. The following syntax used to create a child class in java. class < ChildClassName > extends < ParentClassName > { ... //Implementation of child class ... } In a java programming language, a class extends only one class. Extending multiple classes is not allowed in java. Single Inheritance in java \u00b6 In this type of inheritance, one child class derives from one parent class. class ParentClass { int a ; void setData ( int a ) { this . a = a ; } } class ChildClass extends ParentClass { void showData () { System . out . println ( \"Value of a is \" + a ); } } Single Inheritance in java \u00b6 public class SingleInheritance { public static void main ( String [] args ) { ChildClass obj = new ChildClass (); obj . setData ( 100 ); obj . showData (); } } Single Inheritance in java (Ex-2) \u00b6 class Animal { // field and method of the parent class String name ; public void eat () { System . out . println ( \"I can eat\" ); } } // inherit from Animal class Dog extends Animal { // new method in subclass public void display () { System . out . println ( \"My name is \" + name ); } } Single Inheritance in java (Ex-2) \u00b6 class Main { public static void main ( String [] args ) { // create an object of the subclass Dog labrador = new Dog (); // access field of superclass labrador . name = \"Rohu\" ; labrador . display (); // call method of superclass // using object of subclass labrador . eat (); } } \u00b6 Single Inheritance in java (Ex-2) \u00b6 Single Inheritance / is-a relationship \u00b6 In Java, inheritance is an is-a relationship. That is, we use inheritance only if there exists an is-a relationship between two classes. For example, Car is a Vehicle Orange is a Fruit Surgeon is a Doctor Dog is an Animal Here, Car can inherit from Vehicle, Orange can inherit from Fruit, and so on. Multi-level Inheritance in java \u00b6 In this type of inheritance, the child class derives from a class which already derived from another class class ParentClass { int a ; void setData ( int a ) { this . a = a ; } } Multi-level Inheritance in java \u00b6 class ChildClass extends ParentClass { void showData () { System . out . println ( \"Value of a is \" + a ); } } class ChildChildClass extends ChildClass { void display () { System . out . println ( \"Inside ChildChildClass!\" ); } } Multi-level Inheritance in java \u00b6 public class MultipleInheritance { public static void main ( String [] args ) { ChildChildClass obj = new ChildChildClass (); obj . setData ( 100 ); obj . showData (); obj . display (); } } \u00b6 Hierarchical Inheritance in java \u00b6 In this type of inheritance, two or more child classes derive from one parent class. class ParentClass { int a ; void setData ( int a ) { this . a = a ; } } \u00b6 Hierarchical Inheritance in java \u00b6 class ChildClass extends ParentClass { void showData () { System . out . println ( \"Inside ChildClass!\" ); System . out . println ( \"Value of a is \" + a ); } } class ChildClassToo extends ParentClass { void display () { System . out . println ( \"Inside ChildClassToo!\" ); System . out . println ( \"Value of a is \" + a ); } } Hierarchical Inheritance in java \u00b6 public class HierarchicalInheritance { public static void main ( String [] args ) { ChildClass child_obj = new ChildClass (); child_obj . setData ( 100 ); child_obj . showData (); ChildClassToo childToo_obj = new ChildClassToo (); childToo_obj . setData ( 200 ); childToo_obj . display (); } } Hybrid Inheritance in java \u00b6 The hybrid inheritance is the combination of more than one type of inheritance. We may use any combination as a single with multiple inheritances, multi-level with multiple inheritances, etc., Java Access Modifiers \u00b6 Java Access Modifiers \u00b6 In Java, the access specifiers (also known as access modifiers) used to restrict the scope or accessibility of a class, constructor, variable, method or data member of class and interface. Java Access Modifiers \u00b6 There are four access specifiers, and their list is below. default (or) no modifier public protected private Java Access Modifiers \u00b6 In java, we can not employ all access specifiers on everything. The following table describes where we can apply the access specifiers. Java Access Modifiers \u00b6 Let's look at the following example java code, which generates an error because a class does not allow private access specifier unless it is an inner class. private class Sample { ... } Java Access Modifiers \u00b6 In java, the accessibility of the members of a class or interface depends on its access specifiers. The following table provides information about the visibility of both data members and methods. Java Access Modifiers \u00b6 The public members can be accessed everywhere. The private members can be accessed only inside the same class. The protected members are accessible to every child class (same package or other packages). The default members are accessible within the same package but not outside the package. Java Access Modifiers \u00b6 class ParentClass { int a = 10 ; public int b = 20 ; protected int c = 30 ; private int d = 40 ; void showData () { System . out . println ( \"Inside ParentClass\" ); System . out . println ( \"a = \" + a ); System . out . println ( \"b = \" + b ); System . out . println ( \"c = \" + c ); System . out . println ( \"d = \" + d ); } } Java Access Modifiers \u00b6 class ChildClass extends ParentClass { void accessData () { System . out . println ( \"Inside ChildClass\" ); System . out . println ( \"a = \" + a ); System . out . println ( \"b = \" + b ); System . out . println ( \"c = \" + c ); //System.out.println(\"d = \" + d); // private member can't be accessed } } Java Access Modifiers \u00b6 public class AccessModifiersExample { public static void main ( String [] args ) { ChildClass obj = new ChildClass (); obj . showData (); obj . accessData (); } } Java Access Modifiers \u00b6 Default Access Modifier Here, the Logger class has the default access modifier package defaultpackage ; class Logger { void message (){ System . out . println ( \"This is a message\" ); } } the class is visible to all the classes that belong to the defaultPackage package However, if we try to use the Logger class in another class outside of defaultPackage, we will get a compilation error. Java Access Modifiers \u00b6 Private Access Modifier When variables and methods are declared private, they cannot be accessed outside of the class class Data { // private variable private String name ; } Java Access Modifiers \u00b6 Private Access Modifier public class Main { public static void main ( String [] main ){ // create an object of Data Data d = new Data (); // access private variable and field from another class d . name = \"My App\" ; } } Java Access Modifiers \u00b6 Private Access Modifier When we run the program, we will get the following error Main.java:18: error: name has private access in Data d.name = \"My App\" ; ^ Java Access Modifiers \u00b6 Private Access Modifier if we need to access those private variables we can use the getters and setters method class Data { private String name ; // getter method public String getName () { return this . name ; } // setter method public void setName ( String name ) { this . name = name ; } } Java Access Modifiers \u00b6 Private Access Modifier public class Main { public static void main ( String [] main ){ Data d = new Data (); // access the private variable using the getter and setter d . setName ( \"My App\" ); System . out . println ( d . getName ()); } } Java Access Modifiers \u00b6 Private Access Modifier We cannot declare classes and interfaces private in Java. However, the nested classes can be declared private. Java Access Modifiers \u00b6 Protected Access Modifier When methods and data members are declared protected, we can access them within the same package as well as from subclasses . Java Access Modifiers \u00b6 Protected Access Modifier class Animal { // protected method protected void display () { System . out . println ( \"I am an animal\" ); } } class Dog extends Animal { public static void main ( String [] args ) { // create an object of Dog class Dog dog = new Dog (); // access protected method dog . display (); } } Java Access Modifiers \u00b6 Protected Access Modifier (Ex-2) class Animal { protected String name ; protected void display () { System . out . println ( \"I am an animal.\" ); } } class Dog extends Animal { public void getInfo () { System . out . println ( \"My name is \" + name ); } } Java Access Modifiers \u00b6 Protected Access Modifier (Ex-2) class Main { public static void main ( String [] args ) { // create an object of the subclass Dog labrador = new Dog (); // access protected field and method // using the object of subclass labrador . name = \"Rocky\" ; labrador . display (); labrador . getInfo (); } } Java Access Modifiers \u00b6 Protected Access Modifier We cannot declare classes or interfaces protected in Java. Java Access Modifiers \u00b6 Public Access Modifier When methods, variables, classes, and so on are declared public, then we can access them from anywhere. // Animal.java file // public class public class Animal { // public variable public int legCount ; // public method public void display () { System . out . println ( \"I am an animal.\" ); System . out . println ( \"I have \" + legCount + \" legs.\" ); } } \u00b6 Java Access Modifiers \u00b6 Public Access Modifier // Main.java public class Main { public static void main ( String [] args ) { // accessing the public class Animal animal = new Animal (); // accessing the public variable animal . legCount = 4 ; // accessing the public method animal . display (); } } \u00b6 Java Constructors in Inheritance \u00b6 Java Constructors in Inheritance \u00b6 It is very important to understand how the constructors get executed in the inheritance concept. In the inheritance, the constructors never get inherited to any child class. In java, the default constructor of a parent class called automatically by the constructor of its child class. That means when we create an object of the child class, the parent class constructor executed, followed by the child class constructor executed. Java Constructors in Inheritance - Example \u00b6 class ParentClass { int a ; ParentClass (){ System . out . println ( \"Inside ParentClass constructor!\" ); } } class ChildClass extends ParentClass { ChildClass (){ System . out . println ( \"Inside ChildClass constructor!!\" ); } } Java Constructors in Inheritance - Example \u00b6 class ChildChildClass extends ChildClass { ChildChildClass (){ System . out . println ( \"Inside ChildChildClass constructor!!\" ); } } public class ConstructorInInheritance { public static void main ( String [] args ) { ChildChildClass obj = new ChildChildClass (); } } Java Constructors in Inheritance \u00b6 if the parent class contains both default and parameterized constructor, then only the default constructor called automatically by the child class constructor Java Constructors in Inheritance - Example \u00b6 class ParentClass { int a ; ParentClass ( int a ){ System . out . println ( \"Inside ParentClass parameterized constructor!\" ); this . a = a ; } ParentClass (){ System . out . println ( \"Inside ParentClass default constructor!\" ); } } Java Constructors in Inheritance - Example \u00b6 class ChildClass extends ParentClass { ChildClass (){ System . out . println ( \"Inside ChildClass constructor!!\" ); } } public class ConstructorInInheritance { public static void main ( String [] args ) { ChildClass obj = new ChildClass (); } } Java Constructors in Inheritance \u00b6 The parameterized constructor of parent class must be called explicitly using the super keyword. Method Overriding in Java Inheritance \u00b6 class Animal { // method in the superclass public void eat () { System . out . println ( \"I can eat\" ); } } Method Overriding in Java Inheritance \u00b6 // Dog inherits Animal class Dog extends Animal { // overriding the eat() method @Override public void eat () { System . out . println ( \"I eat dog food\" ); } // new method in subclass public void bark () { System . out . println ( \"I can bark\" ); } } \u00b6 Method Overriding in Java Inheritance \u00b6 class Main { public static void main ( String [] args ) { // create an object of the subclass Dog labrador = new Dog (); // call the eat() method labrador . eat (); labrador . bark (); } } \u00b6 Method Overriding in Java Inheritance \u00b6 In the above example, the eat() method is present in both the superclass Animal and the subclass Dog. Here, we have created an object labrador of Dog. Now when we call eat() using the object labrador, the method inside Dog is called. This is because the method inside the derived class overrides the method inside the base class. super Keyword in Java Inheritance \u00b6 super Keyword in Java Inheritance \u00b6 the same method in the subclass overrides the method in superclass. In such a situation, the super keyword is used to call the method of the parent class from the method of the child class. super Keyword in Java Inheritance \u00b6 class Animal { // method in the superclass public void eat () { System . out . println ( \"I can eat\" ); } } super Keyword in Java Inheritance \u00b6 // Dog inherits Animal class Dog extends Animal { // overriding the eat() method @Override public void eat () { // call method of superclass super . eat (); System . out . println ( \"I eat dog food\" ); } // new method in subclass public void bark () { System . out . println ( \"I can bark\" ); } } super Keyword in Java Inheritance \u00b6 class Main { public static void main ( String [] args ) { // create an object of the subclass Dog labrador = new Dog (); // call the eat() method labrador . eat (); labrador . bark (); } } \u00b6 Java this Keyword \u00b6 Java this Keyword \u00b6 In Java, this keyword is used to refer to the current object inside a method or a constructor Java this Keyword \u00b6 class Main { int instVar ; Main ( int instVar ){ this . instVar = instVar ; System . out . println ( \"this reference = \" + this ); } public static void main ( String [] args ) { Main obj = new Main ( 8 ); System . out . println ( \"object reference = \" + obj ); } } \u00b6 Using this for Ambiguity Variable Names \u00b6 In Java, it is not allowed to declare two or more variables having the same name inside a scope (class scope or method scope). However, instance variables and parameters may have the same name. Using this for Ambiguity Variable Names \u00b6 WRONG class Main { int age ; Main ( int age ){ age = age ; } public static void main ( String [] args ) { Main obj = new Main ( 8 ); System . out . println ( \"obj.age = \" + obj . age ); } } Using this for Ambiguity Variable Names \u00b6 CORRECT class Main { int age ; Main ( int age ){ this . age = age ; } public static void main ( String [] args ) { Main obj = new Main ( 8 ); System . out . println ( \"obj.age = \" + obj . age ); } } this with Getters and Setters \u00b6 Another common use of this keyword is in setters and getters methods of a class class Main { String name ; // setter method void setName ( String name ) { this . name = name ; } // getter method String getName (){ return this . name ; } ... this with Getters and Setters \u00b6 ... public static void main ( String [] args ) { Main obj = new Main (); // calling the setter and the getter method obj . setName ( \"Toshiba\" ); System . out . println ( \"obj.name: \" + obj . getName ()); } } Using this in Constructor Overloading \u00b6 While working with constructor overloading, we might have to invoke one constructor from another constructor. In such a case, we cannot call the constructor explicitly. Instead, we have to use this keyword. Using this in Constructor Overloading \u00b6 class Complex { private int a , b ; // constructor with 2 parameters private Complex ( int i , int j ){ this . a = i ; this . b = j ; } // constructor with single parameter private Complex ( int i ){ // invokes the constructor with 2 parameters this ( i , i ); } // constructor with no parameter private Complex (){ // invokes the constructor with single parameter this ( 0 ); } ... \u00b6 Using this in Constructor Overloading \u00b6 @Override public String toString (){ return this . a + \" + \" + this . b + \"i\" ; } public static void main ( String [] args ) { // creating object of Complex class // calls the constructor with 2 parameters Complex c1 = new Complex ( 2 , 3 ); // calls the constructor with a single parameter Complex c2 = new Complex ( 3 ); // calls the constructor with no parameters Complex c3 = new Complex (); // print objects System . out . println ( c1 ); System . out . println ( c2 ); System . out . println ( c3 ); } } Using this in Constructor Overloading \u00b6 In the example, we have used this keyword, to call the constructor Complex(int i, int j) from the constructor Complex(int i) to call the constructor Complex(int i) from the constructor Complex() the line, System.out.println(c1); process, the toString() is called Since we override the toString() method inside our class, we get the output according to that method. Using this in Constructor Overloading \u00b6 One of the huge advantages of this() is to reduce the amount of duplicate code. However, we should be always careful while using this(). This is because calling constructor from another constructor adds overhead and it is a slow process. Another huge advantage of using this() is to reduce the amount of duplicate code. Using this in Constructor Overloading \u00b6 Invoking one constructor from another constructor is called explicit constructor invocation. Passing this as an Argument \u00b6 We can use this keyword to pass the current object as an argument to a method class ThisExample { // declare variables int x ; int y ; ThisExample ( int x , int y ) { // assign values of variables inside constructor this . x = x ; this . y = y ; // value of x and y before calling add() System . out . println ( \"Before passing this to addTwo() method:\" ); System . out . println ( \"x = \" + this . x + \", y = \" + this . y ); // call the add() method passing this as argument add ( this ); // value of x and y after calling add() System . out . println ( \"After passing this to addTwo() method:\" ); System . out . println ( \"x = \" + this . x + \", y = \" + this . y ); } void add ( ThisExample o ){ o . x += 2 ; o . y += 2 ; } } \u00b6 Passing this as an Argument \u00b6 class Main { public static void main ( String [] args ) { ThisExample obj = new ThisExample ( 1 , - 2 ); } } \u00b6 Passing this as an Argument \u00b6 In the example, inside the constructor ThisExample() , notice the line, add(this); Here, we are calling the add() method by passing this as an argument. Since this keyword contains the reference to the object obj of the class, we can change the value of x and y inside the add() method. Java instanceof Operator \u00b6 Java instanceof Operator \u00b6 The instanceof operator in Java is used to check whether an object is an instance of a particular class or not. Its syntax is objectName instanceOf className ; Example: Java instanceof \u00b6 class Main { public static void main ( String [] args ) { // create a variable of string type String name = \"Programiz\" ; // checks if name is instance of String boolean result1 = name instanceof String ; System . out . println ( \"name is an instance of String: \" + result1 ); // create an object of Main Main obj = new Main (); // checks if obj is an instance of Main boolean result2 = obj instanceof Main ; System . out . println ( \"obj is an instance of Main: \" + result2 ); } } \u00b6 Example: Java instanceof \u00b6 In the example, we have created a variable name of the String type and an object obj of the Main class. Here, we have used the instanceof operator to check whether name and obj are instances of the String and Main class respectively. And, the operator returns true in both cases. Java instanceof during Inheritance \u00b6 We can use the instanceof operator to check if objects of the subclass is also an instance of the superclass. Java instanceof during Inheritance \u00b6 // Java Program to check if an object of the subclass // is also an instance of the superclass // superclass class Animal { } // subclass class Dog extends Animal { } class Main { public static void main ( String [] args ) { // create an object of the subclass Dog d1 = new Dog (); // checks if d1 is an instance of the subclass System . out . println ( d1 instanceof Dog ); // prints true // checks if d1 is an instance of the superclass System . out . println ( d1 instanceof Animal ); // prints true } } Java instanceof during Inheritance \u00b6 In the above example, we have created a subclass Dog that inherits from the superclass Animal. We have created an object d1 of the Dog class. Inside the print statement, notice the expression, d1 instanceof Animal Here, we are using the instanceof operator to check whether d1 is also an instance of the superclass Animal Java instanceof in Interface \u00b6 The instanceof operator is also used to check whether an object of a class is also an instance of the interface implemented by the class Java instanceof in Interface \u00b6 // Java program to check if an object of a class is also // an instance of the interface implemented by the class interface Animal { } class Dog implements Animal { } Java instanceof in Interface \u00b6 class Main { public static void main ( String [] args ) { // create an object of the Dog class Dog d1 = new Dog (); // checks if the object of Dog // is also an instance of Animal System . out . println ( d1 instanceof Animal ); // returns true } } Java instanceof in Interface \u00b6 In the example, the Dog class implements the Animal interface. Inside the print statement, notice the expression, d1 instanceof Animal Here, d1 is an instance of Dog class. The instanceof operator checks if d1 is also an instance of the interface Animal . Java instanceof in Interface \u00b6 In Java, all the classes are inherited from the Object class. So, instances of all the classes are also an instance of the Object class. In the previous example, if we check, d1 instanceof Object The result will be true . References \u00b6 https://www.site.uottawa.ca/~tcl/seg2105/ https://cruise.umple.org/index.shtml https://cruise.umple.org/umple/GettingStarted.html Sanem Sar\u0131el Associate Professor, PhD BT503 Application Development with Java (Kemerburgaz University 2013-2015) How To Define The Project Scope The Foolproof Way References \u00b6 BtechSmartClass Java OOP Concepts BtechSmartClass-Java Buzz Words JavatPoint-Cpp vs Java BtechSmartClass-Java Classes Programiz-Class Objects References \u00b6 BtechSmartClass-Java-Methods-and-Classes Programiz-Methods Programiz-Method Overloading Programiz-Constructors BtechSmartClass-Java inheritance basics References \u00b6 BtechSmartClass-Java access specifiers Programiz-Access Modifiers BtechSmartClass-java constructors in inheritance Programiz-Inheritance Programiz-this Keyword Programiz-instanceof \\(End-Of-Week-1-Module\\)","title":"Week-1 (Intro)"},{"location":"week-1/ce204-week-1/#ce204-object-oriented-programming","text":"","title":"CE204 Object-Oriented Programming"},{"location":"week-1/ce204-week-1/#week-1-software-engineering-and-oop-with-java-i","text":"","title":"Week-1 (Software Engineering and OOP with Java -I)"},{"location":"week-1/ce204-week-1/#spring-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Spring Semester, 2021-2022"},{"location":"week-1/ce204-week-1/#brief-description-of-course-and-rules","text":"We will first talk about, Course Plan and Communication Grading System, Homeworks, and Exams please read the syllabus carefully.","title":"Brief Description of Course and Rules"},{"location":"week-1/ce204-week-1/#course-growth-track","text":"OOP with Java UML PlantUML + UMPLE + UML PlantUML + UMPLE + UML + Java Design Patterns + UML + Java + UMPLE","title":"Course Growth Track"},{"location":"week-1/ce204-week-1/#outline-1","text":"Software and Software Engineering Object Orientation and Review OOP with Java Intro Basing Software Development on Reusable Technology","title":"Outline (1)"},{"location":"week-1/ce204-week-1/#outline-2","text":"Java Classes Java Objects Java Methods Java Inheritance Java Access Modifiers This and InstanceOf Keywords","title":"Outline (2)"},{"location":"week-1/ce204-week-1/#software-and-software-engineering","text":"","title":"Software and Software Engineering"},{"location":"week-1/ce204-week-1/#software","text":"Computer Software is the product that software engineers design and build. It encompasses programs that execute within a computer of any size and architecture, documents that encompass hard-copy and virtual forms, data that combine numbers and text but also includes representations of pictorial, video, and audio information.","title":"Software"},{"location":"week-1/ce204-week-1/#the-nature-of-software-1","text":"Software is intangible Hard to understand development effort Software is easy to reproduce Cost is in its development in other engineering products, manufacturing is the costly stage The industry is labor-intensive Hard to automate Untrained people can hack something together Quality problems are hard to notice","title":"The Nature of Software... (1)"},{"location":"week-1/ce204-week-1/#the-nature-of-software-2","text":"Software is easy to modify People make changes without fully understanding it Software does not \"wear out\" It deteriorates by having its design changed: erroneously, or in ways that were not anticipated, thus making it complex Conclusions Much software has poor design and is getting worse We have to learn to \u2018engineer\u2019 software","title":"The Nature of Software... (2)"},{"location":"week-1/ce204-week-1/#some-types-of-software","text":"Real time embedded software E.g. control and monitoring systems Must react immediately Safety often a concern Data processing software Used to run businesses Accuracy and security of data are key Game software Mobile device software Web-based software Etc.","title":"Some types of Software"},{"location":"week-1/ce204-week-1/#single-chance","text":"Most of the clients use applications to ease their tasks to make money. For this reason, you do not have a chance to try your application development in real system. Before this deployment you have to use Theory Experimentation Guesses Feedback Lets talk about.","title":"Single Chance"},{"location":"week-1/ce204-week-1/#the-project-construction-cycle-the-tree-swing-example","text":"","title":"The Project Construction Cycle - The Tree Swing Example"},{"location":"week-1/ce204-week-1/#1-how-the-customer-explained-it","text":"","title":"1-How the customer explained it"},{"location":"week-1/ce204-week-1/#2-how-the-project-leader-understood-it","text":"","title":"2-How the project leader understood it."},{"location":"week-1/ce204-week-1/#3-how-the-analyst-designed-it","text":"","title":"3- How the analyst designed it"},{"location":"week-1/ce204-week-1/#4-how-the-programmer-wrote-it","text":"","title":"4-How the programmer wrote it"},{"location":"week-1/ce204-week-1/#5-what-the-beta-testers-received","text":"","title":"5-What the beta testers received"},{"location":"week-1/ce204-week-1/#6-how-the-business-consultant-described-it","text":"","title":"6-How the business consultant described it"},{"location":"week-1/ce204-week-1/#7-how-the-project-was-documented","text":"","title":"7- How the project was documented"},{"location":"week-1/ce204-week-1/#8-what-operations-installed","text":"","title":"8-What operations installed"},{"location":"week-1/ce204-week-1/#9-how-the-customer-was-billed","text":"","title":"9-How the customer was billed"},{"location":"week-1/ce204-week-1/#10-how-it-was-supported","text":"","title":"10-How it was supported"},{"location":"week-1/ce204-week-1/#11-what-marketing-advertised","text":"","title":"11-What marketing advertised"},{"location":"week-1/ce204-week-1/#12-what-the-customer-really-needed","text":"","title":"12-What the customer really needed"},{"location":"week-1/ce204-week-1/#13-the-disaster-recover-plan","text":"","title":"13-The disaster recover plan"},{"location":"week-1/ce204-week-1/#14-what-the-digg-effect-can-do-to-your-site","text":"","title":"14- What the digg effect can do to your site"},{"location":"week-1/ce204-week-1/#15-finally-when-it-was-delivered","text":"","title":"15- (Finally) When it was delivered"},{"location":"week-1/ce204-week-1/#need-for-a-good-programming-method","text":"Common problems Why does it take so long? Why are development costs so high? Why can\u2019t find all faults before delivery? Why can\u2019t we measure development? NIST reported that even though 50 percent of software development budgets go to testing, flaws in software still cost the U.S. economy $59.5 billion annually.* Updated NIST Software Uses Combination Testing to Catch Bugs Fast and Easy | NIST","title":"Need  for a good programming method"},{"location":"week-1/ce204-week-1/#what-is-software-engineering-1","text":"The process of solving customers' problems by the systematic development and evolution of large, high-quality software systems within cost, time and other constraints","title":"What is Software Engineering? (1)"},{"location":"week-1/ce204-week-1/#what-is-software-engineering-2","text":"Solving customers\u2019 problems The goal Sometimes the solution is to buy , not build Adding unnecessary features often makes software worse Software engineers must communicate effectively to identify and understand the problem","title":"What is Software Engineering? (2)"},{"location":"week-1/ce204-week-1/#what-is-software-engineering-3","text":"Systematic development and evolution An engineering process involves applying well understood techniques in a organized and disciplined way Many well-accepted practices have been formally standardized e.g. by the IEEE or ISO Most development work is evolution","title":"What is Software Engineering? (3)"},{"location":"week-1/ce204-week-1/#what-is-software-engineering-4","text":"Large, high quality software systems Software engineering techniques are needed because large systems cannot be completely understood by one person Teamwork and co-ordination are required Key challenge: Dividing up the work and ensuring that the parts of the system work properly together The end-product must be of sufficient quality","title":"What is Software Engineering? (4)"},{"location":"week-1/ce204-week-1/#what-is-software-engineering-5","text":"Cost, time and other constraints Finite resources The benefit must outweigh the cost Others are competing to do the job cheaper and faster Inaccurate estimates of cost and time have caused many project failures","title":"What is Software Engineering? (5)"},{"location":"week-1/ce204-week-1/#the-software-engineering-profession","text":"The term Software Engineering was coined in 1968 People began to realize that the principles of engineering should be applied to software development Engineering is a licensed profession In order to protect the public Engineers design artifacts following well accepted practices which involve the application of science, mathematics and economics Ethical practice is also a key tenet of the profession In many countries, much software engineering does not require an engineering licence, but is still engineering","title":"The Software Engineering Profession"},{"location":"week-1/ce204-week-1/#software-engineering-code-of-ethics","text":"Software engineers shall Act consistently with public interest Act in the best interests of their clients Develop and maintain with the highest standards possible Maintain integrity and independence Promote an ethical approach in management Advance the integrity and reputation of the profession Be fair and supportive to colleagues Participate in lifelong learning","title":"Software Engineering Code of Ethics"},{"location":"week-1/ce204-week-1/#software-quality","text":"Usability Users can learn it and fast and get their job done easily Efficiency It doesn\u2019t waste resources such as CPU time and memory Reliability It does what it is required to do without failing Maintainability It can be easily changed Reusability Its parts can be used in other projects, so reprogramming is not needed","title":"Software Quality"},{"location":"week-1/ce204-week-1/#software-quality-and-stakeholders","text":"","title":"Software Quality and Stakeholders"},{"location":"week-1/ce204-week-1/#software-quality-and-stakeholders_1","text":"Customer (those who pay): solves problems at an acceptable cost in terms of money paid and resources used User easy to learn; efficient to use; helps get work done Developer easy to design; easy to maintain; easy to reuse its parts Development manager sells more and pleases customers while costing less to develop and maintain","title":"Software Quality and Stakeholders"},{"location":"week-1/ce204-week-1/#software-quality-metrics-user","text":"A program must do its job correctly . It must be useful and - usable A program must run as fast as necessary (Real-time constraints) A program must not waste system resources (processor time, - memory, disk capacity, network capacity) too much It must be reliable It must be easily updated A good software must have sufficient documentation (users manual)","title":"Software Quality Metrics \u2013 User"},{"location":"week-1/ce204-week-1/#software-quality-metrics-sw-developer","text":"Source code must be readable and understandable It must be easy to maintain and update the program A program must consist of independent modules An error may not affect other parts of a program (Locality of errors) Modules of the program must be reusable in other projects A software project must meet its deadline Good software must have sufficient documentation","title":"Software Quality Metrics \u2013 SW Developer"},{"location":"week-1/ce204-week-1/#software-quality-metrics-oop","text":"OOP techniques ensure high-quality programs While designing and coding a program, these quality metrics must always be considered","title":"Software Quality Metrics - OOP"},{"location":"week-1/ce204-week-1/#software-quality-conflicts-and-objectives","text":"The different qualities can conflict Increasing efficiency can reduce maintainability or reusability Increasing usability can reduce efficiency Setting objectives for quality is a key engineering activity You then design to meet the objectives Avoids \"over-engineering\" which wastes money","title":"Software Quality: Conflicts and Objectives"},{"location":"week-1/ce204-week-1/#software-engineering-projects","text":"Most projects are evolutionary or maintenance projects, involving work on legacy systems Corrective projects: fixing defects Adaptive projects: changing the system in response to changes in Operating system Database Rules and regulations Enhancement projects: adding new features for users Reengineering or perfective projects: changing the system internally so it is more maintainable","title":"Software Engineering Projects"},{"location":"week-1/ce204-week-1/#software-engineering-projects-start-points","text":"Green Field Development Brownfield Development Start afresh Build on existing code Choose your technology Technology already chosen Use your best ideas, patterns, techniques Understand previous developers' code Learn from mistakes Live with mistakes","title":"Software Engineering Projects Start Points"},{"location":"week-1/ce204-week-1/#software-engineering-projects-start-points_1","text":"Requirements must be determined Clients have produced requirements New development, Green Field Project A B Evolution of Existing System, Brown Field Project C D","title":"Software Engineering Projects Start Points"},{"location":"week-1/ce204-week-1/#activities-common-to-software-projects","text":"Requirements and specification Includes Domain analysis Defining the problem Requirements gathering Obtaining input from as many sources as possible Requirements analysis Organizing the information Requirements specification Writing detailed instructions about how the software should behave","title":"Activities Common to Software Projects"},{"location":"week-1/ce204-week-1/#activities-common-to-software-projects_1","text":"Design Deciding how the requirements should be implemented, using the available technology Includes: Systems engineering: Deciding what should be in hardware and what in software Software architecture: Dividing the system into subsystems and deciding how the subsystems will interact Detailed design of the internals of a subsystem User interface design Design of databases","title":"Activities Common to Software Projects"},{"location":"week-1/ce204-week-1/#activities-common-to-software-projects_2","text":"Modeling Creating representations of the domain or the software Use case modeling Structural modeling Dynamic and behavioural modeling Programming Quality assurance Reviews and inspections Testing Deployment Managing the process","title":"Activities Common to Software Projects"},{"location":"week-1/ce204-week-1/#software-projects-development-team","text":"","title":"Software Projects Development Team"},{"location":"week-1/ce204-week-1/#software-life-cycle","text":"Requirements Phase Specification Phase Design Phase Implementation Phase Integration Phase Maintenance Phase Retirement Phase","title":"Software Life Cycle"},{"location":"week-1/ce204-week-1/#requirements-phase","text":"Defining constraints Functions Due dates Costs Reliability Size Types Functional Non-Functional","title":"Requirements Phase"},{"location":"week-1/ce204-week-1/#specification-phase","text":"Documentation of requirements Inputs & Outputs Formal Understandable for user & developer Usually functional requirements (what to do) Base for testing & maintenance The contract between customer & developer","title":"Specification Phase"},{"location":"week-1/ce204-week-1/#design-phase","text":"Defining Internal structure (how to do) Has some levels (or types of docs) Architectural design Detailed design Important To backtrack the aims of decisions To easily maintain","title":"Design Phase"},{"location":"week-1/ce204-week-1/#implementation-and-integration-phases","text":"Implementation phase: Simply coding Unit tests For verification Combining modules System tests For validation Quality tests","title":"Implementation and Integration Phases"},{"location":"week-1/ce204-week-1/#maintenance-phase","text":"Corrective Enhancement Perfective Adaptive Usually maintainers are not the same people with developers. The only input is (in general) the source code of the software","title":"Maintenance Phase"},{"location":"week-1/ce204-week-1/#retirement-phase","text":"When the cost of maintenance is not effective. Changes are so drastic, that the software should be redesigned. So many changes may have been made. The update frequency of docs is not enough. The hardware (or OS) will be changed.","title":"Retirement Phase"},{"location":"week-1/ce204-week-1/#software-development-process","text":"","title":"Software Development Process"},{"location":"week-1/ce204-week-1/#software-development-process_1","text":"Analysis : Understanding requirements. They may change during (or after) development of the system! Building the programming team. Design : Identifying the key concepts involved in a solution and creation of the models. This stage has a strong effect on the quality of the software. Therefore, before the coding, verification of the created model must be done. Design process is connected with the programming scheme. Here, our design style is object-oriented.","title":"Software Development Process"},{"location":"week-1/ce204-week-1/#software-development-process_2","text":"Coding : The solution (model) is expressed in a program. In this course we will use Java. Documentation: Each phase of a software project must be clearly explained. A users manual should also be written. Test : the behavior of the program for possible inputs must be examined. These steps are important design principles and design patterns, which help us developing high-quality software. The Unified Modeling Language (UML) is useful to express the model.","title":"Software Development Process"},{"location":"week-1/ce204-week-1/#unified-process-up","text":"The UP promotes several best practices. Iterative Incremental Risk-driven","title":"Unified Process (UP)"},{"location":"week-1/ce204-week-1/#unified-process-up_1","text":"","title":"Unified Process (UP)"},{"location":"week-1/ce204-week-1/#unified-process-up_2","text":"","title":"Unified Process (UP)"},{"location":"week-1/ce204-week-1/#object-orientation-part-1","text":"","title":"Object Orientation Part-1"},{"location":"week-1/ce204-week-1/#oop-concepts-in-java","text":"OOP stands for Object-Oriented Programming. OOP is a programming paradigm in which every program is follows the concept of object. In other words, OOP is a way of writing programs based on the object concept. The object-oriented programming paradigm has the following core concepts. Encapsulation Inheritance Polymorphism Abstraction The popular object-oriented programming languages are Smalltalk, C++, Java, PHP, C#, Python, etc.","title":"OOP Concepts in Java"},{"location":"week-1/ce204-week-1/#encapsulation","text":"Encapsulation is the process of combining data and code into a single unit (object / class). In OOP, every object is associated with its data and code. In programming, data is defined as variables and code is defined as methods. The java programming language uses the class concept to implement encapsulation.","title":"Encapsulation"},{"location":"week-1/ce204-week-1/#encapsulation_1","text":"","title":"Encapsulation"},{"location":"week-1/ce204-week-1/#inheritance","text":"Inheritance is the process of acquiring properties and behaviors from one object to another object or one class to another class. In inheritance, we derive a new class from the existing class. Here, the new class acquires the properties and behaviors from the existing class. In the inheritance concept, the class which provides properties is called as parent class and the class which recieves the properties is called as child class. The parent class is also known as base class or supre class. The child class is also known as derived class or sub class. In the inheritance, the properties and behaviors of base class extended to its derived class, but the base class never receive properties or behaviors from its derived class. In java programming language the keyword extends is used to implement inheritance.","title":"Inheritance"},{"location":"week-1/ce204-week-1/#inheritance_1","text":"","title":"Inheritance"},{"location":"week-1/ce204-week-1/#polymorphism","text":"Polymorphism is the process of defining same method with different implementation. That means creating multiple methods with different behaviors. The java uses method overloading and method overriding to implement polymorphism. Method overloading - multiple methods with same name but different parameters. Method overriding - multiple methods with same name and same parameters.","title":"Polymorphism"},{"location":"week-1/ce204-week-1/#polymorphism_1","text":"","title":"Polymorphism"},{"location":"week-1/ce204-week-1/#abstraction","text":"Abstraction is hiding the internal details and showing only esential functionality. In the abstraction concept, we do not show the actual implemention to the end user, instead we provide only esential things. For example, if we want to drive a car, we does not need to know about the internal functionality like how wheel system works? how brake system works? how music system works? etc.","title":"Abstraction"},{"location":"week-1/ce204-week-1/#abstraction_1","text":"","title":"Abstraction"},{"location":"week-1/ce204-week-1/#why-object-technology","text":"Expectations are, Reducing the effort, complexity, and cost of development and maintenance of software systems. Reducing the time to adapt an existing system (quicker reaction to changes in the business environment): Flexibility, reusability. Increasing the reliability of the system.","title":"Why Object Technology"},{"location":"week-1/ce204-week-1/#what-is-programming","text":"A programming language provides a way to express concepts. Program development involves creating models of real world - situations and building computer programs based on these models. Computer programs describe the method of implementing the model. Computer programs may contain computer world representations of the things that constitute the solutions of real world problems.","title":"What is Programming?"},{"location":"week-1/ce204-week-1/#what-is-programming_1","text":"If successful, this medium of expression (the object-oriented way) will be significantly easier, more flexible, and efficient than the alternatives as problems grow larger and more complex","title":"What is Programming?"},{"location":"week-1/ce204-week-1/#why-java","text":"Java supports writing high quality programs (pure OO) Provides an easy-to-use language Provides an interpreted environment for Improved development speed Code portability Simple Architecture Neutral and Portable Robust and Secure High Performance","title":"Why JAVA"},{"location":"week-1/ce204-week-1/#why-java_1","text":"Write less code can be four times smaller than the same program written in C++ Write better code encourages good coding practices, garbage collection for avoiding memory leaks, wide-ranging, easily extendible API Avoid platform dependencies Write once, run anywhere Gained popularity in gadgets such as PDAs, cell phones etc.","title":"Why JAVA"},{"location":"week-1/ce204-week-1/#learning-java","text":"Many syntax and grammar rules Learning how to write \u201cgood programs\u201d Focusing on concepts and not get lost in language-technical - details Paying attention to design techniques rather than details Building an effective programming scheme Practicing, practicing and practicing! Consequently, new and better ways of building systems","title":"Learning JAVA"},{"location":"week-1/ce204-week-1/#java-buzz-words","text":"Simple Secure Portable Object-oriented Robust Architecture-neutral (or) Platform Independent Multi-threaded Interpreted High performance Distributed Dynamic","title":"Java Buzz Words"},{"location":"week-1/ce204-week-1/#simple","text":"Java programming language is very simple and easy to learn, understand, and code. Most of the syntaxes in java follow basic programming language C and object-oriented programming concepts are similar to C++. In a java programming language, many complicated features like pointers, operator overloading, structures, unions, etc. have been removed. One of the most useful features is the garbage collector it makes java more simple.","title":"Simple"},{"location":"week-1/ce204-week-1/#secure","text":"Java is said to be more secure programming language because it does not have pointers concept, java provides a feature \"applet\" which can be embedded into a web application. The applet in java does not allow access to other parts of the computer, which keeps away from harmful programs like viruses and unauthorized access.","title":"Secure"},{"location":"week-1/ce204-week-1/#portable","text":"Portability is one of the core features of java which enables the java programs to run on any computer or operating system. For example, an applet developed using java runs on a wide variety of CPUs, operating systems, and browsers connected to the Internet.","title":"Portable"},{"location":"week-1/ce204-week-1/#object-oriented","text":"Java is said to be a pure object-oriented programming language. In java, everything is an object. It supports all the features of the object-oriented programming paradigm. The primitive data types java also implemented as objects using wrapper classes, but still, it allows primitive data types to archive high-performance.","title":"Object-oriented"},{"location":"week-1/ce204-week-1/#robust","text":"Java is more robust because the java code can be executed on a variety of environments, java has a strong memory management mechanism (garbage collector), java is a strictly typed language, it has a strong set of exception handling mechanism, and many more.","title":"Robust"},{"location":"week-1/ce204-week-1/#architecture-neutral-or-platform-independent","text":"Java has invented to archive \"write once; run anywhere, any time, forever\". The java provides JVM (Java Virtual Machine) to to archive architectural-neutral or platform-independent. The JVM allows the java program created using one operating system can be executed on any other operating system.","title":"Architecture-neutral (or) Platform Independent"},{"location":"week-1/ce204-week-1/#multi-threaded","text":"Java supports multi-threading programming, which allows us to write programs that do multiple operations simultaneously.","title":"Multi-threaded"},{"location":"week-1/ce204-week-1/#interpreted","text":"Java enables the creation of cross-platform programs by compiling into an intermediate representation called Java bytecode. The byte code is interpreted to any machine code so that it runs on the native machine.","title":"Interpreted"},{"location":"week-1/ce204-week-1/#high-performance","text":"Java provides high performance with the help of features like JVM, interpretation, and its simplicity.","title":"High performance"},{"location":"week-1/ce204-week-1/#distributed","text":"Java programming language supports TCP/IP protocols which enable the java to support the distributed environment of the Internet. Java also supports Remote Method Invocation (RMI), this feature enables a program to invoke methods across a network.","title":"Distributed"},{"location":"week-1/ce204-week-1/#dynamic","text":"Java is said to be dynamic because the java byte code may be dynamically updated on a running system and it has a dynamic memory allocation and deallocation (objects and garbage collector).","title":"Dynamic"},{"location":"week-1/ce204-week-1/#the-basics-of-java","text":"History The first object oriented programming language was Simula-67 designed to allow programmers to write simulation programs In the early 1980\u2019s, Smalltalk was developed at Xerox PARC New syntax, large open-source library of reusable code, bytecode, platform independence, garbage collection.","title":"The Basics of Java"},{"location":"week-1/ce204-week-1/#the-basics-of-java_1","text":"late 1980\u2019s, C++ was developed by B. Stroustrup, Recognized the advantages of OO but also recognized that there were tremendous numbers of C programmers In 1991, engineers at Sun Microsystems started a project to design a language that could be used in consumer \u2018smart devices\u2019: Oak When the Internet gained popularity, Sun saw an opportunity to exploit the technology. The new language, renamed Java, was formally presented in 1995 at the SunWorld \u201995 conference.","title":"The Basics of Java"},{"location":"week-1/ce204-week-1/#java-documentation","text":"Looking up classes and methods is an essential skill Looking up unknown classes and methods will get you a long way towards understanding code Java documentation can be automatically generated by a program called Javadoc Documentation is generated from the code and its comments You should format your comments as shown in some of the book\u2019s examples These may include embeded html","title":"Java documentation"},{"location":"week-1/ce204-week-1/#characters-and-strings","text":"Character is a class representing Unicode characters More than a byte each Represent any world language char is a primitive data type containing a Unicode character String is a class containing collections of characters + is the operator used to concatenate strings","title":"Characters and Strings"},{"location":"week-1/ce204-week-1/#arrays-and-collections","text":"Arrays are of fixed size and lack methods to manipulate them ArrayList is the most widely used class to hold a collection of other objects More powerful than arrays, but less efficient Iterators are used to access members of Vectors Enumerations were formally used, but were more complex a = new ArrayList (); Iterator i = a . iterator (); while ( i . hasNext ()) { aMethod ( i . next ()); }","title":"Arrays and Collections"},{"location":"week-1/ce204-week-1/#casting","text":"Java is very strict about types If variable v is declared to have type X, you can only invoke operations on v that are defined in X or its superclasses Even though an instance of a subclass of X may be actually stored in the variable If you know an instance of a subclass is stored, then you can cast the variable to the subclass E.g. if I know a Vector contains instances of String, I can get the next element of its Iterator using: (String)i.next(); To avoid casting you could also have used templates:: a = ArrayList<String>; i=a.iterator(); i.next()","title":"Casting"},{"location":"week-1/ce204-week-1/#exceptions","text":"Anything that can go wrong should result in the raising of an Exception Exception is a class with many subclasses for specific things that can go wrong Use a try - catch block to trap an exception try { // some code } catch ( ArithmeticException e ) { // code to handle division by zero }","title":"Exceptions"},{"location":"week-1/ce204-week-1/#interfaces","text":"Like abstract classes, but cannot have executable statements Define a set of operations that make sense in several classes Abstract Data Types A class can implement any number of interfaces It must have concrete methods for the operations You can declare the type of a variable to be an interface This is just like declaring the type to be an abstract class Important interfaces in Java\u2019s library include Runnable, Collection, Iterator, Comparable, Cloneable","title":"Interfaces"},{"location":"week-1/ce204-week-1/#packages-and-importing","text":"A package combines related classes into subsystems All the classes in a particular directory Classes in different packages can have the same name Although not recommended Importing a package is done as follows: import finance.banking.accounts.*;","title":"Packages and importing"},{"location":"week-1/ce204-week-1/#access-control","text":"Applies to methods and variables public Any class can access protected Only code in the package, or subclasses can access (blank) Only code in the package can access private Only code written in the class can access Inheritance still occurs!","title":"Access control"},{"location":"week-1/ce204-week-1/#threads-and-concurrency","text":"Thread : Sequence of executing statements that can be running concurrently with other threads To create a thread in Java : Create a class implementing Runnable or extending Thread Implement the run method as a loop that does something for a period of time Create an instance of this class Invoke the start operation, which calls run","title":"Threads and concurrency"},{"location":"week-1/ce204-week-1/#programming-style-guidelines","text":"Remember that programs are for people to read Always choose the simpler alternative Reject clever code that is hard to understand Shorter code is not necessarily better Choose good names Make them highly descriptive Do not worry about using long names","title":"Programming Style Guidelines"},{"location":"week-1/ce204-week-1/#programming-style","text":"Comment extensively Comment whatever is non-obvious Do not comment the obvious Comments should be 25-50% of the code Organize class elements consistently Variables, constructors, public methods then private methods Be consistent regarding layout of code","title":"Programming style"},{"location":"week-1/ce204-week-1/#programming-style_1","text":"Avoid duplication of code Do not \"clone\" if possible Create a new method and call it Cloning results in two copies that may both have bugs When one copy of the bug is fixed, the other may be forgotten","title":"Programming style"},{"location":"week-1/ce204-week-1/#programming-style_2","text":"Adhere to good object oriented principles E.g. the \u2018isa rule\u2019 Prefer private as opposed to public Do not mix user interface code with non-user interface code Interact with the user in separate classes This makes non-UI classes more reusable","title":"Programming style"},{"location":"week-1/ce204-week-1/#difficulties-and-risks-in-programming","text":"Language evolution and deprecated features : Java is evolving, so some features are \u2018deprecated\u2019 at every release Efficiency can be a concern in some object oriented systems Java can be less efficient than other languages VM-based Dynamic binding","title":"Difficulties and Risks in Programming"},{"location":"week-1/ce204-week-1/#c-vs-java","text":"Comparison Index C++ Java Platform-independent C++ is platform-dependent. Java is platform-independent. Mainly used for C++ is mainly used for system programming. Java is mainly used for application programming. It is widely used in Windows-based, web-based, enterprise, and mobile applications.","title":"C++ vs Java"},{"location":"week-1/ce204-week-1/#c-vs-java_1","text":"Comparison Index C++ Java Multiple inheritance C++ supports multiple inheritance. Java doesn't support multiple inheritance through class. It can be achieved by using interfaces in java. Operator Overloading C++ supports operator overloading. Java doesn't support operator overloading.","title":"C++ vs Java"},{"location":"week-1/ce204-week-1/#c-vs-java_2","text":"Comparison Index C++ Java Goto C++ supports the goto statement. Java doesn't support the goto statement. Compiler and Interpreter C++ uses compiler only. C++ is compiled and run using the compiler which converts source code into machine code so, C++ is platform dependent. Java uses both compiler and interpreter. Java source code is converted into bytecode at compilation time. The interpreter executes this bytecode at runtime and produces output. Java is interpreted that is why it is platform-independent.","title":"C++ vs Java"},{"location":"week-1/ce204-week-1/#c-vs-java_3","text":"Comparison Index C++ Java Pointers C++ supports pointers. You can write a pointer program in C++. Java supports pointer internally. However, you can't write the pointer program in java. It means java has restricted pointer support in java. Design Goal C++ was designed for systems and applications programming. It was an extension of the C programming language. Java was designed and created as an interpreter for printing systems but later extended as a support network computing. It was designed to be easy to use and accessible to a broader audience.","title":"C++ vs Java"},{"location":"week-1/ce204-week-1/#c-vs-java_4","text":"Comparison Index C++ Java Structure and Union C++ supports structures and unions. Java doesn't support structures and unions. Thread Support C++ doesn't have built-in support for threads. It relies on third-party libraries for thread support. Java has built-in thread support.","title":"C++ vs Java"},{"location":"week-1/ce204-week-1/#c-vs-java_5","text":"Comparison Index C++ Java Documentation comment C++ doesn't support documentation comments. Java supports documentation comment (/** ... */) to create documentation for java source code. Virtual Keyword C++ supports virtual keyword so that we can decide whether or not to override a function. Java has no virtual keyword. We can override all non-static methods by default. In other words, non-static methods are virtual by default.","title":"C++ vs Java"},{"location":"week-1/ce204-week-1/#c-vs-java_6","text":"Comparison Index C++ Java unsigned right shift >>> C++ doesn't support >>> operator. Java supports unsigned right shift >>> operator that fills zero at the top for the negative numbers. For positive numbers, it works same like >> operator. Inheritance Tree C++ always creates a new inheritance tree. Java always uses a single inheritance tree because all classes are the child of the Object class in Java. The Object class is the root of the inheritance tree in java.","title":"C++ vs Java"},{"location":"week-1/ce204-week-1/#c-vs-java_7","text":"Comparison Index C++ Java Hardware C++ is nearer to hardware. Java is not so interactive with hardware. Object-oriented C++ is an object-oriented language. However, in the C language, a single root hierarchy is not possible. Java is also an object-oriented language. However, everything (except fundamental types) is an object in Java. It is a single root hierarchy as everything gets derived from java.lang.Object.","title":"C++ vs Java"},{"location":"week-1/ce204-week-1/#object-orientation-part-2","text":"","title":"Object Orientation Part-2"},{"location":"week-1/ce204-week-1/#procedural-programming","text":"Pascal, C, Basic, Fortran and similar traditional languages are procedural Each statement tells the computer to do something The emphasis is on doing things Functions A program is divided into functions Each function has a clearly defined purpose and interface","title":"Procedural Programming"},{"location":"week-1/ce204-week-1/#procedural-programming_1","text":"","title":"Procedural Programming"},{"location":"week-1/ce204-week-1/#problems-with-procedural-programming","text":"Data Is undervalued Data is, after all, the reason for a program\u2019s existence. The important parts of a program are not functions that display the data or functions that checks for correct input; they are data Procedural programs don\u2019t model the real world very well. The real world does not consist of functions Global data can be corrupted by functions that have no business changing it To add new data items, all the functions that access data must be modified so that they can also access these new items Creating new data types is difficult","title":"Problems with Procedural Programming"},{"location":"week-1/ce204-week-1/#besides","text":"It is also possible to write good programs by using procedural programming (C programs). But object-oriented programming offers programmers many advantages, enables them to write high-quality programs","title":"Besides"},{"location":"week-1/ce204-week-1/#object-oriented-programming","text":"The fundamental idea behind object-oriented programming: The real world consists of objects. Computer programs may contain computer world representations of the things (objects) that constitute the solutions of real world problems. Real world objects have two parts: Properties (or state: characteristics that can change), Behavior (or abilities: things they can do). To solve a programming problem in an object-oriented language,the programmer no longer asks how the problem will be divided into functions, but how it will be divided into objects . The emphasis is on data","title":"Object-Oriented Programming"},{"location":"week-1/ce204-week-1/#object-oriented-programming_1","text":"What kinds of things become objects in object-oriented programs? Human entities : Employees, customers, salespeople,worker, manager Graphics program : Point, line, square, circle, ... Mathematics : Complex numbers, matrix Computer user environment : Windows, menus, buttons Data-storage constructs : Customized arrays, stacks, linked lists","title":"Object-Oriented Programming"},{"location":"week-1/ce204-week-1/#oop-encapsulation-and-data-hiding","text":"Thinking in terms of objects rather than functions Close match between objects in the programming sense and objects in the real world Both data and the functions that operate on that data are combined into a single program entity Data represent the properties (state), and functions represent the behavior of an object. Data and its functions are said to be encapsulated into a single entity An object\u2019s functions, called member functions in Java typically provide the only way to access its data. The data is hidden , so it is safe from accidental alteration.","title":"OOP: Encapsulation and Data Hiding"},{"location":"week-1/ce204-week-1/#oop-encapsulation-and-data-hiding_1","text":"Encapsulation and data hiding are key terms in the description of object-oriented languages. If you want to modify the data in an object, you know exactly what functions to interact with it The member functions in the object. No other functions can access the data: This simplifies writing, debugging, and maintaining the program.","title":"OOP: Encapsulation and Data Hiding"},{"location":"week-1/ce204-week-1/#example-a-point-on-the-plane","text":"A Point on a plane has two properties; x-y coordinates. Abilities (behavior) of a Point are, moving on the plane, appearing on the screen and disappearing. A model for 2 dimensional points with the following parts: Two integer variables (x,y) to represent x and y coordinates A function to move the point: move A function to print the point on the screen: print A function to hide the point: hide","title":"Example: A Point on the plane"},{"location":"week-1/ce204-week-1/#example-a-point-on-the-plane_1","text":"Once the model has been built and tested, it is possible to create many objects of this model , in the main program. Point pointOne = new Point ( 67 , 89 ); Point pointTwo = new Point ( 12 , 34 ); public class Point { public int x = 0 ; public int y = 0 ; public Point ( int a , int b ) { x = a ; y = b ; } }","title":"Example: A Point on the plane"},{"location":"week-1/ce204-week-1/#object-model","text":"A Java program typically consists of a number of objects that communicate with each other by calling one another\u2019s member functions.","title":"Object Model"},{"location":"week-1/ce204-week-1/#oop-vs-procedural-programming","text":"Procedural languages still require you to think in terms of the structure of the computer rather than the structure of the problem you are trying to solve. The programmer must establish the association between the machine model and the model of the problem that is actually being solved. The effort required to perform this mapping produces programs that are difficult to write and expensive to maintain . Because the real world thing and their models on the computer are quite different","title":"OOP vs. Procedural Programming"},{"location":"week-1/ce204-week-1/#example-procedural-programming","text":"Real world thing: student Computer model: char *, int, float It is said that the C language is closer to the computer than the problem .","title":"Example: Procedural Programming"},{"location":"week-1/ce204-week-1/#oop-vs-procedural-programming_1","text":"The OO approach provides tools for the programmer to represent elements in the problem space Objects are both in the problem space and the solution The OO programs are easy to update by adding new types of objects OOP allows you to describe the problem in terms of the problem, rather than in terms of the computer where the solution will run.","title":"OOP vs. Procedural Programming"},{"location":"week-1/ce204-week-1/#oop-vs-procedural-programming_2","text":"Benefits of the object-oriented programming: Readability Understandability Low probability of errors Maintenance Reusability Teamwork","title":"OOP vs. Procedural Programming"},{"location":"week-1/ce204-week-1/#oop-vs-procedural-programming_3","text":"Procedural paradigm: Software is organized around the notion of procedures Procedural abstraction Works as long as the data is simple Adding data abstractions groups together the pieces of data that describe some entity Helps reduce the system\u2019s complexity. Such as Records and structures Object oriented paradigm: Organizing procedural abstractions in the context of data abstractions","title":"OOP vs. Procedural Programming"},{"location":"week-1/ce204-week-1/#object-oriented-paradigm","text":"All computations are performed in the context of objects. The objects are instances of classes, which: are data abstractions contain procedural abstractions that operate on the objects A running program can be seen as a collection of objects collaborating to perform a given task","title":"Object Oriented paradigm"},{"location":"week-1/ce204-week-1/#a-view-of-the-two-paradigms","text":"","title":"A View of the Two paradigms"},{"location":"week-1/ce204-week-1/#classes-and-objects","text":"Object A chunk of structured data in a running software system Has properties Represent its state Has behaviour How it acts and reacts May simulate the behaviour of an object in the real world","title":"Classes and Objects"},{"location":"week-1/ce204-week-1/#objects-shown-as-a-uml-instance-diagram","text":"","title":"Objects: Shown as a UML instance diagram"},{"location":"week-1/ce204-week-1/#classes","text":"A class: A unit of abstraction in an object oriented (OO) program Represents similar objects Its instances A kind of software module Describes its instances\u2019 structure (properties) Contains methods to implement their behaviour section{ font-size: 25px; }","title":"Classes"},{"location":"week-1/ce204-week-1/#is-something-a-class-or-an-instance","text":"Something should be a class if it could have instances Something should be an instance if it is clearly a single member of the set defined by a class Film Class; instances are individual films. Reel of Film: Class; instances are physical reels Film reel with serial number SW19876 Instance of ReelOfFilm section{ font-size: 25px; }","title":"Is Something a Class or an Instance?"},{"location":"week-1/ce204-week-1/#is-something-a-class-or-an-instance_1","text":"Science Fiction Instance of the class Genre. Science Fiction Film Class; instances include \u2018Star Wars\u2019 Showing of \u2018Star Wars\u2019 in the Phoenix Cinema at 7 p.m.: Instance of ShowingOfFilm","title":"Is Something a Class or an Instance?"},{"location":"week-1/ce204-week-1/#naming-classes","text":"Use capital letters E.g. BankAccount not bankAccount Use singular nouns Use the right level of generality E.g. Municipality , not City Make sure the name has only one meaning E.g. \"bus\" has several meanings","title":"Naming classes"},{"location":"week-1/ce204-week-1/#instance-variables","text":"Variables defined inside a class corresponding to data present in each instance Also called fields or member variables Attributes Simple data E.g. name , dateOfBirth Associations Relationships to other important classes E.g. supervisor , coursesTaken","title":"Instance Variables"},{"location":"week-1/ce204-week-1/#variables-vs-objects","text":"A variable Refers to an object May refer to different objects at different points in time An object can be referred to by several different variables at the same time Type of a variable Determines what classes of objects it may contain","title":"Variables vs. Objects"},{"location":"week-1/ce204-week-1/#class-variables","text":"A class variable\u2019s value is shared by all instances of a class. Also called a static variable If one instance sets the value of a class variable, then all the other instances see the same changed value. Class variables are useful for: Default or \u2018constant\u2019 values (e.g. PI) Lookup tables and similar structures Caution : do not over-use class variables","title":"Class variables"},{"location":"week-1/ce204-week-1/#methods-operations-and-polymorphism","text":"Operation A higher-level procedural abstraction that specifies a type of behaviour Independent of any code which implements that behaviour E.g. calculating area (in general)","title":"Methods, Operations and Polymorphism"},{"location":"week-1/ce204-week-1/#methods-operations-and-polymorphism_1","text":"Method A procedural abstraction used to implement the behaviour of a class Several different classes can have methods with the same name They implement the same abstract operation in ways suitable to each class E.g. calculating area in a rectangle is done differently from in a circle","title":"Methods, Operations and Polymorphism"},{"location":"week-1/ce204-week-1/#polymorphism_2","text":"A property of object oriented software by which an abstract operation may be performed in different ways in different classes. Requires that there be multiple methods of the same name The choice of which one to execute depends on the object that is in a variable Reduces the need for programmers to code many if-else or switch statements","title":"Polymorphism"},{"location":"week-1/ce204-week-1/#organizing-classes-into-inheritance-hierarchies","text":"Superclasses Contain features common to a set of subclasses Inheritance hierarchies Show the relationships among superclasses and subclasses A triangle shows a generalization Inheritance The implicit possession by all subclasses of features defined in its superclasses","title":"Organizing Classes into Inheritance Hierarchies"},{"location":"week-1/ce204-week-1/#an-example-inheritance-hierarchy","text":"Inheritance The implicit possession by all subclasses of features defined in its superclasses","title":"An Example Inheritance Hierarchy"},{"location":"week-1/ce204-week-1/#the-is-a-rule","text":"Always check generalizations to ensure they obey the isa rule \"A checking account is an account\" \"A village is a municipality\" Should 'Province' be a subclass of 'Country'? No, it violates the is-a rule \"A province is a country\" is invalid!","title":"The Is-a Rule"},{"location":"week-1/ce204-week-1/#a-possible-inheritance-hierarchy-of-mathematical-objects","text":"","title":"A possible inheritance hierarchy of mathematical objects"},{"location":"week-1/ce204-week-1/#make-sure-all-inherited-features-make-sense-in-subclasses","text":"","title":"Make Sure all Inherited Features Make Sense in Subclasses"},{"location":"week-1/ce204-week-1/#inheritance-polymorphism-and-variables","text":"","title":"Inheritance, Polymorphism and Variables"},{"location":"week-1/ce204-week-1/#some-operations-in-the-shape-example","text":"","title":"Some Operations in the Shape Example"},{"location":"week-1/ce204-week-1/#abstract-classes-and-methods","text":"An operation should be declared to exist at the highest class in the hierarchy where it makes sense The operation may be abstract (lacking implementation) at that level If so, the class also must be abstract No instances can be created The opposite of an abstract class is a concrete class If a superclass has an abstract operation then its subclasses at some level must have a concrete method for the operation Leaf classes must have or inherit concrete methods for all operations Leaf classes must be concrete","title":"Abstract Classes and Methods"},{"location":"week-1/ce204-week-1/#overriding","text":"A method would be inherited, but a subclass contains a new version instead For extension E.g. SavingsAccount might charge an extra fee following every debit For optimization E.g. The getPerimeterLength method in Circle is much simpler than the one in Ellipse For restriction (best to avoid) E.g. scale(x,y) would not work in Circle","title":"Overriding"},{"location":"week-1/ce204-week-1/#how-a-decision-is-made-about-which-method-to-run","text":"If there is a concrete method for the operation in the current class, run that method. Otherwise, check in the immediate superclass to see if there is a method there; if so, run it. Repeat step 2, looking in successively higher superclasses until a concrete method is found and run. If no method is found, then there is an error In Java and C++ the program would not have compiled In Java and C++ the program would not have compiled","title":"How a decision is made about which method to run"},{"location":"week-1/ce204-week-1/#dynamic-binding","text":"Occurs when decision about which method to run can only be made at run time Needed when: A variable is declared to have a superclass as its type, and There is more than one possible polymorphic method that could be run among the type of the variable and its subclasses","title":"Dynamic binding"},{"location":"week-1/ce204-week-1/#key-terminology","text":"Abstraction Object \\(\\Longrightarrow\\) something in the world Class \\(\\Longrightarrow\\) objects Superclass \\(\\Longrightarrow\\) subclasses Operation \\(\\Longrightarrow\\) methods Attributes and associations \\(\\Longrightarrow\\) instance variables Modularity Code is divided into classes, and classes into methods Encapsulation Details can be hidden in classes This gives rise to information hiding : Programmers do not need to know all the details of a class","title":"Key Terminology"},{"location":"week-1/ce204-week-1/#basing-software-development-on-reusable-technology","text":"","title":"Basing Software Development on Reusable Technology"},{"location":"week-1/ce204-week-1/#building-on-the-experience-of-others","text":"Software engineers should avoid re-developing software already developed Types of reuse: Reuse of expertise Reuse of standard designs and algorithms Reuse of libraries of classes or procedures Reuse of powerful commands built into languages and operating systems Reuse of frameworks Reuse of complete applications","title":"Building on the Experience of Others"},{"location":"week-1/ce204-week-1/#frameworks-reusable-subsystems","text":"A framework is reusable software that implements a generic solution to a generalized problem. It provides common facilities applicable to different application programs. - Principle : Applications that do different, but related, things tend to have similar designs","title":"Frameworks: Reusable Subsystems"},{"location":"week-1/ce204-week-1/#frameworks-to-promote-reuse","text":"A framework is intrinsically incomplete Certain classes or methods are used by the framework, but are missing ( slots ) Some functionality is optional Allowance is made for developer to provide it ( hooks or extension points ) Developers use the services that the framework provides Taken together the services are called the Application Program Interface ( API )","title":"Frameworks to promote reuse"},{"location":"week-1/ce204-week-1/#object-oriented-frameworks","text":"In the object oriented paradigm, a framework is composed of a library of classes. The API is defined by the set of all public methods of these classes. Some of the classes will normally be abstract and there are often many Interfaces Example: A framework for payroll management A framework for frequent buyer clubs A framework for university registration A framework for e-commerce web sites","title":"Object-oriented frameworks"},{"location":"week-1/ce204-week-1/#frameworks-and-product-lines","text":"A product line (or product family) is a set of products built on a common base of technology. The various products in the product line have different features to satisfy different markets The software common to all products in included in a framework Each product is produced by filling the available hooks and slots E.g. software products offering \"demo\", \"lite\" or \"pro\" versions","title":"Frameworks and product lines"},{"location":"week-1/ce204-week-1/#types-of-frameworks","text":"A horizontal framework provides general application facilities that a large number of applications can use A vertical framework ( application framework ) is more \u2018complete\u2019 but still needs some slots to be filled to adapt it to specific application needs","title":"Types of frameworks"},{"location":"week-1/ce204-week-1/#the-client-server-architecture","text":"A distributed system is a system in which: computations are performed by separate programs \u2026 normally running on separate pieces of hardware \u2026 that co-operate to perform the task of the system. Server: A program that provides a service for other programs that connect to it using a communication channel Client A program that accesses a server (or several servers) to obtain services A server may be accessed by many clients simultaneously","title":"The Client-Server Architecture"},{"location":"week-1/ce204-week-1/#example-of-client-server-systems","text":"","title":"Example of client-server systems"},{"location":"week-1/ce204-week-1/#activities-of-a-server","text":"Initializes itself Starts listening for clients Handles the following types of events originating from clients accepts connections responds to messages handles client disconnection May stop listening Must cleanly terminate","title":"Activities of a server"},{"location":"week-1/ce204-week-1/#activities-of-a-client","text":"Initializes itself Initiates a connection Sends messages Handles the following types of events originating from the server responds to messages handles server disconnection Must cleanly terminate","title":"Activities of a client"},{"location":"week-1/ce204-week-1/#threads-in-a-client-server-system","text":"","title":"Threads in a client-server system"},{"location":"week-1/ce204-week-1/#thin-versus-fat-client-systems","text":"Thin-client system (a) Client is made as small as possible Most of the work is done in the server. Client easy to download over the network Fat-client system (b) As much work as possible is delegated to the clients. Server can handle more clients","title":"Thin- versus fat-client systems"},{"location":"week-1/ce204-week-1/#communications-protocols","text":"The messages the client sends to the server form a language. The server has to be programmed to understand that language. The messages the server sends to the client also form a language. The client has to be programmed to understand that language. When a client and server are communicating, they are in effect having a conversation using these two languages The two languages and the rules of the conversation, taken together, are called the protocol","title":"Communications protocols"},{"location":"week-1/ce204-week-1/#tasks-to-perform-to-develop-client-server-applications","text":"Design the primary work to be performed by both client and server Design how the work will be distributed Design the details of the set of messages that will be sent Design the mechanism for Initializing Handling connections Sending and receiving messages Terminating","title":"Tasks to perform to develop client-server applications"},{"location":"week-1/ce204-week-1/#advantages-of-client-server-systems","text":"The work can be distributed among different machines The clients can access the server\u2019s functionality from a distance The client and server can be designed separately They can both be simpler There is a choice about where to keep data: All the data can be kept centrally at the server Data can be distributed among many different clients or servers The server can be accessed simultaneously by many clients Competing clients can be written to communicate with the same server, and vice-versa","title":"Advantages of client-server systems"},{"location":"week-1/ce204-week-1/#technology-needed-to-build-client-server-systems","text":"Internet Protocol (IP) Route messages from one computer to another Long messages are normally split up into small pieces Transmission Control Protocol (TCP) Handles connections between two computers Computers can then exchange many IP messages over a connection Assures that the messages have been satisfactorily received A host has an IP address and a host name Several servers can run on the same host. Each server is identified by a port number (0 to 65535). To initiate communication with a server, a client must know both the host name and the port number","title":"Technology Needed to Build Client-Server Systems"},{"location":"week-1/ce204-week-1/#establishing-a-connection-in-java","text":"The java.net package Permits the creation of a TCP/IP connection between two applications Before a connection can be established, the server must start listening to one of the ports: ServerSocket serverSocket = new ServerSocket ( port ); Socket clientSocket = serverSocket . accept (); For a client to connect to a server: Socket clientSocket = new Socket ( host , port );","title":"Establishing a connection in Java"},{"location":"week-1/ce204-week-1/#exchanging-information-in-java","text":"Each program uses an instance of InputStream to receive messages from the other program OutputStream to send messages to the other program These are found in package java.io output = clientSocket . getOutputStream (); input = clientSocket . getInputStream ();","title":"Exchanging information in Java"},{"location":"week-1/ce204-week-1/#sending-and-receiving-messages","text":"without any filters (raw bytes) output . write ( msg ); msg = input . read (); or using DataInputStream / DataOutputStream filters output . writeDouble ( msg ); msg = input . readDouble (); or using ObjectInputStream / ObjectOutputStream filters output . writeObject ( msg ); msg = input . readObject ();","title":"Sending and receiving messages"},{"location":"week-1/ce204-week-1/#the-object-client-server-framework-ocsf","text":"","title":"The Object Client-Server Framework (OCSF)"},{"location":"week-1/ce204-week-1/#using-ocsf","text":"Software engineers using OCSF never modify its three classes They: Create subclasses of the abstract classes in the framework Call public methods that are provided by the framework Override certain slot and hook methods (explicitly designed to be overridden)","title":"Using OCSF"},{"location":"week-1/ce204-week-1/#the-client-side","text":"Consists of a single class: AbstractClient Must be subclassed Any subclass must provide an implementation for handleMessageFromServer Takes appropriate action when a message is received from a server Implements the Runnable interface Has a run method which Contains a loop that executes for the lifetime of the thread","title":"The Client Side"},{"location":"week-1/ce204-week-1/#the-public-interface-of-abstractclient","text":"Controlling methods: openConnection closeConnection sendToServer Accessing methods: isConnected getHost setHost getPort setPort getInetAddress","title":"The public interface of AbstractClient"},{"location":"week-1/ce204-week-1/#the-callback-methods-of-abstractclient","text":"Methods that may be overridden: connectionEstablished connectionClosed Method that must be implemented: handleMessageFromServer","title":"The callback methods of AbstractClient"},{"location":"week-1/ce204-week-1/#using-abstractclient","text":"Create a subclass of AbstractClient Implement handleMessageFromServer slot method Write code that: Creates an instance of the new subclass Calls openConnection Sends messages to the server using the sendToServer service method Implement the connectionClosed callback Implement the connectionException callback","title":"Using AbstractClient"},{"location":"week-1/ce204-week-1/#internals-of-abstractclient","text":"Instance variables: A Socket which keeps all the information about the connection to the server Two streams, an ObjectOutputStream and an ObjectInputStream A Thread that runs using AbstractClient\u2019s run method Two variables storing the host and port of the server","title":"Internals of AbstractClient"},{"location":"week-1/ce204-week-1/#the-server-side","text":"Two classes: One for the thread which listens for new connections ( AbstractServer ) One for the threads that handle the connections to clients ( ConnectionToClient )","title":"The Server Side"},{"location":"week-1/ce204-week-1/#the-public-interface-of-abstractserver","text":"Controlling methods: listen stopListening close sendToAllClients Accessing methods: isListening getClientConnections getPort setPort setBacklog","title":"The public interface of AbstractServer"},{"location":"week-1/ce204-week-1/#the-callback-methods-of-abstractserver","text":"Methods that may be overridden: serverStarted clientConnected clientDisconnected clientException serverStopped listeningException serverClosed Method that must be implemented: handleMessageFromClient","title":"The callback methods of AbstractServer"},{"location":"week-1/ce204-week-1/#the-public-interface-of-connectiontoclient","text":"Controlling methods: sendToClient close Accessing methods: getInetAddress setInfo getInfo","title":"The public interface of ConnectionToClient"},{"location":"week-1/ce204-week-1/#using-abstractserver-and-connectiontoclient","text":"Create a subclass of AbstractServer Implement the slot method handleMessageFromClient Write code that: Creates an instance of the subclass of AbstractServer Calls the listen method Sends messages to clients, using: the getClientConnections and sendToClient service methods or sendToAllClients Implement one or more of the other callback methods","title":"Using AbstractServer and ConnectionToClient"},{"location":"week-1/ce204-week-1/#internals-of-abstractserver-and-connectiontoclient","text":"The setInfo and getInfo methods make use of a Java class called HashMap Many methods in the server side are synchronized The collection of instances of ConnectionToClient is stored using a special class called ThreadGroup The server must pause from listening every 500ms to see if the stopListening method has been called if not, then it resumes listening immediately","title":"Internals of AbstractServer and ConnectionToClient"},{"location":"week-1/ce204-week-1/#an-instant-messaging-application-simplechat","text":"ClientConsole can eventually be replaced by ClientGUI","title":"An Instant Messaging Application: SimpleChat"},{"location":"week-1/ce204-week-1/#the-server","text":"EchoServer is a subclass of AbstractServer The main method creates a new instance and starts it It listens for clients and handles connections until the server is stopped The three callback methods just print out a message to the user handleMessageFromClient , serverStarted and serverStopped The slot method handleMessageFromClient calls sendToAllClients This echoes any messages","title":"The server"},{"location":"week-1/ce204-week-1/#key-code-in-echoserver","text":"public void handleMessageFromClient ( Object msg , ConnectionToClient client ) { System . out . println ( \"Message received: \" + msg + \" from \" + client ); this . sendToAllClients ( msg ); }","title":"Key code in  EchoServer"},{"location":"week-1/ce204-week-1/#the-client","text":"When the client program starts, it creates instances of two classes: ChatClient A subclass of AbstractClient Overrides handleMessageFromServer This calls the display method of the user interface ClientConsole User interface class that implements the interface ChatIF Hence implements display which outputs to the console Accepts user input by calling accept in its run method Sends all user input to the ChatClient by calling its handleMessageFromClientUI This, in turn, calls sendToServer","title":"The client"},{"location":"week-1/ce204-week-1/#key-code-in-chatclient","text":"public void handleMessageFromClientUI ( String message ) { try { sendToServer ( message ); } catch ( IOException e ) { clientUI . display ( \"Could not send message. \" + \"Terminating client.\" ); quit (); } }","title":"Key code in ChatClient"},{"location":"week-1/ce204-week-1/#key-code-in-chatclient_1","text":"public void handleMessageFromServer ( Object msg ) { clientUI . display ( msg . toString ()); }","title":"Key code in ChatClient"},{"location":"week-1/ce204-week-1/#risks-when-reusing-technology","text":"Poor quality reusable components Ensure that the developers of the reusable technology: follow good software engineering practices are willing to provide active support Compatibility not maintained Avoid obscure features Only re-use technology that others are also re-using","title":"Risks when reusing technology"},{"location":"week-1/ce204-week-1/#risks-when-developing-reusable-technology","text":"Investment uncertainty Plan the development of the reusable technology, just as if it was a product for a client The \"not invented here syndrome\" Build confidence in the reusable technology by: Guaranteeing support Ensuring it is of high quality Responding to the needs of its users","title":"Risks when developing reusable technology"},{"location":"week-1/ce204-week-1/#risks-when-developing-reusable-technology_1","text":"Competition The reusable technology must be as useful and as high quality as possible Divergence (tendency of various groups to change technology in different ways) Design it to be general enough, test it and review it in advance","title":"Risks when developing reusable technology"},{"location":"week-1/ce204-week-1/#risks-when-adopting-a-client-server-approach","text":"Security Security is a big problem with no perfect solutions: consider the use of encryption, firewalls, ... Need for adaptive maintenance Ensure that all software is forward and backward compatible with other versions of clients and servers","title":"Risks when adopting a client-server approach"},{"location":"week-1/ce204-week-1/#java-classes-and-objects","text":"","title":"Java Classes and Objects"},{"location":"week-1/ce204-week-1/#java-classes","text":"Java is an object-oriented programming language, so everything in java program must be based on the object concept. In a java programming language, the class concept defines the skeleton of an object.","title":"Java Classes"},{"location":"week-1/ce204-week-1/#java-classes_1","text":"The java class is a template of an object. The class defines the blueprint of an object. Every class in java forms a new data type. Once a class got created, we can generate as many objects as we want. Every class defines the properties and behaviors of an object. All the objects of a class have the same properties and behaviors that were defined in the class.","title":"Java Classes"},{"location":"week-1/ce204-week-1/#java-classes_2","text":"Every class of java programming language has the following characteristics. Identity - It is the name given to the class. State - Represents data values that are associated with an object. Behavior - Represents actions can be performed by an object.","title":"Java Classes"},{"location":"week-1/ce204-week-1/#java-classes_3","text":"","title":"Java Classes"},{"location":"week-1/ce204-week-1/#creating-a-class","text":"In java, we use the keyword class to create a class. A class in java contains properties as variables and behaviors as methods. Following is the syntax of class in the java. class < ClassName > { data members declaration ; methods defination ; } Here, fields (variables) and methods represent the state and behavior of the object respectively. fields are used to store data methods are used to perform some operations","title":"Creating a Class"},{"location":"week-1/ce204-week-1/#creating-a-class_1","text":"A class is a blueprint for the object. Before we create an object, we first need to define the class. We can think of the class as a sketch (prototype) of a house. It contains all the details about the floors, doors, windows, etc. Based on these descriptions we build the house. House is the object. Since many houses can be made from the same description, we can create many objects from a class.","title":"Creating a Class"},{"location":"week-1/ce204-week-1/#creating-a-class_2","text":"The ClassName must begin with an alphabet, and the Upper-case letter is preferred. The ClassName must follow all naming rules.","title":"Creating a Class"},{"location":"week-1/ce204-week-1/#creating-a-class_3","text":"class Bicycle { // state or field private int gear = 5 ; // behavior or method public void braking () { System . out . println ( \"Working of Braking\" ); } } In the above example, we have created a class named Bicycle. It contains a field named gear and a method named braking().","title":"Creating a Class"},{"location":"week-1/ce204-week-1/#creating-a-class_4","text":"Here, Bicycle is a prototype. Now, we can create any number of bicycles using the prototype. And, all the bicycles will share the fields and methods of the prototype.","title":"Creating a Class"},{"location":"week-1/ce204-week-1/#creating-an-object","text":"In java, an object is an instance of a class. When an object of a class is created, the class is said to be instantiated. All the objects that are created using a single class have the same properties and methods. But the value of properties is different for every object. Following is the syntax of class in the java. < ClassName > < objectName > = new < ClassName > ( );","title":"Creating an Object"},{"location":"week-1/ce204-week-1/#creating-an-object_1","text":"The objectName must begin with an alphabet, and a Lower-case letter is preferred. The objectName must follow all naming rules.","title":"Creating an Object"},{"location":"week-1/ce204-week-1/#creating-an-object_2","text":"An object is called an instance of a class. For example, suppose Bicycle is a class then MountainBicycle, SportsBicycle, TouringBicycle, etc can be considered as objects of the class. className object = new className (); // for Bicycle class Bicycle sportsBicycle = new Bicycle (); Bicycle touringBicycle = new Bicycle (); We have used the new keyword along with the constructor of the class to create an object. Constructors are similar to methods and have the same name as the class. For example, Bicycle() is the constructor of the Bicycle class.","title":"Creating an Object"},{"location":"week-1/ce204-week-1/#creating-an-object_3","text":"Here, sportsBicycle and touringBicycle are the names of objects. We can use them to access fields and methods of the class.","title":"Creating an Object"},{"location":"week-1/ce204-week-1/#access-members-of-a-class","text":"sportsBicycle.gear - access the field gear sportsBicycle.braking() - access the method braking() class Bicycle { // field of class int gear = 5 ; // method of class void braking () { ... } } // create object Bicycle sportsBicycle = new Bicycle (); // access field and method sportsBicycle . gear ; sportsBicycle . braking ();","title":"Access Members of a Class"},{"location":"week-1/ce204-week-1/#example-java-class-and-objects","text":"class Lamp { // stores the value for light // true if light is on // false if light is off boolean isOn ; // method to turn on the light void turnOn () { isOn = true ; System . out . println ( \"Light on? \" + isOn ); } // method to turnoff the light void turnOff () { isOn = false ; System . out . println ( \"Light on? \" + isOn ); } }","title":"Example: Java Class and Objects"},{"location":"week-1/ce204-week-1/#example-java-class-and-objects_1","text":"class Main { public static void main ( String [] args ) { // create objects led and halogen Lamp led = new Lamp (); Lamp halogen = new Lamp (); // turn on the light by // calling method turnOn() led . turnOn (); // turn off the light by // calling method turnOff() halogen . turnOff (); } }","title":"Example: Java Class and Objects"},{"location":"week-1/ce204-week-1/#example-create-objects-inside-the-same-class","text":"Note that in the previous example, we have created objects inside another class and accessed the members from that class. However, we can also create objects inside the same class.","title":"Example: Create objects inside the same class"},{"location":"week-1/ce204-week-1/#example-create-objects-inside-the-same-class_1","text":"class Lamp { // stores the value for light // true if light is on // false if light is off boolean isOn ; // method to turn on the light void turnOn () { isOn = true ; System . out . println ( \"Light on? \" + isOn ); } public static void main ( String [] args ) { // create an object of Lamp Lamp led = new Lamp (); // access method using object led . turnOn (); } }","title":"Example: Create objects inside the same class"},{"location":"week-1/ce204-week-1/#java-methods","text":"","title":"Java Methods"},{"location":"week-1/ce204-week-1/#java-methods_1","text":"A method is a block of statements under a name that gets executes only when it is called. Every method is used to perform a specific task. The major advantage of methods is code re-usability (define the code once, and use it many times).","title":"Java Methods"},{"location":"week-1/ce204-week-1/#java-methods_2","text":"In a java programming language, a method defined as a behavior of an object. That means, every method in java must belong to a class. Every method in java must be declared inside a class.","title":"Java Methods"},{"location":"week-1/ce204-week-1/#java-methods_3","text":"Every method declaration has the following characteristics. returnType - Specifies the data type of a return value. name - Specifies a unique name to identify it. parameters - The data values it may accept or recieve. { } - Defienes the block belongs to the method.","title":"Java Methods"},{"location":"week-1/ce204-week-1/#creating-a-method","text":"A method is created inside the class and it may be created with any access specifier. However, specifying access specifier is optional. Following is the syntax for creating methods in java. class < ClassName > { < accessSpecifier > < returnType > < methodName > ( parameters ){ ... block of statements ; ... } }","title":"Creating a method"},{"location":"week-1/ce204-week-1/#creating-a-method_1","text":"modifier static returnType nameOfMethod ( parameter1 , parameter2 , ...) { // method body } modifier - It defines access types whether the method is public, private, and so on. static - If we use the static keyword, it can be accessed without creating objects.","title":"Creating a method"},{"location":"week-1/ce204-week-1/#creating-a-method_2","text":"The methodName must begin with an alphabet, and the Lower-case letter is preferred. The methodName must follow all naming rules. If you don't want to pass parameters, we ignore it. If a method defined with return type other than void, it must contain the return statement, otherwise, it may be ignored.","title":"Creating a method"},{"location":"week-1/ce204-week-1/#calling-a-method","text":"In java, a method call precedes with the object name of the class to which it belongs and a dot operator. It may call directly if the method defined with the static modifier. Every method call must be made, as to the method name with parentheses (), and it must terminate with a semicolon. < objectName > . < methodName > ( actualArguments );","title":"Calling a method"},{"location":"week-1/ce204-week-1/#calling-a-method_1","text":"The method call must pass the values to parameters if it has. If the method has a return type, we must provide the receiver.","title":"Calling a method"},{"location":"week-1/ce204-week-1/#calling-a-method-example","text":"import java.util.Scanner ; public class JavaMethodsExample { int sNo ; String name ; Scanner read = new Scanner ( System . in ); void readData () { System . out . print ( \"Enter Serial Number: \" ); sNo = read . nextInt (); System . out . print ( \"Enter the Name: \" ); name = read . next (); } static void showData ( int sNo , String name ) { System . out . println ( \"Hello, \" + name + \"! your serial number is \" + sNo ); } ... ... public static void main ( String [] args ) { JavaMethodsExample obj = new JavaMethodsExample (); obj . readData (); // method call using object showData ( obj . sNo , obj . name ); // method call without using object } }","title":"Calling a Method : Example"},{"location":"week-1/ce204-week-1/#variable-arguments-of-a-method","text":"In java, a method can be defined with a variable number of arguments. That means creating a method that receives any number of arguments of the same data type. < returnType > < methodName > ( dataType ... parameterName );","title":"Variable arguments of a method"},{"location":"week-1/ce204-week-1/#variable-arguments-of-a-method-example","text":"public class JavaMethodWithVariableArgs { void diaplay ( int ... list ) { System . out . println ( \"\\nNumber of arguments: \" + list . length ); for ( int i : list ) { System . out . print ( i + \"\\t\" ); } } ...","title":"Variable arguments of a method : Example"},{"location":"week-1/ce204-week-1/#variable-arguments-of-a-method-example_1","text":"... public static void main ( String [] args ) { JavaMethodWithVariableArgs obj = new JavaMethodWithVariableArgs (); obj . diaplay ( 1 , 2 ); obj . diaplay ( 10 , 20 , 30 , 40 , 50 ); } }","title":"Variable arguments of a method : Example"},{"location":"week-1/ce204-week-1/#java-normal-method-example","text":"class Main { // create a method public int addNumbers ( int a , int b ) { int sum = a + b ; // return value return sum ; } public static void main ( String [] args ) { int num1 = 25 ; int num2 = 15 ; // create an object of Main Main obj = new Main (); // calling method int result = obj . addNumbers ( num1 , num2 ); System . out . println ( \"Sum is: \" + result ); } }","title":"Java Normal Method Example"},{"location":"week-1/ce204-week-1/#java-static-method-example","text":"class Main { // create a method public static int square ( int num ) { // return statement return num * num ; } public static void main ( String [] args ) { int result ; // call the method // store returned value to result result = square ( 10 ); System . out . println ( \"Squared value of 10 is: \" + result ); } }","title":"Java Static Method Example"},{"location":"week-1/ce204-week-1/#java-method-parameters","text":"class Main { // method with no parameter public void display1 () { System . out . println ( \"Method without parameter\" ); } // method with single parameter public void display2 ( int a ) { System . out . println ( \"Method with a single parameter: \" + a ); } public static void main ( String [] args ) { // create an object of Main Main obj = new Main (); // calling method with no parameter obj . display1 (); // calling method with the single parameter obj . display2 ( 24 ); } }","title":"Java Method Parameters"},{"location":"week-1/ce204-week-1/#java-method-overloading","text":"","title":"Java Method Overloading"},{"location":"week-1/ce204-week-1/#java-method-overloading_1","text":"two or more methods may have the same name if they differ in parameters (different number of parameters, different types of parameters, or both). These methods are called overloaded methods and this feature is called method overloading.","title":"Java Method Overloading"},{"location":"week-1/ce204-week-1/#java-method-overloading_2","text":"void func () { ... } void func ( int a ) { ... } float func ( double a ) { ... } float func ( int a , float b ) { ... } Note : The return types of the above methods are not the same. It is because method overloading is not associated with return types. Overloaded methods may have the same or different return types, but they must differ in parameters.","title":"Java Method Overloading"},{"location":"week-1/ce204-week-1/#why-method-overloading","text":"Suppose, you have to perform the addition of given numbers but there can be any number of arguments (let\u2019s say either 2 or 3 arguments for simplicity). In order to accomplish the task, you can create two methods sum2num(int, int) and sum3num(int, int, int) for two and three parameters respectively. However, other programmers, as well as you in the future may get confused as the behavior of both methods are the same but they differ by name. The better way to accomplish this task is by overloading methods. And, depending upon the argument passed, one of the overloaded methods is called. This helps to increase the readability of the program.","title":"Why method overloading?"},{"location":"week-1/ce204-week-1/#how-to-perform-method-overloading-in-java","text":"Overloading by changing the number of parameters class MethodOverloading { private static void display ( int a ){ System . out . println ( \"Arguments: \" + a ); } private static void display ( int a , int b ){ System . out . println ( \"Arguments: \" + a + \" and \" + b ); } public static void main ( String [] args ) { display ( 1 ); display ( 1 , 4 ); } }","title":"How to perform method overloading in Java?"},{"location":"week-1/ce204-week-1/#how-to-perform-method-overloading-in-java_1","text":"Method Overloading by changing the data type of parameters class MethodOverloading { // this method accepts int private static void display ( int a ){ System . out . println ( \"Got Integer data.\" ); } // this method accepts String object private static void display ( String a ){ System . out . println ( \"Got String object.\" ); } public static void main ( String [] args ) { display ( 1 ); display ( \"Hello\" ); } }","title":"How to perform method overloading in Java?"},{"location":"week-1/ce204-week-1/#java-overloading-example","text":"class HelperService { private String formatNumber ( int value ) { return String . format ( \"%d\" , value ); } private String formatNumber ( double value ) { return String . format ( \"%.3f\" , value ); } private String formatNumber ( String value ) { return String . format ( \"%.2f\" , Double . parseDouble ( value )); } public static void main ( String [] args ) { HelperService hs = new HelperService (); System . out . println ( hs . formatNumber ( 500 )); System . out . println ( hs . formatNumber ( 89.9934 )); System . out . println ( hs . formatNumber ( \"550\" )); } }","title":"Java Overloading Example"},{"location":"week-1/ce204-week-1/#java-constructor","text":"","title":"Java Constructor"},{"location":"week-1/ce204-week-1/#java-constructor_1","text":"A constructor is a special method of a class that has the same name as the class name. The constructor gets executes automatically on object creation. It does not require the explicit method call. A constructor may have parameters and access specifiers too. In java, if you do not provide any constructor the compiler automatically creates a default constructor.","title":"Java Constructor"},{"location":"week-1/ce204-week-1/#java-constructor_2","text":"A constructor can not have return value. public class ConstructorExample { ConstructorExample () { System . out . println ( \"Object created!\" ); } public static void main ( String [] args ) { ConstructorExample obj1 = new ConstructorExample (); ConstructorExample obj2 = new ConstructorExample (); } }","title":"Java Constructor"},{"location":"week-1/ce204-week-1/#types-of-constructor","text":"In Java, constructors can be divided into 3 types: No-Arg Constructor Parameterized Constructor Default Constructor","title":"Types of Constructor"},{"location":"week-1/ce204-week-1/#java-no-arg-constructors","text":"Java private no-arg constructor class Main { int i ; // constructor with no parameter private Main () { i = 5 ; System . out . println ( \"Constructor is called\" ); } public static void main ( String [] args ) { // calling the constructor without any parameter Main obj = new Main (); System . out . println ( \"Value of i: \" + obj . i ); } }","title":"Java No-Arg Constructors"},{"location":"week-1/ce204-week-1/#java-no-arg-constructors_1","text":"Java public no-arg constructor class Company { String name ; // public constructor public Company () { name = \"My Company\" ; } } class Main { public static void main ( String [] args ) { // object is created in another class Company obj = new Company (); System . out . println ( \"Company name = \" + obj . name ); } }","title":"Java No-Arg Constructors"},{"location":"week-1/ce204-week-1/#java-parameterized-constructor","text":"class Main { String languages ; // constructor accepting single value Main ( String lang ) { languages = lang ; System . out . println ( languages + \" Programming Language\" ); } public static void main ( String [] args ) { // call constructor by passing a single value Main obj1 = new Main ( \"Java\" ); Main obj2 = new Main ( \"Python\" ); Main obj3 = new Main ( \"C\" ); } }","title":"Java Parameterized Constructor"},{"location":"week-1/ce204-week-1/#java-default-constructor","text":"class Main { int a ; boolean b ; public static void main ( String [] args ) { // A default constructor is called Main obj = new Main (); System . out . println ( \"Default Value:\" ); System . out . println ( \"a = \" + obj . a ); System . out . println ( \"b = \" + obj . b ); } }","title":"Java Default Constructor"},{"location":"week-1/ce204-week-1/#java-default-values","text":"The default constructor initializes any uninitialized instance variables with default values. Type \\(\\Longrightarrow\\) Default Value boolean \\(\\Longrightarrow\\) false byte \\(\\Longrightarrow\\) 0 short \\(\\Longrightarrow\\) 0 int \\(\\Longrightarrow\\) 0 long \\(\\Longrightarrow\\) 0L char \\(\\Longrightarrow\\) \\u0000 float \\(\\Longrightarrow\\) 0.0f double \\(\\Longrightarrow\\) 0.0d object \\(\\Longrightarrow\\) Reference null","title":"Java Default Values"},{"location":"week-1/ce204-week-1/#java-default-constructor-equivalent","text":"class Main { int a ; boolean b ; // a private constructor private Main () { a = 0 ; b = false ; } public static void main ( String [] args ) { // call the constructor Main obj = new Main (); System . out . println ( \"Default Value:\" ); System . out . println ( \"a = \" + obj . a ); System . out . println ( \"b = \" + obj . b ); } }","title":"Java Default Constructor Equivalent"},{"location":"week-1/ce204-week-1/#constructors-overloading-in-java","text":"class Main { String language ; // constructor with no parameter Main () { this . language = \"Java\" ; } // constructor with a single parameter Main ( String language ) { this . language = language ; } public void getName () { System . out . println ( \"Programming Langauage: \" + this . language ); } ...","title":"Constructors Overloading in Java"},{"location":"week-1/ce204-week-1/#constructors-overloading-in-java_1","text":"... public static void main ( String [] args ) { // call constructor with no parameter Main obj1 = new Main (); // call constructor with a single parameter Main obj2 = new Main ( \"Python\" ); obj1 . getName (); obj2 . getName (); } }","title":"Constructors Overloading in Java"},{"location":"week-1/ce204-week-1/#java-inheritance","text":"","title":"Java Inheritance"},{"location":"week-1/ce204-week-1/#inheritance-concept","text":"The inheritance is a very useful and powerful concept of object-oriented programming. In java, using the inheritance concept, we can use the existing features of one class in another class. - The inheritance provides a greate advantage called code re-usability. With the help of code re-usability, the commonly used code in an application need not be written again and again.","title":"Inheritance Concept"},{"location":"week-1/ce204-week-1/#inheritance-concept_1","text":"","title":"Inheritance Concept"},{"location":"week-1/ce204-week-1/#inheritance-concept_2","text":"The inheritance is the process of acquiring the properties of one class to another class.","title":"Inheritance Concept"},{"location":"week-1/ce204-week-1/#inheritance-basics","text":"In inheritance, we use the terms like parent class, child class, base class, derived class, superclass, and subclass.","title":"Inheritance Basics"},{"location":"week-1/ce204-week-1/#inheritance-basics_1","text":"The Parent class is the class which provides features to another class. The parent class is also known as Base class or Superclass . The Child class is the class which receives features from another class. The child class is also known as the Derived Class or Subclass .","title":"Inheritance Basics"},{"location":"week-1/ce204-week-1/#inheritance-basics_2","text":"In the inheritance, the child class acquires the features from its parent class. But the parent class never acquires the features from its child class.","title":"Inheritance Basics"},{"location":"week-1/ce204-week-1/#inheritance-basics_3","text":"There are five types of inheritances, and they are as follows. Simple Inheritance (or) Single Inheritance Multiple Inheritance Multi-Level Inheritance Hierarchical Inheritance Hybrid Inheritance","title":"Inheritance Basics"},{"location":"week-1/ce204-week-1/#inheritance-basics_4","text":"Simple Inheritance (or) Single Inheritance","title":"Inheritance Basics"},{"location":"week-1/ce204-week-1/#inheritance-basics_5","text":"Multiple Inheritance","title":"Inheritance Basics"},{"location":"week-1/ce204-week-1/#inheritance-basics_6","text":"Multi-Level Inheritance","title":"Inheritance Basics"},{"location":"week-1/ce204-week-1/#inheritance-basics_7","text":"Hierarchical Inheritance","title":"Inheritance Basics"},{"location":"week-1/ce204-week-1/#inheritance-basics_8","text":"Hybrid Inheritance","title":"Inheritance Basics"},{"location":"week-1/ce204-week-1/#inheritance-basics_9","text":"The java programming language does not support multiple inheritance type. However, it provides an alternate with the concept of interfaces .","title":"Inheritance Basics"},{"location":"week-1/ce204-week-1/#creating-child-class-in-java","text":"In java, we use the keyword extends to create a child class. The following syntax used to create a child class in java. class < ChildClassName > extends < ParentClassName > { ... //Implementation of child class ... } In a java programming language, a class extends only one class. Extending multiple classes is not allowed in java.","title":"Creating Child Class in java"},{"location":"week-1/ce204-week-1/#single-inheritance-in-java","text":"In this type of inheritance, one child class derives from one parent class. class ParentClass { int a ; void setData ( int a ) { this . a = a ; } } class ChildClass extends ParentClass { void showData () { System . out . println ( \"Value of a is \" + a ); } }","title":"Single Inheritance in java"},{"location":"week-1/ce204-week-1/#single-inheritance-in-java_1","text":"public class SingleInheritance { public static void main ( String [] args ) { ChildClass obj = new ChildClass (); obj . setData ( 100 ); obj . showData (); } }","title":"Single Inheritance in java"},{"location":"week-1/ce204-week-1/#single-inheritance-in-java-ex-2","text":"class Animal { // field and method of the parent class String name ; public void eat () { System . out . println ( \"I can eat\" ); } } // inherit from Animal class Dog extends Animal { // new method in subclass public void display () { System . out . println ( \"My name is \" + name ); } }","title":"Single Inheritance in java (Ex-2)"},{"location":"week-1/ce204-week-1/#single-inheritance-in-java-ex-2_1","text":"","title":"Single Inheritance in java (Ex-2)"},{"location":"week-1/ce204-week-1/#class-main-public-static-void-mainstring-args-create-an-object-of-the-subclass-dog-labrador-new-dog-access-field-of-superclass-labradorname-rohu-labradordisplay-call-method-of-superclass-using-object-of-subclass-labradoreat","text":"","title":"class Main {\n  public static void main(String[] args) {\n\n    // create an object of the subclass\n    Dog labrador = new Dog();\n\n    // access field of superclass\n    labrador.name = &quot;Rohu&quot;;\n    labrador.display();\n\n    // call method of superclass\n    // using object of subclass\n    labrador.eat();\n\n  }\n}\n"},{"location":"week-1/ce204-week-1/#single-inheritance-in-java-ex-2_2","text":"","title":"Single Inheritance in java (Ex-2)"},{"location":"week-1/ce204-week-1/#single-inheritance-is-a-relationship","text":"In Java, inheritance is an is-a relationship. That is, we use inheritance only if there exists an is-a relationship between two classes. For example, Car is a Vehicle Orange is a Fruit Surgeon is a Doctor Dog is an Animal Here, Car can inherit from Vehicle, Orange can inherit from Fruit, and so on.","title":"Single Inheritance / is-a relationship"},{"location":"week-1/ce204-week-1/#multi-level-inheritance-in-java","text":"In this type of inheritance, the child class derives from a class which already derived from another class class ParentClass { int a ; void setData ( int a ) { this . a = a ; } }","title":"Multi-level Inheritance in java"},{"location":"week-1/ce204-week-1/#multi-level-inheritance-in-java_1","text":"class ChildClass extends ParentClass { void showData () { System . out . println ( \"Value of a is \" + a ); } } class ChildChildClass extends ChildClass { void display () { System . out . println ( \"Inside ChildChildClass!\" ); } }","title":"Multi-level Inheritance in java"},{"location":"week-1/ce204-week-1/#multi-level-inheritance-in-java_2","text":"","title":"Multi-level Inheritance in java"},{"location":"week-1/ce204-week-1/#public-class-multipleinheritance-public-static-void-mainstring-args-childchildclass-obj-new-childchildclass-objsetdata100-objshowdata-objdisplay","text":"","title":"public class MultipleInheritance {\n\n    public static void main(String[] args) {\n\n        ChildChildClass obj = new ChildChildClass();\n        obj.setData(100);\n        obj.showData();\n        obj.display();\n\n    }\n}\n"},{"location":"week-1/ce204-week-1/#hierarchical-inheritance-in-java","text":"In this type of inheritance, two or more child classes derive from one parent class.","title":"Hierarchical Inheritance in java"},{"location":"week-1/ce204-week-1/#class-parentclass-int-a-void-setdataint-a-thisa-a","text":"","title":"class ParentClass{\n    int a;\n    void setData(int a) {\n        this.a = a;\n    }\n}\n"},{"location":"week-1/ce204-week-1/#hierarchical-inheritance-in-java_1","text":"class ChildClass extends ParentClass { void showData () { System . out . println ( \"Inside ChildClass!\" ); System . out . println ( \"Value of a is \" + a ); } } class ChildClassToo extends ParentClass { void display () { System . out . println ( \"Inside ChildClassToo!\" ); System . out . println ( \"Value of a is \" + a ); } }","title":"Hierarchical Inheritance in java"},{"location":"week-1/ce204-week-1/#hierarchical-inheritance-in-java_2","text":"public class HierarchicalInheritance { public static void main ( String [] args ) { ChildClass child_obj = new ChildClass (); child_obj . setData ( 100 ); child_obj . showData (); ChildClassToo childToo_obj = new ChildClassToo (); childToo_obj . setData ( 200 ); childToo_obj . display (); } }","title":"Hierarchical Inheritance in java"},{"location":"week-1/ce204-week-1/#hybrid-inheritance-in-java","text":"The hybrid inheritance is the combination of more than one type of inheritance. We may use any combination as a single with multiple inheritances, multi-level with multiple inheritances, etc.,","title":"Hybrid Inheritance in java"},{"location":"week-1/ce204-week-1/#java-access-modifiers","text":"","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_1","text":"In Java, the access specifiers (also known as access modifiers) used to restrict the scope or accessibility of a class, constructor, variable, method or data member of class and interface.","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_2","text":"There are four access specifiers, and their list is below. default (or) no modifier public protected private","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_3","text":"In java, we can not employ all access specifiers on everything. The following table describes where we can apply the access specifiers.","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_4","text":"Let's look at the following example java code, which generates an error because a class does not allow private access specifier unless it is an inner class. private class Sample { ... }","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_5","text":"In java, the accessibility of the members of a class or interface depends on its access specifiers. The following table provides information about the visibility of both data members and methods.","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_6","text":"The public members can be accessed everywhere. The private members can be accessed only inside the same class. The protected members are accessible to every child class (same package or other packages). The default members are accessible within the same package but not outside the package.","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_7","text":"class ParentClass { int a = 10 ; public int b = 20 ; protected int c = 30 ; private int d = 40 ; void showData () { System . out . println ( \"Inside ParentClass\" ); System . out . println ( \"a = \" + a ); System . out . println ( \"b = \" + b ); System . out . println ( \"c = \" + c ); System . out . println ( \"d = \" + d ); } }","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_8","text":"class ChildClass extends ParentClass { void accessData () { System . out . println ( \"Inside ChildClass\" ); System . out . println ( \"a = \" + a ); System . out . println ( \"b = \" + b ); System . out . println ( \"c = \" + c ); //System.out.println(\"d = \" + d); // private member can't be accessed } }","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_9","text":"public class AccessModifiersExample { public static void main ( String [] args ) { ChildClass obj = new ChildClass (); obj . showData (); obj . accessData (); } }","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_10","text":"Default Access Modifier Here, the Logger class has the default access modifier package defaultpackage ; class Logger { void message (){ System . out . println ( \"This is a message\" ); } } the class is visible to all the classes that belong to the defaultPackage package However, if we try to use the Logger class in another class outside of defaultPackage, we will get a compilation error.","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_11","text":"Private Access Modifier When variables and methods are declared private, they cannot be accessed outside of the class class Data { // private variable private String name ; }","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_12","text":"Private Access Modifier public class Main { public static void main ( String [] main ){ // create an object of Data Data d = new Data (); // access private variable and field from another class d . name = \"My App\" ; } }","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_13","text":"Private Access Modifier When we run the program, we will get the following error Main.java:18: error: name has private access in Data d.name = \"My App\" ; ^","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_14","text":"Private Access Modifier if we need to access those private variables we can use the getters and setters method class Data { private String name ; // getter method public String getName () { return this . name ; } // setter method public void setName ( String name ) { this . name = name ; } }","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_15","text":"Private Access Modifier public class Main { public static void main ( String [] main ){ Data d = new Data (); // access the private variable using the getter and setter d . setName ( \"My App\" ); System . out . println ( d . getName ()); } }","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_16","text":"Private Access Modifier We cannot declare classes and interfaces private in Java. However, the nested classes can be declared private.","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_17","text":"Protected Access Modifier When methods and data members are declared protected, we can access them within the same package as well as from subclasses .","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_18","text":"Protected Access Modifier class Animal { // protected method protected void display () { System . out . println ( \"I am an animal\" ); } } class Dog extends Animal { public static void main ( String [] args ) { // create an object of Dog class Dog dog = new Dog (); // access protected method dog . display (); } }","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_19","text":"Protected Access Modifier (Ex-2) class Animal { protected String name ; protected void display () { System . out . println ( \"I am an animal.\" ); } } class Dog extends Animal { public void getInfo () { System . out . println ( \"My name is \" + name ); } }","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_20","text":"Protected Access Modifier (Ex-2) class Main { public static void main ( String [] args ) { // create an object of the subclass Dog labrador = new Dog (); // access protected field and method // using the object of subclass labrador . name = \"Rocky\" ; labrador . display (); labrador . getInfo (); } }","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_21","text":"Protected Access Modifier We cannot declare classes or interfaces protected in Java.","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#java-access-modifiers_22","text":"Public Access Modifier When methods, variables, classes, and so on are declared public, then we can access them from anywhere.","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#animaljava-file-public-class-public-class-animal-public-variable-public-int-legcount-public-method-public-void-display-systemoutprintlni-am-an-animal-systemoutprintlni-have-legcount-legs","text":"","title":"// Animal.java file\n// public class\npublic class Animal {\n    // public variable\n    public int legCount;\n\n    // public method\n    public void display() {\n        System.out.println(&quot;I am an animal.&quot;);\n        System.out.println(&quot;I have &quot; + legCount + &quot; legs.&quot;);\n    }\n}\n"},{"location":"week-1/ce204-week-1/#java-access-modifiers_23","text":"Public Access Modifier","title":"Java Access Modifiers"},{"location":"week-1/ce204-week-1/#mainjava-public-class-main-public-static-void-main-string-args-accessing-the-public-class-animal-animal-new-animal-accessing-the-public-variable-animallegcount-4-accessing-the-public-method-animaldisplay","text":"","title":"// Main.java\npublic class Main {\n    public static void main( String[] args ) {\n        // accessing the public class\n        Animal animal = new Animal();\n\n        // accessing the public variable\n        animal.legCount = 4;\n        // accessing the public method\n        animal.display();\n    }\n}\n"},{"location":"week-1/ce204-week-1/#java-constructors-in-inheritance","text":"","title":"Java Constructors in Inheritance"},{"location":"week-1/ce204-week-1/#java-constructors-in-inheritance_1","text":"It is very important to understand how the constructors get executed in the inheritance concept. In the inheritance, the constructors never get inherited to any child class. In java, the default constructor of a parent class called automatically by the constructor of its child class. That means when we create an object of the child class, the parent class constructor executed, followed by the child class constructor executed.","title":"Java Constructors in Inheritance"},{"location":"week-1/ce204-week-1/#java-constructors-in-inheritance-example","text":"class ParentClass { int a ; ParentClass (){ System . out . println ( \"Inside ParentClass constructor!\" ); } } class ChildClass extends ParentClass { ChildClass (){ System . out . println ( \"Inside ChildClass constructor!!\" ); } }","title":"Java Constructors in Inheritance - Example"},{"location":"week-1/ce204-week-1/#java-constructors-in-inheritance-example_1","text":"class ChildChildClass extends ChildClass { ChildChildClass (){ System . out . println ( \"Inside ChildChildClass constructor!!\" ); } } public class ConstructorInInheritance { public static void main ( String [] args ) { ChildChildClass obj = new ChildChildClass (); } }","title":"Java Constructors in Inheritance - Example"},{"location":"week-1/ce204-week-1/#java-constructors-in-inheritance_2","text":"if the parent class contains both default and parameterized constructor, then only the default constructor called automatically by the child class constructor","title":"Java Constructors in Inheritance"},{"location":"week-1/ce204-week-1/#java-constructors-in-inheritance-example_2","text":"class ParentClass { int a ; ParentClass ( int a ){ System . out . println ( \"Inside ParentClass parameterized constructor!\" ); this . a = a ; } ParentClass (){ System . out . println ( \"Inside ParentClass default constructor!\" ); } }","title":"Java Constructors in Inheritance - Example"},{"location":"week-1/ce204-week-1/#java-constructors-in-inheritance-example_3","text":"class ChildClass extends ParentClass { ChildClass (){ System . out . println ( \"Inside ChildClass constructor!!\" ); } } public class ConstructorInInheritance { public static void main ( String [] args ) { ChildClass obj = new ChildClass (); } }","title":"Java Constructors in Inheritance - Example"},{"location":"week-1/ce204-week-1/#java-constructors-in-inheritance_3","text":"The parameterized constructor of parent class must be called explicitly using the super keyword.","title":"Java Constructors in Inheritance"},{"location":"week-1/ce204-week-1/#method-overriding-in-java-inheritance","text":"class Animal { // method in the superclass public void eat () { System . out . println ( \"I can eat\" ); } }","title":"Method Overriding in Java Inheritance"},{"location":"week-1/ce204-week-1/#method-overriding-in-java-inheritance_1","text":"","title":"Method Overriding in Java Inheritance"},{"location":"week-1/ce204-week-1/#dog-inherits-animal-class-dog-extends-animal-overriding-the-eat-method-override-public-void-eat-systemoutprintlni-eat-dog-food-new-method-in-subclass-public-void-bark-systemoutprintlni-can-bark","text":"","title":"// Dog inherits Animal\nclass Dog extends Animal {\n\n  // overriding the eat() method\n  @Override\n  public void eat() {\n    System.out.println(&quot;I eat dog food&quot;);\n  }\n\n  // new method in subclass\n  public void bark() {\n    System.out.println(&quot;I can bark&quot;);\n  }\n}\n"},{"location":"week-1/ce204-week-1/#method-overriding-in-java-inheritance_2","text":"","title":"Method Overriding in Java Inheritance"},{"location":"week-1/ce204-week-1/#class-main-public-static-void-mainstring-args-create-an-object-of-the-subclass-dog-labrador-new-dog-call-the-eat-method-labradoreat-labradorbark","text":"","title":"class Main {\n  public static void main(String[] args) {\n\n    // create an object of the subclass\n    Dog labrador = new Dog();\n\n    // call the eat() method\n    labrador.eat();\n    labrador.bark();\n  }\n}\n"},{"location":"week-1/ce204-week-1/#method-overriding-in-java-inheritance_3","text":"In the above example, the eat() method is present in both the superclass Animal and the subclass Dog. Here, we have created an object labrador of Dog. Now when we call eat() using the object labrador, the method inside Dog is called. This is because the method inside the derived class overrides the method inside the base class.","title":"Method Overriding in Java Inheritance"},{"location":"week-1/ce204-week-1/#super-keyword-in-java-inheritance","text":"","title":"super Keyword in Java Inheritance"},{"location":"week-1/ce204-week-1/#super-keyword-in-java-inheritance_1","text":"the same method in the subclass overrides the method in superclass. In such a situation, the super keyword is used to call the method of the parent class from the method of the child class.","title":"super Keyword in Java Inheritance"},{"location":"week-1/ce204-week-1/#super-keyword-in-java-inheritance_2","text":"class Animal { // method in the superclass public void eat () { System . out . println ( \"I can eat\" ); } }","title":"super Keyword in Java Inheritance"},{"location":"week-1/ce204-week-1/#super-keyword-in-java-inheritance_3","text":"// Dog inherits Animal class Dog extends Animal { // overriding the eat() method @Override public void eat () { // call method of superclass super . eat (); System . out . println ( \"I eat dog food\" ); } // new method in subclass public void bark () { System . out . println ( \"I can bark\" ); } }","title":"super Keyword in Java Inheritance"},{"location":"week-1/ce204-week-1/#super-keyword-in-java-inheritance_4","text":"","title":"super Keyword in Java Inheritance"},{"location":"week-1/ce204-week-1/#class-main-public-static-void-mainstring-args-create-an-object-of-the-subclass-dog-labrador-new-dog-call-the-eat-method-labradoreat-labradorbark_1","text":"","title":"class Main {\n  public static void main(String[] args) {\n\n    // create an object of the subclass\n    Dog labrador = new Dog();\n\n    // call the eat() method\n    labrador.eat();\n    labrador.bark();\n  }\n}\n"},{"location":"week-1/ce204-week-1/#java-this-keyword","text":"","title":"Java this Keyword"},{"location":"week-1/ce204-week-1/#java-this-keyword_1","text":"In Java, this keyword is used to refer to the current object inside a method or a constructor","title":"Java this Keyword"},{"location":"week-1/ce204-week-1/#java-this-keyword_2","text":"","title":"Java this Keyword"},{"location":"week-1/ce204-week-1/#class-main-int-instvar-mainint-instvar-thisinstvar-instvar-systemoutprintlnthis-reference-this-public-static-void-mainstring-args-main-obj-new-main8-systemoutprintlnobject-reference-obj","text":"","title":"class Main {\n    int instVar;\n\n    Main(int instVar){\n        this.instVar = instVar;\n        System.out.println(&quot;this reference = &quot; + this);\n    }\n\n    public static void main(String[] args) {\n        Main obj = new Main(8);\n        System.out.println(&quot;object reference = &quot; + obj);\n    }\n}\n"},{"location":"week-1/ce204-week-1/#using-this-for-ambiguity-variable-names","text":"In Java, it is not allowed to declare two or more variables having the same name inside a scope (class scope or method scope). However, instance variables and parameters may have the same name.","title":"Using this for Ambiguity Variable Names"},{"location":"week-1/ce204-week-1/#using-this-for-ambiguity-variable-names_1","text":"WRONG class Main { int age ; Main ( int age ){ age = age ; } public static void main ( String [] args ) { Main obj = new Main ( 8 ); System . out . println ( \"obj.age = \" + obj . age ); } }","title":"Using this for Ambiguity Variable Names"},{"location":"week-1/ce204-week-1/#using-this-for-ambiguity-variable-names_2","text":"CORRECT class Main { int age ; Main ( int age ){ this . age = age ; } public static void main ( String [] args ) { Main obj = new Main ( 8 ); System . out . println ( \"obj.age = \" + obj . age ); } }","title":"Using this for Ambiguity Variable Names"},{"location":"week-1/ce204-week-1/#this-with-getters-and-setters","text":"Another common use of this keyword is in setters and getters methods of a class class Main { String name ; // setter method void setName ( String name ) { this . name = name ; } // getter method String getName (){ return this . name ; } ...","title":"this with Getters and Setters"},{"location":"week-1/ce204-week-1/#this-with-getters-and-setters_1","text":"... public static void main ( String [] args ) { Main obj = new Main (); // calling the setter and the getter method obj . setName ( \"Toshiba\" ); System . out . println ( \"obj.name: \" + obj . getName ()); } }","title":"this with Getters and Setters"},{"location":"week-1/ce204-week-1/#using-this-in-constructor-overloading","text":"While working with constructor overloading, we might have to invoke one constructor from another constructor. In such a case, we cannot call the constructor explicitly. Instead, we have to use this keyword.","title":"Using this in Constructor Overloading"},{"location":"week-1/ce204-week-1/#using-this-in-constructor-overloading_1","text":"","title":"Using this in Constructor Overloading"},{"location":"week-1/ce204-week-1/#class-complex-private-int-a-b-constructor-with-2-parameters-private-complex-int-i-int-j-thisa-i-thisb-j-constructor-with-single-parameter-private-complexint-i-invokes-the-constructor-with-2-parameters-thisi-i-constructor-with-no-parameter-private-complex-invokes-the-constructor-with-single-parameter-this0","text":"","title":"class Complex {\n\n    private int a, b;\n\n    // constructor with 2 parameters\n    private Complex( int i, int j ){\n        this.a = i;\n        this.b = j;\n    }\n\n    // constructor with single parameter\n    private Complex(int i){\n        // invokes the constructor with 2 parameters\n        this(i, i); \n    }\n\n    // constructor with no parameter\n    private Complex(){\n        // invokes the constructor with single parameter\n        this(0);\n    }\n    ...\n"},{"location":"week-1/ce204-week-1/#using-this-in-constructor-overloading_2","text":"@Override public String toString (){ return this . a + \" + \" + this . b + \"i\" ; } public static void main ( String [] args ) { // creating object of Complex class // calls the constructor with 2 parameters Complex c1 = new Complex ( 2 , 3 ); // calls the constructor with a single parameter Complex c2 = new Complex ( 3 ); // calls the constructor with no parameters Complex c3 = new Complex (); // print objects System . out . println ( c1 ); System . out . println ( c2 ); System . out . println ( c3 ); } }","title":"Using this in Constructor Overloading"},{"location":"week-1/ce204-week-1/#using-this-in-constructor-overloading_3","text":"In the example, we have used this keyword, to call the constructor Complex(int i, int j) from the constructor Complex(int i) to call the constructor Complex(int i) from the constructor Complex() the line, System.out.println(c1); process, the toString() is called Since we override the toString() method inside our class, we get the output according to that method.","title":"Using this in Constructor Overloading"},{"location":"week-1/ce204-week-1/#using-this-in-constructor-overloading_4","text":"One of the huge advantages of this() is to reduce the amount of duplicate code. However, we should be always careful while using this(). This is because calling constructor from another constructor adds overhead and it is a slow process. Another huge advantage of using this() is to reduce the amount of duplicate code.","title":"Using this in Constructor Overloading"},{"location":"week-1/ce204-week-1/#using-this-in-constructor-overloading_5","text":"Invoking one constructor from another constructor is called explicit constructor invocation.","title":"Using this in Constructor Overloading"},{"location":"week-1/ce204-week-1/#passing-this-as-an-argument","text":"We can use this keyword to pass the current object as an argument to a method","title":"Passing this as an Argument"},{"location":"week-1/ce204-week-1/#class-thisexample-declare-variables-int-x-int-y-thisexampleint-x-int-y-assign-values-of-variables-inside-constructor-thisx-x-thisy-y-value-of-x-and-y-before-calling-add-systemoutprintlnbefore-passing-this-to-addtwo-method-systemoutprintlnx-thisx-y-thisy-call-the-add-method-passing-this-as-argument-addthis-value-of-x-and-y-after-calling-add-systemoutprintlnafter-passing-this-to-addtwo-method-systemoutprintlnx-thisx-y-thisy-void-addthisexample-o-ox-2-oy-2","text":"","title":"class ThisExample {\n    // declare variables\n    int x;\n    int y;\n\n    ThisExample(int x, int y) {\n       // assign values of variables inside constructor\n        this.x = x;\n        this.y = y;\n\n        // value of x and y before calling add()\n        System.out.println(&quot;Before passing this to addTwo() method:&quot;);\n        System.out.println(&quot;x = &quot; + this.x + &quot;, y = &quot; + this.y);\n\n        // call the add() method passing this as argument\n        add(this);\n\n        // value of x and y after calling add()\n        System.out.println(&quot;After passing this to addTwo() method:&quot;);\n        System.out.println(&quot;x = &quot; + this.x + &quot;, y = &quot; + this.y);\n    }\n\n    void add(ThisExample o){\n        o.x += 2;\n        o.y += 2;\n    }\n}\n"},{"location":"week-1/ce204-week-1/#passing-this-as-an-argument_1","text":"","title":"Passing this as an Argument"},{"location":"week-1/ce204-week-1/#class-main-public-static-void-main-string-args-thisexample-obj-new-thisexample1-2","text":"","title":"class Main {\n    public static void main( String[] args ) {\n        ThisExample obj = new ThisExample(1, -2);\n    }\n}\n"},{"location":"week-1/ce204-week-1/#passing-this-as-an-argument_2","text":"In the example, inside the constructor ThisExample() , notice the line, add(this); Here, we are calling the add() method by passing this as an argument. Since this keyword contains the reference to the object obj of the class, we can change the value of x and y inside the add() method.","title":"Passing this as an Argument"},{"location":"week-1/ce204-week-1/#java-instanceof-operator","text":"","title":"Java instanceof Operator"},{"location":"week-1/ce204-week-1/#java-instanceof-operator_1","text":"The instanceof operator in Java is used to check whether an object is an instance of a particular class or not. Its syntax is objectName instanceOf className ;","title":"Java instanceof Operator"},{"location":"week-1/ce204-week-1/#example-java-instanceof","text":"","title":"Example: Java instanceof"},{"location":"week-1/ce204-week-1/#class-main-public-static-void-mainstring-args-create-a-variable-of-string-type-string-name-programiz-checks-if-name-is-instance-of-string-boolean-result1-name-instanceof-string-systemoutprintlnname-is-an-instance-of-string-result1-create-an-object-of-main-main-obj-new-main-checks-if-obj-is-an-instance-of-main-boolean-result2-obj-instanceof-main-systemoutprintlnobj-is-an-instance-of-main-result2","text":"","title":"class Main {\n\n  public static void main(String[] args) {\n\n    // create a variable of string type\n    String name = &quot;Programiz&quot;;\n\n    // checks if name is instance of String\n    boolean result1 = name instanceof String;\n    System.out.println(&quot;name is an instance of String: &quot; + result1);\n\n    // create an object of Main\n    Main obj = new Main();\n\n    // checks if obj is an instance of Main\n    boolean result2 = obj instanceof Main;\n    System.out.println(&quot;obj is an instance of Main: &quot; + result2);\n  }\n}\n"},{"location":"week-1/ce204-week-1/#example-java-instanceof_1","text":"In the example, we have created a variable name of the String type and an object obj of the Main class. Here, we have used the instanceof operator to check whether name and obj are instances of the String and Main class respectively. And, the operator returns true in both cases.","title":"Example: Java instanceof"},{"location":"week-1/ce204-week-1/#java-instanceof-during-inheritance","text":"We can use the instanceof operator to check if objects of the subclass is also an instance of the superclass.","title":"Java instanceof during Inheritance"},{"location":"week-1/ce204-week-1/#java-instanceof-during-inheritance_1","text":"// Java Program to check if an object of the subclass // is also an instance of the superclass // superclass class Animal { } // subclass class Dog extends Animal { } class Main { public static void main ( String [] args ) { // create an object of the subclass Dog d1 = new Dog (); // checks if d1 is an instance of the subclass System . out . println ( d1 instanceof Dog ); // prints true // checks if d1 is an instance of the superclass System . out . println ( d1 instanceof Animal ); // prints true } }","title":"Java instanceof during Inheritance"},{"location":"week-1/ce204-week-1/#java-instanceof-during-inheritance_2","text":"In the above example, we have created a subclass Dog that inherits from the superclass Animal. We have created an object d1 of the Dog class. Inside the print statement, notice the expression, d1 instanceof Animal Here, we are using the instanceof operator to check whether d1 is also an instance of the superclass Animal","title":"Java instanceof during Inheritance"},{"location":"week-1/ce204-week-1/#java-instanceof-in-interface","text":"The instanceof operator is also used to check whether an object of a class is also an instance of the interface implemented by the class","title":"Java instanceof in Interface"},{"location":"week-1/ce204-week-1/#java-instanceof-in-interface_1","text":"// Java program to check if an object of a class is also // an instance of the interface implemented by the class interface Animal { } class Dog implements Animal { }","title":"Java instanceof in Interface"},{"location":"week-1/ce204-week-1/#java-instanceof-in-interface_2","text":"class Main { public static void main ( String [] args ) { // create an object of the Dog class Dog d1 = new Dog (); // checks if the object of Dog // is also an instance of Animal System . out . println ( d1 instanceof Animal ); // returns true } }","title":"Java instanceof in Interface"},{"location":"week-1/ce204-week-1/#java-instanceof-in-interface_3","text":"In the example, the Dog class implements the Animal interface. Inside the print statement, notice the expression, d1 instanceof Animal Here, d1 is an instance of Dog class. The instanceof operator checks if d1 is also an instance of the interface Animal .","title":"Java instanceof in Interface"},{"location":"week-1/ce204-week-1/#java-instanceof-in-interface_4","text":"In Java, all the classes are inherited from the Object class. So, instances of all the classes are also an instance of the Object class. In the previous example, if we check, d1 instanceof Object The result will be true .","title":"Java instanceof in Interface"},{"location":"week-1/ce204-week-1/#references","text":"https://www.site.uottawa.ca/~tcl/seg2105/ https://cruise.umple.org/index.shtml https://cruise.umple.org/umple/GettingStarted.html Sanem Sar\u0131el Associate Professor, PhD BT503 Application Development with Java (Kemerburgaz University 2013-2015) How To Define The Project Scope The Foolproof Way","title":"References"},{"location":"week-1/ce204-week-1/#references_1","text":"BtechSmartClass Java OOP Concepts BtechSmartClass-Java Buzz Words JavatPoint-Cpp vs Java BtechSmartClass-Java Classes Programiz-Class Objects","title":"References"},{"location":"week-1/ce204-week-1/#references_2","text":"BtechSmartClass-Java-Methods-and-Classes Programiz-Methods Programiz-Method Overloading Programiz-Constructors BtechSmartClass-Java inheritance basics","title":"References"},{"location":"week-1/ce204-week-1/#references_3","text":"BtechSmartClass-Java access specifiers Programiz-Access Modifiers BtechSmartClass-java constructors in inheritance Programiz-Inheritance Programiz-this Keyword Programiz-instanceof \\(End-Of-Week-1-Module\\)","title":"References"},{"location":"week-10/ce204-week-10/","text":"CE204 Object-Oriented Programming \u00b6 Week-10 (TBD) \u00b6 Spring Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Title \u00b6 Outline \u00b6 TBD References \u00b6 TBD","title":"Week-10 (TBD)"},{"location":"week-10/ce204-week-10/#ce204-object-oriented-programming","text":"","title":"CE204 Object-Oriented Programming"},{"location":"week-10/ce204-week-10/#week-10-tbd","text":"","title":"Week-10 (TBD)"},{"location":"week-10/ce204-week-10/#spring-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Spring Semester, 2021-2022"},{"location":"week-10/ce204-week-10/#title","text":"","title":"Title"},{"location":"week-10/ce204-week-10/#outline","text":"TBD","title":"Outline"},{"location":"week-10/ce204-week-10/#references","text":"TBD","title":"References"},{"location":"week-11/ce204-week-11/","text":"CE204 Object-Oriented Programming \u00b6 Week-11 (TBD) \u00b6 Spring Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Title \u00b6 Outline \u00b6 TBD References \u00b6 TBD","title":"Week-11 (TBD)"},{"location":"week-11/ce204-week-11/#ce204-object-oriented-programming","text":"","title":"CE204 Object-Oriented Programming"},{"location":"week-11/ce204-week-11/#week-11-tbd","text":"","title":"Week-11 (TBD)"},{"location":"week-11/ce204-week-11/#spring-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Spring Semester, 2021-2022"},{"location":"week-11/ce204-week-11/#title","text":"","title":"Title"},{"location":"week-11/ce204-week-11/#outline","text":"TBD","title":"Outline"},{"location":"week-11/ce204-week-11/#references","text":"TBD","title":"References"},{"location":"week-12/ce204-week-12/","text":"CE204 Object-Oriented Programming \u00b6 Week-12 (TBD) \u00b6 Spring Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Title \u00b6 Outline \u00b6 TBD References \u00b6 TBD","title":"Week-12 (TBD)"},{"location":"week-12/ce204-week-12/#ce204-object-oriented-programming","text":"","title":"CE204 Object-Oriented Programming"},{"location":"week-12/ce204-week-12/#week-12-tbd","text":"","title":"Week-12 (TBD)"},{"location":"week-12/ce204-week-12/#spring-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Spring Semester, 2021-2022"},{"location":"week-12/ce204-week-12/#title","text":"","title":"Title"},{"location":"week-12/ce204-week-12/#outline","text":"TBD","title":"Outline"},{"location":"week-12/ce204-week-12/#references","text":"TBD","title":"References"},{"location":"week-13/ce204-week-13/","text":"CE204 Object-Oriented Programming \u00b6 Week-13 (TBD) \u00b6 Spring Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Title \u00b6 Outline \u00b6 TBD References \u00b6 TBD","title":"Week-13 (TBD)"},{"location":"week-13/ce204-week-13/#ce204-object-oriented-programming","text":"","title":"CE204 Object-Oriented Programming"},{"location":"week-13/ce204-week-13/#week-13-tbd","text":"","title":"Week-13 (TBD)"},{"location":"week-13/ce204-week-13/#spring-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Spring Semester, 2021-2022"},{"location":"week-13/ce204-week-13/#title","text":"","title":"Title"},{"location":"week-13/ce204-week-13/#outline","text":"TBD","title":"Outline"},{"location":"week-13/ce204-week-13/#references","text":"TBD","title":"References"},{"location":"week-14/ce204-week-14/","text":"CE204 Object-Oriented Programming \u00b6 Week-14 (TBD) \u00b6 Spring Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Title \u00b6 Outline \u00b6 TBD References \u00b6 TBD","title":"Week-14 (TBD)"},{"location":"week-14/ce204-week-14/#ce204-object-oriented-programming","text":"","title":"CE204 Object-Oriented Programming"},{"location":"week-14/ce204-week-14/#week-14-tbd","text":"","title":"Week-14 (TBD)"},{"location":"week-14/ce204-week-14/#spring-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Spring Semester, 2021-2022"},{"location":"week-14/ce204-week-14/#title","text":"","title":"Title"},{"location":"week-14/ce204-week-14/#outline","text":"TBD","title":"Outline"},{"location":"week-14/ce204-week-14/#references","text":"TBD","title":"References"},{"location":"week-15/ce204-week-15/","text":"CE204 Object-Oriented Programming \u00b6 Week-15 (TBD) \u00b6 Spring Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Title \u00b6 Outline \u00b6 TBD References \u00b6 TBD","title":"Week-15 (TBD)"},{"location":"week-15/ce204-week-15/#ce204-object-oriented-programming","text":"","title":"CE204 Object-Oriented Programming"},{"location":"week-15/ce204-week-15/#week-15-tbd","text":"","title":"Week-15 (TBD)"},{"location":"week-15/ce204-week-15/#spring-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Spring Semester, 2021-2022"},{"location":"week-15/ce204-week-15/#title","text":"","title":"Title"},{"location":"week-15/ce204-week-15/#outline","text":"TBD","title":"Outline"},{"location":"week-15/ce204-week-15/#references","text":"TBD","title":"References"},{"location":"week-16/ce204-week-16-final/","text":"CE204 Object-Oriented Programming \u00b6 Week-16 (Final) \u00b6 Spring Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Title \u00b6 Outline \u00b6 TBD References \u00b6 TBD","title":"Week-16 (Final)"},{"location":"week-16/ce204-week-16-final/#ce204-object-oriented-programming","text":"","title":"CE204 Object-Oriented Programming"},{"location":"week-16/ce204-week-16-final/#week-16-final","text":"","title":"Week-16 (Final)"},{"location":"week-16/ce204-week-16-final/#spring-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Spring Semester, 2021-2022"},{"location":"week-16/ce204-week-16-final/#title","text":"","title":"Title"},{"location":"week-16/ce204-week-16-final/#outline","text":"TBD","title":"Outline"},{"location":"week-16/ce204-week-16-final/#references","text":"TBD","title":"References"},{"location":"week-2/ce204-week-2/","text":"CE204 Object-Oriented Programming \u00b6 Week-2 (OOP with Java-II) \u00b6 Spring Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX OOP with Java-II \u00b6 Outline (1) \u00b6 Java super Keyword Java final Keyword Java Polymorphism / Encapsulation Java Method Overriding Java Nested Inner Class Java Static Class Java Anonymous Class Outline (2) \u00b6 Java Enums / Enum-Constructor / Enum-String Java Abstract Class Java Object Class Java Forms of Inheritance Java Benefits and Costs of Inheritance Java Packages Java Access Protection in Packages Java super keyword \u00b6 Java super keyword \u00b6 In java, super is a keyword used to refers to the parent class object . The super keyword came into existence to solve the naming conflicts in the inheritance. When both parent class and child class have members with the same name, then the super keyword is used to refer to the parent class version. Java super keyword \u00b6 In another word, The super keyword in Java is used in subclasses to access superclass members (attributes, constructors and methods). Java super keyword \u00b6 In java, the super keyword is used for the following purposes. To refer parent class data members To refer parent class methods To call parent class constructor Java super keyword \u00b6 To call methods of the superclass that is overridden in the subclass. To access attributes (fields) of the superclass if both superclass and subclass have attributes with the same name. To explicitly call superclass no-arg (default) or parameterized constructor from the subclass constructor. Java super keyword \u00b6 The super keyword is used inside the child class only. super to refer parent class data members \u00b6 When both parent class and child class have data members with the same name, then the super keyword is used to refer to the parent class data member from child class. super to refer parent class data members \u00b6 class ParentClass { int num = 10 ; } class ChildClass extends ParentClass { int num = 20 ; void showData () { System . out . println ( \"Inside the ChildClass\" ); System . out . println ( \"ChildClass num = \" + num ); System . out . println ( \"ParentClass num = \" + super . num ); } } super to refer parent class data members \u00b6 public class SuperKeywordExample { public static void main ( String [] args ) { ChildClass obj = new ChildClass (); obj . showData (); System . out . println ( \"\\nInside the non-child class\" ); System . out . println ( \"ChildClass num = \" + obj . num ); //System.out.println(\"ParentClass num = \" + super.num); //super can't be used here } } super to refer parent class method \u00b6 When both parent class and child class have method with the same name, then the super keyword is used to refer to the parent class method from child class. super to refer parent class method \u00b6 class ParentClass { int num1 = 10 ; void showData () { System . out . println ( \"\\nInside the ParentClass showData method\" ); System . out . println ( \"ChildClass num = \" + num1 ); } } super to refer parent class method \u00b6 class ChildClass extends ParentClass { int num2 = 20 ; void showData () { System . out . println ( \"\\nInside the ChildClass showData method\" ); System . out . println ( \"ChildClass num = \" + num2 ); super . showData (); } } super to refer parent class method \u00b6 public class SuperKeywordExample { public static void main ( String [] args ) { ChildClass obj = new ChildClass (); obj . showData (); //super.showData(); // super can't be used here } } super to call parent class constructor \u00b6 When an object of child class is created, it automatically calls the parent class default-constructor before it's own. But, the parameterized constructor of parent class must be called explicitly using the super keyword inside the child class constructor. super to call parent class constructor \u00b6 class ParentClass { int num1 ; ParentClass (){ System . out . println ( \"\\nInside the ParentClass default constructor\" ); num1 = 10 ; } ParentClass ( int value ){ System . out . println ( \"\\nInside the ParentClass parameterized constructor\" ); num1 = value ; } } super to call parent class constructor \u00b6 class ChildClass extends ParentClass { int num2 ; ChildClass (){ super ( 100 ); System . out . println ( \"\\nInside the ChildClass constructor\" ); num2 = 200 ; } } super to call parent class constructor \u00b6 public class SuperKeywordExample { public static void main ( String [] args ) { ChildClass obj = new ChildClass (); } } super to call parent class constructor \u00b6 To call the parameterized constructor of the parent class, the super keyword must be the first statement inside the child class constructor, and we must pass the parameter values. Access Overridden Methods of the superclass \u00b6 If methods with the same name are defined in both superclass and subclass, the method in the subclass overrides the method in the superclass. This is called method overriding. Example 1: Method overriding \u00b6 class Animal { // overridden method public void display (){ System . out . println ( \"I am an animal\" ); } } Example 1: Method overriding \u00b6 class Dog extends Animal { // overriding method @Override public void display (){ System . out . println ( \"I am a dog\" ); } public void printMessage (){ display (); } } Example 1: Method overriding \u00b6 class Main { public static void main ( String [] args ) { Dog dog1 = new Dog (); dog1 . printMessage (); } } Example 1: Method overriding \u00b6 In this example, by making an object dog1 of Dog class, we can call its method printMessage() which then executes the display() statement. Since display() is defined in both the classes, the method of subclass Dog overrides the method of superclass Animal. Hence, the display() of the subclass is called. Example 1: Method overriding \u00b6 What if the overridden method of the superclass has to be called? \u00b6 We use super.display() if the overridden method display() of superclass Animal needs to be called. Example 2: super to Call Superclass Method \u00b6 class Animal { // overridden method public void display (){ System . out . println ( \"I am an animal\" ); } } Example 2: super to Call Superclass Method \u00b6 class Dog extends Animal { // overriding method @Override public void display (){ System . out . println ( \"I am a dog\" ); } public void printMessage (){ // this calls overriding method display (); // this calls overridden method super . display (); } } \u00b6 Example 2: super to Call Superclass Method \u00b6 class Main { public static void main ( String [] args ) { Dog dog1 = new Dog (); dog1 . printMessage (); } } \u00b6 Example 2: super to Call Superclass Method \u00b6 Access Attributes of the Superclass \u00b6 The superclass and subclass can have attributes with the same name. We use the super keyword to access the attribute of the superclass. Example 3: Access superclass attribute \u00b6 class Animal { protected String type = \"animal\" ; } class Dog extends Animal { public String type = \"mammal\" ; public void printType () { System . out . println ( \"I am a \" + type ); System . out . println ( \"I am an \" + super . type ); } } Example 3: Access superclass attribute \u00b6 class Main { public static void main ( String [] args ) { Dog dog1 = new Dog (); dog1 . printType (); } } Example 3: Access superclass attribute \u00b6 In this example, we have defined the same instance field type in both the superclass Animal and the subclass Dog . We then created an object dog1 of the Dog class. Then, the printType() method is called using this object. Inside the printType() function, type refers to the attribute of the subclass Dog . super.type refers to the attribute of the superclass Animal. Use of super() to access superclass constructor \u00b6 As we know, when an object of a class is created, its default constructor is automatically called. To explicitly call the superclass constructor from the subclass constructor, we use super() . It's a special form of the super keyword. super() can be used only inside the subclass constructor and must be the first statement. Example 4: Use of super() \u00b6 class Animal { // default or no-arg constructor of class Animal Animal () { System . out . println ( \"I am an animal\" ); } } Example 4: Use of super() \u00b6 class Dog extends Animal { // default or no-arg constructor of class Dog Dog () { // calling default constructor of the superclass super (); System . out . println ( \"I am a dog\" ); } } Example 4: Use of super() \u00b6 class Main { public static void main ( String [] args ) { Dog dog1 = new Dog (); } } Example 4: Use of super() \u00b6 when an object dog1 of Dog class is created, it automatically calls the default or no-arg constructor of that class. Inside the subclass constructor, the super() statement calls the constructor of the superclass and executes the statements inside it. Hence, we get the output I am an animal. Example 4: Use of super() \u00b6 The flow of the program then returns back to the subclass constructor and executes the remaining statements. Thus, I am a dog will be printed. However, using super() is not compulsory. Even if super() is not used in the subclass constructor, the compiler implicitly calls the default constructor of the superclass. Example 4: Use of super() \u00b6 So, why use redundant code if the compiler automatically invokes super()? It is required if the parameterized constructor (a constructor that takes arguments) of the superclass has to be called from the subclass constructor. The parameterized super() must always be the first statement in the body of the constructor of the subclass, otherwise, we get a compilation error. Example 5: Call Parameterized Constructor Using super() \u00b6 class Animal { // default or no-arg constructor Animal () { System . out . println ( \"I am an animal\" ); } // parameterized constructor Animal ( String type ) { System . out . println ( \"Type: \" + type ); } } Example 5: Call Parameterized Constructor Using super() \u00b6 class Dog extends Animal { // default constructor Dog () { // calling parameterized constructor of the superclass super ( \"Animal\" ); System . out . println ( \"I am a dog\" ); } } Example 5: Call Parameterized Constructor Using super() \u00b6 class Main { public static void main ( String [] args ) { Dog dog1 = new Dog (); } } Example 5: Call Parameterized Constructor Using super() \u00b6 If a parameterized constructor has to be called, we need to explicitly define it in the subclass constructor. Example 5: Call Parameterized Constructor Using super() \u00b6 Note that in the above example, we explicitly called the parameterized constructor super(\"Animal\"). The compiler does not call the default constructor of the superclass in this case. References \u00b6 BtechSmartClass-super Keyword Programiz-super Keyword BtechSmartClass-Java final Keyword Programiz-final Keyword BtechSmartClass-java Polymorphism Programiz-Polymorphism Programiz-Encapsulation BtechSmartClass-Java Method Overriding References \u00b6 Programiz-Method Overriding Programiz-Nested Inner Class Programiz-Static Class Programiz-Anonymous Class Programiz-enums Programiz-enum constructor Programiz-enum string BtechSmartClass-Java Abstract Class Programiz-Abstract Classes Methods References \u00b6 BtechSmartClass-Java Object class BtechSmartClass-Java Forms of Inheritance Programiz-Interfaces BtechSmartClass-Java Benefits and Costs of Inheritance BtechSmartClass-Java Defining Packages BtechSmartClass-Java Access Protection in Packages BtechSmartClass-Java Importing Packages \\(End-Of-Week-2-Module\\)","title":"Week-2 (TBD)"},{"location":"week-2/ce204-week-2/#ce204-object-oriented-programming","text":"","title":"CE204 Object-Oriented Programming"},{"location":"week-2/ce204-week-2/#week-2-oop-with-java-ii","text":"","title":"Week-2 (OOP with Java-II)"},{"location":"week-2/ce204-week-2/#spring-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Spring Semester, 2021-2022"},{"location":"week-2/ce204-week-2/#oop-with-java-ii","text":"","title":"OOP with Java-II"},{"location":"week-2/ce204-week-2/#outline-1","text":"Java super Keyword Java final Keyword Java Polymorphism / Encapsulation Java Method Overriding Java Nested Inner Class Java Static Class Java Anonymous Class","title":"Outline (1)"},{"location":"week-2/ce204-week-2/#outline-2","text":"Java Enums / Enum-Constructor / Enum-String Java Abstract Class Java Object Class Java Forms of Inheritance Java Benefits and Costs of Inheritance Java Packages Java Access Protection in Packages","title":"Outline (2)"},{"location":"week-2/ce204-week-2/#java-super-keyword","text":"","title":"Java super keyword"},{"location":"week-2/ce204-week-2/#java-super-keyword_1","text":"In java, super is a keyword used to refers to the parent class object . The super keyword came into existence to solve the naming conflicts in the inheritance. When both parent class and child class have members with the same name, then the super keyword is used to refer to the parent class version.","title":"Java super keyword"},{"location":"week-2/ce204-week-2/#java-super-keyword_2","text":"In another word, The super keyword in Java is used in subclasses to access superclass members (attributes, constructors and methods).","title":"Java super keyword"},{"location":"week-2/ce204-week-2/#java-super-keyword_3","text":"In java, the super keyword is used for the following purposes. To refer parent class data members To refer parent class methods To call parent class constructor","title":"Java super keyword"},{"location":"week-2/ce204-week-2/#java-super-keyword_4","text":"To call methods of the superclass that is overridden in the subclass. To access attributes (fields) of the superclass if both superclass and subclass have attributes with the same name. To explicitly call superclass no-arg (default) or parameterized constructor from the subclass constructor.","title":"Java super keyword"},{"location":"week-2/ce204-week-2/#java-super-keyword_5","text":"The super keyword is used inside the child class only.","title":"Java super keyword"},{"location":"week-2/ce204-week-2/#super-to-refer-parent-class-data-members","text":"When both parent class and child class have data members with the same name, then the super keyword is used to refer to the parent class data member from child class.","title":"super to refer parent class data members"},{"location":"week-2/ce204-week-2/#super-to-refer-parent-class-data-members_1","text":"class ParentClass { int num = 10 ; } class ChildClass extends ParentClass { int num = 20 ; void showData () { System . out . println ( \"Inside the ChildClass\" ); System . out . println ( \"ChildClass num = \" + num ); System . out . println ( \"ParentClass num = \" + super . num ); } }","title":"super to refer parent class data members"},{"location":"week-2/ce204-week-2/#super-to-refer-parent-class-data-members_2","text":"public class SuperKeywordExample { public static void main ( String [] args ) { ChildClass obj = new ChildClass (); obj . showData (); System . out . println ( \"\\nInside the non-child class\" ); System . out . println ( \"ChildClass num = \" + obj . num ); //System.out.println(\"ParentClass num = \" + super.num); //super can't be used here } }","title":"super to refer parent class data members"},{"location":"week-2/ce204-week-2/#super-to-refer-parent-class-method","text":"When both parent class and child class have method with the same name, then the super keyword is used to refer to the parent class method from child class.","title":"super to refer parent class method"},{"location":"week-2/ce204-week-2/#super-to-refer-parent-class-method_1","text":"class ParentClass { int num1 = 10 ; void showData () { System . out . println ( \"\\nInside the ParentClass showData method\" ); System . out . println ( \"ChildClass num = \" + num1 ); } }","title":"super to refer parent class method"},{"location":"week-2/ce204-week-2/#super-to-refer-parent-class-method_2","text":"class ChildClass extends ParentClass { int num2 = 20 ; void showData () { System . out . println ( \"\\nInside the ChildClass showData method\" ); System . out . println ( \"ChildClass num = \" + num2 ); super . showData (); } }","title":"super to refer parent class method"},{"location":"week-2/ce204-week-2/#super-to-refer-parent-class-method_3","text":"public class SuperKeywordExample { public static void main ( String [] args ) { ChildClass obj = new ChildClass (); obj . showData (); //super.showData(); // super can't be used here } }","title":"super to refer parent class method"},{"location":"week-2/ce204-week-2/#super-to-call-parent-class-constructor","text":"When an object of child class is created, it automatically calls the parent class default-constructor before it's own. But, the parameterized constructor of parent class must be called explicitly using the super keyword inside the child class constructor.","title":"super to call parent class constructor"},{"location":"week-2/ce204-week-2/#super-to-call-parent-class-constructor_1","text":"class ParentClass { int num1 ; ParentClass (){ System . out . println ( \"\\nInside the ParentClass default constructor\" ); num1 = 10 ; } ParentClass ( int value ){ System . out . println ( \"\\nInside the ParentClass parameterized constructor\" ); num1 = value ; } }","title":"super to call parent class constructor"},{"location":"week-2/ce204-week-2/#super-to-call-parent-class-constructor_2","text":"class ChildClass extends ParentClass { int num2 ; ChildClass (){ super ( 100 ); System . out . println ( \"\\nInside the ChildClass constructor\" ); num2 = 200 ; } }","title":"super to call parent class constructor"},{"location":"week-2/ce204-week-2/#super-to-call-parent-class-constructor_3","text":"public class SuperKeywordExample { public static void main ( String [] args ) { ChildClass obj = new ChildClass (); } }","title":"super to call parent class constructor"},{"location":"week-2/ce204-week-2/#super-to-call-parent-class-constructor_4","text":"To call the parameterized constructor of the parent class, the super keyword must be the first statement inside the child class constructor, and we must pass the parameter values.","title":"super to call parent class constructor"},{"location":"week-2/ce204-week-2/#access-overridden-methods-of-the-superclass","text":"If methods with the same name are defined in both superclass and subclass, the method in the subclass overrides the method in the superclass. This is called method overriding.","title":"Access Overridden Methods of the superclass"},{"location":"week-2/ce204-week-2/#example-1-method-overriding","text":"class Animal { // overridden method public void display (){ System . out . println ( \"I am an animal\" ); } }","title":"Example 1: Method overriding"},{"location":"week-2/ce204-week-2/#example-1-method-overriding_1","text":"class Dog extends Animal { // overriding method @Override public void display (){ System . out . println ( \"I am a dog\" ); } public void printMessage (){ display (); } }","title":"Example 1: Method overriding"},{"location":"week-2/ce204-week-2/#example-1-method-overriding_2","text":"class Main { public static void main ( String [] args ) { Dog dog1 = new Dog (); dog1 . printMessage (); } }","title":"Example 1: Method overriding"},{"location":"week-2/ce204-week-2/#example-1-method-overriding_3","text":"In this example, by making an object dog1 of Dog class, we can call its method printMessage() which then executes the display() statement. Since display() is defined in both the classes, the method of subclass Dog overrides the method of superclass Animal. Hence, the display() of the subclass is called.","title":"Example 1: Method overriding"},{"location":"week-2/ce204-week-2/#example-1-method-overriding_4","text":"","title":"Example 1: Method overriding"},{"location":"week-2/ce204-week-2/#what-if-the-overridden-method-of-the-superclass-has-to-be-called","text":"We use super.display() if the overridden method display() of superclass Animal needs to be called.","title":"What if the overridden method of the superclass has to be called?"},{"location":"week-2/ce204-week-2/#example-2-super-to-call-superclass-method","text":"class Animal { // overridden method public void display (){ System . out . println ( \"I am an animal\" ); } }","title":"Example 2: super to Call Superclass Method"},{"location":"week-2/ce204-week-2/#example-2-super-to-call-superclass-method_1","text":"","title":"Example 2: super to Call Superclass Method"},{"location":"week-2/ce204-week-2/#class-dog-extends-animal-overriding-method-override-public-void-display-systemoutprintlni-am-a-dog-public-void-printmessage-this-calls-overriding-method-display-this-calls-overridden-method-superdisplay","text":"","title":"class Dog extends Animal {\n\n  // overriding method\n  @Override\n  public void display(){\n    System.out.println(&quot;I am a dog&quot;);\n  }\n\n  public void printMessage(){\n\n    // this calls overriding method\n    display();\n\n    // this calls overridden method\n    super.display();\n  }\n}\n"},{"location":"week-2/ce204-week-2/#example-2-super-to-call-superclass-method_2","text":"","title":"Example 2: super to Call Superclass Method"},{"location":"week-2/ce204-week-2/#class-main-public-static-void-mainstring-args-dog-dog1-new-dog-dog1printmessage","text":"","title":"class Main {\n  public static void main(String[] args) {\n    Dog dog1 = new Dog();\n    dog1.printMessage();\n  }\n}\n"},{"location":"week-2/ce204-week-2/#example-2-super-to-call-superclass-method_3","text":"","title":"Example 2: super to Call Superclass Method"},{"location":"week-2/ce204-week-2/#access-attributes-of-the-superclass","text":"The superclass and subclass can have attributes with the same name. We use the super keyword to access the attribute of the superclass.","title":"Access Attributes of the Superclass"},{"location":"week-2/ce204-week-2/#example-3-access-superclass-attribute","text":"class Animal { protected String type = \"animal\" ; } class Dog extends Animal { public String type = \"mammal\" ; public void printType () { System . out . println ( \"I am a \" + type ); System . out . println ( \"I am an \" + super . type ); } }","title":"Example 3: Access superclass attribute"},{"location":"week-2/ce204-week-2/#example-3-access-superclass-attribute_1","text":"class Main { public static void main ( String [] args ) { Dog dog1 = new Dog (); dog1 . printType (); } }","title":"Example 3: Access superclass attribute"},{"location":"week-2/ce204-week-2/#example-3-access-superclass-attribute_2","text":"In this example, we have defined the same instance field type in both the superclass Animal and the subclass Dog . We then created an object dog1 of the Dog class. Then, the printType() method is called using this object. Inside the printType() function, type refers to the attribute of the subclass Dog . super.type refers to the attribute of the superclass Animal.","title":"Example 3: Access superclass attribute"},{"location":"week-2/ce204-week-2/#use-of-super-to-access-superclass-constructor","text":"As we know, when an object of a class is created, its default constructor is automatically called. To explicitly call the superclass constructor from the subclass constructor, we use super() . It's a special form of the super keyword. super() can be used only inside the subclass constructor and must be the first statement.","title":"Use of super() to access superclass constructor"},{"location":"week-2/ce204-week-2/#example-4-use-of-super","text":"class Animal { // default or no-arg constructor of class Animal Animal () { System . out . println ( \"I am an animal\" ); } }","title":"Example 4: Use of super()"},{"location":"week-2/ce204-week-2/#example-4-use-of-super_1","text":"class Dog extends Animal { // default or no-arg constructor of class Dog Dog () { // calling default constructor of the superclass super (); System . out . println ( \"I am a dog\" ); } }","title":"Example 4: Use of super()"},{"location":"week-2/ce204-week-2/#example-4-use-of-super_2","text":"class Main { public static void main ( String [] args ) { Dog dog1 = new Dog (); } }","title":"Example 4: Use of super()"},{"location":"week-2/ce204-week-2/#example-4-use-of-super_3","text":"when an object dog1 of Dog class is created, it automatically calls the default or no-arg constructor of that class. Inside the subclass constructor, the super() statement calls the constructor of the superclass and executes the statements inside it. Hence, we get the output I am an animal.","title":"Example 4: Use of super()"},{"location":"week-2/ce204-week-2/#example-4-use-of-super_4","text":"The flow of the program then returns back to the subclass constructor and executes the remaining statements. Thus, I am a dog will be printed. However, using super() is not compulsory. Even if super() is not used in the subclass constructor, the compiler implicitly calls the default constructor of the superclass.","title":"Example 4: Use of super()"},{"location":"week-2/ce204-week-2/#example-4-use-of-super_5","text":"So, why use redundant code if the compiler automatically invokes super()? It is required if the parameterized constructor (a constructor that takes arguments) of the superclass has to be called from the subclass constructor. The parameterized super() must always be the first statement in the body of the constructor of the subclass, otherwise, we get a compilation error.","title":"Example 4: Use of super()"},{"location":"week-2/ce204-week-2/#example-5-call-parameterized-constructor-using-super","text":"class Animal { // default or no-arg constructor Animal () { System . out . println ( \"I am an animal\" ); } // parameterized constructor Animal ( String type ) { System . out . println ( \"Type: \" + type ); } }","title":"Example 5: Call Parameterized Constructor Using super()"},{"location":"week-2/ce204-week-2/#example-5-call-parameterized-constructor-using-super_1","text":"class Dog extends Animal { // default constructor Dog () { // calling parameterized constructor of the superclass super ( \"Animal\" ); System . out . println ( \"I am a dog\" ); } }","title":"Example 5: Call Parameterized Constructor Using super()"},{"location":"week-2/ce204-week-2/#example-5-call-parameterized-constructor-using-super_2","text":"class Main { public static void main ( String [] args ) { Dog dog1 = new Dog (); } }","title":"Example 5: Call Parameterized Constructor Using super()"},{"location":"week-2/ce204-week-2/#example-5-call-parameterized-constructor-using-super_3","text":"If a parameterized constructor has to be called, we need to explicitly define it in the subclass constructor.","title":"Example 5: Call Parameterized Constructor Using super()"},{"location":"week-2/ce204-week-2/#example-5-call-parameterized-constructor-using-super_4","text":"Note that in the above example, we explicitly called the parameterized constructor super(\"Animal\"). The compiler does not call the default constructor of the superclass in this case.","title":"Example 5: Call Parameterized Constructor Using super()"},{"location":"week-2/ce204-week-2/#references","text":"BtechSmartClass-super Keyword Programiz-super Keyword BtechSmartClass-Java final Keyword Programiz-final Keyword BtechSmartClass-java Polymorphism Programiz-Polymorphism Programiz-Encapsulation BtechSmartClass-Java Method Overriding","title":"References"},{"location":"week-2/ce204-week-2/#references_1","text":"Programiz-Method Overriding Programiz-Nested Inner Class Programiz-Static Class Programiz-Anonymous Class Programiz-enums Programiz-enum constructor Programiz-enum string BtechSmartClass-Java Abstract Class Programiz-Abstract Classes Methods","title":"References"},{"location":"week-2/ce204-week-2/#references_2","text":"BtechSmartClass-Java Object class BtechSmartClass-Java Forms of Inheritance Programiz-Interfaces BtechSmartClass-Java Benefits and Costs of Inheritance BtechSmartClass-Java Defining Packages BtechSmartClass-Java Access Protection in Packages BtechSmartClass-Java Importing Packages \\(End-Of-Week-2-Module\\)","title":"References"},{"location":"week-3/ce204-week-3/","text":"CE204 Object-Oriented Programming \u00b6 Week-3 (TBD) \u00b6 Spring Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Title \u00b6 Outline \u00b6 TBD References \u00b6 TBD","title":"Week-3 (TBD)"},{"location":"week-3/ce204-week-3/#ce204-object-oriented-programming","text":"","title":"CE204 Object-Oriented Programming"},{"location":"week-3/ce204-week-3/#week-3-tbd","text":"","title":"Week-3 (TBD)"},{"location":"week-3/ce204-week-3/#spring-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Spring Semester, 2021-2022"},{"location":"week-3/ce204-week-3/#title","text":"","title":"Title"},{"location":"week-3/ce204-week-3/#outline","text":"TBD","title":"Outline"},{"location":"week-3/ce204-week-3/#references","text":"TBD","title":"References"},{"location":"week-4/ce204-week-4/","text":"CE204 Object-Oriented Programming \u00b6 Week-4 (TBD) \u00b6 Spring Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Title \u00b6 Outline \u00b6 TBD References \u00b6 TBD","title":"Week-4 (TBD)"},{"location":"week-4/ce204-week-4/#ce204-object-oriented-programming","text":"","title":"CE204 Object-Oriented Programming"},{"location":"week-4/ce204-week-4/#week-4-tbd","text":"","title":"Week-4 (TBD)"},{"location":"week-4/ce204-week-4/#spring-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Spring Semester, 2021-2022"},{"location":"week-4/ce204-week-4/#title","text":"","title":"Title"},{"location":"week-4/ce204-week-4/#outline","text":"TBD","title":"Outline"},{"location":"week-4/ce204-week-4/#references","text":"TBD","title":"References"},{"location":"week-5/ce204-week-5/","text":"CE204 Object-Oriented Programming \u00b6 Week-5 (TBD) \u00b6 Spring Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Title \u00b6 Outline \u00b6 TBD References \u00b6 TBD","title":"Week-5 (TBD)"},{"location":"week-5/ce204-week-5/#ce204-object-oriented-programming","text":"","title":"CE204 Object-Oriented Programming"},{"location":"week-5/ce204-week-5/#week-5-tbd","text":"","title":"Week-5 (TBD)"},{"location":"week-5/ce204-week-5/#spring-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Spring Semester, 2021-2022"},{"location":"week-5/ce204-week-5/#title","text":"","title":"Title"},{"location":"week-5/ce204-week-5/#outline","text":"TBD","title":"Outline"},{"location":"week-5/ce204-week-5/#references","text":"TBD","title":"References"},{"location":"week-6/ce204-week-6/","text":"CE204 Object-Oriented Programming \u00b6 Week-6 (TBD) \u00b6 Spring Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Title \u00b6 Outline \u00b6 TBD References \u00b6 TBD","title":"Week-6 (TBD)"},{"location":"week-6/ce204-week-6/#ce204-object-oriented-programming","text":"","title":"CE204 Object-Oriented Programming"},{"location":"week-6/ce204-week-6/#week-6-tbd","text":"","title":"Week-6 (TBD)"},{"location":"week-6/ce204-week-6/#spring-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Spring Semester, 2021-2022"},{"location":"week-6/ce204-week-6/#title","text":"","title":"Title"},{"location":"week-6/ce204-week-6/#outline","text":"TBD","title":"Outline"},{"location":"week-6/ce204-week-6/#references","text":"TBD","title":"References"},{"location":"week-7/ce204-week-7/","text":"CE204 Object-Oriented Programming \u00b6 Week-7 (TBD) \u00b6 Spring Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Title \u00b6 Outline \u00b6 TBD References \u00b6 TBD","title":"Week-7 (TBD)"},{"location":"week-7/ce204-week-7/#ce204-object-oriented-programming","text":"","title":"CE204 Object-Oriented Programming"},{"location":"week-7/ce204-week-7/#week-7-tbd","text":"","title":"Week-7 (TBD)"},{"location":"week-7/ce204-week-7/#spring-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Spring Semester, 2021-2022"},{"location":"week-7/ce204-week-7/#title","text":"","title":"Title"},{"location":"week-7/ce204-week-7/#outline","text":"TBD","title":"Outline"},{"location":"week-7/ce204-week-7/#references","text":"TBD","title":"References"},{"location":"week-8/ce204-week-8-midterm/","text":"CE204 Object-Oriented Programming \u00b6 Week-8 (Midterm) \u00b6 Spring Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Title \u00b6 Outline \u00b6 TBD References \u00b6 TBD","title":"Week-8 (Midterm)"},{"location":"week-8/ce204-week-8-midterm/#ce204-object-oriented-programming","text":"","title":"CE204 Object-Oriented Programming"},{"location":"week-8/ce204-week-8-midterm/#week-8-midterm","text":"","title":"Week-8 (Midterm)"},{"location":"week-8/ce204-week-8-midterm/#spring-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Spring Semester, 2021-2022"},{"location":"week-8/ce204-week-8-midterm/#title","text":"","title":"Title"},{"location":"week-8/ce204-week-8-midterm/#outline","text":"TBD","title":"Outline"},{"location":"week-8/ce204-week-8-midterm/#references","text":"TBD","title":"References"},{"location":"week-9/ce204-week-9/","text":"CE204 Object-Oriented Programming \u00b6 Week-9 (TBD) \u00b6 Spring Semester, 2021-2022 \u00b6 Download DOC , SLIDE , PPTX Title \u00b6 Outline \u00b6 TBD References \u00b6 TBD","title":"Week-9 (TBD)"},{"location":"week-9/ce204-week-9/#ce204-object-oriented-programming","text":"","title":"CE204 Object-Oriented Programming"},{"location":"week-9/ce204-week-9/#week-9-tbd","text":"","title":"Week-9 (TBD)"},{"location":"week-9/ce204-week-9/#spring-semester-2021-2022","text":"Download DOC , SLIDE , PPTX","title":"Spring Semester, 2021-2022"},{"location":"week-9/ce204-week-9/#title","text":"","title":"Title"},{"location":"week-9/ce204-week-9/#outline","text":"TBD","title":"Outline"},{"location":"week-9/ce204-week-9/#references","text":"TBD","title":"References"}]}